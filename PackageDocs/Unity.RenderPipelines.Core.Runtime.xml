<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.RenderPipelines.Core.Runtime</name>
    </assembly>
    <members>
        <member name="T:UnityEngine.Rendering.VolumeComponentMenu">
            <summary>
            This attribute allows you to add commands to the <strong>Add Override</strong> popup menu
            on Volumes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeComponentMenu.menu">
            <summary>
            The name of the entry in the override list. You can use slashes to create sub-menus.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponentMenu.#ctor(System.String)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.VolumeComponentMenu"/> instance.
            </summary>
            <param name="menu">The name of the entry in the override list. You can use slashes to
            create sub-menus.</param>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeComponentMenuForRenderPipeline">
            <summary>
            This attribute allows you to add commands to the <strong>Add Override</strong> popup menu
            on Volumes and specify for which render pipelines will be supported
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeComponentMenuForRenderPipeline.pipelineTypes">
            <summary>
            The list of pipeline types that the target class supports
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponentMenuForRenderPipeline.#ctor(System.String,System.Type[])">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.VolumeComponentMenuForRenderPipeline"/> instance.
            </summary>
            <param name="menu">The name of the entry in the override list. You can use slashes to
            create sub-menus.</param>
            <param name="pipelineTypes">The list of pipeline types that the target class supports</param>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeComponentDeprecated">
            <summary>
            An attribute to hide the volume component to be added through `Add Override` button on the volume component list
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeComponent">
             <summary>
             The base class for all the components that can be part of a <see cref="T:UnityEngine.Rendering.VolumeProfile"/>.
             The Volume framework automatically handles and interpolates any <see cref="T:UnityEngine.Rendering.VolumeParameter"/> members found in this class.
             </summary>
             <example>
             <code>
             using UnityEngine.Rendering;
            
             [Serializable, VolumeComponentMenuForRenderPipeline("Custom/Example Component")]
             public class ExampleComponent : VolumeComponent
             {
                 public ClampedFloatParameter intensity = new ClampedFloatParameter(0f, 0f, 1f);
             }
             </code>
             </example>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeComponent.Indent">
            <summary>
            Local attribute for VolumeComponent fields only.
            It handles relative indentation of a property for inspector.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeComponent.Indent.relativeAmount">
            <summary> Relative indent amount registered in this atribute </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.Indent.#ctor(System.Int32)">
            <summary> Constructor </summary>
            <param name="relativeAmount">Relative indent change to use</param>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeComponent.active">
            <summary>
            The active state of the set of parameters defined in this class. You can use this to
            quickly turn on or off all the overrides at once.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeComponent.displayName">
            <summary>
            The name displayed in the component header. If you do not set a name, Unity generates one from
            the class name automatically.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeComponent.parameters">
            <summary>
            A read-only collection of all the <see cref="T:UnityEngine.Rendering.VolumeParameter"/>s defined in this class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.FindParameters(System.Object,System.Collections.Generic.List{UnityEngine.Rendering.VolumeParameter},System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            Extracts all the <see cref="T:UnityEngine.Rendering.VolumeParameter"/>s defined in this class and nested classes.
            </summary>
            <param name="o">The object to find the parameters</param>
            <param name="parameters">The list filled with the parameters.</param>
            <param name="filter">If you want to filter the parameters</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.OnEnable">
            <summary>
            Unity calls this method when it loads the class.
            </summary>
            <remarks>
            If you want to override this method, you must call <c>base.OnEnable()</c>.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.OnDisable">
            <summary>
            Unity calls this method when the object goes out of scope.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.Override(UnityEngine.Rendering.VolumeComponent,System.Single)">
             <summary>
             Interpolates a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> with this component by an interpolation
             factor and puts the result back into the given <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.
             </summary>
             <remarks>
             You can override this method to do your own blending. Either loop through the
             <see cref="P:UnityEngine.Rendering.VolumeComponent.parameters"/> list or reference direct fields. You should only use
             <see cref="M:UnityEngine.Rendering.VolumeParameter.SetValue(UnityEngine.Rendering.VolumeParameter)"/> to set parameter values and not assign
             directly to the state object. you should also manually check
             <see cref="P:UnityEngine.Rendering.VolumeParameter.overrideState"/> before you set any values.
             </remarks>
             <param name="state">The internal component to interpolate from. You must store
             the result of the interpolation in this same component.</param>
             <param name="interpFactor">The interpolation factor in range [0,1].</param>
             <example>
             Below is the default implementation for blending:
             <code>
             public virtual void Override(VolumeComponent state, float interpFactor)
             {
                 int count = parameters.Count;
            
                 for (int i = 0; i &lt; count; i++)
                 {
                     var stateParam = state.parameters[i];
                     var toParam = parameters[i];
            
                     // Keep track of the override state for debugging purpose
                     stateParam.overrideState = toParam.overrideState;
            
                     if (toParam.overrideState)
                         stateParam.Interp(stateParam, toParam, interpFactor);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.SetAllOverridesTo(System.Boolean)">
            <summary>
            Sets the state of all the overrides on this component to a given value.
            </summary>
            <param name="state">The value to set the state of the overrides to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.SetOverridesTo(System.Collections.Generic.IEnumerable{UnityEngine.Rendering.VolumeParameter},System.Boolean)">
            <summary>
            Sets the override state of the given parameters on this component to a given value.
            </summary>
            <param name="state">The value to set the state of the overrides to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.GetHashCode">
            <summary>
            A custom hashing function that Unity uses to compare the state of parameters.
            </summary>
            <returns>A computed hash code for the current instance.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.AnyPropertiesIsOverridden">
            <summary>
            Returns true if any of the volume properites has been overridden.
            </summary>
            <returns>True if any of the volume properites has been overridden.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.OnDestroy">
            <summary>
            Unity calls this method before the object is destroyed.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeComponent.Release">
            <summary>
            Releases all the allocated resources.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ListBuffer`1">
             <summary>
             A list that stores value on a provided memory buffer.
            
             Usually use this to have a list on stack allocated memory.
             </summary>
             <typeparam name="T">The type of the data stored in the list.</typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.ListBuffer`1.BufferPtr">
            <summary>
            The pointer to the memory storage.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ListBuffer`1.Count">
            <summary>
            The number of item in the list.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ListBuffer`1.Capacity">
            <summary>
            The maximum number of item stored in this list.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ListBuffer`1.#ctor(`0*,System.Int32*,System.Int32)">
            <summary>
            Instantiate a new list.
            </summary>
            <param name="bufferPtr">The address in memory to store the data.</param>
            <param name="countPtr">The address in memory to store the number of item of this list..</param>
            <param name="capacity">The number of <typeparamref name="T"/> that can be stored in the buffer.</param>
        </member>
        <member name="P:UnityEngine.Rendering.ListBuffer`1.Item(System.Int32@)">
            <summary>
            Get an item from the list.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>A reference to the item.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the index is invalid.</exception>
        </member>
        <member name="M:UnityEngine.Rendering.ListBuffer`1.GetUnchecked(System.Int32@)">
             <summary>
             Get an item from the list.
            
             Safety: index must be inside the bounds of the list.
             </summary>
             <param name="index">The index of the item to get.</param>
             <returns>A reference to the item.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ListBuffer`1.TryAdd(`0@)">
            <summary>
            Try to add a value in the list.
            </summary>
            <param name="value">A reference to the value to add.</param>
            <returns>
              <code>true</code> when the value was added,
              <code>false</code> when the value was not added because the capacity was reached.
            </returns>
        </member>
        <member name="M:UnityEngine.Rendering.ListBuffer`1.CopyTo(`0*,System.Int32,System.Int32)">
             <summary>
             Copy the content of this list into another buffer in memory.
            
             Safety:
              * The destination must have enough memory to receive the copied data.
             </summary>
             <param name="dstBuffer">The destination buffer of the copy operation.</param>
             <param name="startDstIndex">The index of the first element that will be copied in the destination buffer.</param>
             <param name="copyCount">The number of item to copy.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ListBuffer`1.TryCopyTo(UnityEngine.Rendering.ListBuffer{`0})">
            <summary>
            Try to copy the list into another list.
            </summary>
            <param name="other">The destination of the copy.</param>
            <returns>
              * <code>true</code> when the copy was performed.
              * <code>false</code> when the copy was aborted because the destination have a capacity too small.
            </returns>
        </member>
        <member name="M:UnityEngine.Rendering.ListBuffer`1.TryCopyFrom(`0*,System.Int32)">
            <summary>
            Try to copy the data from a buffer in this list.
            </summary>
            <param name="srcPtr">The pointer of the source memory to copy.</param>
            <param name="count">The number of item to copy from the source buffer.</param>
            <returns>
              * <code>true</code> when the copy was performed.
              * <code>false</code> when the copy was aborted because the capacity of this list is too small.
            </returns>
        </member>
        <member name="T:UnityEngine.Rendering.ListBufferExtensions">
            <summary>
            Extensions for <see cref="T:UnityEngine.Rendering.ListBuffer`1"/>.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ListBufferExtensions.QuickSort``1(UnityEngine.Rendering.ListBuffer{``0})">
            <summary>
            Perform a quick sort on a <see cref="T:UnityEngine.Rendering.ListBuffer`1"/>.
            </summary>
            <param name="self">The list to sort.</param>
            <typeparam name="T">The type of the element in the list.</typeparam>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerValueTuple">
            <summary>
            DebugUIHandler for value tuple widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerValueTuple.nameLabel">
            <summary>Name of the value field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerValueTuple.valueLabel">
            <summary>Value of the value field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerValueTuple.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerValueTuple.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerValueTuple.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerGroup">
            <summary>
            DebugUIHandler for group widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerGroup.nameLabel">
            <summary>Name of the group.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerGroup.header">
            <summary>Header of the group.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerGroup.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerGroup.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerUIntField">
            <summary>
            DebugUIHandler for unsigned integer widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerUIntField.nameLabel">
            <summary>Name of the indirect uint field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerUIntField.valueLabel">
            <summary>Value of the indirect uint field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerUIntField.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerUIntField.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerUIntField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerUIntField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerWidget">
            <summary>
            Base class for handling UI actions for widgets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerWidget.colorDefault">
            <summary>
            Default widget color.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerWidget.colorSelected">
            <summary>
            Selected widget color.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.UI.DebugUIHandlerWidget.parentUIHandler">
            <summary>
            Parent widget UI Handler.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.UI.DebugUIHandlerWidget.previousUIHandler">
            <summary>
            Previous widget UI Handler.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.UI.DebugUIHandlerWidget.nextUIHandler">
            <summary>
            Next widget UI Handler.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerWidget.m_Widget">
            <summary>
            Associated widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.CastWidget``1">
            <summary>
            Casts the widget to the correct type.
            </summary>
            <typeparam name="T">Type of the widget.</typeparam>
            <returns>Properly cast reference to the widget.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.Previous">
            <summary>
            Previous implementation.
            </summary>
            <returns>Previous widget UI handler, parent if there is none.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerWidget.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerEnumHistory">
            <summary>
            DebugUIHandler for enum with history widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerEnumHistory.UpdateValueLabel">
            <summary>
            Update the label of the widget.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.UIFoldout">
            <summary>Foldout in the DebugMenu</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.UIFoldout.content">
            <summary>Contents inside the toggle</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.UIFoldout.arrowOpened">
            <summary>Arror in state opened</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.UIFoldout.arrowClosed">
            <summary>Arror in state closed</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.UIFoldout.Start">
            <summary>Start of this GameObject lifecicle</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.UIFoldout.SetState(System.Boolean)">
            <summary>Change the state of this foldout</summary>
            <param name="state">The new State</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.UIFoldout.SetState(System.Boolean,System.Boolean)">
            <summary>Change the state of this foldout</summary>
            <param name="state">The new State</param>
            <param name="rebuildLayout">If True, the layout will be rebuild</param>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerContainer">
            <summary>
            DebugUIHandler for container widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerContainer.contentHolder">
            <summary>Content holder.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerVector4">
            <summary>
            DebugUIHandler for vector4 widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector4.nameLabel">
            <summary>Name of the Vector4 field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector4.valueToggle">
            <summary>Value of the Vector4 toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector4.fieldX">
            <summary>X float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector4.fieldY">
            <summary>Y float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector4.fieldZ">
            <summary>Z float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector4.fieldW">
            <summary>W float field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector4.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector4.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector4.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector4.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector4.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector4.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar">
            <summary>
            DebugUIHandler for progress bar widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar.nameLabel">
            <summary>Name of the progress bar.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar.valueLabel">
            <summary>Value of the progress bar.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar.progressBarRect">
            <summary>Rectangle representing the progress bar.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerProgressBar.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerFloatField">
            <summary>
            DebugUIHandler for float widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerFloatField.nameLabel">
            <summary>Name of the enum field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerFloatField.valueLabel">
            <summary>Value of the enum field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFloatField.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFloatField.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFloatField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFloatField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle">
            <summary>
            DebugUIHandler for indirect toggle widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.nameLabel">
            <summary>
            Label of the widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.valueToggle">
            <summary>Toggle of the toggle field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.checkmarkImage">
            <summary>Checkmark image.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.getter">
            <summary>
            Getter function for this indirect widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.setter">
            <summary>
            Setter function for this indirect widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.Init">
            <summary>
            Initialize the indirect widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectToggle.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerValue">
            <summary>
            DebugUIHandler for value widgets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerValue.nameLabel">
            <summary>Name of the value field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerValue.valueLabel">
            <summary>Value of the value field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerValue.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerValue.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerValue.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerFoldout">
            <summary>
            DebugUIHandler for foldout widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.nameLabel">
            <summary>Name of the Foldout.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.valueToggle">
            <summary>Toggle value of the Foldout.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerFoldout.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerObjectPopupField">
            <summary>
            DebugUIHandler for object popup widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectPopupField.SetWidget(UnityEngine.Rendering.DebugUI.Widget)">
            <summary>
            Sets the widget and updates the label
            </summary>
            <param name="widget">The <see cref="T:UnityEngine.Rendering.DebugUI.Widget"/></param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectPopupField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectPopupField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectPopupField.UpdateValueLabel">
            <summary>
            Update the label of the widget.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerMessageBox">
            <summary>
            DebugUIHandler for MessageBox widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerMessageBox.nameLabel">
            <summary>Name of the widget.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerMessageBox.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            Method called when the box is selected
            </summary>
            <param name="fromNext">If is from next</param>
            <param name="previous">The previous <see cref="T:UnityEngine.Rendering.UI.DebugUIHandlerWidget"/></param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerObject">
            <summary>
            DebugUIHandler for object widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerObject.nameLabel">
            <summary>Name of the value field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerObject.valueLabel">
            <summary>Value of the value field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObject.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObject.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerVector2">
            <summary>
            DebugUIHandler for vector2 widgets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector2.nameLabel">
            <summary>Name of the Vector2 field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector2.valueToggle">
            <summary>Value of the Vector2 toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector2.fieldX">
            <summary>X float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector2.fieldY">
            <summary>Y float field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector2.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector2.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector2.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector2.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector2.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector2.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerField`1">
            <summary>
            Base class for handling UI actions for widgets.
            </summary>
            <typeparam name="T">Base type for the field</typeparam>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerField`1.nextButtonText">
            <summary>Text displayed for the "next" button.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerField`1.previousButtonText">
            <summary>Text displayed for the "previous" button.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerField`1.nameLabel">
            <summary>Name of the enum field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerField`1.valueLabel">
            <summary>Value of the enum field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerField`1.m_Field">
            <summary>
            The field
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerField`1.SetWidget(UnityEngine.Rendering.DebugUI.Widget)">
            <summary>
            Sets the widget and updates the label
            </summary>
            <param name="widget">The <see cref="T:UnityEngine.Rendering.DebugUI.Widget"/></param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerField`1.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>State of the widget.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerField`1.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerField`1.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerField`1.UpdateValueLabel">
            <summary>
            Update the label of the widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerField`1.SetLabelText(System.String)">
            <summary>
            Sets the label text
            </summary>
            <param name="text">The text to set to the label</param>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerPanel">
            <summary>
            DebugUIHandler for panels.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerPanel.nameLabel">
            <summary>Name of the panel.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerPanel.scrollRect">
            <summary>Scroll rect of the panel.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerPanel.viewport">
            <summary>Viewport of the panel.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerPanel.Canvas">
            <summary>Associated canvas.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerPanel.SelectNextItem">
            <summary>
            Select next panel on the canvas.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerPanel.SelectPreviousItem">
            <summary>
            Select previous panel on the canvas.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerPanel.OnScrollbarClicked">
            <summary>
            Scrollbar value clicked via mouse/touch.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerPanel.ResetDebugManager">
            <summary>
            Function to reset DebugManager, provided for UI.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField">
            <summary>
            DebugUIHandler for indirect float widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.nameLabel">
            <summary>Name of the indirect float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.valueLabel">
            <summary>Value of the indirect float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.getter">
            <summary>
            Getter function for this indirect widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.setter">
            <summary>
            Setter function for this indirect widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.incStepGetter">
            <summary>
            Getter function for the increment step of this indirect widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.incStepMultGetter">
            <summary>
            Getter function for the increment step multiplier of this indirect widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.decimalsGetter">
            <summary>
            Getter function for the number of decimals of this indirect widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.Init">
            <summary>
            Initialize the indirect widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIndirectFloatField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerRow">
            <summary>
            DebugUIHandler for row widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerRow.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerRow.Update">
            <summary>
            Update implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerEnumField">
            <summary>
            DebugUIHandler for enumerator widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerEnumField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerEnumField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerEnumField.UpdateValueLabel">
            <summary>
            Update the label of the widget.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerToggle">
            <summary>
            DebugUIHandler for toggle widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerToggle.nameLabel">
            <summary>Name of the toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerToggle.valueToggle">
            <summary>Value of the toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerToggle.checkmarkImage">
            <summary>Checkermark image.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerToggle.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerToggle.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerToggle.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerToggle.UpdateValueLabel">
            <summary>
            Update the label.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerToggleHistory">
            <summary>
            DebugUIHandler for toggle with history widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerToggleHistory.UpdateValueLabel">
            <summary>
            Update the label.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerObjectList">
            <summary>
            DebugUIHandler for object list widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectList.SetWidget(UnityEngine.Rendering.DebugUI.Widget)">
            <summary>
            Sets the widget and updates the label
            </summary>
            <param name="widget">The <see cref="T:UnityEngine.Rendering.DebugUI.Widget"/></param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectList.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectList.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerObjectList.UpdateValueLabel">
            <summary>
            Update the label of the widget.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerHBox">
            <summary>
            DebugUIHandler for Horizontal Layout widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerHBox.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerHBox.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerIntField">
            <summary>
            DebugUIHandler for integer widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIntField.nameLabel">
            <summary>Name of the int field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerIntField.valueLabel">
            <summary>Value of the int field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIntField.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIntField.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIntField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerIntField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerVBox">
            <summary>
            DebugUIHandler for vertical layoyut widget.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVBox.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVBox.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerColor">
            <summary>
            DebugUIHandler for color widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.nameLabel">
            <summary>Name of the widget.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.valueToggle">
            <summary>/// <summary>Name of the widget.</summary>alue toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.colorImage">
            <summary>Color image.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.fieldR">
            <summary>Red float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.fieldG">
            <summary>Green float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.fieldB">
            <summary>Blue float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerColor.fieldA">
            <summary>Alpha float field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerColor.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>State of the widget.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerColor.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerColor.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerColor.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerColor.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerColor.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next child.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIPrefabBundle">
            <summary>
            Debug UI Prefab bundle.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIPrefabBundle.type">
            <summary>type of the widget.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIPrefabBundle.prefab">
            <summary>Prefab for the widget.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerCanvas">
            <summary>
            DebugUIHandler for canvas widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerCanvas.panelPrefab">
            <summary>Panel prefab.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerCanvas.prefabs">
            <summary>List of prefabs.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerButton">
            <summary>
            DebugUIHandler for Button widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerButton.nameLabel">
            <summary>Name of the widget.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerButton.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>State of the widget.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerButton.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerButton.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerVector3">
            <summary>
            DebugUIHandler for vector3 widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector3.nameLabel">
            <summary>Name of the Vector3 field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector3.valueToggle">
            <summary>Value of the Vector3 toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector3.fieldX">
            <summary>X float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector3.fieldY">
            <summary>Y float field.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerVector3.fieldZ">
            <summary>Z float field.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector3.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector3.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector3.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector3.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector3.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerVector3.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.UI.DebugUIHandlerBitField">
            <summary>
            DebugUIHandler for Bitfield widget. Require the enum to have a None field set to 0 in its values.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerBitField.nameLabel">
            <summary>Name of the widget.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerBitField.valueToggle">
            <summary>Value toggle.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.UI.DebugUIHandlerBitField.toggles">
            <summary>Toggles for the bitfield.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerBitField.OnSelection(System.Boolean,UnityEngine.Rendering.UI.DebugUIHandlerWidget)">
            <summary>
            OnSelection implementation.
            </summary>
            <param name="fromNext">True if the selection wrapped around.</param>
            <param name="previous">Previous widget.</param>
            <returns>True if the selection is allowed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerBitField.OnDeselection">
            <summary>
            OnDeselection implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerBitField.OnIncrement(System.Boolean)">
            <summary>
            OnIncrement implementation.
            </summary>
            <param name="fast">True if incrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerBitField.OnDecrement(System.Boolean)">
            <summary>
            OnDecrement implementation.
            </summary>
            <param name="fast">Trye if decrementing fast.</param>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerBitField.OnAction">
            <summary>
            OnAction implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.UI.DebugUIHandlerBitField.Next">
            <summary>
            Next implementation.
            </summary>
            <returns>Next widget UI handler, parent if there is none.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IBitArray">
            <summary>
            IBitArray interface.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IBitArray.capacity">
            <summary>Gets the capacity of this BitArray. This is the number of bits that are usable.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IBitArray.allFalse">
            <summary>Return `true` if all the bits of this BitArray are set to 0. Returns `false` otherwise.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IBitArray.allTrue">
            <summary>Return `true` if all the bits of this BitArray are set to 1. Returns `false` otherwise.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IBitArray.Item(System.UInt32)">
            <summary>
            An indexer that allows access to the bit at a given index. This provides both read and write access.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.IBitArray.humanizedData">
            <summary>Writes the bits in the array in a human-readable form. This is as a string of 0s and 1s packed by 8 bits. This is useful for debugging.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.IBitArray.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Perform an AND bitwise operation between this BitArray and the one you pass into the function and return the result. Both BitArrays must have the same capacity. This will not change current BitArray values.
            </summary>
            <param name="other">BitArray with which to the And operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.IBitArray.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Perform an OR bitwise operation between this BitArray and the one you pass into the function and return the result. Both BitArrays must have the same capacity. This will not change current BitArray values.
            </summary>
            <param name="other">BitArray with which to the Or operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.IBitArray.BitNot">
            <summary>
            Return the BitArray with every bit inverted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArray8">
            <summary>
            Bit array of size 8.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray8.capacity">
            <summary>Number of elements in the bit array.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray8.allFalse">
            <summary>True if all bits are 0.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray8.allTrue">
            <summary>True if all bits are 1.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray8.humanizedData">
            <summary>Returns the bit array in a human readable form.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray8.Item(System.UInt32)">
            <summary>
            Returns the state of the bit at a specific index.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.#ctor(System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="initValue">Initialization value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Constructor.
            </summary>
            <param name="bitIndexTrue">List of indices where bits should be set to true.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.op_OnesComplement(UnityEngine.Rendering.BitArray8)">
            <summary>
            Bit-wise Not operator
            </summary>
            <param name="a">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.op_BitwiseOr(UnityEngine.Rendering.BitArray8,UnityEngine.Rendering.BitArray8)">
            <summary>
            Bit-wise Or operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.op_BitwiseAnd(UnityEngine.Rendering.BitArray8,UnityEngine.Rendering.BitArray8)">
            <summary>
            Bit-wise And operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise And
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise Or
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.BitNot">
            <summary>
            Bit-wise Not
            </summary>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.op_Equality(UnityEngine.Rendering.BitArray8,UnityEngine.Rendering.BitArray8)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if both bit arrays are equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.op_Inequality(UnityEngine.Rendering.BitArray8,UnityEngine.Rendering.BitArray8)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if the bit arrays are not equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">Bit array to compare to.</param>
            <returns>True if the provided bit array is equal to this..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray8.GetHashCode">
            <summary>
            Get the hashcode of the bit array.
            </summary>
            <returns>Hashcode of the bit array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArray16">
            <summary>
            Bit array of size 16.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray16.capacity">
            <summary>Number of elements in the bit array.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray16.allFalse">
            <summary>True if all bits are 0.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray16.allTrue">
            <summary>True if all bits are 1.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray16.humanizedData">
            <summary>Returns the bit array in a human readable form.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray16.Item(System.UInt32)">
            <summary>
            Returns the state of the bit at a specific index.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.#ctor(System.UInt16)">
            <summary>
            Constructor.
            </summary>
            <param name="initValue">Initialization value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Constructor.
            </summary>
            <param name="bitIndexTrue">List of indices where bits should be set to true.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.op_OnesComplement(UnityEngine.Rendering.BitArray16)">
            <summary>
            Bit-wise Not operator
            </summary>
            <param name="a">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.op_BitwiseOr(UnityEngine.Rendering.BitArray16,UnityEngine.Rendering.BitArray16)">
            <summary>
            Bit-wise Or operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.op_BitwiseAnd(UnityEngine.Rendering.BitArray16,UnityEngine.Rendering.BitArray16)">
            <summary>
            Bit-wise And operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise And
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise Or
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.BitNot">
            <summary>
            Bit-wise Not
            </summary>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.op_Equality(UnityEngine.Rendering.BitArray16,UnityEngine.Rendering.BitArray16)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if both bit arrays are equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.op_Inequality(UnityEngine.Rendering.BitArray16,UnityEngine.Rendering.BitArray16)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if the bit arrays are not equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">Bit array to compare to.</param>
            <returns>True if the provided bit array is equal to this..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray16.GetHashCode">
            <summary>
            Get the hashcode of the bit array.
            </summary>
            <returns>Hashcode of the bit array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArray32">
            <summary>
            Bit array of size 32.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray32.capacity">
            <summary>Number of elements in the bit array.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray32.allFalse">
            <summary>True if all bits are 0.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray32.allTrue">
            <summary>True if all bits are 1.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray32.humanizedData">
            <summary>Returns the bit array in a human readable form.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray32.Item(System.UInt32)">
            <summary>
            Returns the state of the bit at a specific index.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="initValue">Initialization value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Constructor.
            </summary>
            <param name="bitIndexTrue">List of indices where bits should be set to true.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise And
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise Or
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.BitNot">
            <summary>
            Bit-wise Not
            </summary>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.op_OnesComplement(UnityEngine.Rendering.BitArray32)">
            <summary>
            Bit-wise Not operator
            </summary>
            <param name="a">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.op_BitwiseOr(UnityEngine.Rendering.BitArray32,UnityEngine.Rendering.BitArray32)">
            <summary>
            Bit-wise Or operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.op_BitwiseAnd(UnityEngine.Rendering.BitArray32,UnityEngine.Rendering.BitArray32)">
            <summary>
            Bit-wise And operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.op_Equality(UnityEngine.Rendering.BitArray32,UnityEngine.Rendering.BitArray32)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if both bit arrays are equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.op_Inequality(UnityEngine.Rendering.BitArray32,UnityEngine.Rendering.BitArray32)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if the bit arrays are not equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">Bit array to compare to.</param>
            <returns>True if the provided bit array is equal to this..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray32.GetHashCode">
            <summary>
            Get the hashcode of the bit array.
            </summary>
            <returns>Hashcode of the bit array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArray64">
            <summary>
            Bit array of size 64.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray64.capacity">
            <summary>Number of elements in the bit array.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray64.allFalse">
            <summary>True if all bits are 0.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray64.allTrue">
            <summary>True if all bits are 1.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray64.humanizedData">
            <summary>Returns the bit array in a human readable form.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray64.Item(System.UInt32)">
            <summary>
            Returns the state of the bit at a specific index.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.#ctor(System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="initValue">Initialization value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Constructor.
            </summary>
            <param name="bitIndexTrue">List of indices where bits should be set to true.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.op_OnesComplement(UnityEngine.Rendering.BitArray64)">
            <summary>
            Bit-wise Not operator
            </summary>
            <param name="a">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.op_BitwiseOr(UnityEngine.Rendering.BitArray64,UnityEngine.Rendering.BitArray64)">
            <summary>
            Bit-wise Or operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.op_BitwiseAnd(UnityEngine.Rendering.BitArray64,UnityEngine.Rendering.BitArray64)">
            <summary>
            Bit-wise And operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise And
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise Or
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.BitNot">
            <summary>
            Bit-wise Not
            </summary>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.op_Equality(UnityEngine.Rendering.BitArray64,UnityEngine.Rendering.BitArray64)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if both bit arrays are equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.op_Inequality(UnityEngine.Rendering.BitArray64,UnityEngine.Rendering.BitArray64)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if the bit arrays are not equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">Bit array to compare to.</param>
            <returns>True if the provided bit array is equal to this..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray64.GetHashCode">
            <summary>
            Get the hashcode of the bit array.
            </summary>
            <returns>Hashcode of the bit array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArray128">
            <summary>
            Bit array of size 128.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray128.capacity">
            <summary>Number of elements in the bit array.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray128.allFalse">
            <summary>True if all bits are 0.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray128.allTrue">
            <summary>True if all bits are 1.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray128.humanizedData">
            <summary>Returns the bit array in a human readable form.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray128.Item(System.UInt32)">
            <summary>
            Returns the state of the bit at a specific index.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="initValue1">Initialization value 1.</param>
            <param name="initValue2">Initialization value 2.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Constructor.
            </summary>
            <param name="bitIndexTrue">List of indices where bits should be set to true.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.op_OnesComplement(UnityEngine.Rendering.BitArray128)">
            <summary>
            Bit-wise Not operator
            </summary>
            <param name="a">First bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.op_BitwiseOr(UnityEngine.Rendering.BitArray128,UnityEngine.Rendering.BitArray128)">
            <summary>
            Bit-wise Or operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.op_BitwiseAnd(UnityEngine.Rendering.BitArray128,UnityEngine.Rendering.BitArray128)">
            <summary>
            Bit-wise And operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise And
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise Or
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.BitNot">
            <summary>
            Bit-wise Not
            </summary>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.op_Equality(UnityEngine.Rendering.BitArray128,UnityEngine.Rendering.BitArray128)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if both bit arrays are equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.op_Inequality(UnityEngine.Rendering.BitArray128,UnityEngine.Rendering.BitArray128)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if the bit arrays are not equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">Bit array to compare to.</param>
            <returns>True if the provided bit array is equal to this..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray128.GetHashCode">
            <summary>
            Get the hashcode of the bit array.
            </summary>
            <returns>Hashcode of the bit array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArray256">
            <summary>
            Bit array of size 256.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray256.capacity">
            <summary>Number of elements in the bit array.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray256.allFalse">
            <summary>True if all bits are 0.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray256.allTrue">
            <summary>True if all bits are 1.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray256.humanizedData">
            <summary>Returns the bit array in a human readable form.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.BitArray256.Item(System.UInt32)">
            <summary>
            Returns the state of the bit at a specific index.
            </summary>
            <param name="index">Index of the bit.</param>
            <returns>State of the bit at the provided index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="initValue1">Initialization value 1.</param>
            <param name="initValue2">Initialization value 2.</param>
            <param name="initValue3">Initialization value 3.</param>
            <param name="initValue4">Initialization value 4.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Constructor.
            </summary>
            <param name="bitIndexTrue">List of indices where bits should be set to true.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.op_OnesComplement(UnityEngine.Rendering.BitArray256)">
            <summary>
            Bit-wise Not operator
            </summary>
            <param name="a">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.op_BitwiseOr(UnityEngine.Rendering.BitArray256,UnityEngine.Rendering.BitArray256)">
            <summary>
            Bit-wise Or operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.op_BitwiseAnd(UnityEngine.Rendering.BitArray256,UnityEngine.Rendering.BitArray256)">
            <summary>
            Bit-wise And operator
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.BitAnd(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise And
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.BitOr(UnityEngine.Rendering.IBitArray)">
            <summary>
            Bit-wise Or
            </summary>
            <param name="other">Bit array with which to do the operation.</param>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.BitNot">
            <summary>
            Bit-wise Not
            </summary>
            <returns>The resulting bit array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.op_Equality(UnityEngine.Rendering.BitArray256,UnityEngine.Rendering.BitArray256)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if both bit arrays are equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.op_Inequality(UnityEngine.Rendering.BitArray256,UnityEngine.Rendering.BitArray256)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First bit array.</param>
            <param name="b">Second bit array.</param>
            <returns>True if the bit arrays are not equals.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj">Bit array to compare to.</param>
            <returns>True if the provided bit array is equal to this..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArray256.GetHashCode">
            <summary>
            Get the hashcode of the bit array.
            </summary>
            <returns>Hashcode of the bit array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BitArrayUtilities">
            <summary>
            Bit array utility class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Get8(System.UInt32,System.Byte)">
            <summary>
            Get a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <returns>The value of the bit at the specific index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Get16(System.UInt32,System.UInt16)">
            <summary>
            Get a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <returns>The value of the bit at the specific index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Get32(System.UInt32,System.UInt32)">
            <summary>
            Get a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <returns>The value of the bit at the specific index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Get64(System.UInt32,System.UInt64)">
            <summary>
            Get a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <returns>The value of the bit at the specific index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Get128(System.UInt32,System.UInt64,System.UInt64)">
            <summary>
            Get a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data1">Bit array data 1.</param>
            <param name="data2">Bit array data 2.</param>
            <returns>The value of the bit at the specific index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Get256(System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Get a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data1">Bit array data 1.</param>
            <param name="data2">Bit array data 2.</param>
            <param name="data3">Bit array data 3.</param>
            <param name="data4">Bit array data 4.</param>
            <returns>The value of the bit at the specific index.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Set8(System.UInt32,System.Byte@,System.Boolean)">
            <summary>
            Set a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <param name="value">Value to set the bit to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Set16(System.UInt32,System.UInt16@,System.Boolean)">
            <summary>
            Set a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <param name="value">Value to set the bit to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Set32(System.UInt32,System.UInt32@,System.Boolean)">
            <summary>
            Set a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <param name="value">Value to set the bit to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Set64(System.UInt32,System.UInt64@,System.Boolean)">
            <summary>
            Set a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data">Bit array data.</param>
            <param name="value">Value to set the bit to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Set128(System.UInt32,System.UInt64@,System.UInt64@,System.Boolean)">
            <summary>
            Set a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data1">Bit array data 1.</param>
            <param name="data2">Bit array data 2.</param>
            <param name="value">Value to set the bit to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BitArrayUtilities.Set256(System.UInt32,System.UInt64@,System.UInt64@,System.UInt64@,System.UInt64@,System.Boolean)">
            <summary>
            Set a bit at a specific index.
            </summary>
            <param name="index">Bit index.</param>
            <param name="data1">Bit array data 1.</param>
            <param name="data2">Bit array data 2.</param>
            <param name="data3">Bit array data 3.</param>
            <param name="data4">Bit array data 4.</param>
            <param name="value">Value to set the bit to.</param>
        </member>
        <member name="T:UnityEngine.Rendering.PerformDynamicRes">
            <summary>
            The format of the delegate used to perofrm dynamic resolution.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicResScalePolicyType">
            <summary>
            The type of dynamic resolution scaler. It essentially defines what the output of the scaler is expected to be.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResScalePolicyType.ReturnsPercentage">
            <summary>
            If is the option, DynamicResolutionHandler expects the scaler to return a screen percentage.
            The value set will be clamped between the minimum and maximum percentage set in the GlobalDynamicResolutionSettings.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResScalePolicyType.ReturnsMinMaxLerpFactor">
            <summary>
            If is the option, DynamicResolutionHandler expects the scaler to return a factor t in the [0..1] such that the final resolution percentage
            is determined by lerp(minimumPercentage, maximumPercentage, t), where the minimum and maximum percentages are the one set in the GlobalDynamicResolutionSettings.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicResScalerSlot">
            <summary>
            The source slots for dynamic resolution scaler. Defines registers were the scalers assigned are stored. By default the User one is always used
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResScalerSlot.User">
            <summary> Scaler slot set by the function SetDynamicResScaler</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResScalerSlot.System">
            <summary> Scaler slot set by the function SetSystemDynamicResScaler</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResScalerSlot.Count">
            <summary> total number of scaler slots </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicResolutionHandler">
            <summary>
            The class responsible to handle dynamic resolution.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicResolutionHandler.filter">
            <summary>
            The filter that is used to upscale the rendering result to the native resolution.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicResolutionHandler.finalViewport">
            <summary>
            The viewport of the final buffer. This is likely the resolution the dynamic resolution starts from before any scaling. Note this is NOT the target resolution the rendering will happen in
            but the resolution the scaled rendered result will be upscaled to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicResolutionHandler.runUpscalerFilterOnFullResolution">
            <summary>
            By default, dynamic resolution scaling is turned off automatically when the source matches the final viewport (100% scale).
            That is, DynamicResolutionEnabled and SoftwareDynamicResIsEnabled will return false if the scale is 100%.
            For certain upscalers, we dont want this behavior since they could possibly include anti aliasing and other quality improving post processes.
            Setting this to true will eliminate this behavior.
            Note: when the EdgeAdaptiveScalingUpres (FSR 1.0) filter is set, this will cause this parameter to always be true.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicResolutionHandler.UpsamplerScheduleType">
            <summary>
            The scheduling mechanism to apply upscaling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResolutionHandler.UpsamplerScheduleType.BeforePost">
            <summary>
            Indicates that upscaling must happen before post processing.
            This means that everything runs at the source resolution during rasterization, and post processes will
            run at full resolution. Ideal for temporal upscalers.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResolutionHandler.UpsamplerScheduleType.AfterDepthOfField">
            <summary>
            Indicates that upscaling should happen after depth of field but before other post processing.
            This means that everything runs at the source resolution during rasterization and depth of field, and other post processes
            will run at full resolution. More performant alternative for temporal upscalers at the expense of reduced image quality.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResolutionHandler.UpsamplerScheduleType.AfterPost">
            <summary>
            Indicates that upscaling must happen after post processing.
            This means that everything in the frame runs at the source resolution, and upscaling happens after
            the final pass. This is ideal for spatial upscalers.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicResolutionHandler.upsamplerSchedule">
            <summary>
            Property that sets / gets the state of the upscaling schedule.
            This must be set at the beginning of the frame, once per camera.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicResolutionHandler.instance">
            <summary>
            Get the instance of the global dynamic resolution handler.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.GetResolvedScale">
            <summary>
            Gets the resolved scale
            </summary>
            <returns>The resolved scale in form of <see cref="T:UnityEngine.Vector2"/></returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.CalculateMipBias(UnityEngine.Vector2Int,UnityEngine.Vector2Int,System.Boolean)">
            <summary>
            Returns the mip bias to apply in the rendering pipeline. This mip bias helps bring detail since sampling of textures occurs at the target rate.
            </summary>
            <param name="inputResolution">The input width x height resolution in pixels.</param>
            <param name="outputResolution">The output width x height resolution in pixels.</param>
            <param name="forceApply">False by default. If true, we ignore the useMipBias setting and return a mip bias regardless.</param>
            <returns>The calculated mip bias</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.SetDynamicResScaler(UnityEngine.Rendering.PerformDynamicRes,UnityEngine.Rendering.DynamicResScalePolicyType)">
            <summary>
            Set the scaler method used to drive dynamic resolution by the user.
            </summary>
            <param name="scaler">The delegate used to determine the resolution percentage used by the dynamic resolution system.</param>
            <param name="scalerType">The type of scaler that is used, this is used to indicate the return type of the scaler to the dynamic resolution system.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.SetSystemDynamicResScaler(UnityEngine.Rendering.PerformDynamicRes,UnityEngine.Rendering.DynamicResScalePolicyType)">
            <summary>
            Set the scaler method used to drive dynamic resolution internally from the Scriptable Rendering Pipeline. This function should only be called by Scriptable Rendering Pipeline.
            </summary>
            <param name="scaler">The delegate used to determine the resolution percentage used by the dynamic resolution system.</param>
            <param name="scalerType">The type of scaler that is used, this is used to indicate the return type of the scaler to the dynamic resolution system.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.SetActiveDynamicScalerSlot(UnityEngine.Rendering.DynamicResScalerSlot)">
            <summary>
            Sets the active dynamic scaler slot to be used by the runtime when calculating frame resolutions.
            See DynamicResScalerSlot for more information.
            </summary>
            <param name="slot">The scaler to be selected and used by the runtime.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.ClearSelectedCamera">
            <summary>
            Will clear the currently used camera. Use this function to restore the default instance when UpdateAndUseCamera is called.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.SetUpscaleFilter(UnityEngine.Camera,UnityEngine.Rendering.DynamicResUpscaleFilter)">
            <summary>
            Set the Upscale filter used by the camera when dynamic resolution is run.
            </summary>
            <param name="camera">The camera for which the upscale filter is set.</param>
            <param name="filter">The filter to be used by the camera to upscale to final resolution.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.SetCurrentCameraRequest(System.Boolean)">
            <summary>
            Set whether the camera that is currently processed by the pipeline has requested dynamic resolution or not.
            </summary>
            <param name="cameraRequest">Determines whether the camera has requested dynamic resolution or not.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.UpdateAndUseCamera(UnityEngine.Camera,System.Nullable{UnityEngine.Rendering.GlobalDynamicResolutionSettings},System.Action)">
            <summary>
            Update the state of the dynamic resolution system for a specific camera.
            Call this function also to switch context between cameras (will set the current camera as active).
            Passing a null camera has the same effect as calling Update without the camera parameter.
            </summary>
            <param name="camera">Camera used to select a specific instance tied to this DynamicResolutionHandler instance.</param>
            <param name="settings">(optional) The settings that are to be used by the dynamic resolution system. passing null for the settings will result in the last update's settings used.</param>
            <param name="OnResolutionChange">An action that will be called every time the dynamic resolution system triggers a change in resolution.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.Update(UnityEngine.Rendering.GlobalDynamicResolutionSettings,System.Action)">
            <summary>
            Update the state of the dynamic resolution system.
            </summary>
            <param name="settings">The settings that are to be used by the dynamic resolution system.</param>
            <param name="OnResolutionChange">An action that will be called every time the dynamic resolution system triggers a change in resolution.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.SoftwareDynamicResIsEnabled">
            <summary>
            Determines whether software dynamic resolution is enabled or not.
            </summary>
            <returns>True: Software dynamic resolution is enabled</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.HardwareDynamicResIsEnabled">
            <summary>
            Determines whether hardware dynamic resolution is enabled or not.
            </summary>
            <returns>True: Hardware dynamic resolution is enabled</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.RequestsHardwareDynamicResolution">
            <summary>
            Identifies whether hardware dynamic resolution has been requested and is going to be used.
            </summary>
            <returns>True: Hardware dynamic resolution is requested by user and software fallback has not been forced</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.DynamicResolutionEnabled">
            <summary>
            Identifies whether dynamic resolution is enabled and scaling the render targets.
            </summary>
            <returns>True: Dynamic resolution is enabled.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.ForceSoftwareFallback">
            <summary>
            Forces software fallback for dynamic resolution. Needs to be called in case Hardware dynamic resolution is requested by the user, but not supported by the platform.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.GetScaledSize(UnityEngine.Vector2Int)">
            <summary>
            Applies to the passed size the scale imposed by the dynamic resolution system.
            Note: this function has the side effect of caching the last scale size, and the output is always smaller or equal then the input.
            </summary>
            <param name="size">The starting size of the render target that will be scaled by dynamic resolution.</param>
            <returns>The parameter size scaled by the dynamic resolution system.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.ApplyScalesOnSize(UnityEngine.Vector2Int)">
            <summary>
            Applies to the passed size the scale imposed by the dynamic resolution system.
            This function uses the internal resolved scale from the dynamic resolution system.
            Note: this function is pure (has no side effects), this function does not cache the pre-scale size
            </summary>
            <param name="size">The size to apply the scaling</param>
            <returns>The parameter size scaled by the dynamic resolution system.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.GetCurrentScale">
            <summary>
            Returns the scale that is currently applied by the dynamic resolution system.
            </summary>
            <returns>The scale that is currently applied by the dynamic resolution system.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.GetLastScaledSize">
            <summary>
            Returns the latest scaled size that has been produced by GetScaledSize.
            </summary>
            <returns>The latest scaled size that has been produced by GetScaledSize.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicResolutionHandler.GetLowResMultiplier(System.Single)">
            <summary>
            Returns the resolved low res multiplier based on the low res transparency threshold settings.
            Note: The pipeline can use this to drive the scale for low res transparency if available.
            </summary>
            <param name="targetLowRes"> the target low resolution.
                If by any chance thresholding is disabled or clamped, the exact same resolution is returned.
                This allows the caller to directly compare the float result safely with the floating point target resolution.
            </param>
            <returns>Returns the resolved low res multiplier based on the low transparency threshold settings.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.TextureCurve">
            <summary>
            A wrapper around <c>AnimationCurve</c> to automatically bake it into a texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.TextureCurve.length">
            <summary>
            The number of keys in the curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.TextureCurve.m_Curve">
            <summary>
            Internal curve used to generate the Texture
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.TextureCurve.Item(System.Int32)">
            <summary>
            Retrieves the key at index.
            </summary>
            <param name="index">The index to look for.</param>
            <returns>A key.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.#ctor(UnityEngine.AnimationCurve,System.Single,System.Boolean,UnityEngine.Vector2@)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.TextureCurve"/> from an existing <c>AnimationCurve</c>.
            </summary>
            <param name="baseCurve">The source <c>AnimationCurve</c>.</param>
            <param name="zeroValue">The default value to use when the curve doesn't have any key.</param>
            <param name="loop">Should the curve automatically loop in the given <paramref name="bounds"/>?</param>
            <param name="bounds">The boundaries of the curve.</param>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.#ctor(UnityEngine.Keyframe[],System.Single,System.Boolean,UnityEngine.Vector2@)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.TextureCurve"/> from an arbitrary number of keyframes.
            </summary>
            <param name="keys">An array of Keyframes used to define the curve.</param>
            <param name="zeroValue">The default value to use when the curve doesn't have any key.</param>
            <param name="loop">Should the curve automatically loop in the given <paramref name="bounds"/>?</param>
            <param name="bounds">The boundaries of the curve.</param>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.Dispose">
            <summary>
            Cleans up the internal texture resource.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.Release">
            <summary>
            Releases the internal texture resource.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.SetDirty">
            <summary>
            Marks the curve as dirty to trigger a redraw of the texture the next time <see cref="M:UnityEngine.Rendering.TextureCurve.GetTexture"/>
            is called.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.GetTexture">
            <summary>
            Gets the texture representation of this curve.
            </summary>
            <returns>A 128x1 texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.Evaluate(System.Single)">
            <summary>
            Evaluate a time value on the curve.
            </summary>
            <param name="time">The time within the curve you want to evaluate.</param>
            <returns>The value of the curve, at the point in time specified.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.AddKey(System.Single,System.Single)">
            <summary>
            Adds a new key to the curve.
            </summary>
            <param name="time">The time at which to add the key.</param>
            <param name="value">The value for the key.</param>
            <returns>The index of the added key, or -1 if the key could not be added.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.MoveKey(System.Int32,UnityEngine.Keyframe@)">
            <summary>
            Removes the keyframe at <paramref name="index"/> and inserts <paramref name="key"/>.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <returns>The index of the keyframe after moving it.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.RemoveKey(System.Int32)">
            <summary>
            Removes a key.
            </summary>
            <param name="index">The index of the key to remove.</param>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurve.SmoothTangents(System.Int32,System.Single)">
            <summary>
            Smoothes the in and out tangents of the keyframe at <paramref name="index"/>. A <paramref name="weight"/> of 0 evens out tangents.
            </summary>
            <param name="index">The index of the keyframe to be smoothed.</param>
            <param name="weight">The smoothing weight to apply to the keyframe's tangents.</param>
        </member>
        <member name="T:UnityEngine.Rendering.TextureCurveParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.TextureCurve"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurveParameter.#ctor(UnityEngine.Rendering.TextureCurve,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.TextureCurveParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.TextureCurveParameter.Release">
            <summary>
            Release implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.LookDev.IDataProvider">
            <summary>
            Interface that Scriptable Render Pipelines should implement to be able to use LookDev window
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.FirstInitScene(UnityEngine.Rendering.LookDev.StageRuntimeInterface)">
            <summary>Additional configuration required by this SRP on LookDev's scene creation</summary>
            <param name="stage">Access element of the LookDev's scene</param>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.UpdateSky(UnityEngine.Camera,UnityEngine.Rendering.LookDev.Sky,UnityEngine.Rendering.LookDev.StageRuntimeInterface)">
            <summary>Notify the SRP that sky have changed in LookDev</summary>
            <param name="camera">The camera of the LookDev's scene</param>
            <param name="sky">The new Sky informations</param>
            <param name="stage">Access element of the LookDev's scene</param>
        </member>
        <member name="P:UnityEngine.Rendering.LookDev.IDataProvider.supportedDebugModes">
            <summary>Notify the LookDev about what debug view mode are available in this SRP</summary>
            <returns>The list of the mode, None is not required.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.UpdateDebugMode(System.Int32)">
            <summary>Notify the SRP about a change in the DebugMode used</summary>
            <param name="debugIndex">
            -1: None
            Others: map the result of <see cref="P:UnityEngine.Rendering.LookDev.IDataProvider.supportedDebugModes"/>
            </param>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.GetShadowMask(UnityEngine.RenderTexture@,UnityEngine.Rendering.LookDev.StageRuntimeInterface)">
            <summary>
            Compute the shadow mask in SRP for LookDev sun simulation
            </summary>
            <param name="output">The computed ShadowMask</param>
            <param name="stage">Access element of the LookDev's scene</param>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.OnBeginRendering(UnityEngine.Rendering.LookDev.StageRuntimeInterface)">
            <summary>
            Callback called at the beginning of LookDev rendering.
            </summary>
            <param name="stage">Access element of the LookDev's scene</param>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.OnEndRendering(UnityEngine.Rendering.LookDev.StageRuntimeInterface)">
            <summary>
            Callback called at the beginning of LookDev rendering.
            </summary>
            <param name="stage">Access element of the LookDev's scene</param>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.IDataProvider.Cleanup(UnityEngine.Rendering.LookDev.StageRuntimeInterface)">
            <summary>
            Callback called to do any necessary cleanup.
            </summary>
            <param name="SRI">Access element of the LookDev's scene</param>
        </member>
        <member name="T:UnityEngine.Rendering.LookDev.Sky">
            <summary>
            Runtime container representing Sky data given to the scriptable render pipeline for rendering
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LookDev.Sky.cubemap">
            <summary>The cubemap representing this sky</summary>
        </member>
        <member name="F:UnityEngine.Rendering.LookDev.Sky.longitudeOffset">
            <summary>The longitude offset to rotate this cubemap</summary>
        </member>
        <member name="F:UnityEngine.Rendering.LookDev.Sky.exposure">
            <summary>The sky exposure</summary>
        </member>
        <member name="T:UnityEngine.Rendering.LookDev.StageRuntimeInterface">
            <summary>Runtime link to reflect some Stage functionality for SRP editing</summary>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.StageRuntimeInterface.#ctor(System.Func{System.Boolean,UnityEngine.GameObject},System.Func{UnityEngine.Camera},System.Func{UnityEngine.Light})">
            <summary>Construct a StageRuntimeInterface</summary>
            <param name="AddGameObject">Callback to call when adding a GameObject</param>
            <param name="GetCamera">Callback to call for getting the Camera</param>
            <param name="GetSunLight">Callback to call for getting the sun Light</param>
        </member>
        <member name="M:UnityEngine.Rendering.LookDev.StageRuntimeInterface.AddGameObject(System.Boolean)">
            <summary>Create a gameObject in the stage</summary>
            <param name="persistent">
            [OPTIONAL] If true, the object is not recreated with the scene update.
            Default value: false.
            </param>
            <returns></returns>
        </member>
        <member name="P:UnityEngine.Rendering.LookDev.StageRuntimeInterface.camera">
            <summary>Get the camera used in the stage</summary>
        </member>
        <member name="P:UnityEngine.Rendering.LookDev.StageRuntimeInterface.sunLight">
            <summary>Get the sun used in the stage</summary>
        </member>
        <member name="F:UnityEngine.Rendering.LookDev.StageRuntimeInterface.SRPData">
            <summary>Custom data pointer for convenience</summary>
        </member>
        <member name="T:UnityEngine.Rendering.RTHandle">
            <summary>
            A RTHandle is a RenderTexture that scales automatically with the camera size.
            This allows proper reutilization of RenderTexture memory when different cameras with various sizes are used during rendering.
            <seealso cref="T:UnityEngine.Rendering.RTHandleSystem"/>
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.SetCustomHandleProperties(UnityEngine.Rendering.RTHandleProperties@)">
            <summary>
            By default, rtHandleProperties gets the global state of scalers against the global reference mode.
            This method lets the current RTHandle use a local custom RTHandleProperties. This function is being used
            by scalers such as TAAU and DLSS, which require to have a different resolution for color (independent of the RTHandleSystem).
            </summary>
            <param name="properties">Properties to set.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.ClearCustomHandleProperties">
            <summary>
            Method that clears any custom handle property being set.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.scaleFactor">
            <summary>
            Scale factor applied to the RTHandle reference size.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.useScaling">
            <summary>
            Returns true if the RTHandle uses automatic scaling.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.referenceSize">
            <summary>
            Reference size of the RTHandle System associated with the RTHandle
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.rtHandleProperties">
            <summary>
            Current properties of the RTHandle System. If a custom property has been set through SetCustomHandleProperties method, it will be used that one instead.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.rt">
            <summary>
            RenderTexture associated with the RTHandle
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.nameID">
            <summary>
            RenderTargetIdentifier associated with the RTHandle
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.name">
            <summary>
            Name of the RTHandle
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandle.isMSAAEnabled">
            <summary>
            Returns true is MSAA is enabled, false otherwise.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.op_Implicit(UnityEngine.Rendering.RTHandle)~UnityEngine.Rendering.RenderTargetIdentifier">
            <summary>
            Implicit conversion operator to RenderTargetIdentifier
            </summary>
            <param name="handle">Input RTHandle</param>
            <returns>RenderTargetIdentifier representation of the RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.op_Implicit(UnityEngine.Rendering.RTHandle)~UnityEngine.Texture">
            <summary>
            Implicit conversion operator to Texture
            </summary>
            <param name="handle">Input RTHandle</param>
            <returns>Texture representation of the RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.op_Implicit(UnityEngine.Rendering.RTHandle)~UnityEngine.RenderTexture">
            <summary>
            Implicit conversion operator to RenderTexture
            </summary>
            <param name="handle">Input RTHandle</param>
            <returns>RenderTexture representation of the RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.GetInstanceID">
            <summary>
            Get the Instance ID of the RTHandle.
            </summary>
            <returns>The RTHandle Instance ID.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.Release">
            <summary>
            Release the RTHandle
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.GetScaledSize(UnityEngine.Vector2Int)">
            <summary>
            Return the input size, scaled by the RTHandle scale factor.
            </summary>
            <param name="refSize">Input size</param>
            <returns>Input size scaled by the RTHandle scale factor.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.GetScaledSize">
            <summary>
            Return the scaled size of the RTHandle.
            </summary>
            <returns>The scaled size of the RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.SwitchToFastMemory(UnityEngine.Rendering.CommandBuffer,System.Single,UnityEngine.Rendering.FastMemoryFlags,System.Boolean)">
            <summary>
            Switch the render target to fast memory on platform that have it.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="residencyFraction">How much of the render target is to be switched into fast memory (between 0 and 1).</param>
            <param name="flags">Flag to determine what parts of the render target is spilled if not fully resident in fast memory.</param>
            <param name="copyContents">Whether the content of render target are copied or not when switching to fast memory.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.CopyToFastMemory(UnityEngine.Rendering.CommandBuffer,System.Single,UnityEngine.Rendering.FastMemoryFlags)">
            <summary>
            Switch the render target to fast memory on platform that have it and copies the content.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="residencyFraction">How much of the render target is to be switched into fast memory (between 0 and 1).</param>
            <param name="flags">Flag to determine what parts of the render target is spilled if not fully resident in fast memory.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandle.SwitchOutFastMemory(UnityEngine.Rendering.CommandBuffer,System.Boolean)">
            <summary>
            Switch out the render target from fast memory back to main memory on platforms that have fast memory.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="copyContents">Whether the content of render target are copied or not when switching out fast memory.</param>
        </member>
        <member name="T:UnityEngine.Rendering.IDebugDisplaySettingsQuery">
            <summary>
            Interface for determining what kind of debug settings are currently active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IDebugDisplaySettingsQuery.AreAnySettingsActive">
            <summary>
            Checks whether ANY of the debug settings are currently active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IDebugDisplaySettingsQuery.IsPostProcessingAllowed">
            <summary>
            Checks whether the current state of these settings allows post-processing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IDebugDisplaySettingsQuery.IsLightingActive">
            <summary>
            Checks whether lighting is active for these settings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.IDebugDisplaySettingsQuery.TryGetScreenClearColor(UnityEngine.Color@)">
            <summary>
            Attempts to get the color used to clear the screen for this debug setting.
            </summary>
            <param name="color">A reference to the screen clear color to use.</param>
            <returns>"true" if we updated the color, "false" if we didn't change anything.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI">
            <summary>
            Debug UI Class
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Container">
            <summary>
            Base class for "container" type widgets, although it can be used on its own (if a display name is set then it'll behave as a group with a header)
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Container.children">
            <summary>
            List of children.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Container.panel">
            <summary>
            Panel the container is attached to.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Container.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Container.#ctor(System.String)">
            <summary>
            Constructor for a container without header
            </summary>
            <param name="id">The id of the container</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Container.#ctor(System.String,UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Constructor.
            </summary>
            <param name="displayName">Display name of the container.</param>
            <param name="children">List of attached children.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Container.OnItemAdded(UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},UnityEngine.Rendering.ListChangedEventArgs{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Method called when a children is added.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="e">List of added children.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Container.OnItemRemoved(UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},UnityEngine.Rendering.ListChangedEventArgs{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Method called when a children is removed.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="e">List of removed children.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Container.GetHashCode">
            <summary>
            Returns the hash code of the widget.
            </summary>
            <returns>Hash code of the widget.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Foldout">
            <summary>
            Unity-like foldout that can be collapsed.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Foldout.ContextMenuItem">
            <summary>
            Context menu item.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Foldout.ContextMenuItem.displayName">
            <summary>
            Name of the item displayed in context menu dropdown.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Foldout.ContextMenuItem.action">
            <summary>
            Callback when context menu item is selected.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Foldout.isReadOnly">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Foldout.opened">
            <summary>
            Opened state of the foldout.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Foldout.isHeader">
            <summary>
            Draw the foldout in full width using a header style.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Foldout.contextMenuItems">
            <summary>
            Optional list of context menu items. If the list is not provided, no context menu button will be displayed.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Foldout.columnLabels">
            <summary>
            List of columns labels.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Foldout.columnTooltips">
            <summary>
            List of columns label tooltips.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.#ctor(System.String,UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},System.String[],System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="displayName">Display name of the foldout.</param>
            <param name="children">List of attached children.</param>
            <param name="columnLabels">Optional list of column names.</param>
            <param name="columnTooltips">Optional list of tooltips for column name labels.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.GetValue">
            <summary>
            Get the opened state of the foldout.
            </summary>
            <returns>True if the foldout is opened.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.UnityEngine#Rendering#DebugUI#IValueField#GetValue">
            <summary>
            Get the opened state of the foldout.
            </summary>
            <returns>True if the foldout is opened.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.SetValue(System.Object)">
            <summary>
            Set the opened state of the foldout.
            </summary>
            <param name="value">True to open the foldout, false to close it.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.ValidateValue(System.Object)">
            <summary>
            Validates the value of the widget before setting it.
            </summary>
            <param name="value">Input value.</param>
            <returns>The validated value.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Foldout.SetValue(System.Boolean)">
            <summary>
            Set the value of the widget.
            </summary>
            <param name="value">Input value.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.HBox">
            <summary>
            Horizontal Layout Container.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.HBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.VBox">
            <summary>
            Vertical Layout Container.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.VBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Table">
            <summary>
            Array Container.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Table.Row">
            <summary>Row Container.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Table.Row.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Table.isReadOnly">
            <summary>
            True if the table is read only.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Table.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Table.SetColumnVisibility(System.Int32,System.Boolean)">
            <summary>
            Set column visibility.
            </summary>
            <param name="index">Index of the column.</param>
            <param name="visible">True if the column should be visible.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Table.GetColumnVisibility(System.Int32)">
            <summary>
            Get column visibility.
            </summary>
            <param name="index">Index of the column.</param>
            <returns>True if the column is visible.</returns>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Table.scroll">
            <summary>
            The scroll position of the table.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Table.Header">
            <summary>
            The table header for drawing
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Table.OnItemAdded(UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},UnityEngine.Rendering.ListChangedEventArgs{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Method called when a children is added.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="e">List of added children.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Table.OnItemRemoved(UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},UnityEngine.Rendering.ListChangedEventArgs{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Method called when a children is removed.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="e">List of removed children.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Field`1">
            <summary>
            Generic field - will be serialized in the editor if it's not read-only
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Field`1.getter">
            <summary>
            Getter for this field.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Field`1.setter">
            <summary>
            Setter for this field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Field`1.onValueChanged">
            <summary>
            Callback used when the value of the field changes.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Field`1.UnityEngine#Rendering#DebugUI#IValueField#ValidateValue(System.Object)">
            <summary>
            Function used to validate the value when updating the field.
            </summary>
            <param name="value">Input value.</param>
            <returns>Validated value.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Field`1.ValidateValue(`0)">
            <summary>
            Function used to validate the value when updating the field.
            </summary>
            <param name="value">Input value.</param>
            <returns>Validated value.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Field`1.UnityEngine#Rendering#DebugUI#IValueField#GetValue">
            <summary>
            Get the value of the field.
            </summary>
            <returns>Value of the field.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Field`1.GetValue">
            <summary>
            Get the value of the field.
            </summary>
            <returns>Value of the field.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Field`1.SetValue(System.Object)">
            <summary>
            Set the value of the field.
            </summary>
            <param name="value">Input value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Field`1.SetValue(`0)">
            <summary>
            Set the value of the field.
            </summary>
            <param name="value">Input value.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.BoolField">
            <summary>
            Boolean field.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.HistoryBoolField">
            <summary>
            Boolean field with history.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.HistoryBoolField.historyGetter">
            <summary>
            History getter for this field.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.HistoryBoolField.historyDepth">
            <summary>
            Depth of the field's history.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.HistoryBoolField.GetHistoryValue(System.Int32)">
            <summary>
            Get the value of the field at a certain history index.
            </summary>
            <param name="historyIndex">Index of the history to query.</param>
            <returns>Value of the field at the provided history index.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.IntField">
            <summary>
            Integer field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.IntField.min">
            <summary>
            Minimum value function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.IntField.max">
            <summary>
            Maximum value function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.IntField.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.IntField.intStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.IntField.ValidateValue(System.Int32)">
            <summary>
            Function used to validate the value when updating the field.
            </summary>
            <param name="value">Input value.</param>
            <returns>Validated value.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.UIntField">
            <summary>
            Unsigned integer field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.UIntField.min">
            <summary>
            Minimum value function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.UIntField.max">
            <summary>
            Maximum value function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.UIntField.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.UIntField.intStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.UIntField.ValidateValue(System.UInt32)">
            <summary>
            Function used to validate the value when updating the field.
            </summary>
            <param name="value">Input value.</param>
            <returns>Validated value.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.FloatField">
            <summary>
            Float field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.FloatField.min">
            <summary>
            Minimum value function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.FloatField.max">
            <summary>
            Maximum value function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.FloatField.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.FloatField.incStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.FloatField.decimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.FloatField.ValidateValue(System.Single)">
            <summary>
            Function used to validate the value when updating the field.
            </summary>
            <param name="value">Input value.</param>
            <returns>Validated value.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.EnumField`1">
            <summary>
            Generic <see cref="T:UnityEngine.Rendering.DebugUI.EnumField"/> that stores enumNames and enumValues
            </summary>
            <typeparam name="T">The inner type of the field</typeparam>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.EnumField`1.enumNames">
            <summary>
            List of names of the enumerator entries.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.EnumField`1.enumValues">
            <summary>
            List of values of the enumerator entries.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.EnumField`1.AutoFillFromType(System.Type)">
            <summary>
            Automatically fills the enum names with a given <see cref="T:System.Type"/>
            </summary>
            <param name="enumType">The enum type</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.EnumField">
            <summary>
            Enumerator field.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.EnumField.getIndex">
            <summary>
            Get the enumeration value index.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.EnumField.setIndex">
            <summary>
            Set the enumeration value index.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.EnumField.currentIndex">
            <summary>
            Current enumeration value index.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.EnumField.autoEnum">
            <summary>
            Generates enumerator values and names automatically based on the provided type.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.EnumField.SetValue(System.Int32)">
            <summary>
            Set the value of the field.
            </summary>
            <param name="value">Input value.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.ObjectPopupField">
            <summary>
            Object PopupField
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.ObjectPopupField.getObjects">
            <summary>
            Callback to obtain the elemtents of the pop up
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.HistoryEnumField">
            <summary>
            Enumerator field with history.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.HistoryEnumField.historyIndexGetter">
            <summary>
            History getter for this field.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.HistoryEnumField.historyDepth">
            <summary>
            Depth of the field's history.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.HistoryEnumField.GetHistoryValue(System.Int32)">
            <summary>
            Get the value of the field at a certain history index.
            </summary>
            <param name="historyIndex">Index of the history to query.</param>
            <returns>Value of the field at the provided history index.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.BitField">
            <summary>
            Bitfield enumeration field.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.BitField.enumType">
            <summary>
            Generates bitfield values and names automatically based on the provided type.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.ColorField">
            <summary>
            Color field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ColorField.hdr">
            <summary>
            HDR color.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ColorField.showAlpha">
            <summary>
            Show alpha of the color field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ColorField.showPicker">
            <summary>
            Show the color picker.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ColorField.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ColorField.incStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ColorField.decimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.ColorField.ValidateValue(UnityEngine.Color)">
            <summary>
            Function used to validate the value when updating the field.
            </summary>
            <param name="value">Input value.</param>
            <returns>Validated value.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Vector2Field">
            <summary>
            Vector2 field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector2Field.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector2Field.incStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector2Field.decimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Vector3Field">
            <summary>
            Vector3 field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector3Field.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector3Field.incStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector3Field.decimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Vector4Field">
            <summary>
            Vector4 field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector4Field.incStep">
            <summary>
            Step increment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector4Field.incStepMult">
            <summary>
            Step increment multiplier.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Vector4Field.decimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.ObjectField">
            <summary>
            Object field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ObjectField.type">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.ObjectListField">
            <summary>
            Object list field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ObjectListField.type">
            <summary>
            Objects type.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.MessageBox">
            <summary>
            Simple message box widget, providing a couple of different styles.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.MessageBox.Style">
            <summary>
            Label style defines text color and background.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.MessageBox.Style.Info">
            <summary>
            Info category
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.MessageBox.Style.Warning">
            <summary>
            Warning category
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.MessageBox.Style.Error">
            <summary>
            Error category
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.MessageBox.style">
            <summary>
            Style used to render displayName.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Flags">
            <summary>
            Flags for Debug UI widgets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Flags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Flags.EditorOnly">
            <summary>
            This widget is Editor only.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Flags.RuntimeOnly">
            <summary>
            This widget is Runtime only.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Flags.EditorForceUpdate">
            <summary>
            This widget will force the Debug Editor Window refresh.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Flags.FrequentlyUsed">
            <summary>
            This widget will appear in the section "Frequently Used"
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Widget">
            <summary>
            Base class for all debug UI widgets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Widget.m_Panel">
            <summary>
            Panels containing the widget.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.panel">
            <summary>
            Panels containing the widget.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Widget.m_Parent">
            <summary>
            Parent container.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.parent">
            <summary>
            Parent container.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.flags">
            <summary>
            Flags for the widget.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.displayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.tooltip">
            <summary>
            Tooltip.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.queryPath">
            <summary>
            Path of the widget.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.isEditorOnly">
            <summary>
            True if the widget is Editor only.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.isRuntimeOnly">
            <summary>
            True if the widget is Runtime only.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.isInactiveInEditor">
            <summary>
            True if the widget is inactive in the editor (i.e. widget is runtime only and the application is not 'Playing').
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Widget.isHiddenCallback">
            <summary>
            Optional delegate that can be used to conditionally hide widgets at runtime (e.g. due to state of other widgets).
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.isHidden">
            <summary>
            If <see cref="F:UnityEngine.Rendering.DebugUI.Widget.isHiddenCallback">shouldHideDelegate</see> has been set and returns true, the widget is hidden from the UI.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Widget.GetHashCode">
            <summary>
            Returns the hash code of the widget.
            </summary>
            <returns>The hash code of the widget.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Widget.NameAndTooltip">
            <summary>
            Helper struct to allow more compact initialization of widgets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Widget.NameAndTooltip.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Widget.NameAndTooltip.tooltip">
            <summary>
            The tooltip
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Widget.nameAndTooltip">
            <summary>
            Helper setter to allow more compact initialization of widgets.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.IContainer">
            <summary>
            Interface for widgets that can contain other widgets.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.IContainer.children">
            <summary>
            List of children of the container.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.IContainer.displayName">
            <summary>
            Display name of the container.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.IContainer.queryPath">
            <summary>
            Path of the container.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.IValueField">
            <summary>
            Any widget that implements this will be considered for serialization (only if the setter is set and thus is not read-only)
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.IValueField.GetValue">
            <summary>
            Return the value of the field.
            </summary>
            <returns>Value of the field.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.IValueField.SetValue(System.Object)">
            <summary>
            Set the value of the field.
            </summary>
            <param name="value">Input value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.IValueField.ValidateValue(System.Object)">
            <summary>
            Function used to validate the value when setting it.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Button">
            <summary>
            Button widget.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Button.action">
            <summary>
            Action performed by the button.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Value">
            <summary>
            Read only Value widget.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Value.getter">
            <summary>
            Getter for the Value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Value.refreshRate">
            <summary>
            Refresh rate for the read-only value (runtime only)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.Value.formatString">
            <summary>
            Optional C# numeric format string, using following syntax: "{0[:numericFormatString]}"
            See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings
            and https://docs.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting
            Example: 123.45678 with formatString "{0:F2} ms" --> "123.45 ms".
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Value.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Value.GetValue">
            <summary>
            Returns the value of the widget.
            </summary>
            <returns>The value of the widget.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Value.FormatString(System.Object)">
            <summary>
            Returns the formatted value string for display purposes.
            </summary>
            <param name="value">Value to be formatted.</param>
            <returns>The formatted value string.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.ProgressBarValue">
            <summary>
            Progress bar value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ProgressBarValue.min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ProgressBarValue.max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.ProgressBarValue.FormatString(System.Object)">
            <summary>
            Get the current progress string, remapped to [0, 1] range, representing the progress between min and max.
            </summary>
            <param name="value">Value to be formatted.</param>
            <returns>Formatted progress percentage string between 0% and 100%.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.ValueTuple">
            <summary>
            Tuple of Value widgets for creating tabular UI.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.ValueTuple.numElements">
            <summary>
            Number of elements in the tuple.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ValueTuple.values">
            <summary>
            Value widgets.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.ValueTuple.refreshRate">
            <summary>
            Refresh rate for the read-only values (runtime only)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugUI.ValueTuple.pinnedElementIndex">
            <summary>
            The currently pinned element index, or -1 if none are pinned.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugUI.Panel">
            <summary>
            Root panel class.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.flags">
            <summary>
            Widget flags for this panel.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.displayName">
            <summary>
            Display name of the panel.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.groupIndex">
            <summary>
            Group index of the panel.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.queryPath">
            <summary>
            Path of the panel.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.isEditorOnly">
            <summary>
            Specify if the panel is editor only.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.isRuntimeOnly">
            <summary>
            Specify if the panel is runtime only.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.isInactiveInEditor">
            <summary>
            Returns true if the panel is inactive in the editor.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.editorForceUpdate">
            <summary>
            Returns true if the panel should always be updated.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugUI.Panel.children">
            <summary>
            List of children.
            </summary>
        </member>
        <member name="E:UnityEngine.Rendering.DebugUI.Panel.onSetDirty">
            <summary>
            Callback used when the panel is set dirty.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Panel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Panel.OnItemAdded(UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},UnityEngine.Rendering.ListChangedEventArgs{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Callback used when a child is added.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="e">List of added children.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Panel.OnItemRemoved(UnityEngine.Rendering.ObservableList{UnityEngine.Rendering.DebugUI.Widget},UnityEngine.Rendering.ListChangedEventArgs{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Callback used when a child is removed.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="e">List of removed children.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Panel.SetDirty">
            <summary>
            Set the panel dirty.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Panel.GetHashCode">
            <summary>
            Returns the hash code of the panel.
            </summary>
            <returns>Hash code of the panel.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugUI.Panel.System#IComparable{UnityEngine#Rendering#DebugUI#Panel}#CompareTo(UnityEngine.Rendering.DebugUI.Panel)">
            <summary>
            Comparison function.
            </summary>
            <param name="other">Panel to compare to.</param>
            <returns>True if the panels share the same group index.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeDebugSettings`1">
            <summary>
            The volume settings
            </summary>
            <typeparam name="T">A <see cref="T:UnityEngine.MonoBehaviour"/> with <see cref="T:UnityEngine.Rendering.IAdditionalData"/></typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.componentTypes">
            <summary>List of Volume component types.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.ComponentDisplayName(System.Type)">
            <summary>Returns the name of a component from its VolumeComponentMenuForRenderPipeline.</summary>
            <param name="component">A volume component.</param>
            <returns>The component display name.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.additionalCameraDatas">
            <summary>
            The list of the additional camera datas
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.RegisterCamera(`0)">
            <summary>
            Register the camera for the Volume Debug.
            </summary>
            <param name="additionalCamera">The AdditionalCameraData of the camera to be registered.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.UnRegisterCamera(`0)">
            <summary>
            Unregister the camera for the Volume Debug.
            </summary>
            <param name="additionalCamera">The AdditionalCameraData of the camera to be registered.</param>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedComponent">
            <summary>Current volume component to debug.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedCamera">
            <summary>Current camera to debug.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeDebugSettings`1.m_SelectedCameraIndex">
            <summary>
            The selected camera index, use the property for better handling
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedCameraIndex">
            <summary>Selected camera index.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.cameras">
            <summary>Returns the collection of registered cameras.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedCameraVolumeStack">
            <summary>Selected camera volume stack.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedCameraLayerMask">
            <summary>Selected camera volume layer mask.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedCameraPosition">
            <summary>Selected camera volume position.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedComponentType">
            <summary>Type of the current component to debug.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.volumeComponentsPathAndType">
            <summary>List of Volume component types.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeDebugSettings`1.targetRenderPipeline">
            <summary>
            Specifies the render pipeline for this volume settings
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.GetVolumes">
            <summary>Get an array of volumes on the <see cref="P:UnityEngine.Rendering.VolumeDebugSettings`1.selectedCameraLayerMask"/></summary>
            <returns>An array of volumes sorted by influence.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.RefreshVolumes(UnityEngine.Rendering.Volume[])">
            <summary>
            Refreshes the volumes, fetches the stored volumes on the panel
            </summary>
            <param name="newVolumes">The list of <see cref="T:UnityEngine.Rendering.Volume"/> to refresh</param>
            <returns>If the volumes have been refreshed</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.GetVolumeWeight(UnityEngine.Rendering.Volume)">
            <summary>
            Obtains the volume weight
            </summary>
            <param name="volume"><see cref="T:UnityEngine.Rendering.Volume"/></param>
            <returns>The weight of the volume</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeDebugSettings`1.VolumeHasInfluence(UnityEngine.Rendering.Volume)">
            <summary>
            Return if the <see cref="T:UnityEngine.Rendering.Volume"/> has influence
            </summary>
            <param name="volume"><see cref="T:UnityEngine.Rendering.Volume"/> to check the influence</param>
            <returns>If the volume has influence</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicArray`1">
            <summary>
            Generic growable array.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicArray`1.size">
            <summary>
            Number of elements in the array.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicArray`1.capacity">
            <summary>
            Allocated size of the array.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicArray`1.version">
            <summary>
             This keeps track of structural modifications to this array and allows us to raise exceptions when modifying during enumeration
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.#ctor">
            <summary>
            Constructor.
            Defaults to a size of 32 elements.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Number of elements.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Clear">
            <summary>
            Clear the array of all elements.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Contains(`0)">
            <summary>
            Determines whether the DynamicArray contains a specific value.
            </summary>
            <param name="item">The object to locate in the DynamicArray.</param>
            <returns>true if item is found in the DynamicArray; otherwise, false.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Add(`0@)">
            <summary>
            Add an element to the array.
            </summary>
            <param name="value">Element to add to the array.</param>
            <returns>The index of the element.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.AddRange(UnityEngine.Rendering.DynamicArray{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the DynamicArray.
            </summary>
            <param name="array">The array whose elements should be added to the end of the DynamicArray. The array itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the DynamicArray.
            </summary>
            <param name="item">The object to remove from the DynamicArray. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the DynamicArray.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the DynamicArray.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the DynamicArray.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the DynamicArray that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the DynamicArray that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the DynamicArray. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the DynamicArray that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the DynamicArray. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the DynamicArray that extends from index to the last element, if found; otherwise, -1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire DynamicArray.
            </summary>
            <param name="item">The object to locate in the DynamicArray. The value can be null for reference types.</param>
            <returns>he zero-based index of the first occurrence of item within the entire DynamicArray, if found; otherwise, -1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Resize(System.Int32,System.Boolean)">
            <summary>
            Resize the Dynamic Array.
            This will reallocate memory if necessary and set the current size of the array to the provided size.
            </summary>
            <param name="newSize">New size for the array.</param>
            <param name="keepContent">Set to true if you want the current content of the array to be kept.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Reserve(System.Int32,System.Boolean)">
            <summary>
            Sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <param name="newCapacity">New capacity for the array.</param>
            <param name="keepContent">Set to true if you want the current content of the array to be kept.</param>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicArray`1.Item(System.Int32)">
            <summary>
            ref access to an element.
            </summary>
            <param name="index">Element index</param>
            <returns>The requested element.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.op_Implicit(UnityEngine.Rendering.DynamicArray{`0})~`0[]">
            <summary>
            Implicit conversion to regular array.
            </summary>
            <param name="array">Input DynamicArray.</param>
            <returns>The internal array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicArray`1.Iterator">
            <summary>
            IEnumerator-like struct used to loop over this entire array. See the IEnumerator docs for more info:
            <see href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator" langword="IEnumerator" />
            </summary>
            <remarks>
            This struct intentionally does not explicitly implement the IEnumarable/IEnumerator interfaces it just follows
            the same function signatures. This means the duck typing used by <c>foreach</c> on the compiler level will
            pick it up as IEnumerable but at the same time avoids generating Garbage.
            For more info, see the C# language specification of the <c>foreach</c> statement.
            </remarks>
            <seealso cref="!:RangeIterator"/>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Iterator.#ctor(UnityEngine.Rendering.DynamicArray{`0})">
            <summary>
            Creates an iterator to iterate over an array.
            </summary>
            <param name="setOwner">The array to iterate over.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the array is null.</exception>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicArray`1.Iterator.Current">
            <summary>
            Gets the element in the DynamicArray at the current position of the iterator.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Iterator.MoveNext">
            <summary>
            Advances the iterator to the next element of the DynamicArray.
            </summary>
            <returns>Returns <c>true</c> if the iterator has successfully advanced to the next element; <c>false</c> if the iterator has passed the end of the DynamicArray.</returns>
            <exception cref="T:System.InvalidOperationException">An operation changed the DynamicArray after the creation of this iterator.</exception>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.Iterator.Reset">
            <summary>
            Sets the iterator to its initial position, which is before the first element in the DynamicArray.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through of this array.
            See the IEnumerable docs for more info: <see href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable" langword="IEnumarable" />
            </summary>
            <remarks>
            The returned struct intentionally does not explicitly implement the IEnumarable/IEnumerator interfaces it just follows
            the same function signatures. This means the duck typing used by <c>foreach</c> on the compiler level will
            pick it up as IEnumerable but at the same time avoids generating Garbage.
            For more info, see the C# language specification of the <c>foreach</c> statement.
            </remarks>
            <returns>Iterator pointing before the first element in the array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable">
            <summary>
            IEnumerable-like struct used to iterate through a subsection of this array.
            See the IEnumerable docs for more info: <see href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable" langword="IEnumarable" />
            </summary>
            <remarks>
            This struct intentionally does not explicitly implement the IEnumarable/IEnumerator interfaces it just follows
            the same function signatures. This means the duck typing used by <c>foreach</c> on the compiler level will
            pick it up as IEnumerable but at the same time avoids generating Garbage.
            For more info, see the C# language specification of the <c>foreach</c> statement.
            </remarks>
            <seealso cref="M:UnityEngine.Rendering.DynamicArray`1.SubRange(System.Int32,System.Int32)"/>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.RangeIterator">
            <summary>
            IEnumerator-like struct used to iterate through a subsection of this array.
            See the IEnumerator docs for more info: <see href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator" langword="IEnumerator" />
            </summary>
            <remarks>
            This struct intentionally does not explicitly implement the IEnumarable/IEnumerator interfaces it just follows
            the same function signatures. This means the duck typing used by <c>foreach</c> on the compiler level will
            pick it up as <c>IEnumarable</c> but at the same time avoids generating Garbage.
            For more info, see the C# language specification of the <c>foreach</c> statement.
            </remarks>
            <seealso cref="M:UnityEngine.Rendering.DynamicArray`1.SubRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.RangeIterator.#ctor(UnityEngine.Rendering.DynamicArray{`0},System.Int32,System.Int32)">
            <summary>
            Create an iterator to iterate over the given range in the array.
            </summary>
            <param name="setOwner">The array to iterate over.</param>
            <param name="first">The index of the first item in the array.</param>
            <param name="numItems">The number of array members to iterate through.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the array is null.</exception>
        </member>
        <member name="P:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.RangeIterator.Current">
            <summary>
            Gets the element in the DynamicArray at the current position of the iterator.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.RangeIterator.MoveNext">
            <summary>
            Advances the iterator to the next element of the DynamicArray.
            </summary>
            <returns>Returs <c>true</c> if the iterator successfully advanced to the next element; returns <c>false</c> if the iterator has passed the end of the range.</returns>
            <exception cref="T:System.InvalidOperationException">The DynamicArray was modified after the iterator was created.</exception>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.RangeIterator.Reset">
            <summary>
            Sets the iterator to its initial position, which is before the first element in the range.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.iterator">
            <summary>
            The iterator associated with this Enumerable.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.RangeEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this array.
            </summary>
            <remarks>
            The returned struct intentionally does not explicitly implement the IEnumarable/IEnumerator interfaces it just follows
            the same function signatures. This means the duck typing used by <c>foreach</c> on the compiler level will
            pick it up as IEnumerable but at the same time avoids generating Garbage.
            For more info, see the C# language specification of the <c>foreach</c> statement.
            </remarks>
            <returns>Iterator pointing before the first element in the range.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArray`1.SubRange(System.Int32,System.Int32)">
            <summary>
            Returns an IEnumeralbe-Like object that iterates through a subsection of this array.
            </summary>
            <remarks>
            The returned struct intentionally does not explicitly implement the IEnumarable/IEnumerator interfaces it just follows
            the same function signatures. This means the duck typing used by <c>foreach</c> on the compiler level will
            pick it up as IEnumerable but at the same time avoids generating Garbage.
            For more info, see the C# language specification of the <c>foreach</c> statement.
            </remarks>
            <param name="first">The index of the first item</param>
            <param name="numItems">The number of items to iterate</param>
            <returns><c>RangeEnumerable</c> that can be used to enumerate the given range.</returns>
            <seealso cref="!:RangeIterator"/>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicArrayExtensions">
            <summary>
            Extension class for DynamicArray
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DynamicArrayExtensions.QuickSort``1(UnityEngine.Rendering.DynamicArray{``0})">
            <summary>
            Perform a quick sort on the DynamicArray
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="array">Array on which to perform the quick sort.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ShaderDebugPrintManager">
            <summary>
            Internal development tool.
            Manages gpu-buffers for shader debug printing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintManager.instance">
            <summary>
            Get the current instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ShaderDebugPrintManager.SetShaderDebugPrintInputConstants(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ShaderDebugPrintInput)">
            <summary>
            Set shader input constants.
            </summary>
            <param name="cmd">CommandBuffer to store the commands.</param>
            <param name="input">Input parameters for the constants.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ShaderDebugPrintManager.SetShaderDebugPrintBindings(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Binds the gpu-buffers for current frame.
            </summary>
            <param name="cmd">CommandBuffer to store the commands.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ShaderDebugPrintManager.EndFrame">
            <summary>
            Initiate async read-back of the GPU buffer to the CPU.
            Prepare a new GPU buffer for the next frame.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintManager.outputLine">
            <summary>
            Get current print line.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintManager.outputAction">
            <summary>
            Action taken for each print line. By default prints to the debug log.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ShaderDebugPrintManager.DefaultOutput(System.String)">
            <summary>
            The default output action. Print to the debug log.
            </summary>
            <param name="line">Line to be printed.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ShaderDebugPrintInput">
            <summary>
            Shader constant input parameters.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintInput.pos">
            <summary>
            Mouse position.
            GameView bottom-left == (0,0) top-right == (surface.width, surface.height) where surface == game display surface/rendertarget
            For screen pixel coordinates, game-view should be set to "Free Aspect".
            Works only in PlayMode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintInput.leftDown">
            <summary>
            Left mouse button is pressed.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintInput.rightDown">
            <summary>
            Right mouse button is pressed.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ShaderDebugPrintInput.middleDown">
            <summary>
            Middle mouse button is pressed.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ShaderDebugPrintInput.String">
            <summary>
            Pretty print parameters for debug purposes.
            </summary>
            <returns>A string containing debug information</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ShaderDebugPrintInputProducer">
            <summary>
            Reads system input to produce ShaderDebugPrintInput parameters.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ShaderDebugPrintInputProducer.Get">
            <summary>
            Read system input.
            </summary>
            <returns>Input parameters for ShaderDebugPrintManager.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DebugManager">
            <summary>
            Manager class for the Debug Window.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.instance">
            <summary>
            Global instance of the DebugManager.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.panels">
            <summary>
            List of currently registered debug panels.
            </summary>
        </member>
        <member name="E:UnityEngine.Rendering.DebugManager.onDisplayRuntimeUIChanged">
            <summary>
            Callback called when the runtime UI changed.
            </summary>
        </member>
        <member name="E:UnityEngine.Rendering.DebugManager.onSetDirty">
            <summary>
            Callback called when the debug window is dirty.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugManager.refreshEditorRequested">
            <summary>
            Force an editor request.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.displayEditorUI">
            <summary>
            Is the debug editor window open.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.ToggleEditorUI(System.Boolean)">
            <summary>
            Toggle the debug window.
            </summary>
            <param name="open">State of the debug window.</param>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.enableRuntimeUI">
            <summary>
            Controls whether runtime UI can be enabled. When this is set to false, there will be no overhead
            from debug GameObjects or runtime initialization.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.displayRuntimeUI">
            <summary>
            Displays the runtime version of the debug window.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.displayPersistentRuntimeUI">
            <summary>
            Displays the persistent runtime debug window.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugManager.isAnyDebugUIActive">
            <summary>
            Is any debug window or UI currently active.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.RefreshEditor">
            <summary>
            Refresh the debug window.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.Reset">
            <summary>
            Reset the debug window.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.ReDrawOnScreenDebug">
            <summary>
            Request the runtime debug UI be redrawn on the next update.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.RegisterData(UnityEngine.Rendering.IDebugData)">
            <summary>
            Register debug data.
            </summary>
            <param name="data">Data to be registered.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.UnregisterData(UnityEngine.Rendering.IDebugData)">
            <summary>
            Register debug data.
            </summary>
            <param name="data">Data to be registered.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.GetState">
            <summary>
            Get hashcode state of the Debug Window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.PanelIndex(System.String)">
            <summary>
            Returns the panel index
            </summary>
            <param name="displayName">The displayname for the panel</param>
            <returns>The index for the panel or -1 if not found.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.RequestEditorWindowPanelIndex(System.Int32)">
            <summary>
            Request DebugWindow to open the specified panel.
            </summary>
            <param name="index">Index of the debug window panel to activate.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.GetPanel(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Returns a debug panel.
            </summary>
            <param name="displayName">Name of the debug panel.</param>
            <param name="createIfNull">Create the panel if it does not exists.</param>
            <param name="groupIndex">Group index.</param>
            <param name="overrideIfExist">Replace an existing panel.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.FindPanelIndex(System.String)">
            <summary>
            Find the index of the panel from it's display name.
            </summary>
            <param name="displayName">The display name of the panel to find.</param>
            <returns>The index of the panel in the list. -1 if not found.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.RemovePanel(System.String)">
            <summary>
            Remove a debug panel.
            </summary>
            <param name="displayName">Name of the debug panel to remove.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.RemovePanel(UnityEngine.Rendering.DebugUI.Panel)">
            <summary>
            Remove a debug panel.
            </summary>
            <param name="panel">Reference to the debug panel to remove.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.GetItems(UnityEngine.Rendering.DebugUI.Flags)">
            <summary>
            Gets an <see cref="!:DebugUI.Widget[]"/> matching the given <see cref="T:UnityEngine.Rendering.DebugUI.Flags"/>
            </summary>
            <param name="flags">The flags of the widget</param>
            <returns>Reference to the requested debug item.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.GetItem(System.String)">
            <summary>
            Get a Debug Item.
            </summary>
            <param name="queryPath">Path of the debug item.</param>
            <returns>Reference to the requested debug item.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugManager.GetItem(System.String,UnityEngine.Rendering.DebugUI.IContainer)">
            <summary>
            Get a debug item from a specific container.
            </summary>
            <param name="queryPath">Path of the debug item.</param>
            <param name="container">Container to query.</param>
            <returns>Reference to the requested debug item.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IAdditionalData">
            <summary>
            Interface to identify additional data components
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.FSRUtils">
             <summary>
             Utility functions relating to FidelityFX Super Resolution (FSR)
            
             These functions are expected to be used in conjuction with the helper functions provided by FSRCommon.hlsl.
             </summary>
        </member>
        <member name="T:UnityEngine.Rendering.FSRUtils.ShaderConstants">
            Shader constant ids used to communicate with the FSR shader implementation
        </member>
        <member name="M:UnityEngine.Rendering.FSRUtils.SetEasuConstants(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
             <summary>
             Sets the constant values required by the FSR EASU shader on the provided command buffer
            
             Logic ported from "FsrEasuCon()" in Runtime/PostProcessing/Shaders/ffx/ffx_fsr1.hlsl
             </summary>
             <param name="cmd">Command buffer to modify</param>
             <param name="inputViewportSizeInPixels">This the rendered image resolution being upscaled</param>
             <param name="inputImageSizeInPixels">This is the resolution of the resource containing the input image (useful for dynamic resolution)</param>
             <param name="outputImageSizeInPixels">This is the display resolution which the input image gets upscaled to</param>
        </member>
        <member name="F:UnityEngine.Rendering.FSRUtils.kMaxSharpnessStops">
            <summary>
            The maximum sharpness value in stops before the effect of RCAS is no longer visible.
            This value is used to map between linear and stops.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FSRUtils.kDefaultSharpnessStops">
            <summary>
            AMD's FidelityFX Super Resolution integration guide recommends a value of 0.2 for the RCAS sharpness parameter when specified in stops
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FSRUtils.kDefaultSharpnessLinear">
            <summary>
            The default RCAS sharpness parameter as a linear value
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.FSRUtils.SetRcasConstants(UnityEngine.Rendering.CommandBuffer,System.Single)">
             <summary>
             Sets the constant values required by the FSR RCAS shader on the provided command buffer
            
             Logic ported from "FsrRcasCon()" in Runtime/PostProcessing/Shaders/ffx/ffx_fsr1.hlsl
             For a more user-friendly version of this function, see SetRcasConstantsLinear().
             </summary>
             <param name="cmd">Command buffer to modify</param>
             <param name="sharpnessStops">The scale is {0.0 := maximum, to N>0, where N is the number of stops(halving) of the reduction of sharpness</param>
        </member>
        <member name="M:UnityEngine.Rendering.FSRUtils.SetRcasConstantsLinear(UnityEngine.Rendering.CommandBuffer,System.Single)">
             <summary>
             Sets the constant values required by the FSR RCAS shader on the provided command buffer
            
             Equivalent to SetRcasConstants(), but handles the sharpness parameter as a linear value instead of one specified in stops.
             This is intended to simplify code that allows users to configure the sharpening behavior from a GUI.
             </summary>
             <param name="cmd">Command buffer to modify</param>
             <param name="sharpnessLinear">The level of intensity of the sharpening filter where 0.0 is the least sharp and 1.0 is the most sharp</param>
        </member>
        <member name="M:UnityEngine.Rendering.FSRUtils.IsSupported">
            <summary>
            Returns true if FidelityFX Super Resolution (FSR) is supported on the current system
            FSR requires the textureGather shader instruction which wasn't supported by OpenGL ES until version 3.1
            </summary>
            <returns>True if supported</returns>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeProfile">
            <summary>
            An Asset which holds a set of settings to use with a <see cref="T:UnityEngine.Rendering.Volume"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeProfile.components">
            <summary>
            A list of every setting that this Volume Profile stores.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeProfile.isDirty">
            <summary>
            **Note**: For Internal Use Only<br/>
            A dirty check used to redraw the profile inspector when something has changed. This is
            currently only used in the editor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Reset">
            <summary>
            Resets the dirty state of the Volume Profile. Unity uses this to force-refresh and redraw the
            Volume Profile editor when you modify the Asset via script instead of the Inspector.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Add``1(System.Boolean)">
            <summary>
            Adds a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> to this Volume Profile.
            </summary>
            <remarks>
            You can only have a single component of the same type per Volume Profile.
            </remarks>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <param name="overrides">Specifies whether Unity should automatically override all the settings when
            you add a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> to the Volume Profile.</param>
            <returns>The instance for the given type that you added to the Volume Profile</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Add(System.Type,System.Boolean)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Add(System.Type,System.Boolean)">
            <summary>
            Adds a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> to this Volume Profile.
            </summary>
            <remarks>
            You can only have a single component of the same type per Volume Profile.
            </remarks>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <param name="overrides">Specifies whether Unity should automatically override all the settings when
            you add a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> to the Volume Profile.</param>
            <returns>The instance created for the given type that has been added to the profile</returns>
            <see cref="M:UnityEngine.Rendering.VolumeProfile.Add``1(System.Boolean)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Remove``1">
            <summary>
            Removes a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> from this Volume Profile.
            </summary>
            <remarks>
            This method does nothing if the type does not exist in the Volume Profile.
            </remarks>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Remove(System.Type)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Remove(System.Type)">
            <summary>
            Removes a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> from this Volume Profile.
            </summary>
            <remarks>
            This method does nothing if the type does not exist in the Volume Profile.
            </remarks>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Remove``1"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Has``1">
            <summary>
            Checks if this Volume Profile contains the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> you pass in.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <returns><c>true</c> if the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> exists in the Volume Profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Has(System.Type)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.HasSubclassOf(System.Type)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Has(System.Type)">
            <summary>
            Checks if this Volume Profile contains the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> you pass in.
            </summary>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <returns><c>true</c> if the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> exists in the Volume Profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Has``1"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.HasSubclassOf(System.Type)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.HasSubclassOf(System.Type)">
            <summary>
            Checks if this Volume Profile contains the <see cref="T:UnityEngine.Rendering.VolumeComponent"/>, which is a subclass of <paramref name="type"/>,
            that you pass in.
            </summary>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <returns><c>true</c> if the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> exists in the Volume Profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Has(System.Type)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.Has``1"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(``0@)">
            <summary>
            Gets the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> of the specified type, if it exists.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <param name="component">The output argument that contains the <see cref="T:UnityEngine.Rendering.VolumeComponent"/>
            or <c>null</c>.</param>
            <returns><c>true</c> if the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> is in the Volume Profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(System.Type,``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGetSubclassOf``1(System.Type,``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGetAllSubclassOf``1(System.Type,System.Collections.Generic.List{``0})"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(System.Type,``0@)">
            <summary>
            Gets the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> of the specified type, if it exists.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/></typeparam>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <param name="component">The output argument that contains the <see cref="T:UnityEngine.Rendering.VolumeComponent"/>
            or <c>null</c>.</param>
            <returns><c>true</c> if the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> is in the Volume Profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGetSubclassOf``1(System.Type,``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGetAllSubclassOf``1(System.Type,System.Collections.Generic.List{``0})"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.TryGetSubclassOf``1(System.Type,``0@)">
            <summary>
            Gets the <seealso cref="T:UnityEngine.Rendering.VolumeComponent"/>, which is a subclass of <paramref name="type"/>, if
            it exists.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <param name="component">The output argument that contains the <see cref="T:UnityEngine.Rendering.VolumeComponent"/>
            or <c>null</c>.</param>
            <returns><c>true</c> if the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> is in the Volume Profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(System.Type,``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGetAllSubclassOf``1(System.Type,System.Collections.Generic.List{``0})"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.TryGetAllSubclassOf``1(System.Type,System.Collections.Generic.List{``0})">
            <summary>
            Gets all the <seealso cref="T:UnityEngine.Rendering.VolumeComponent"/> that are subclasses of the specified type,
            if there are any.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <param name="type">A type that inherits from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</param>
            <param name="result">The output list that contains all the <seealso cref="T:UnityEngine.Rendering.VolumeComponent"/>
            if any. Note that Unity does not clear this list.</param>
            <returns><c>true</c> if any <see cref="T:UnityEngine.Rendering.VolumeComponent"/> have been found in the profile,
            <c>false</c> otherwise.</returns>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(System.Type,``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGet``1(``0@)"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeProfile.TryGetSubclassOf``1(System.Type,``0@)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.GetHashCode">
            <summary>
            A custom hashing function that Unity uses to compare the state of parameters.
            </summary>
            <returns>A computed hash code for the current instance.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeProfile.Sanitize">
            <summary>
            Removes any components that were destroyed externally from the iternal list of components
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumeSystemParameters">
            <summary>
            Initialization parameters for the probe volume system.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.memoryBudget">
            <summary>
            The memory budget determining the size of the textures containing SH data.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.blendingMemoryBudget">
            <summary>
            The memory budget determining the size of the textures used for blending between scenarios.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.probeDebugMesh">
            <summary>
            The debug mesh used to draw probes in the debug view.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.probeDebugShader">
            <summary>
            The shader used to visualize the probes in the debug view.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.offsetDebugMesh">
            <summary>
            The debug mesh used to visualize probes virtual offset in the debug view.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.offsetDebugShader">
            <summary>
            The shader used to visualize probes virtual offset in the debug view.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.scenarioBlendingShader">
            <summary>
            The compute shader used to interpolate between two lighting scenarios.
            Set to null if blending is not supported.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.sceneData">
            <summary>
            The <see cref="T:UnityEngine.Rendering.ProbeVolumeSceneData"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.shBands">
            <summary>
            The <see cref="T:UnityEngine.Rendering.ProbeVolumeSHBands"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.supportsRuntimeDebug">
            <summary>True if APV is able to show runtime debug information.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSystemParameters.supportStreaming">
            <summary>True if APV should support streaming of cell data.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumeShadingParameters">
            <summary>
            Struct holiding the <see cref="T:UnityEngine.Rendering.ProbeVolume"/> shading parameters
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.normalBias">
            <summary>
            Normal bias to apply to the position used to sample probe volumes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.viewBias">
            <summary>
            View bias to apply to the position used to sample probe volumes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.scaleBiasByMinDistanceBetweenProbes">
            <summary>
            Whether to scale the biases with the minimum distance between probes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.samplingNoise">
            <summary>
            Noise to be applied to the sampling position. It can hide seams issues between subdivision levels, but introduces noise.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.weight">
            <summary>
            Global probe volumes weight. Allows for fading out probe volumes influence falling back to ambient probe.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.leakReductionMode">
            <summary>
            Method used for leak reduction.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.occlusionWeightContribution">
            <summary>
            Contribution of leak reduction weights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.minValidNormalWeight">
            <summary>
            The minimum value that dot(N, vectorToProbe) need to have to be considered valid.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.frameIndexForNoise">
            <summary>
            The frame index to be used to animate the sampling noise if requested.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.reflNormalizationLowerClamp">
            <summary>
            Lower clamp value for reflection probe normalization.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeShadingParameters.reflNormalizationUpperClamp">
            <summary>
            Upper clamp value for reflection probe normalization.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumeTextureMemoryBudget">
            <summary>
            Possible values for the probe volume memory budget (determines the size of the textures used).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeTextureMemoryBudget.MemoryBudgetLow">
            <summary>Low Budget</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeTextureMemoryBudget.MemoryBudgetMedium">
            <summary>Medium Budget</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeTextureMemoryBudget.MemoryBudgetHigh">
            <summary>High Budget</summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumeBlendingTextureMemoryBudget">
            <summary>
            Possible values for the probe volume scenario blending memory budget (determines the size of the textures used).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeBlendingTextureMemoryBudget.None">
            <summary>Disable Scenario Blending</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeBlendingTextureMemoryBudget.MemoryBudgetLow">
            <summary>Low Budget</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeBlendingTextureMemoryBudget.MemoryBudgetMedium">
            <summary>Medium Budget</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeBlendingTextureMemoryBudget.MemoryBudgetHigh">
            <summary>High Budget</summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumeSHBands">
            <summary>
            Number of Spherical Harmonics bands that are used with Probe Volumes
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSHBands.SphericalHarmonicsL1">
            <summary>Up to the L1 band of Spherical Harmonics</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSHBands.SphericalHarmonicsL2">
            <summary>Up to the L2 band of Spherical Harmonics</summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeReferenceVolume">
            <summary>
            The reference volume for the Probe Volume system. This defines the structure in which volume assets are loaded into. There must be only one, hence why it follow a singleton pattern.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources">
            <summary>
            The resources that are bound to the runtime shaders for sampling Adaptive Probe Volume data.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.index">
            <summary>
            Index data to fetch the correct location in the Texture3D.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.cellIndices">
            <summary>
            Indices of the various index buffers for each cell.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L0_L1rx">
            <summary>
            Texture containing Spherical Harmonics L0 band data and first coefficient of L1_R.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L1_G_ry">
            <summary>
            Texture containing the second channel of Spherical Harmonics L1 band data and second coefficient of L1_R.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L1_B_rz">
            <summary>
            Texture containing the second channel of Spherical Harmonics L1 band data and third coefficient of L1_R.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L2_0">
            <summary>
            Texture containing the first coefficient of Spherical Harmonics L2 band data and first channel of the fifth.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L2_1">
            <summary>
            Texture containing the second coefficient of Spherical Harmonics L2 band data and second channel of the fifth.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L2_2">
            <summary>
            Texture containing the third coefficient of Spherical Harmonics L2 band data and third channel of the fifth.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.L2_3">
            <summary>
            Texture containing the fourth coefficient of Spherical Harmonics L2 band data.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.RuntimeResources.Validity">
            <summary>
            Texture containing packed validity binary data for the neighbourhood of each probe. Only used when L1. Otherwise this info is stored
            in the alpha channel of L2_3.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeReferenceVolume.ExtraDataActionInput">
            <summary>
             The input to the retrieveExtraDataAction action.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.retrieveExtraDataAction">
            <summary>
             An action that is used by the SRP to retrieve extra data that was baked together with the bake
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.checksDuringBakeAction">
            <summary>
             An action that is used by the SRP to perform checks every frame during baking.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.isInitialized">
            <summary>Is Probe Volume initialized.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.numberOfCellsBlendedPerFrame">
            <summary>Maximum number of cells that are blended per frame.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.turnoverRate">
            <summary>Percentage of cells loaded in the blending pool that can be replaced by out of date cells.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.shBands">
            <summary>
            The <see cref="T:UnityEngine.Rendering.ProbeVolumeSHBands"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.lightingScenario">
            <summary>The active lighting scenario.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.scenarioBlendingFactor">
            <summary>The blending factor currently used to blend probe data. A value of 0 means blending is not active.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.BlendLightingScenario(System.String,System.Single)">
            <summary>Allows smooth transitions between two lighting scenarios. This only affects the runtime data used for lighting.</summary>
            <param name="otherScenario">The name of the scenario to load.</param>
            <param name="blendingFactor">The factor used to interpolate between the active scenario and otherScenario. Accepted values range from 0 to 1 and will progressively blend from the active scenario to otherScenario.</param>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.memoryBudget">
            <summary>
            Get the memory budget for the Probe Volume system.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.probeVolumesWeight">
            <summary>
            Global probe volumes weight. Allows for fading out probe volumes influence falling back to ambient probe.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.instance">
            <summary>
            Get the instance of the probe reference volume (singleton).
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.Initialize(UnityEngine.Rendering.ProbeVolumeSystemParameters@)">
            <summary>
            Initialize the Probe Volume system
            </summary>
            <param name="parameters">Initialization parameters.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.SetEnableStateFromSRP(System.Boolean)">
            <summary>
            Communicate to the Probe Volume system whether the SRP enables Probe Volume.
            It is important to keep in mind that this is not used by the system for anything else but book-keeping,
            the SRP is still responsible to disable anything Probe volume related on SRP side.
            </summary>
            <param name="srpEnablesPV">The value of the new enabled</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.Cleanup">
            <summary>
            Cleanup the Probe Volume system.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.GetVideoMemoryCost">
            <summary>
            Get approximate video memory impact, in bytes, of the system.
            </summary>
            <returns>An approximation of the video memory impact, in bytes, of the system</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.PerformPendingOperations">
            <summary>
            Perform all the operations that are relative to changing the content or characteristics of the probe reference volume.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.InitProbeReferenceVolume(UnityEngine.Rendering.ProbeVolumeTextureMemoryBudget,UnityEngine.Rendering.ProbeVolumeBlendingTextureMemoryBudget,UnityEngine.Rendering.ProbeVolumeSHBands)">
            <summary>
            Initialize the reference volume.
            </summary>
            <param name ="allocationSize"> Size used for the chunk allocator that handles bricks.</param>
            <param name ="memoryBudget">Probe reference volume memory budget.</param>
            <param name ="shBands">Probe reference volume SH bands.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.GetRuntimeResources">
            <summary>
            Get the resources that are bound to the runtime shaders for sampling Adaptive Probe Volume data.
            </summary>
            <returns>The resources to bind to runtime shaders.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.DataHasBeenLoaded">
            <summary>
            Returns whether any brick data has been loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.UpdateConstantBuffer(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ProbeVolumeShadingParameters)">
            <summary>
            Update the constant buffer used by Probe Volumes in shaders.
            </summary>
            <param name="cmd">A command buffer used to perform the data update.</param>
            <param name="parameters">Parameters to be used when sampling the probe volume.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.CleanupLoadedData">
            <summary>
            Cleanup loaded data.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolume.k_DebugPanelName">
            <summary>Name of debug panel for Probe Volume</summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolume.subdivisionDebugColors">
            <summary>Colors that can be used for debug visualization of the brick structure subdivision.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.RenderDebug(UnityEngine.Camera)">
            <summary>
             Render Probe Volume related debug
            </summary>
            <param name="camera">The <see cref="T:UnityEngine.Camera"/></param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.SetNumberOfCellsLoadedPerFrame(System.Int32)">
            <summary>
            Set the number of cells that are loaded per frame when needed.
            </summary>
            <param name="numberOfCells"></param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolume.UpdateCellStreaming(UnityEngine.Rendering.CommandBuffer,UnityEngine.Camera)">
            <summary>
            Updates the cell streaming for a <see cref="T:UnityEngine.Camera"/>
            </summary>
            <param name="cmd">The <see cref="T:UnityEngine.Rendering.CommandBuffer"/></param>
            <param name="camera">The <see cref="T:UnityEngine.Camera"/></param>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolume">
            <summary>
            A marker to determine what area of the scene is considered by the Probe Volumes system
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.globalVolume">
            <summary>
            If is a global bolume
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolume.Mode">
            <summary>Indicates which renderers should be considerer for the Probe Volume bounds when baking</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.Mode.Global">
            <summary>Encapsulate all renderers in the baking set.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.Mode.Scene">
            <summary>Encapsulate all renderers in the scene.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.Mode.Local">
            <summary>Encapsulate all renderers in the bounding box.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.mode">
            <summary>
            If is a global bolume
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.overrideRendererFilters">
            <summary>
            Override the renderer filters.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.minRendererVolumeSize">
            <summary>
            The minimum renderer bounding box volume size. This value is used to discard small renderers when the overrideMinRendererVolumeSize is enabled.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.objectLayerMask">
            <summary>
            The <see cref="T:UnityEngine.LayerMask"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.lowestSubdivLevelOverride">
            <summary>
            The lowest subdivision level override
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.highestSubdivLevelOverride">
            <summary>
            The highest subdivision level override
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.overridesSubdivLevels">
            <summary>
            If the subdivision levels need to be overriden
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolume.fillEmptySpaces">
            <summary>Whether spaces with no renderers need to be filled with bricks at lowest subdivision level.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolume.GetExtents">
            <summary>
            Returns the extents of the volume.
            </summary>
            <returns>The extents of the ProbeVolume.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.APVConstantBufferRegister">
            <summary>
            Defines the constant buffer register that will be used as binding point for the Probe Volumes constant buffer.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.APVConstantBufferRegister.GlobalRegister">
            <summary>
            Global register
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.APVLeakReductionMode">
            <summary>
            Defines the method used to reduce leaking.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.APVLeakReductionMode.None">
            <summary>
            Nothing is done to prevent leaking. Cheapest option in terms of cost of sampling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.APVLeakReductionMode.ValidityAndNormalBased">
            <summary>
            The uvw used to sample APV data are warped to try to have invalid probe not contributing to lighting. Also, a geometric weight based on normal at sampling position and vector to probes is used.
            This only modifies the uvw used, but still sample a single time. It is effective in some situations (especially when occluding object contain probes inside) but ineffective in many other.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.MousePositionDebug">
            <summary>
            Provides mouse position for debugging purpose.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.MousePositionDebug.instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.MousePositionDebug.Build">
            <summary>
            Initialize the MousePositionDebug class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.MousePositionDebug.Cleanup">
            <summary>
            Cleanup the MousePositionDebug class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.MousePositionDebug.GetMousePosition(System.Single,System.Boolean)">
            <summary>
            Get the mouse position in the scene or game view.
            </summary>
            <param name="ScreenHeight">Window height.</param>
            <param name="sceneView">Get position in the scene view?</param>
            <returns>Coordinates of the mouse in the specified window.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.MousePositionDebug.GetMouseClickPosition(System.Single)">
            <summary>
            Returns the position of the mouse click.
            </summary>
            <param name="ScreenHeight">Window height.</param>
            <returns>The coordinates of the mouse click.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.CoreRPHelpURLAttribute">
            <summary>
            Attribute to define the help url
            </summary>
            <example>
            [CoreRPHelpURLAttribute("Volume")]
            public class Volume : MonoBehaviour
            </example>
        </member>
        <member name="M:UnityEngine.Rendering.CoreRPHelpURLAttribute.#ctor(System.String,System.String)">
            <summary>
            The constructor of the attribute
            </summary>
            <param name="pageName"></param>
            <param name="packageName"></param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreRPHelpURLAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            The constructor of the attribute
            </summary>
            <param name="pageName"></param>
            <param name="packageName"></param>
            <param name="pageHash"></param>
        </member>
        <member name="T:UnityEngine.Rendering.DocumentationInfo">
            <summary>
            Documentation Info class.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DocumentationInfo.version">
            <summary>
            Current version of the documentation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DocumentationInfo.GetPageLink(System.String,System.String)">
            <summary>
            Generates a help url for the given package and page name
            </summary>
            <param name="packageName">The package name</param>
            <param name="pageName">The page name</param>
            <returns>The full url page</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DocumentationInfo.GetPageLink(System.String,System.String,System.String)">
            <summary>
            Generates a help url for the given package and page name
            </summary>
            <param name="packageName">The package name</param>
            <param name="pageName">The page name</param>
            <param name="pageHash">The page hash</param>
            <returns>The full url page</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DocumentationUtils">
            <summary>
            Set of utils for documentation
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DocumentationUtils.GetHelpURL``1(``0)">
            <summary>
            Obtains the help url from an enum
            </summary>
            <typeparam name="TEnum">The enum with a <see cref="T:UnityEngine.HelpURLAttribute"/></typeparam>
            <param name="mask">[Optional] The current value of the enum</param>
            <returns>The full url</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DocumentationUtils.TryGetHelpURL(System.Type,System.String@)">
            <summary>
            Obtains the help URL from a type.
            </summary>
            <param name="type">The type decorated with the HelpURL attribute.</param>
            <param name="url">The full URL from the HelpURL attribute. If the attribute is not present, this value is null.</param>
            <returns>Returns true if the attribute is present, and false otherwise.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ArrayExtensions">
            <summary>
            Array utilities functions
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ArrayExtensions.ResizeArray``1(Unity.Collections.NativeArray{``0}@,System.Int32)">
            <summary>
            Resizes a native array. If an empty native array is passed, it will create a new one.
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="array">Target array to resize</param>
            <param name="capacity">New size of native array to resize</param>
        </member>
        <member name="M:UnityEngine.Rendering.ArrayExtensions.ResizeArray(UnityEngine.Jobs.TransformAccessArray@,System.Int32)">
            <summary>
            Resizes a transform access array.
            </summary>
            <param name="array">Target array to resize</param>
            <param name="capacity">New size of transform access array to resize</param>
        </member>
        <member name="M:UnityEngine.Rendering.ArrayExtensions.ResizeArray``1(``0[]@,System.Int32)">
            <summary>
            Resizes an array. If a null reference is passed, it will allocate the desired array.
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="array">Target array to resize</param>
            <param name="capacity">New size of array to resize</param>
        </member>
        <member name="T:UnityEngine.Rendering.XRUtils">
            <summary>
            XR Utility class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.XRUtils.DrawOcclusionMesh(UnityEngine.Rendering.CommandBuffer,UnityEngine.Camera,System.Boolean)">
            <summary>
            Draw the XR occlusion mesh.
            </summary>
            <param name="cmd">Command Buffer used to draw the occlusion mesh.</param>
            <param name="camera">Camera for which the occlusion mesh is rendered.</param>
            <param name="stereoEnabled">True if stereo rendering is enabled.</param>
        </member>
        <member name="T:UnityEngine.Rendering.IVolume">
            <summary>
            An interface for Volumes
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolume.isGlobal">
            <summary>
            Specifies whether to apply the Volume to the entire Scene or not.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolume.colliders">
            <summary>
            The colliders of the volume if <see cref="P:UnityEngine.Rendering.IVolume.isGlobal"/> is false
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.MeshGizmo">
            <summary>
            Helper to build and render a mesh for Gizmos, it is a lot more faster than drawing a ton of gizmos separately
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeTouchupVolume">
            <summary>
            A marker to determine what area of the scene is considered by the Probe Volumes system
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeTouchupVolume.intensityScale">
            <summary>
            A scale to apply to probes falling within the invalidation volume. It is really important to use this with caution as it can lead to inconsistent lighting.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeTouchupVolume.invalidateProbes">
            <summary>
            Whether to invalidate all probes falling within this volume.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeTouchupVolume.overrideDilationThreshold">
            <summary>
            Whether to use a custom threshold for dilation for probes falling withing this volume.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeTouchupVolume.overriddenDilationThreshold">
            <summary>
            The overridden dilation threshold.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeTouchupVolume.size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeTouchupVolume.GetExtents">
            <summary>
            Returns the extents of the volume.
            </summary>
            <returns>The extents of the ProbeVolume.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IVolumetricCloud">
            <summary>
            Volumetric Cloud
            Interface for VolumetricCloud on each SRP
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.IVolumetricCloud.IsVolumetricCloudUsable">
            <summary>
            Check is the current Render Pipeline had VolumetricCloud
            </summary>
            <returns>true if the VolumetricCloud is usable on the current pipeline</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeReferenceVolumeProfile">
            <summary>
            An Asset which holds a set of settings to use with a <see cref="!:Probe Reference Volume"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolumeProfile.simplificationLevels">
            <summary>
            How many levels contains the probes hierarchical structure.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolumeProfile.cellSizeInBricks">
            <summary>
            The size of a Cell in number of bricks.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolumeProfile.minDistanceBetweenProbes">
            <summary>
            The minimum distance between two probes in meters.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolumeProfile.maxSubdivision">
            <summary>
            Maximum subdivision in the structure.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolumeProfile.minBrickSize">
            <summary>
            Minimum size of a brick in meters.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProbeReferenceVolumeProfile.cellSizeInMeters">
            <summary>
            Size of the cell in meters.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolumeProfile.renderersLayerMask">
            <summary>
            Layer mask filter for all renderers.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeReferenceVolumeProfile.minRendererVolumeSize">
            <summary>
            Specifies the minimum bounding box volume of renderers to consider placing probes around.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeReferenceVolumeProfile.IsEquivalent(UnityEngine.Rendering.ProbeReferenceVolumeProfile)">
            <summary>
            Determines if the Probe Reference Volume Profile is equivalent to another one.
            </summary>
            <param name ="otherProfile">The profile to compare with.</param>
            <returns>Whether the Probe Reference Volume Profile is equivalent to another one.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Texture2DAtlasDynamic">
            <summary>
            A generic Atlas texture of 2D textures.
            An atlas texture is a texture collection that collects multiple sub-textures into a single big texture.
            Sub-texture allocation for Texture2DAtlasDynamic is dynamic.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Texture2DAtlasDynamic.AtlasTexture">
            <summary>
            Handle to the texture of the atlas.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat)">
            <summary>
            Creates a new empty texture atlas.
            </summary>
            <param name="width">Atlas width.</param>
            <param name="height">Atlas height.</param>
            <param name="capacity">Maximum number of items in the atlas.</param>
            <param name="format">Atlas format.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.RTHandle)">
            <summary>
            Creates a new empty texture atlas. Use external atlas texture.
            </summary>
            <param name="width">Atlas width.</param>
            <param name="height">Atlas height.</param>
            <param name="capacity">Maximum number of items in the atlas.</param>
            <param name="atlasTexture">Atlas texture.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.Release">
            <summary>
            Release atlas resources.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.ResetAllocator">
            <summary>
            Clear atlas sub-texture allocations.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.AddTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4@,UnityEngine.Texture)">
            <summary>
            Add a texture into the atlas.
            </summary>
            <param name="cmd">A command buffer Unity uses to upload the texture.</param>
            <param name="scaleOffset">The texture rectangle coordinates in the atlas.</param>
            <param name="texture">The texture added.</param>
            <returns>Returns True if Unity successfully adds the texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.IsCached(UnityEngine.Vector4@,System.Int32)">
            <summary>
            Check if the atlas contains the texture.
            </summary>
            <param name="scaleOffset">The texture rectangle coordinates in the atlas.</param>
            <param name="key">The key that identifies the texture.</param>
            <returns>Returns True if the texture is cached.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.EnsureTextureSlot(System.Boolean@,UnityEngine.Vector4@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocate space from the atlas.
            </summary>
            <param name="isUploadNeeded">Wether the texture upload is needed after Unity ensures that the slot is allocated.</param>
            <param name="scaleOffset">The texture rectangle coordinates in the atlas.</param>
            <param name="key">The key that identifies the texture.</param>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <returns>Returns True if Unity successfully allocates the slot.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlasDynamic.ReleaseTextureSlot(System.Int32)">
            <summary>
            Release allocated space from the atlas.
            </summary>
            <param name="key">The key that identifies the texture.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ColorUtils">
            <summary>
            A set of color manipulation utilities.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorUtils.s_LightMeterCalibrationConstant">
            <summary>
            Calibration constant (K) used for our virtual reflected light meter. Modifying this will lead to a change on how average scene luminance
            gets mapped to exposure.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorUtils.s_LensAttenuation">
            <summary>
            Factor used for our lens system w.r.t. exposure calculation. Modifying this will lead to a change on how linear exposure
            multipliers are computed from EV100 values (and viceversa). s_LensAttenuation models transmission attenuation and lens vignetting.
            Note that according to the standard ISO 12232, a lens saturates at s_LensAttenuation = 0.78f (under ISO 100).
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ColorUtils.lensImperfectionExposureScale">
            <summary>
            Scale applied to exposure caused by lens imperfection. It is computed from s_LensAttenuation as follow:
             (78 / ( S * q )) where S = 100 and q = s_LensAttenuation
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.StandardIlluminantY(System.Single)">
            <summary>
            An analytical model of chromaticity of the standard illuminant, by Judd et al.
            http://en.wikipedia.org/wiki/Standard_illuminant#Illuminant_series_D
            Slightly modifed to adjust it with the D65 white point (x=0.31271, y=0.32902).
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.CIExyToLMS(System.Single,System.Single)">
            <summary>
            CIE xy chromaticity to CAT02 LMS.
            http://en.wikipedia.org/wiki/LMS_color_space#CAT02
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ColorBalanceToLMSCoeffs(System.Single,System.Single)">
            <summary>
            Converts white balancing parameter to LMS coefficients.
            </summary>
            <param name="temperature">A temperature offset, in range [-100;100].</param>
            <param name="tint">A tint offset, in range [-100;100].</param>
            <returns>LMS coefficients.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.PrepareShadowsMidtonesHighlights(UnityEngine.Vector4@,UnityEngine.Vector4@,UnityEngine.Vector4@)">
            <summary>
            Pre-filters shadows, midtones and highlights trackball values for shader use.
            </summary>
            <param name="inShadows">A color used for shadows.</param>
            <param name="inMidtones">A color used for midtones.</param>
            <param name="inHighlights">A color used for highlights.</param>
            <returns>The three input colors pre-filtered for shader use.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.PrepareLiftGammaGain(UnityEngine.Vector4@,UnityEngine.Vector4@,UnityEngine.Vector4@)">
            <summary>
            Pre-filters lift, gamma and gain trackball values for shader use.
            </summary>
            <param name="inLift">A color used for lift.</param>
            <param name="inGamma">A color used for gamma.</param>
            <param name="inGain">A color used for gain.</param>
            <returns>The three input colors pre-filtered for shader use.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.PrepareSplitToning(UnityEngine.Vector4@,UnityEngine.Vector4@,System.Single)">
            <summary>
            Pre-filters colors used for the split toning effect.
            </summary>
            <param name="inShadows">A color used for shadows.</param>
            <param name="inHighlights">A color used for highlights.</param>
            <param name="balance">The balance between the shadow and highlight colors, in range [-100;100].</param>
            <returns>The two input colors pre-filtered for shader use.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.Luminance(UnityEngine.Color@)">
            <summary>
            Returns the luminance of the specified color. The input is considered to be in linear
            space with sRGB primaries and a D65 white point.
            </summary>
            <param name="color">The color to compute the luminance for.</param>
            <returns>A luminance value.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ComputeEV100(System.Single,System.Single,System.Single)">
            <summary>
            Computes an exposure value (EV100) from physical camera settings.
            </summary>
            <param name="aperture">The camera aperture.</param>
            <param name="shutterSpeed">The camera exposure time.</param>
            <param name="ISO">The camera sensor sensitivity.</param>
            <returns>An exposure value, in EV100.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ConvertEV100ToExposure(System.Single)">
            <summary>
            Converts an exposure value (EV100) to a linear multiplier.
            </summary>
            <param name="EV100">The exposure value to convert, in EV100.</param>
            <returns>A linear multiplier.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ConvertExposureToEV100(System.Single)">
            <summary>
            Converts a linear multiplier to an exposure value (EV100).
            </summary>
            <param name="exposure">A linear multiplier.</param>
            <returns>An exposure value, in EV100.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ComputeEV100FromAvgLuminance(System.Single)">
            <summary>
            Computes an exposure value (EV100) from an average luminance value.
            </summary>
            <param name="avgLuminance">An average luminance value.</param>
            <returns>An exposure value, in EV100.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ComputeISO(System.Single,System.Single,System.Single)">
            <summary>
            Computes the required ISO to reach <paramref name="targetEV100"/>.
            </summary>
            <param name="aperture">The camera aperture.</param>
            <param name="shutterSpeed">The camera exposure time.</param>
            <param name="targetEV100">The target exposure value (EV100) to reach.</param>
            <returns>The required sensor sensitivity (ISO).</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ToHex(UnityEngine.Color)">
            <summary>
            Converts a color value to its 32-bit hexadecimal representation.
            </summary>
            <param name="c">The color to convert.</param>
            <returns>A 32-bit hexadecimal representation of the color.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ColorUtils.ToRGBA(System.UInt32)">
            <summary>
            Converts a 32-bit hexadecimal value to a color value.
            </summary>
            <param name="hex">A 32-bit hexadecimal value.</param>
            <returns>A color value.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.CommandBufferPool">
            <summary>
            Command Buffer Pool
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.CommandBufferPool.Get">
            <summary>
            Get a new Command Buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.CommandBufferPool.Get(System.String)">
            <summary>
            Get a new Command Buffer and assign a name to it.
            Named Command Buffers will add profiling makers implicitly for the buffer execution.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.CommandBufferPool.Release(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Release a Command Buffer.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:UnityEngine.Rendering.SphericalHarmonicsL1">
            <summary>
            Structure holding Spherical Harmonic L1 coefficient.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SphericalHarmonicsL1.shAr">
            <summary>
            Red channel of each of the three L1 SH coefficient.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SphericalHarmonicsL1.shAg">
            <summary>
            Green channel of each of the three L1 SH coefficient.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SphericalHarmonicsL1.shAb">
            <summary>
            Blue channel of each of the three L1 SH coefficient.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SphericalHarmonicsL1.zero">
            <summary>
            A set of L1 coefficients initialized to zero.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.op_Addition(UnityEngine.Rendering.SphericalHarmonicsL1,UnityEngine.Rendering.SphericalHarmonicsL1)">
            <summary>
            Sum two SphericalHarmonicsL1.
            </summary>
            <param name="lhs">First SphericalHarmonicsL1.</param>
            <param name="rhs">Second SphericalHarmonicsL1.</param>
            <returns>The resulting SphericalHarmonicsL1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.op_Subtraction(UnityEngine.Rendering.SphericalHarmonicsL1,UnityEngine.Rendering.SphericalHarmonicsL1)">
            <summary>
            Subtract two SphericalHarmonicsL1.
            </summary>
            <param name="lhs">First SphericalHarmonicsL1.</param>
            <param name="rhs">Second SphericalHarmonicsL1.</param>
            <returns>The resulting SphericalHarmonicsL1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.op_Multiply(UnityEngine.Rendering.SphericalHarmonicsL1,System.Single)">
            <summary>
            Multiply two SphericalHarmonicsL1.
            </summary>
            <param name="lhs">First SphericalHarmonicsL1.</param>
            <param name="rhs">Second SphericalHarmonicsL1.</param>
            <returns>The resulting SphericalHarmonicsL1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.op_Division(UnityEngine.Rendering.SphericalHarmonicsL1,System.Single)">
            <summary>
            Divide two SphericalHarmonicsL1.
            </summary>
            <param name="lhs">First SphericalHarmonicsL1.</param>
            <param name="rhs">Second SphericalHarmonicsL1.</param>
            <returns>The resulting SphericalHarmonicsL1.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.op_Equality(UnityEngine.Rendering.SphericalHarmonicsL1,UnityEngine.Rendering.SphericalHarmonicsL1)">
            <summary>
            Compare two SphericalHarmonicsL1.
            </summary>
            <param name="lhs">First SphericalHarmonicsL1.</param>
            <param name="rhs">Second SphericalHarmonicsL1.</param>
            <returns>Whether the SphericalHarmonicsL1 match.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.op_Inequality(UnityEngine.Rendering.SphericalHarmonicsL1,UnityEngine.Rendering.SphericalHarmonicsL1)">
            <summary>
            Check two SphericalHarmonicsL1 inequality.
            </summary>
            <param name="lhs">First SphericalHarmonicsL1.</param>
            <param name="rhs">Second SphericalHarmonicsL1.</param>
            <returns>Whether the SphericalHarmonicsL1 are different.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.Equals(System.Object)">
            <summary>
            Compare this SphericalHarmonicsL1 with an object.
            </summary>
            <param name="other">The object to compare with.</param>
            <returns>Whether the SphericalHarmonicsL1 is equal to the object passed.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL1.GetHashCode">
            <summary>
            Produces an hash code of the SphericalHarmonicsL1.
            </summary>
            <returns>The hash code for this SphericalHarmonicsL1.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.SphericalHarmonicsL2Utils">
            <summary>
            A collection of utility functions used to access and set SphericalHarmonicsL2 in a more verbose way.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.GetL1(UnityEngine.Rendering.SphericalHarmonicsL2,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns the L1 coefficients organized in such a way that are swizzled per channel rather than per coefficient.
            </summary>
            <param name ="sh"> The SphericalHarmonicsL2 data structure to use to query the information.</param>
            <param name ="L1_R">The red channel of all coefficient for the L1 band.</param>
            <param name ="L1_G">The green channel of all coefficient for the L1 band.</param>
            <param name ="L1_B">The blue channel of all coefficient for the L1 band.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.GetL2(UnityEngine.Rendering.SphericalHarmonicsL2,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns all the L2 coefficients.
            </summary>
            <param name ="sh"> The SphericalHarmonicsL2 data structure to use to query the information.</param>
            <param name ="L2_0">The first coefficient for the L2 band.</param>
            <param name ="L2_1">The second coefficient for the L2 band.</param>
            <param name ="L2_2">The third coefficient for the L2 band.</param>
            <param name ="L2_3">The fourth coefficient for the L2 band.</param>
            <param name ="L2_4">The fifth coefficient for the L2 band.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.SetL0(UnityEngine.Rendering.SphericalHarmonicsL2@,UnityEngine.Vector3)">
            <summary>
            Set L0 coefficient.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to store information on.</param>
            <param name ="L0">The L0 coefficient to set.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.SetL1R(UnityEngine.Rendering.SphericalHarmonicsL2@,UnityEngine.Vector3)">
            <summary>
            Set the red channel for each of the L1 coefficients.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to store information on.</param>
            <param name ="L1_R">The red channels for each L1 coefficient.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.SetL1G(UnityEngine.Rendering.SphericalHarmonicsL2@,UnityEngine.Vector3)">
            <summary>
            Set the green channel for each of the L1 coefficients.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to store information on.</param>
            <param name ="L1_G">The green channels for each L1 coefficient.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.SetL1B(UnityEngine.Rendering.SphericalHarmonicsL2@,UnityEngine.Vector3)">
            <summary>
            Set the blue channel for each of the L1 coefficients.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to store information on.</param>
            <param name ="L1_B">The blue channels for each L1 coefficient.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.SetL1(UnityEngine.Rendering.SphericalHarmonicsL2@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set all L1 coefficients per channel.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to store information on.</param>
            <param name ="L1_R">The red channels for each L1 coefficient.</param>
            <param name ="L1_G">The green channels for each L1 coefficient.</param>
            <param name ="L1_B">The blue channels for each L1 coefficient.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.SetCoefficient(UnityEngine.Rendering.SphericalHarmonicsL2@,System.Int32,UnityEngine.Vector3)">
            <summary>
            Set a spherical harmonics coefficient.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to store information on.</param>
            <param name ="index">The index of the coefficient that is set (must be less than 9).</param>
            <param name ="coefficient">The values of the coefficient is set.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2Utils.GetCoefficient(UnityEngine.Rendering.SphericalHarmonicsL2,System.Int32)">
            <summary>
            Get a spherical harmonics coefficient.
            </summary>
            <param name ="sh">The SphericalHarmonicsL2 data structure to get information from.</param>
            <param name ="index">The index of the coefficient that is requested (must be less than 9).</param>
            <returns>The value of the requested coefficient.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.KeyframeUtility">
             <summary>
             A helper function for interpolating AnimationCurves together. In general, curves can not be directly blended
             because they will have keypoints at different places. InterpAnimationCurve traverses through the keypoints.
             If both curves have a keypoint at the same time, they keypoints are trivially lerped together. However
             if one curve has a keypoint at a time that is missing in the other curve (which is the most common case),
             InterpAnimationCurve calculates a synthetic keypoint at that time based on value and derivative, and interpolates
             the resulting keys.
             Note that this function should only be called by internal rendering code. It creates a small pool of animation
             curves and reuses them to avoid creating garbage. The number of curves needed is quite small, since curves only need
             to be used when interpolating multiple volumes together with different curve parameters. The underlying interp
             function isn't allowed to fail, so in the case where we run out of memory we fall back to returning a single keyframe.
             </summary>
            
             <example>Example:
             <code>
             {
                 AnimationCurve curve0 = new AnimationCurve();
                 curve0.AddKey(new Keyframe(0.0f, 3.0f));
                 curve0.AddKey(new Keyframe(4.0f, 2.0f));
            
                 AnimationCurve curve1 = new AnimationCurve();
                 curve1.AddKey(new Keyframe(0.0f, 0.0f));
                 curve1.AddKey(new Keyframe(2.0f, 1.0f));
                 curve1.AddKey(new Keyframe(4.0f, 4.0f));
            
                 float t = 0.5f;
                 KeyframeUtility.InterpAnimationCurve(curve0, curve1, t);
            
                 // curve0 now stores the resulting interpolated curve
             }
             </code>
             </example>
        </member>
        <member name="M:UnityEngine.Rendering.KeyframeUtility.ResetAnimationCurve(UnityEngine.AnimationCurve)">
            <summary>
            Helper function to remove all control points for an animation curve. Since animation curves are reused in a pool,
            this function clears existing keys so the curve is ready for reuse.
            </summary>
            <param name="curve">The curve to reset.</param>
        </member>
        <member name="M:UnityEngine.Rendering.KeyframeUtility.GetKeyframeAndClampEdge(Unity.Collections.NativeArray{UnityEngine.Keyframe},System.Int32)">
            In an animation curve, the inTangent and outTangent don't match the edge of the curve. For example,
            the first key might have inTangent=3.0f but the actual incoming tangent is 0.0 because the curve is
            clamped outside the time domain. So this helper fetches a key, but zeroes out the inTangent of the first
            key and the outTangent of the last key.
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnityEngine.Rendering.KeyframeUtility.FetchKeyFromIndexClampEdge(Unity.Collections.NativeArray{UnityEngine.Keyframe},System.Int32,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:UnityEngine.Rendering.KeyframeUtility.EvalCurveSegmentAndDeriv(System.Single@,System.Single@,UnityEngine.Keyframe,UnityEngine.Keyframe,System.Single)" -->
        <member name="M:UnityEngine.Rendering.KeyframeUtility.EvalKeyAtTime(Unity.Collections.NativeArray{UnityEngine.Keyframe},System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            lhsIndex and rhsIndex are the indices in the keys array. The lhsIndex/rhsIndex may be -1, in which it creates a synthetic first key
            at startTime, or beyond the length of the array, in which case it creates a synthetic key at endTime.
        </member>
        <member name="M:UnityEngine.Rendering.KeyframeUtility.InterpAnimationCurve(UnityEngine.AnimationCurve@,UnityEngine.AnimationCurve,System.Single)">
            <summary>
            Interpolates two AnimationCurves. Since both curves likely have control points at different places
            in the curve, this method will create a new curve from the union of times between both curves. However, to avoid creating
            garbage, this function will always replace the keys of lhsAndResultCurve with the final result, and return lhsAndResultCurve.
            </summary>
            <param name="lhsAndResultCurve">The start value. Additionaly, this instance will be reused and returned as the result.</param>
            <param name="rhsCurve">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="T:UnityEngine.Rendering.CoreMatrixUtils">
            <summary>
            Set of utility functions for the Core Scriptable Render Pipeline Library related to Matrix operations
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.CoreMatrixUtils.MatrixTimesTranslation(UnityEngine.Matrix4x4@,UnityEngine.Vector3)">
            <summary>
            This function provides the equivalent of multiplying matrix parameter inOutMatrix with a translation matrix defined by the parameter translation.
            The order of the equivalent multiplication is inOutMatrix * translation.
            </summary>
            <param name="inOutMatrix">Matrix to multiply with translation.</param>
            <param name="translation">Translation component to multiply to the matrix.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreMatrixUtils.TranslationTimesMatrix(UnityEngine.Matrix4x4@,UnityEngine.Vector3)">
            <summary>
            This function provides the equivalent of multiplying a translation matrix defined by the parameter translation with the matrix specified by the parameter inOutMatrix.
            The order of the equivalent multiplication is translation * inOutMatrix.
            </summary>
            <param name="inOutMatrix">Matrix to multiply with translation.</param>
            <param name="translation">Translation component to multiply to the matrix.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreMatrixUtils.MultiplyPerspectiveMatrix(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Multiplies a matrix with a perspective matrix. This function is faster than performing the full matrix multiplication.
            The operation order is perspective * rhs.
            </summary>
            <param name="perspective">The perspective matrix to multiply with rhs.</param>
            <param name="rhs">A matrix to be multiply to perspective.</param>
            <returns>Returns the matrix that is the result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreMatrixUtils.MultiplyOrthoMatrix(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,System.Boolean)">
            <summary>
            Multiplies a matrix with an orthographic matrix. This function is faster than performing the full matrix multiplication.
            The operation order is ortho * rhs.
            </summary>
            <param name="ortho">The ortho matrix to multiply with rhs.</param>
            <param name="rhs">A matrix to be multiply to perspective.</param>
            <param name="centered">If true, it means that right and left are equivalently distant from center and similarly top/bottom are equivalently distant from center.</param>
            <returns>Returns the matrix that is the result of the multiplication.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreMatrixUtils.MultiplyProjectionMatrix(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,System.Boolean)">
            <summary>
            Multiplies a matrix with a projection matrix. This function is faster than performing the full matrix multiplication.
            The operation order is projMatrix * rhs.
            </summary>
            <param name="projMatrix">The projection matrix to multiply with rhs.</param>
            <param name="rhs">A matrix to be multiply to perspective.</param>
            <param name="orthoCentered">If true, the projection matrix is a centered ( right+left == top+bottom == 0) orthographic projection, otherwise it is a perspective matrix..</param>
            <returns>Returns the matrix that is the result of the multiplication.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.XRGraphics">
            <summary>
            XRGraphics insulates SRP from API changes across platforms, Editor versions, and as XR transitions into XR SDK
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.XRGraphics.StereoRenderingMode">
            <summary>
            Stereo Rendering Modes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.XRGraphics.StereoRenderingMode.MultiPass">
            <summary>Multi Pass.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.XRGraphics.StereoRenderingMode.SinglePass">
            <summary>Single Pass.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.XRGraphics.StereoRenderingMode.SinglePassInstanced">
            <summary>Single Pass Instanced.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.XRGraphics.StereoRenderingMode.SinglePassMultiView">
            <summary>Single Pass Multi View.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.eyeTextureResolutionScale">
            <summary>
            Eye texture resolution scale.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.renderViewportScale">
            <summary>
            Render viewport scale.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.tryEnable">
            <summary>
            Try enable.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.enabled">
            <summary>
            SRP should use this to safely determine whether XR is enabled at runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.isDeviceActive">
            <summary>
            Returns true if the XR device is active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.loadedDeviceName">
            <summary>
            Name of the loaded XR device.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.supportedDevices">
            <summary>
            List of supported XR devices.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.stereoRenderingMode">
            <summary>
            Stereo rendering mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.eyeTextureDesc">
            <summary>
            Eye texture descriptor.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.eyeTextureWidth">
            <summary>
            Eye texture width.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphics.eyeTextureHeight">
            <summary>
            Eye texture height.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumeSceneData">
            <summary> A class containing info about the bounds defined by the probe volumes in various scenes. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ProbeVolumeSceneData.sceneBounds">
            <summary> A dictionary containing the Bounds defined by probe volumes for each scene (scene path is the key of the dictionary). </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumeSceneData.#ctor(UnityEngine.Object,System.String)">
            <summary>
            Constructor for ProbeVolumeSceneData.
            </summary>
            <param name="parentAsset">The asset holding this ProbeVolumeSceneData, it will be dirtied every time scene bounds or settings are changed.</param>
            <param name="parentSceneDataPropertyName">The name of the property holding the ProbeVolumeSceneData in the parentAsset.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumeSceneData.SetParentObject(UnityEngine.Object,System.String)">
            <summary>Set a reference to the object holding this ProbeVolumeSceneData.</summary>
            <param name="parent">The object holding this ProbeVolumeSceneData, it will be dirtied every time scene bounds or settings are changed. </param>
            <param name="parentSceneDataPropertyName">The name of the property holding the ProbeVolumeSceneData in the parentAsset.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumeSceneData.OnAfterDeserialize">
            <summary>
            OnAfterDeserialize implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumeSceneData.OnBeforeSerialize">
            <summary>
            OnBeforeSerialize implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.MSAASamples">
            <summary>
            Number of MSAA samples.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.MSAASamples.None">
            <summary>No MSAA.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.MSAASamples.MSAA2x">
            <summary>MSAA 2X.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.MSAASamples.MSAA4x">
            <summary>MSAA 4X.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.MSAASamples.MSAA8x">
            <summary>MSAA 8X.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.PowerOfTwoTextureAtlas">
            <summary>
            Texture atlas with rectangular power of two size.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.#ctor(System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,System.String,System.Boolean)">
            <summary>
            Create a new texture atlas, must have power of two size.
            </summary>
            <param name="size">The size of the atlas in pixels. Must be power of two.</param>
            <param name="mipPadding">Amount of mip padding in power of two.</param>
            <param name="format">Atlas texture format</param>
            <param name="filterMode">Atlas texture filter mode.</param>
            <param name="name">Name of the atlas</param>
            <param name="useMipMap">Use mip maps</param>
        </member>
        <member name="P:UnityEngine.Rendering.PowerOfTwoTextureAtlas.mipPadding">
            <summary>
            Used mipmap padding size in power of two.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.GetPayloadScaleOffset(UnityEngine.Texture,UnityEngine.Vector4@)">
            <summary>
            Get location of the actual texture data without padding in the atlas.
            </summary>
            <param name="texture">The source texture cached in the atlas.</param>
            <param name="scaleOffset">Cached atlas location (scale and offset) for the source texture.</param>
            <returns>Scale and offset for the source texture without padding.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.GetPayloadScaleOffset(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector4@)">
            <summary>
            Get location of the actual texture data without padding in the atlas.
            </summary>
            <param name="textureSize">Size of the source texture</param>
            <param name="paddingSize">Padding size used for the source texture. </param>
            <param name="scaleOffset">Cached atlas location (scale and offset) for the source texture.</param>
            <returns>Scale and offset for the source texture without padding.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,UnityEngine.Vector4,System.Boolean,System.Int32)">
            <summary>
            Blit texture into the atlas with padding.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.BlitTextureMultiply(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,UnityEngine.Vector4,System.Boolean,System.Int32)">
            <summary>
            Blit texture into the atlas with padding and blending.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.BlitOctahedralTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,UnityEngine.Vector4,System.Boolean,System.Int32)">
            <summary>
            Blit octahedral texture into the atlas with padding.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.BlitOctahedralTextureMultiply(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,UnityEngine.Vector4,System.Boolean,System.Int32)">
            <summary>
            Blit octahedral texture into the atlas with padding.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.AllocateTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4@,UnityEngine.Texture,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocate space from the atlas for a texture and copy texture contents into the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Allocated scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="width">Request width in pixels.</param>
            <param name="height">Request height in pixels.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.ResetRequestedTexture">
            <summary>
            Clear tracked requested textures.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.ReserveSpace(UnityEngine.Texture)">
            <summary>
            Reserves the space on the texture atlas
            </summary>
            <param name="texture">The source texture</param>
            <returns>True if the space is reserved</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.ReserveSpace(UnityEngine.Texture,System.Int32,System.Int32)">
            <summary>
            Reserves the space on the texture atlas
            </summary>
            <param name="texture">The source texture</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <returns>True if the space is reserved</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.ReserveSpace(UnityEngine.Texture,UnityEngine.Texture,System.Int32,System.Int32)">
            <summary>
            Reserves the space on the texture atlas
            </summary>
            <param name="textureA">The source texture A</param>
            <param name="textureB">The source texture B</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <returns>True if the space is reserved</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.ReserveSpace(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reserves the space on the texture atlas
            </summary>
            <param name="id">The id</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <returns>True if the space is reserved</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.RelayoutEntries">
            <summary>
            sort all the requested allocation from biggest to smallest and re-insert them.
            This function does not moves the textures in the atlas, it only changes their coordinates
            </summary>
            <returns>True if all textures have successfully been re-inserted in the atlas</returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.GetApproxCacheSizeInByte(System.Int32,System.Int32,System.Boolean,UnityEngine.Experimental.Rendering.GraphicsFormat)">
            <summary>
            Get cache size in bytes.
            </summary>
            <param name="nbElement"></param>
            <param name="resolution">Atlas resolution (square).</param>
            <param name="hasMipmap">Atlas uses mip maps.</param>
            <param name="format">Atlas format.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.PowerOfTwoTextureAtlas.GetMaxCacheSizeForWeightInByte(System.Int32,System.Boolean,UnityEngine.Experimental.Rendering.GraphicsFormat)">
            <summary>
            Compute the max size of a power of two atlas for a given size in byte (weight).
            </summary>
            <param name="weight">Atlas size in bytes.</param>
            <param name="hasMipmap">Atlas uses mip maps.</param>
            <param name="format">Atlas format.</param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.ObjectPool`1">
            <summary>
            Generic object pool.
            </summary>
            <typeparam name="T">Type of the object pool.</typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.ObjectPool`1.countAll">
            <summary>
            Number of objects in the pool.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ObjectPool`1.countActive">
            <summary>
            Number of active objects in the pool.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ObjectPool`1.countInactive">
            <summary>
            Number of inactive objects in the pool.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObjectPool`1.#ctor(UnityEngine.Events.UnityAction{`0},UnityEngine.Events.UnityAction{`0},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="actionOnGet">Action on get.</param>
            <param name="actionOnRelease">Action on release.</param>
            <param name="collectionCheck">True if collection integrity should be checked.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObjectPool`1.Get">
            <summary>
            Get an object from the pool.
            </summary>
            <returns>A new object from the pool.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ObjectPool`1.PooledObject">
            <summary>
            Pooled object.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObjectPool`1.PooledObject.System#IDisposable#Dispose">
            <summary>
            Disposable pattern implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObjectPool`1.Get(`0@)">
            <summary>
            Get et new PooledObject.
            </summary>
            <param name="v">Output new typed object.</param>
            <returns>New PooledObject</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ObjectPool`1.Release(`0)">
            <summary>
            Release an object to the pool.
            </summary>
            <param name="element">Object to release.</param>
        </member>
        <member name="T:UnityEngine.Rendering.GenericPool`1">
            <summary>
            Generic pool.
            </summary>
            <typeparam name="T">Type of the objects in the pull.</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.GenericPool`1.Get">
            <summary>
            Get a new object.
            </summary>
            <returns>A new object from the pool.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.GenericPool`1.Get(`0@)">
            <summary>
            Get a new PooledObject
            </summary>
            <param name="value">Output typed object.</param>
            <returns>A new PooledObject.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.GenericPool`1.Release(`0)">
            <summary>
            Release an object to the pool.
            </summary>
            <param name="toRelease">Object to release.</param>
        </member>
        <member name="T:UnityEngine.Rendering.UnsafeGenericPool`1">
            <summary>
            Generic pool without collection checks.
            This class is an alternative for the GenericPool for object that allocate memory when they are being compared.
            It is the case for the CullingResult class from Unity, and because of this in HDRP HDCullingResults generates garbage whenever we use ==, .Equals or ReferenceEquals.
            This pool doesn't do any of these comparison because we don't check if the stack already contains the element before releasing it.
            </summary>
            <typeparam name="T">Type of the objects in the pull.</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.UnsafeGenericPool`1.Get">
            <summary>
            Get a new object.
            </summary>
            <returns>A new object from the pool.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UnsafeGenericPool`1.Get(`0@)">
            <summary>
            Get a new PooledObject
            </summary>
            <param name="value">Output typed object.</param>
            <returns>A new PooledObject.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.UnsafeGenericPool`1.Release(`0)">
            <summary>
            Release an object to the pool.
            </summary>
            <param name="toRelease">Object to release.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ListPool`1">
            <summary>
            List Pool.
            </summary>
            <typeparam name="T">Type of the objects in the pooled lists.</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.ListPool`1.Get">
            <summary>
            Get a new List
            </summary>
            <returns>A new List</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ListPool`1.Get(System.Collections.Generic.List{`0}@)">
            <summary>
            Get a new list PooledObject.
            </summary>
            <param name="value">Output typed List.</param>
            <returns>A new List PooledObject.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ListPool`1.Release(System.Collections.Generic.List{`0})">
            <summary>
            Release an object to the pool.
            </summary>
            <param name="toRelease">List to release.</param>
        </member>
        <member name="T:UnityEngine.Rendering.HashSetPool`1">
            <summary>
            HashSet Pool.
            </summary>
            <typeparam name="T">Type of the objects in the pooled hashsets.</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.HashSetPool`1.Get">
            <summary>
            Get a new HashSet
            </summary>
            <returns>A new HashSet</returns>
        </member>
        <member name="M:UnityEngine.Rendering.HashSetPool`1.Get(System.Collections.Generic.HashSet{`0}@)">
            <summary>
            Get a new list PooledObject.
            </summary>
            <param name="value">Output typed HashSet.</param>
            <returns>A new HashSet PooledObject.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.HashSetPool`1.Release(System.Collections.Generic.HashSet{`0})">
            <summary>
            Release an object to the pool.
            </summary>
            <param name="toRelease">hashSet to release.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DictionaryPool`2">
            <summary>
            Dictionary Pool.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.DictionaryPool`2.Get">
            <summary>
            Get a new Dictionary
            </summary>
            <returns>A new Dictionary</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DictionaryPool`2.Get(System.Collections.Generic.Dictionary{`0,`1}@)">
            <summary>
            Get a new dictionary PooledObject.
            </summary>
            <param name="value">Output typed Dictionary.</param>
            <returns>A new Dictionary PooledObject.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DictionaryPool`2.Release(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Release an object to the pool.
            </summary>
            <param name="toRelease">Dictionary to release.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DepthBits">
            <summary>
            Bit depths of a Depth render texture.
            Some values may not be supported on all platforms.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DepthBits.None">
            <summary>No Depth Buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DepthBits.Depth8">
            <summary>8 bits Depth Buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DepthBits.Depth16">
            <summary>16 bits Depth Buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DepthBits.Depth24">
            <summary>24 bits Depth Buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DepthBits.Depth32">
            <summary>32 bits Depth Buffer.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.FreeCamera">
            <summary>
            Utility Free Camera component.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FreeCamera.m_LookSpeedController">
            <summary>
            Rotation speed when using a controller.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FreeCamera.m_LookSpeedMouse">
            <summary>
            Rotation speed when using the mouse.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FreeCamera.m_MoveSpeed">
            <summary>
            Movement speed.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FreeCamera.m_MoveSpeedIncrement">
            <summary>
            Value added to the speed when incrementing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FreeCamera.m_Turbo">
            <summary>
            Scale factor of the turbo mode.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProfilingSampler">
            <summary>
            Wrapper around CPU and GPU profiling samplers.
            Use this along ProfilingScope to profile a piece of code.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSampler.Get``1(``0)">
            <summary>
            Get the sampler for the corresponding enumeration value.
            </summary>
            <typeparam name="TEnum">Type of the enumeration.</typeparam>
            <param name="marker">Enumeration value.</param>
            <returns>The profiling sampler for the given enumeration value.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSampler.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the profiling sampler.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSampler.Begin(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Begin the profiling block.
            </summary>
            <param name="cmd">Command buffer used by the profiling block.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSampler.End(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            End the profiling block.
            </summary>
            <param name="cmd">Command buffer used by the profiling block.</param>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.name">
            <summary>
            Name of the Profiling Sampler
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.enableRecording">
            <summary>
            Set to true to enable recording of profiling sampler timings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.gpuElapsedTime">
            <summary>
            GPU Elapsed time in milliseconds.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.gpuSampleCount">
            <summary>
            Number of times the Profiling Sampler has hit on the GPU
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.cpuElapsedTime">
            <summary>
            CPU Elapsed time in milliseconds (Command Buffer execution).
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.cpuSampleCount">
            <summary>
            Number of times the Profiling Sampler has hit on the CPU in the command buffer.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.inlineCpuElapsedTime">
            <summary>
            CPU Elapsed time in milliseconds (Direct execution).
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ProfilingSampler.inlineCpuSampleCount">
            <summary>
            Number of times the Profiling Sampler has hit on the CPU.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProfilingScope">
            <summary>
            Scoped Profiling markers
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingScope.#ctor(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ProfilingSampler)">
            <summary>
            Profiling Scope constructor
            </summary>
            <param name="cmd">Command buffer used to add markers and compute execution timings.</param>
            <param name="sampler">Profiling Sampler to be used for this scope.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingScope.Dispose">
            <summary>
             Dispose pattern implementation
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProfilingSample">
            <summary>
            Profiling Sampler class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSample.#ctor(UnityEngine.Rendering.CommandBuffer,System.String,UnityEngine.Profiling.CustomSampler)">
            <summary>
            Constructor
            </summary>
            <param name="cmd">Command Buffer.</param>
            <param name="name">Name of the profiling sample.</param>
            <param name="sampler">Custom sampler for CPU profiling.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSample.#ctor(UnityEngine.Rendering.CommandBuffer,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cmd">Command Buffer.</param>
            <param name="format">Formating of the profiling sample.</param>
            <param name="arg">Parameters for formating the name.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSample.#ctor(UnityEngine.Rendering.CommandBuffer,System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="cmd">Command Buffer.</param>
            <param name="format">Formating of the profiling sample.</param>
            <param name="args">Parameters for formating the name.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ProfilingSample.Dispose">
            <summary>
             Dispose pattern implementation
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.IDebugData">
            <summary>
            IDebugData interface.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.IDebugData.GetReset">
            <summary>Get the reset callback for this DebugData</summary>
            <returns>The reset callback</returns>
        </member>
        <member name="T:UnityEngine.Rendering.TextureXR">
            <summary>
            Utility class providing default textures compatible in any XR setup.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.TextureXR.maxViews">
            <summary>
            Maximum number of views handled by the XR system.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.TextureXR.slices">
            <summary>
            Number of slices used by the XR system.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.TextureXR.useTexArray">
            <summary>
            Returns true if the XR system uses texture arrays.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.TextureXR.dimension">
            <summary>
            Dimension of XR textures.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetBlackUIntTexture">
            <summary>
            Default black unsigned integer texture.
            </summary>
            <returns>The default black unsigned integer texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetClearTexture">
            <summary>
            Default clear color (0, 0, 0, 1) texture.
            </summary>
            <returns>The default clear color texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetMagentaTexture">
            <summary>
            Default magenta texture.
            </summary>
            <returns>The default magenta texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetBlackTexture">
            <summary>
            Default black texture.
            </summary>
            <returns>The default black texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetBlackTextureArray">
            <summary>
            Default black texture array.
            </summary>
            <returns>The default black texture array.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetBlackTexture3D">
            <summary>
            Default black texture 3D.
            </summary>
            <returns>The default black texture 3D.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.GetWhiteTexture">
            <summary>
            Default white texture.
            </summary>
            <returns>The default white texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TextureXR.Initialize(UnityEngine.Rendering.CommandBuffer,UnityEngine.ComputeShader)">
            <summary>
            Initialize XR textures. Must be called at least once.
            </summary>
            <param name="cmd">Command Buffer used to initialize textures.</param>
            <param name="clearR32_UIntShader">Compute shader used to intitialize unsigned integer textures.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Blitter">
            <summary>
            Various blit (texture copy) utilities for the Scriptable Render Pipelines.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.Initialize(UnityEngine.Shader,UnityEngine.Shader)">
            <summary>
            Initialize Blitter resources. Must be called once before any use
            </summary>
            <param name="blitPS"></param> Blit shader
            <param name="blitColorAndDepthPS"></param> Blit shader
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.Cleanup">
            <summary>
            Release Blitter resources.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.GetBlitMaterial(UnityEngine.Rendering.TextureDimension,System.Boolean)">
            <summary>
            Returns the default blit material.
            </summary>
            <param name="dimension">Dimension of the texture to blit, either 2D or 2D Array.</param>
            <param name="singleSlice">Blit only a single slice of the array if applicable.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Vector4,System.Single,System.Boolean)">
            <summary>
            Blit a RTHandle texture.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="scaleBias">Scale and bias for sampling the input texture.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitTexture2D(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Vector4,System.Single,System.Boolean)">
            <summary>
            Blit a RTHandle texture 2D.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="scaleBias">Scale and bias for sampling the input texture.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitColorAndDepth(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Vector4,System.Single,System.Boolean)">
            <summary>
            Blit a 2D texture and depth buffer.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="sourceColor">Source Texture for color.</param>
            <param name="sourceDepth">Source RenderTexture for depth.</param>
            <param name="scaleBias">Scale and bias for sampling the input texture.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="blitDepth">Enable depth blit.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Vector4,UnityEngine.Material,System.Int32)">
            <summary>
            Blit a RTHandle texture
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="scaleBias">Scale and bias for sampling the input texture.</param>
            <param name="material">Material to invoke when blitting.</param>
            <param name="pass">Pass idx within the material to invoke.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Vector4,UnityEngine.Material,System.Int32)">
            <summary>
            Blit a RTHandle texture
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source render target.</param>
            <param name="scaleBias">Scale and bias for sampling the input texture.</param>
            <param name="material">Material to invoke when blitting.</param>
            <param name="pass">Pass idx within the material to invoke.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material,System.Int32)">
            <summary>
            Blit a Texture with a specified material. The reference name "_BlitTexture" will be used to bind the input texture.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source render target.</param>
            <param name="destination">Destination render target.</param>
            <param name="material">Material to invoke when blitting.</param>
            <param name="pass">Pass idx within the material to invoke.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Material,System.Int32)">
            <summary>
            Blit a Texture with a specified material. The reference name "_BlitTexture" will be used to bind the input texture.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source render target.</param>
            <param name="destination">Destination render target.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="material">Material to invoke when blitting.</param>
            <param name="pass">Pass idx within the material to invoke.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCameraTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,System.Single,System.Boolean)">
            <summary>
            Blit a RTHandle to another RTHandle.
            This will properly account for partial usage (in term of resolution) of the texture for the current viewport.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="destination">Destination RTHandle.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCameraTexture2D(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,System.Single,System.Boolean)">
            <summary>
            Blit a RThandle Texture2D RTHandle to another RTHandle.
            This will properly account for partial usage (in term of resolution) of the texture for the current viewport.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="destination">Destination RTHandle.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCameraTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Material,System.Int32)">
            <summary>
            Blit a RTHandle to another RTHandle.
            This will properly account for partial usage (in term of resolution) of the texture for the current viewport.
            This overloads allows the user to override the default blit shader
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="destination">Destination RTHandle.</param>
            <param name="material">The material to use when blitting</param>
            <param name="pass">pass to use of the provided material</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCameraTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Material,System.Int32)">
            <summary>
            Blit a RTHandle to another RTHandle.
            This will properly account for partial usage (in term of resolution) of the texture for the current viewport.
            This overloads allows the user to override the default blit shader
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="destination">Destination RTHandle.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="material">The material to use when blitting</param>
            <param name="pass">pass to use of the provided material</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCameraTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Vector4,System.Single,System.Boolean)">
            <summary>
            Blit a RTHandle to another RTHandle.
            This will properly account for partial usage (in term of resolution) of the texture for the current viewport.
            This overload allows user to override the scale and bias used when sampling the input RTHandle.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="destination">Destination RTHandle.</param>
            <param name="scaleBias">Scale and bias used to sample the input RTHandle.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCameraTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Rect,System.Single,System.Boolean)">
            <summary>
            Blit a RTHandle to another RTHandle.
            This will properly account for partial usage (in term of resolution) of the texture for the current viewport.
            This overload allows user to override the viewport of the destination RTHandle.
            </summary>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="source">Source RTHandle.</param>
            <param name="destination">Destination RTHandle.</param>
            <param name="destViewport">Viewport of the destination RTHandle.</param>
            <param name="mipLevel">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitQuad(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector4,UnityEngine.Vector4,System.Int32,System.Boolean)">
            <summary>
            Blit a texture using a quad in the current render target.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="scaleBiasTex">Scale and bias for the input texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitQuadWithPadding(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector2,UnityEngine.Vector4,UnityEngine.Vector4,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Blit a texture using a quad in the current render target.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="textureSize">Source texture size.</param>
            <param name="scaleBiasTex">Scale and bias for sampling the input texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
            <param name="paddingInPixels">Padding in pixels.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitQuadWithPaddingMultiply(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector2,UnityEngine.Vector4,UnityEngine.Vector4,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Blit a texture using a quad in the current render target, by performing an alpha blend with the existing content on the render target.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="textureSize">Source texture size.</param>
            <param name="scaleBiasTex">Scale and bias for sampling the input texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
            <param name="paddingInPixels">Padding in pixels.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitOctahedralWithPadding(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector2,UnityEngine.Vector4,UnityEngine.Vector4,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Blit a texture (which is a Octahedral projection) using a quad in the current render target.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="textureSize">Source texture size.</param>
            <param name="scaleBiasTex">Scale and bias for sampling the input texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
            <param name="paddingInPixels">Padding in pixels.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitOctahedralWithPaddingMultiply(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector2,UnityEngine.Vector4,UnityEngine.Vector4,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Blit a texture (which is a Octahedral projection) using a quad in the current render target, by performing an alpha blend with the existing content on the render target.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="textureSize">Source texture size.</param>
            <param name="scaleBiasTex">Scale and bias for sampling the input texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
            <param name="paddingInPixels">Padding in pixels.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCubeToOctahedral2DQuad(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector4,System.Int32)">
            <summary>
            Blit a cube texture into 2d texture as octahedral quad. (projection)
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source cube texture.</param>
            <param name="mipLevelTex">Mip level to sample.</param>
            /// <param name="scaleBiasRT">Scale and bias for the output texture.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCubeToOctahedral2DQuadWithPadding(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector2,UnityEngine.Vector4,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Blit a cube texture into 2d texture as octahedral quad with padding. (projection)
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source cube texture.</param>
            <param name="textureSize">Source texture size.</param>
            <param name="mipLevelTex">Mip level to sample.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="bilinear">Enable bilinear filtering.</param>
            <param name="paddingInPixels">Padding in pixels.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitCubeToOctahedral2DQuadSingleChannel(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector4,System.Int32)">
            <summary>
            Blit a cube texture into 2d texture as octahedral quad. (projection)
            Conversion between single and multi channel formats.
            RGB(A) to YYYY (luminance).
            R to RRRR.
            A to AAAA.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Blitter.BlitQuadSingleChannel(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector4,UnityEngine.Vector4,System.Int32)">
            <summary>
            Bilinear Blit a texture using a quad in the current render target.
            Conversion between single and multi channel formats.
            RGB(A) to YYYY (luminance).
            R to RRRR.
            A to AAAA.
            </summary>
            <param name="cmd">Command buffer used for rendering.</param>
            <param name="source">Source texture.</param>
            <param name="scaleBiasTex">Scale and bias for the input texture.</param>
            <param name="scaleBiasRT">Scale and bias for the output texture.</param>
            <param name="mipLevelTex">Mip level to blit.</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugDisplaySettings`1">
            <summary>
            Templated class for <see cref="T:UnityEngine.Rendering.IDebugDisplaySettings"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UnityEngine.Rendering.DebugDisplaySettings`1.m_Settings">
            <summary>
            The set of <see cref="T:UnityEngine.Rendering.IDebugDisplaySettingsData"/> containing the settings for this debug display
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettings`1.Instance">
            <summary>
            The singleton instance that contains the current settings of Rendering Debugger.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettings`1.AreAnySettingsActive">
            <summary>
            Returns true if any of the debug settings are currently active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettings`1.IsPostProcessingAllowed">
            <summary>
            Checks whether the current state of these settings allows post-processing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettings`1.IsLightingActive">
            <summary>
            Returns true if lighting is active for current state of debug settings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettings`1.Add``1(``0)">
            <summary>
            Adds a new <see cref="!:TData"/> to this settings
            </summary>
            <typeparam name="TData">The type of <see cref="!:TData"/> to be added</typeparam>
            <param name="newData">The <see cref="!:TData"/> to be added</param>
            <returns>The type of <see cref="!:TData"/> that has been added</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettings`1.ForEach(System.Action{UnityEngine.Rendering.IDebugDisplaySettingsData})">
            <summary>
            Executes an action for each element
            </summary>
            <param name="onExecute"></param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettings`1.Reset">
            <summary>
            Reset the stored debug settings
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettings`1.TryGetScreenClearColor(UnityEngine.Color@)">
            <summary>
            Attempts to get the color that should be used to clear the screen according to current debug settings.
            </summary>
            <param name="color">A reference to the screen clear color to use.</param>
            <returns>True if the color reference was updated, and false otherwise.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.CameraCaptureBridge">
            <summary>
            Bridge class for camera captures.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CameraCaptureBridge.enabled">
            <summary>
            Enable camera capture.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.CameraCaptureBridge.GetCaptureActions(UnityEngine.Camera)">
            <summary>
            Provides the set actions to the renderer to be triggered at the end of the render loop for camera capture
            </summary>
            <param name="camera">The camera to get actions for</param>
            <returns>Enumeration of actions</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CameraCaptureBridge.AddCaptureAction(UnityEngine.Camera,System.Action{UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.CommandBuffer})">
            <summary>
            Adds actions for camera capture
            </summary>
            <param name="camera">The camera to add actions for</param>
            <param name="action">The action to add</param>
        </member>
        <member name="M:UnityEngine.Rendering.CameraCaptureBridge.RemoveCaptureAction(UnityEngine.Camera,System.Action{UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.CommandBuffer})">
            <summary>
            Removes actions for camera capture
            </summary>
            <param name="camera">The camera to remove actions for</param>
            <param name="action">The action to remove</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugDisplaySettingsUI">
            <summary>
            The UI implementation for a debug settings panel
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsUI.RegisterDebug(UnityEngine.Rendering.IDebugDisplaySettings)">
            <summary>
            Register a display for the UI
            </summary>
            <param name="settings"><see cref="T:UnityEngine.Rendering.IDebugDisplaySettings"/> to be registered</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsUI.UnregisterDebug">
            <summary>
            Unregister the debug panels
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsUI.GetReset">
            <summary>
            The reset action to be executed when a Reset of the rendering debugger is need
            </summary>
            <returns>A <see cref="T:System.Action"/> with the restet callback</returns>
        </member>
        <member name="T:UnityEngine.Rendering.SwapCollectionExtensions">
            <summary>
            A set of extension methods for collections
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SwapCollectionExtensions.TrySwap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Exception@)">
            <summary>
            Tries to remove a range of elements from the list in the given range.
            </summary>
            <param name="list">The list to remove the range</param>
            <param name="from">From index</param>
            <param name="to">To index</param>
            <param name="error">The exception raised by the implementation</param>
            <typeparam name="TValue">The value type stored on the list</typeparam>
            <returns>True if succeed, false otherwise</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ListChangedEventArgs`1">
            <summary>
            On List Changed Event Args.
            </summary>
            <typeparam name="T">List type.</typeparam>
        </member>
        <member name="F:UnityEngine.Rendering.ListChangedEventArgs`1.index">
            <summary>
            Index
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ListChangedEventArgs`1.item">
            <summary>
            Item
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ListChangedEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Constructor.
            </summary>
            <param name="index">Index</param>
            <param name="item">Item</param>
        </member>
        <member name="T:UnityEngine.Rendering.ListChangedEventHandler`1">
            <summary>
            List changed event handler.
            </summary>
            <typeparam name="T">List type.</typeparam>
            <param name="sender">Sender.</param>
            <param name="e">List changed even arguments.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ObservableList`1">
            <summary>
            Observable list.
            </summary>
            <typeparam name="T">Type of the list.</typeparam>
        </member>
        <member name="E:UnityEngine.Rendering.ObservableList`1.ItemAdded">
            <summary>
            Added item event.
            </summary>
        </member>
        <member name="E:UnityEngine.Rendering.ObservableList`1.ItemRemoved">
            <summary>
            Removed item event.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ObservableList`1.Item(System.Int32)">
            <summary>
            Accessor.
            </summary>
            <param name="index">Item index.</param>
            <returns>The item at the provided index.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.ObservableList`1.Count">
            <summary>
            Number of elements in the list.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ObservableList`1.IsReadOnly">
            <summary>
            Is the list read only?
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">Allocation size.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="collection">Input list.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Contains(`0)">
            <summary>
            Check if an element is present in the list.
            </summary>
            <param name="item">Item to test against.</param>
            <returns>True if the item is in the list.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.IndexOf(`0)">
            <summary>
            Get the index of an item.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of the item in the list if it exists, -1 otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Add(`0)">
            <summary>
            Add an item to the list.
            </summary>
            <param name="item">Item to add to the list.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Add(`0[])">
            <summary>
            Add multiple objects to the list.
            </summary>
            <param name="items">Items to add to the list.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item in the list.
            </summary>
            <param name="index">Index at which to insert the new item.</param>
            <param name="item">Item to insert in the list.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Remove(`0)">
            <summary>
            Remove an item from the list.
            </summary>
            <param name="item">Item to remove from the list.</param>
            <returns>True if the item was successfuly removed. False otherise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Remove(`0[])">
            <summary>
            Remove multiple items from the list.
            </summary>
            <param name="items">Items to remove from the list.</param>
            <returns>The number of removed items.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Remove an item at a specific index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.Clear">
            <summary>
            Clear the list.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items in the list to an array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Starting index.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>The list enumerator.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.ObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns>The list enumerator.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IDebugDisplaySettings">
            <summary>
            Interface for storing the debug settings
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.IDebugDisplaySettings.Reset">
            <summary>
            Reset the stored debug settings
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.IDebugDisplaySettings.ForEach(System.Action{UnityEngine.Rendering.IDebugDisplaySettingsData})">
            <summary>
            Executes an action for each element
            </summary>
            <param name="onExecute"></param>
        </member>
        <member name="T:UnityEngine.Rendering.SRPLensFlareBlendMode">
            <summary>
            SRPLensFlareBlendMode defined the available blend mode for each LensFlareElement
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareBlendMode.Additive">
            <summary>
            Additive: Blend One One
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareBlendMode.Screen">
            <summary>
            Screen:
                Blend One OneMinusSrcColor
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareBlendMode.Premultiply">
            <summary>
            Premultiply:
                Blend One OneMinusSrcAlpha
                ColorMask RGB
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareBlendMode.Lerp">
            <summary>
            Lerp: Blend SrcAlpha OneMinusSrcAlpha
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.SRPLensFlareDistribution">
            <summary>
            SRPLensFlareDistribution defined how we spread the flare element when count > 1
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareDistribution.Uniform">
            <summary>
            Uniformly spread
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareDistribution.Curve">
            <summary>
            Controlled with curved
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareDistribution.Random">
            <summary>
            Random distribution
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.SRPLensFlareType">
            <summary>
            SRPLensFlareType which can be an image of a procedural shape
            If change order or add new member, need to update preview
            shader: LensFlareDataDrivenPreview.shader
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareType.Image">
            <summary>
            Image from a file or a RenderTexture
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareType.Circle">
            <summary>
            Procedural Circle
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SRPLensFlareType.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.LensFlareDataElementSRP">
            <summary>
            LensFlareDataElementSRP defines collection of parameters describing the behavior a Lens Flare Element.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareDataElementSRP.#ctor">
            <summary> Initialize default values </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.visible">
            <summary> Visibility checker for current element </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.position">
            <summary> Position </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.positionOffset">
            <summary> Position offset </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.angularOffset">
            <summary> Angular offset </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.translationScale">
            <summary> Translation Scale </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.localIntensity">
            <summary> Intensity of this element </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.lensFlareTexture">
            <summary> Texture used to for this Lens Flare Element </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.uniformScale">
            <summary> Uniform scale applied </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.sizeXY">
            <summary> Scale size on each dimension </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.allowMultipleElement">
            <summary> Enable multiple elements </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.count">
            <summary> Element can be repeated 'count' times </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.preserveAspectRatio">
            <summary> Preserve  Aspect Ratio </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.rotation">
            <summary> Local rotation of the texture </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.tint">
            <summary> Tint of the texture can be modulated by the light we are attached to </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.blendMode">
            <summary> Blend mode used </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.autoRotate">
            <summary> Rotate the texture relative to the angle on the screen (the rotation will be added to the parameter 'rotation') </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.flareType">
            <summary> FlareType used </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.modulateByLightColor">
            <summary>  Modulate by light color if the asset is used in a 'SRP Lens Flare Source Override' </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.isFoldOpened">
            <summary> Internal value use to store the state of minimized or maximized LensFlareElement </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.distribution">
            <summary> SRPLensFlareDistribution defined how we spread the flare element when count > 1 </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.lengthSpread">
            <summary> Length to spread the distribution of flares, spread start at 'starting position' </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.positionCurve">
            <summary> Curve describing how to place flares distribution (Used only for Uniform and Curve 'distribution') </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.scaleCurve">
            <summary> Curve describing how to scale flares distribution (Used only for Uniform and Curve 'distribution') </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.seed">
            <summary> Seed used to seed randomness </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.colorGradient">
            <summary> Colors used uniformly for Uniform or Curve Distribution and Random when the distribution is 'Random'. </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.intensityVariation">
            <summary> Scale factor applied on the variation of the intensities. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.positionVariation">
            <summary> Scale factor applied on the variation of the positions. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.scaleVariation">
            <summary> Coefficient applied on the variation of the scale (relative to the current scale). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.rotationVariation">
            <summary> Scale factor applied on the variation of the rotation (relative to the current rotation or auto-rotate). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.enableRadialDistortion">
            <summary> True to use or not the radial distortion. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.targetSizeDistortion">
            <summary> Target size used on the edge of the screen. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.distortionCurve">
            <summary> Curve blending from screen center to the edges of the screen. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.distortionRelativeToCenter">
            <summary> If true the distortion is relative to center of the screen otherwise relative to lensFlare source screen position. </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.fallOff">
            <summary> Fall of the gradient used for the Procedural Flare. </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.edgeOffset">
            <summary> Gradient Offset used for the Procedural Flare. </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.sideCount">
            <summary> Side count of the regular polygon generated. </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareDataElementSRP.sdfRoundness">
            <summary> Roundness of the polygon flare (0: Sharp Polygon, 1: Circle). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.inverseSDF">
            <summary> Inverse the gradient direction. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.uniformAngle">
            <summary> Uniform angle (in degrees) used with multiple element enabled with Uniform distribution. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataElementSRP.uniformAngleCurve">
            <summary> Uniform angle (remap from -180.0f to 180.0f) used with multiple element enabled with Curve distribution. </summary>
        </member>
        <member name="T:UnityEngine.Rendering.LensFlareDataSRP">
            <summary> LensFlareDataSRP defines a Lens Flare with a set of LensFlareDataElementSRP </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareDataSRP.#ctor">
            <summary> Initialize default value </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareDataSRP.elements">
            <summary> List of LensFlareDataElementSRP </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugProbeShadingMode">
            <summary>
            Modes for Debugging Probes
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.SH">
            <summary>
            Based on Spherical Harmonics
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.SHL0">
            <summary>
            Based on Spherical Harmonics first band only (ambient)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.SHL0L1">
            <summary>
            Based on Spherical Harmonics band zero and one only
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.Validity">
            <summary>
            Based on validity
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.ValidityOverDilationThreshold">
            <summary>
            Based on validity over a dilation threshold
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.InvalidatedByTouchupVolumes">
            <summary>
            Show in red probes that have been made invalid by touchup volumes. Important to note that this debug view will only show result for volumes still present in the scene.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DebugProbeShadingMode.Size">
            <summary>
            Based on size
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ClearFlag">
            <summary>
            Render Textures clear flag.
            This is an legacy alias for RTClearFlags.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.None">
            <summary>Don't clear.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.Color">
            <summary>Clear the color buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.Depth">
            <summary>Clear the depth buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.Stencil">
            <summary>Clear the stencil buffer.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.DepthStencil">
            <summary>Clear the depth and stencil buffers.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.ColorStencil">
            <summary>Clear the color and stencil buffers.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClearFlag.All">
            <summary>Clear both color, depth and stencil buffers.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.DelegateUtility">
            <summary>
            Delegate utility class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DelegateUtility.Cast(System.Delegate,System.Type)">
            <summary>
            Cast a delegate.
            </summary>
            <param name="source">Source delegate.</param>
            <param name="type">Type of the delegate.</param>
            <returns>Cast delegate.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IDebugDisplaySettingsPanel">
            <summary>
            Debug UI panel
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IDebugDisplaySettingsPanel.PanelName">
            <summary>
            The name used when displaying this panel.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IDebugDisplaySettingsPanel.Widgets">
            <summary>
            Widgets used by this panel.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IDebugDisplaySettingsPanel.Flags">
            <summary>
            Flags to be applied to the top-level panel.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.IDebugDisplaySettingsPanelDisposable">
            <summary>
            Debug UI panel disposable
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.MaterialQuality">
            <summary>
            Material quality flags.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.MaterialQuality.Low">
            <summary>Low Material Quality.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.MaterialQuality.Medium">
            <summary>Medium Material Quality.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.MaterialQuality.High">
            <summary>High Material Quality.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.MaterialQualityUtilities">
            <summary>
            Material Quality utility class.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.MaterialQualityUtilities.KeywordNames">
            <summary>
            Keywords strings for Material Quality levels.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.MaterialQualityUtilities.EnumNames">
            <summary>
            String representation of the MaterialQuality enum.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.MaterialQualityUtilities.Keywords">
            <summary>
            Keywords for Material Quality levels.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialQualityUtilities.GetHighestQuality(UnityEngine.Rendering.MaterialQuality)">
            <summary>
            Returns the highest available quality level in a MaterialQuality bitfield.
            </summary>
            <param name="levels">Input MaterialQuality bitfield.</param>
            <returns>The highest available quality level.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialQualityUtilities.GetClosestQuality(UnityEngine.Rendering.MaterialQuality,UnityEngine.Rendering.MaterialQuality)">
            <summary>
            Returns the closest available quality level in a MaterialQuality bitfield.
            </summary>
            <param name="availableLevels">Available MaterialQuality bitfield.</param>
            <param name="requestedLevel">Input MaterialQuality level.</param>
            <returns>The closest available quality level.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialQualityUtilities.SetGlobalShaderKeywords(UnityEngine.Rendering.MaterialQuality)">
            <summary>
            Set the global keyword for the provided MaterialQuality.
            </summary>
            <param name="level">MaterialQuality level to set the keyword for.</param>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialQualityUtilities.SetGlobalShaderKeywords(UnityEngine.Rendering.MaterialQuality,UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Set the global keyword for the provided MaterialQuality.
            </summary>
            <param name="level">MaterialQuality level to set the keyword for.</param>
            <param name="cmd">Command Buffer used to setup the keyword.</param>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialQualityUtilities.ToFirstIndex(UnityEngine.Rendering.MaterialQuality)">
            <summary>
            Returns the index (in the MaterialQuality enum) of the first available level.
            </summary>
            <param name="level">MaterialQuality bitfield.</param>
            <returns>The index of the first available level.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialQualityUtilities.FromIndex(System.Int32)">
            <summary>
            Returns the enum equivalent of the index in the MaterialQuality enum list.
            </summary>
            <param name="index">Index of the material quality.</param>
            <returns>The equivalent enum.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.FrameTimeSample">
            <summary>
            Represents timing data captured from a single frame.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.FrameTimeSampleHistory">
            <summary>
            Container class for sample history with helpers to calculate min, max and average in one pass.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.BufferedRTHandleSystem">
             <summary>
             Implement a multiple buffering for RenderTextures.
             </summary>
             <exemple>
             <code>
             enum BufferType
             {
                 Color,
                 Depth
             }
            
             void Render()
             {
                 var camera = GetCamera();
                 var buffers = GetFrameHistoryBuffersFor(camera);
            
                 // Set reference size in case the rendering size changed this frame
                 buffers.SetReferenceSize(
                     GetCameraWidth(camera), GetCameraHeight(camera),
                     GetCameraUseMSAA(camera), GetCameraMSAASamples(camera)
                 );
                 buffers.Swap();
            
                 var currentColor = buffer.GetFrameRT((int)BufferType.Color, 0);
                 if (currentColor == null) // Buffer was not allocated
                 {
                     buffer.AllocBuffer(
                         (int)BufferType.Color,      // Color buffer id
                         ColorBufferAllocator,       // Custom functor to implement allocation
                         2                           // Use 2 RT for this buffer for double buffering
                     );
                     currentColor = buffer.GetFrameRT((int)BufferType.Color, 0);
                 }
            
                 var previousColor = buffers.GetFrameRT((int)BufferType.Color, 1);
            
                 // Use previousColor and write into currentColor
             }
             </code>
             </exemple>
        </member>
        <member name="P:UnityEngine.Rendering.BufferedRTHandleSystem.maxWidth">
            <summary>
            Maximum allocated width of the Buffered RTHandle System
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BufferedRTHandleSystem.maxHeight">
            <summary>
            Maximum allocated height of the Buffered RTHandle System
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.BufferedRTHandleSystem.rtHandleProperties">
            <summary>
            Current properties of the Buffered RTHandle System
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.GetFrameRT(System.Int32,System.Int32)">
            <summary>
            Return the frame RT or null.
            </summary>
            <param name="bufferId">Defines the buffer to use.</param>
            <param name="frameIndex"></param>
            <returns>The frame RT or null when the <paramref name="bufferId"/> was not previously allocated (<see cref="M:UnityEngine.Rendering.BufferedRTHandleSystem.AllocBuffer(System.Int32,System.Func{UnityEngine.Rendering.RTHandleSystem,System.Int32,UnityEngine.Rendering.RTHandle},System.Int32)" />).</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.AllocBuffer(System.Int32,System.Func{UnityEngine.Rendering.RTHandleSystem,System.Int32,UnityEngine.Rendering.RTHandle},System.Int32)">
            <summary>
            Allocate RT handles for a buffer.
            </summary>
            <param name="bufferId">The buffer to allocate.</param>
            <param name="allocator">The functor to use for allocation.</param>
            <param name="bufferCount">The number of RT handles for this buffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.ReleaseBuffer(System.Int32)">
            <summary>
            Release a buffer
            </summary>
            <param name="bufferId">Id of the buffer that needs to be released.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.SwapAndSetReferenceSize(System.Int32,System.Int32)">
            <summary>
            Swap buffers Set the reference size for this RT Handle System (<see cref="M:UnityEngine.Rendering.RTHandleSystem.SetReferenceSize(System.Int32,System.Int32,System.Boolean)"/>)
            </summary>
            <param name="width">The width of the RTs of this buffer.</param>
            <param name="height">The height of the RTs of this buffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.ResetReferenceSize(System.Int32,System.Int32)">
            <summary>
            Reset the reference size of the system and reallocate all textures.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.GetNumFramesAllocated(System.Int32)">
            <summary>
            Queries the number of RT handle buffers allocated for a buffer ID.
            </summary>
            <param name="bufferId">The buffer ID to query.</param>
            <returns>The num of frames allocated</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.CalculateRatioAgainstMaxSize(System.Int32,System.Int32)">
            <summary>
            Returns the ratio against the current target's max resolution
            </summary>
            <param name="width">width to utilize</param>
            <param name="height">height to utilize</param>
            <returns> retruns the width,height / maxTargetSize.xy ratio. </returns>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.Dispose">
            <summary>
            Dispose implementation
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.BufferedRTHandleSystem.ReleaseAll">
            <summary>
            Deallocate and clear all buffers.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ScaleFunc">
            <summary>
            Scaled function used to compute the size of a RTHandle for the current frame.
            </summary>
            <param name="size">Reference size of the RTHandle system for the frame.</param>
            <returns>The size of the RTHandled computed from the reference size.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.RTHandleProperties">
            <summary>
            List of properties of the RTHandle System for the current frame.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.RTHandleProperties.previousViewportSize">
            <summary>
            Size set as reference at the previous frame
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.RTHandleProperties.previousRenderTargetSize">
            <summary>
            Size of the render targets at the previous frame
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.RTHandleProperties.currentViewportSize">
            <summary>
            Size set as reference at the current frame
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.RTHandleProperties.currentRenderTargetSize">
            <summary>
            Size of the render targets at the current frame
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.RTHandleProperties.rtHandleScale">
            <summary>
            Scale factor from RTHandleSystem max size to requested reference size (referenceSize/maxSize)
            (x,y) current frame (z,w) last frame (this is only used for buffered RTHandle Systems)
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.RTHandleSystem">
            <summary>
            System managing a set of RTHandle textures
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandleSystem.rtHandleProperties">
            <summary>
            Current properties of the RTHandle System.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.#ctor">
            <summary>
            RTHandleSystem constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Dispose">
            <summary>
            Disposable pattern implementation
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Initialize(System.Int32,System.Int32)">
            <summary>
            Initialize the RTHandle system.
            </summary>
            <param name="width">Initial reference rendering width.</param>
            <param name="height">Initial reference rendering height.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Release(UnityEngine.Rendering.RTHandle)">
            <summary>
            Release memory of a RTHandle from the RTHandle System
            </summary>
            <param name="rth">RTHandle that should be released.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.ResetReferenceSize(System.Int32,System.Int32)">
            <summary>
            Reset the reference size of the system and reallocate all textures.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.SetReferenceSize(System.Int32,System.Int32)">
            <summary>
            Sets the reference rendering size for subsequent rendering for the RTHandle System
            </summary>
            <param name="width">Reference rendering width for subsequent rendering.</param>
            <param name="height">Reference rendering height for subsequent rendering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.SetReferenceSize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the reference rendering size for subsequent rendering for the RTHandle System
            </summary>
            <param name="width">Reference rendering width for subsequent rendering.</param>
            <param name="height">Reference rendering height for subsequent rendering.</param>
            <param name="reset">If set to true, the new width and height will override the old values even if they are not bigger.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.SetHardwareDynamicResolutionState(System.Boolean)">
            <summary>
            Enable or disable hardware dynamic resolution for the RTHandle System
            </summary>
            <param name="enableHWDynamicRes">State of hardware dynamic resolution.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.GetMaxWidth">
            <summary>
            Returns the maximum allocated width of the RTHandle System.
            </summary>
            <returns>Maximum allocated width of the RTHandle System.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.GetMaxHeight">
            <summary>
            Returns the maximum allocated height of the RTHandle System.
            </summary>
            <returns>Maximum allocated height of the RTHandle System.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new fixed sized RTHandle.
            </summary>
            <param name="width">With of the RTHandle.</param>
            <param name="height">Heigh of the RTHandle.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples for the RTHandle.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(System.Int32,System.Int32,UnityEngine.TextureWrapMode,UnityEngine.TextureWrapMode,UnityEngine.TextureWrapMode,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new fixed sized RTHandle.
            </summary>
            <param name="width">With of the RTHandle.</param>
            <param name="height">Heigh of the RTHandle.</param>
            <param name="wrapModeU">U coordinate wrapping mode of the RTHandle.</param>
            <param name="wrapModeV">V coordinate wrapping mode of the RTHandle.</param>
            <param name="wrapModeW">W coordinate wrapping mode of the RTHandle.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples for the RTHandle.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(UnityEngine.Vector2,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new automatically sized RTHandle.
            </summary>
            <param name="scaleFactor">Constant scale for the RTHandle size computation.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>A new RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(UnityEngine.Rendering.ScaleFunc,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new automatically sized RTHandle.
            </summary>
            <param name="scaleFunc">Function used for the RTHandle size computation.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>A new RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(UnityEngine.RenderTexture)">
            <summary>
            Allocate a RTHandle from a regular RenderTexture.
            </summary>
            <param name="texture">Input texture</param>
            <returns>A new RTHandle referencing the input texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(UnityEngine.Texture)">
            <summary>
            Allocate a RTHandle from a regular Texture.
            </summary>
            <param name="texture">Input texture</param>
            <returns>A new RTHandle referencing the input texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Allocate a RTHandle from a regular render target identifier.
            </summary>
            <param name="texture">Input render target identifier.</param>
            <returns>A new RTHandle referencing the input render target identifier.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandleSystem.Alloc(UnityEngine.Rendering.RenderTargetIdentifier,System.String)">
            <summary>
            Allocate a RTHandle from a regular render target identifier.
            </summary>
            <param name="texture">Input render target identifier.</param>
            <param name="name">Name of the texture.</param>
            <returns>A new RTHandle referencing the input render target identifier.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ConstantBuffer">
            <summary>
            Constant Buffer management class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.PushGlobal``1(UnityEngine.Rendering.CommandBuffer,``0@,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it globally via a command buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="data">Input data of the constant buffer.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.PushGlobal``1(``0@,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it globally.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="data">Input data of the constant buffer.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Push``1(UnityEngine.Rendering.CommandBuffer,``0@,UnityEngine.ComputeShader,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it to a compute shader via a command buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="data">Input data of the constant buffer.</param>
            <param name="cs">Compute shader to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Push``1(``0@,UnityEngine.ComputeShader,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it to a compute shader.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="data">Input data of the constant buffer.</param>
            <param name="cs">Compute shader to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Push``1(UnityEngine.Rendering.CommandBuffer,``0@,UnityEngine.Material,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it to a material via a command buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="data">Input data of the constant buffer.</param>
            <param name="mat">Material to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Push``1(``0@,UnityEngine.Material,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it to a material.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="data">Input data of the constant buffer.</param>
            <param name="mat">Material to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.UpdateData``1(UnityEngine.Rendering.CommandBuffer,``0@)">
            <summary>
            Update the GPU data of the constant buffer via a command buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="data">Input data of the constant buffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.UpdateData``1(``0@)">
            <summary>
            Update the GPU data of the constant buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="data">Input data of the constant buffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.SetGlobal``1(UnityEngine.Rendering.CommandBuffer,System.Int32)">
            <summary>
            Bind the constant buffer globally via a command buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.SetGlobal``1(System.Int32)">
            <summary>
            Bind the constant buffer globally.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Set``1(UnityEngine.Rendering.CommandBuffer,UnityEngine.ComputeShader,System.Int32)">
            <summary>
            Bind the constant buffer to a compute shader via a command buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="cs">Compute shader to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Set``1(UnityEngine.ComputeShader,System.Int32)">
            <summary>
            Bind the constant buffer to a compute shader.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="cs">Compute shader to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.Set``1(UnityEngine.Material,System.Int32)">
            <summary>
            Bind the constant buffer to a material.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
            <param name="mat">Material to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer.ReleaseAll">
            <summary>
            Release all currently allocated singleton constant buffers.
            This needs to be called before shutting down the application.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ConstantBufferBase">
            <summary>
            The base class of Constant Buffer.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBufferBase.Release">
            <summary>
            Release the constant buffer.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ConstantBuffer`1">
            <summary>
            An instance of a constant buffer.
            </summary>
            <typeparam name="CBType">The type of structure representing the constant buffer data.</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.#ctor">
            <summary>
            Constant Buffer constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.UpdateData(UnityEngine.Rendering.CommandBuffer,`0@)">
            <summary>
            Update the GPU data of the constant buffer via a command buffer.
            </summary>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="data">Input data of the constant buffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.UpdateData(`0@)">
            <summary>
            Update the GPU data of the constant buffer.
            </summary>
            <param name="data">Input data of the constant buffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.SetGlobal(UnityEngine.Rendering.CommandBuffer,System.Int32)">
            <summary>
            Bind the constant buffer globally via a command buffer.
            </summary>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.SetGlobal(System.Int32)">
            <summary>
            Bind the constant buffer globally.
            </summary>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.Set(UnityEngine.Rendering.CommandBuffer,UnityEngine.ComputeShader,System.Int32)">
            <summary>
            Bind the constant buffer to a compute shader via a command buffer.
            </summary>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="cs">Compute shader to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.Set(UnityEngine.ComputeShader,System.Int32)">
            <summary>
            Bind the constant buffer to a compute shader.
            </summary>
            <param name="cs">Compute shader to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.Set(UnityEngine.Material,System.Int32)">
            <summary>
            Bind the constant buffer to a material.
            </summary>
            <param name="mat">Material to which the constant buffer should be bound.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.PushGlobal(UnityEngine.Rendering.CommandBuffer,`0@,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it globally via a command buffer.
            </summary>
            <param name="cmd">Command Buffer used to execute the graphic commands.</param>
            <param name="data">Input data of the constant buffer.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.PushGlobal(`0@,System.Int32)">
            <summary>
            Update the GPU data of the constant buffer and bind it globally.
            </summary>
            <param name="data">Input data of the constant buffer.</param>
            <param name="shaderId">Shader porperty id to bind the constant buffer to.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ConstantBuffer`1.Release">
            <summary>
            Release the constant buffers.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.XRGraphicsAutomatedTests">
            <summary>
            Utility class to connect SRP to automated test framework.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.XRGraphicsAutomatedTests.enabled">
            <summary>
            Used by render pipelines to initialize XR tests.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.XRGraphicsAutomatedTests.running">
            <summary>
            Set by automated test framework and read by render pipelines.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.RTHandles">
            <summary>
            Default instance of a RTHandleSystem
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandles.maxWidth">
            <summary>
            Maximum allocated width of the default RTHandle System
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandles.maxHeight">
            <summary>
            Maximum allocated height of the default RTHandle System
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RTHandles.rtHandleProperties">
            <summary>
            Current properties of the default RTHandle System
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new fixed sized RTHandle with the default RTHandle System.
            </summary>
            <param name="width">With of the RTHandle.</param>
            <param name="height">Heigh of the RTHandle.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples for the RTHandle.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(System.Int32,System.Int32,UnityEngine.TextureWrapMode,UnityEngine.TextureWrapMode,UnityEngine.TextureWrapMode,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new fixed sized RTHandle with the default RTHandle System.
            </summary>
            <param name="width">With of the RTHandle.</param>
            <param name="height">Heigh of the RTHandle.</param>
            <param name="wrapModeU">U coordinate wrapping mode of the RTHandle.</param>
            <param name="wrapModeV">V coordinate wrapping mode of the RTHandle.</param>
            <param name="wrapModeW">W coordinate wrapping mode of the RTHandle.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples for the RTHandle.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            Allocate a new fixed sized RTHandle with the default RTHandle System.
            </summary>
            <param name="descriptor">RenderTexture descriptor of the RTHandle.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>A new RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Vector2,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new automatically sized RTHandle for the default RTHandle System.
            </summary>
            <param name="scaleFactor">Constant scale for the RTHandle size computation.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>A new RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Vector2,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            Allocate a new automatically sized RTHandle for the default RTHandle System.
            </summary>
            <param name="scaleFactor">Constant scale for the RTHandle size computation.</param>
            <param name="descriptor">RenderTexture descriptor of the RTHandle.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>A new RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Rendering.ScaleFunc,System.Int32,UnityEngine.Rendering.DepthBits,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,UnityEngine.Rendering.TextureDimension,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Single,UnityEngine.Rendering.MSAASamples,System.Boolean,System.Boolean,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.String)">
            <summary>
            Allocate a new automatically sized RTHandle for the default RTHandle System.
            </summary>
            <param name="scaleFunc">Function used for the RTHandle size computation.</param>
            <param name="slices">Number of slices of the RTHandle.</param>
            <param name="depthBufferBits">Bit depths of a depth buffer.</param>
            <param name="colorFormat">GraphicsFormat of a color buffer.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="dimension">Texture dimension of the RTHandle.</param>
            <param name="enableRandomWrite">Set to true to enable UAV random read writes on the texture.</param>
            <param name="useMipMap">Set to true if the texture should have mipmaps.</param>
            <param name="autoGenerateMips">Set to true to automatically generate mipmaps.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <param name="bindTextureMS">Set to true if the texture needs to be bound as a multisampled texture in the shader.</param>
            <param name="useDynamicScale">Set to true to use hardware dynamic scaling.</param>
            <param name="memoryless">Use this property to set the render texture memoryless modes.</param>
            <param name="vrUsage">Special treatment of the VR eye texture used in stereoscopic rendering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Rendering.ScaleFunc,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            Allocate a new automatically sized RTHandle for the default RTHandle System.
            </summary>
            <param name="scaleFunc">Function used for the RTHandle size computation.</param>
            <param name="descriptor">RenderTexture descriptor of the RTHandle.</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>A new RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Texture)">
            <summary>
            Allocate a RTHandle from a regular Texture for the default RTHandle system.
            </summary>
            <param name="tex">Input texture</param>
            <returns>A new RTHandle referencing the input texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.RenderTexture)">
            <summary>
            Allocate a RTHandle from a regular RenderTexture for the default RTHandle system.
            </summary>
            <param name="tex">Input texture</param>
            <returns>A new RTHandle referencing the input texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Allocate a RTHandle from a regular render target identifier for the default RTHandle system.
            </summary>
            <param name="tex">Input render target identifier.</param>
            <returns>A new RTHandle referencing the input render target identifier.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Alloc(UnityEngine.Rendering.RenderTargetIdentifier,System.String)">
            <summary>
            Allocate a RTHandle from a regular render target identifier for the default RTHandle system.
            </summary>
            <param name="tex">Input render target identifier.</param>
            <param name="name">Name of the render target.</param>
            <returns>A new RTHandle referencing the input render target identifier.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Initialize(System.Int32,System.Int32)">
            <summary>
            Initialize the default RTHandle system.
            </summary>
            <param name="width">Initial reference rendering width.</param>
            <param name="height">Initial reference rendering height.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.Release(UnityEngine.Rendering.RTHandle)">
            <summary>
            Release memory of a RTHandle from the default RTHandle System
            </summary>
            <param name="rth">RTHandle that should be released.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.SetHardwareDynamicResolutionState(System.Boolean)">
            <summary>
            Enable or disable hardware dynamic resolution for the default RTHandle System
            </summary>
            <param name="hwDynamicResRequested">State of hardware dynamic resolution.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.SetReferenceSize(System.Int32,System.Int32)">
            <summary>
            Sets the reference rendering size for subsequent rendering for the default RTHandle System
            </summary>
            <param name="width">Reference rendering width for subsequent rendering.</param>
            <param name="height">Reference rendering height for subsequent rendering.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.ResetReferenceSize(System.Int32,System.Int32)">
            <summary>
            Reset the reference size of the system and reallocate all textures.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RTHandles.CalculateRatioAgainstMaxSize(System.Int32,System.Int32)">
            <summary>
            Returns the ratio against the current target's max resolution
            </summary>
            <param name="width">width to utilize</param>
            <param name="height">height to utilize</param>
            <returns> retruns the width,height / maxTargetSize.xy ratio. </returns>
        </member>
        <member name="T:UnityEngine.Rendering.IVolumeDebugSettings">
            <summary>
            Volume debug settings.
            This variant is obsolete and kept only for not breaking user code. Use <see cref="T:UnityEngine.Rendering.IVolumeDebugSettings2"/> for all new usage.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedComponent">
            <summary>Selected component.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedCamera">
            <summary>Current camera to debug.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.cameras">
            <summary>Returns the collection of registered cameras.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedCameraIndex">
            <summary>Selected camera index.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedCameraVolumeStack">
            <summary>Selected camera volume stack.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedCameraLayerMask">
            <summary>Selected camera volume layer mask.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedCameraPosition">
            <summary>Selected camera volume position.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings.selectedComponentType">
            <summary>Type of the current component to debug.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.IVolumeDebugSettings.GetVolumes">
            <summary>
            Obtains the Volumes
            </summary>
            <returns>The list of <see cref="T:UnityEngine.Rendering.Volume"/></returns>
        </member>
        <member name="M:UnityEngine.Rendering.IVolumeDebugSettings.VolumeHasInfluence(UnityEngine.Rendering.Volume)">
            <summary>
            Return if the <see cref="T:UnityEngine.Rendering.Volume"/> has influence
            </summary>
            <param name="volume"><see cref="T:UnityEngine.Rendering.Volume"/> to check the influence</param>
            <returns>If the volume has influence</returns>
        </member>
        <member name="M:UnityEngine.Rendering.IVolumeDebugSettings.RefreshVolumes(UnityEngine.Rendering.Volume[])">
            <summary>
            Refreshes the volumes, fetches the stored volumes on the panel
            </summary>
            <param name="newVolumes">The list of <see cref="T:UnityEngine.Rendering.Volume"/> to refresh</param>
            <returns>If the volumes have been refreshed</returns>
        </member>
        <member name="M:UnityEngine.Rendering.IVolumeDebugSettings.GetVolumeWeight(UnityEngine.Rendering.Volume)">
            <summary>
            Obtains the volume weight
            </summary>
            <param name="volume"><see cref="T:UnityEngine.Rendering.Volume"/></param>
            <returns>The weight of the volume</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IVolumeDebugSettings2">
            <summary>
            Volume debug settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings2.targetRenderPipeline">
            <summary>
            Specifies the render pipelie
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVolumeDebugSettings2.volumeComponentsPathAndType">
            <summary>List of Volume component types and their path</summary>
        </member>
        <member name="T:UnityEngine.Rendering.IVirtualTexturingEnabledRenderPipeline">
            <summary>
            By implementing this interface, a render pipeline can indicate to external code it supports virtual texturing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IVirtualTexturingEnabledRenderPipeline.virtualTexturingEnabled">
            <summary>
            Indicates if virtual texturing is currently enabled for this render pipeline instance.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.PackingRules">
            <summary>
            Packing Rules for structs.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingRules.Exact">
            <summary>
            Exact Packing
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingRules.Aggressive">
            <summary>
            Aggressive Packing
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.FieldPacking">
            <summary>
            Field packing scheme.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPacking.NoPacking">
            <summary>
            No Packing
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPacking.R11G11B10">
            <summary>
            R11G11B10 Packing
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPacking.PackedFloat">
            <summary>
            Packed Float
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPacking.PackedUint">
            <summary>
            Packed UInt
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.FieldPrecision">
            <summary>
            Field Precision
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPrecision.Half">
            <summary>
            Half Precision
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPrecision.Real">
            <summary>
            Real Precision
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FieldPrecision.Default">
            <summary>
            Default Precision
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.GenerateHLSL">
            <summary>
            Attribute specifying that HLSL code should be generated.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.packingRules">
            <summary>
            Packing rules for the struct.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.containsPackedFields">
            <summary>
            Structure contains packed fields.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.needAccessors">
            <summary>
            Structure needs generated accessors.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.needSetters">
            <summary>
            Structure needs generated setters.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.needParamDebug">
            <summary>
            Structure needs generated debug defines and functions.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.paramDefinesStart">
            <summary>
            Start value of generated defines.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.omitStructDeclaration">
            <summary>
            Generate structure declaration or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.generateCBuffer">
            <summary>
            Generate constant buffer declaration or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.constantRegister">
            <summary>
            If specified, when generating a constant buffer, use this explicit register.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GenerateHLSL.sourcePath">
            <summary>
            Path of the generated file
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.GenerateHLSL.#ctor(UnityEngine.Rendering.PackingRules,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            GenerateHLSL attribute constructor.
            </summary>
            <param name="rules">Packing rules.</param>
            <param name="needAccessors">Need accessors.</param>
            <param name="needSetters">Need setters.</param>
            <param name="needParamDebug">Need debug defines.</param>
            <param name="paramDefinesStart">Start value of debug defines.</param>
            <param name="omitStructDeclaration">Omit structure declaration.</param>
            <param name="containsPackedFields">Contains packed fields.</param>
            <param name="generateCBuffer">Generate a constant buffer.</param>
            <param name="constantRegister">When generating a constant buffer, specify the optional constant register.</param>
            <param name="sourcePath">Location of the source file defining the C# type. (Automatically filled by compiler)</param>
        </member>
        <member name="T:UnityEngine.Rendering.SurfaceDataAttributes">
            <summary>
            Attribute specifying the parameters of a surface data field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SurfaceDataAttributes.displayNames">
            <summary>
            Display names overrides for the field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SurfaceDataAttributes.isDirection">
            <summary>
            True if the field is a direction.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SurfaceDataAttributes.sRGBDisplay">
            <summary>
            True if the field is an sRGB value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SurfaceDataAttributes.precision">
            <summary>
            Field precision.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SurfaceDataAttributes.checkIsNormalized">
            <summary>
            Field is a normalized vector.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SurfaceDataAttributes.preprocessor">
            <summary>
            If not empty, add a preprocessor #if / #endif with the string provided around the generated hlsl code
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SurfaceDataAttributes.#ctor(System.String,System.Boolean,System.Boolean,UnityEngine.Rendering.FieldPrecision,System.Boolean,System.String)">
            <summary>
            SurfaceDataAttributes constructor.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="isDirection">Field is a direction.</param>
            <param name="sRGBDisplay">Field is an sRGB value.</param>
            <param name="precision">Field precision.</param>
            <param name="checkIsNormalized">Field checkIsNormalized.</param>
            <param name="preprocessor">Field preprocessor.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SurfaceDataAttributes.#ctor(System.String[],System.Boolean,System.Boolean,UnityEngine.Rendering.FieldPrecision,System.Boolean,System.String)">
            <summary>
            SurfaceDataAttributes constructor.
            </summary>
            <param name="displayNames">List of names for the field.</param>
            <param name="isDirection">Field is a direction.</param>
            <param name="sRGBDisplay">Field is an sRGB value.</param>
            <param name="precision">Field precision.</param>
            <param name="checkIsNormalized">Field checkIsNormalized.</param>
            <param name="preprocessor">Field preprocessor.</param>
        </member>
        <member name="T:UnityEngine.Rendering.HLSLArray">
            <summary>
            Attribute defining an HLSL array.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HLSLArray.arraySize">
            <summary>
            Size of the array.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HLSLArray.elementType">
            <summary>
            Type of the array elements.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.HLSLArray.#ctor(System.Int32,System.Type)">
            <summary>
            HLSLSArray constructor.
            </summary>
            <param name="arraySize">Size of the array.</param>
            <param name="elementType">Type of the array elements.</param>
        </member>
        <member name="T:UnityEngine.Rendering.PackingAttribute">
            <summary>
            Attribute defining packing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.displayNames">
            <summary>
            Display names.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.range">
            <summary>
            Minimum and Maximum value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.packingScheme">
            <summary>
            Packing scheme.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.offsetInSource">
            <summary>
            Offset in source.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.sizeInBits">
            <summary>
            Size in bits.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.isDirection">
            <summary>
            True if the field is a direction.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.sRGBDisplay">
            <summary>
            True if the field is an sRGB value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.checkIsNormalized">
            <summary>
            True if the field is an sRGB value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.PackingAttribute.preprocessor">
            <summary>
            If not empty, add a preprocessor #if / #endif with the string provided around the generated hlsl code
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.PackingAttribute.#ctor(System.String[],UnityEngine.Rendering.FieldPacking,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Packing Attribute constructor.
            </summary>
            <param name="displayNames">Display names.</param>
            <param name="packingScheme">Packing scheme.</param>
            <param name="bitSize">Size in bits.</param>
            <param name="offsetInSource">Offset in source.</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="isDirection">Field is a direction.</param>
            <param name="sRGBDisplay">Field is an sRGB value.</param>
            <param name="checkIsNormalized">Field checkIsNormalized.</param>
            <param name="preprocessor">Field preprocessor.</param>
        </member>
        <member name="M:UnityEngine.Rendering.PackingAttribute.#ctor(System.String,UnityEngine.Rendering.FieldPacking,System.Int32,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Packing Attribute constructor.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="packingScheme">Packing scheme.</param>
            <param name="bitSize">Size in bits.</param>
            <param name="offsetInSource">Offset in source.</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="isDirection">Field is a direction.</param>
            <param name="sRGBDisplay">Field is an sRGB value.</param>
            <param name="checkIsNormalized">Field checkIsNormalized.</param>
            <param name="preprocessor">Field preprocessor.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ShaderGenUInt4">
            <summary>
            This type needs to be used when generating unsigned integer arrays for constant buffers.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicResolutionType">
            <summary>
            Types of dynamic resolution that can be requested. Note that if Hardware is selected, but not available on the platform, the system will fallback to Software.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResolutionType.Software">
            <summary>
            Software dynamic resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResolutionType.Hardware">
            <summary>
            Hardware dynamic resolution.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DynamicResUpscaleFilter">
            <summary>
            Types of filters that can be used to upscale rendered result to native resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResUpscaleFilter.Bilinear">
            <summary>
            Bilinear upscaling filter. Obsolete and not supported.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResUpscaleFilter.CatmullRom">
            <summary>
            Bicubic Catmull-Rom upscaling filter.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResUpscaleFilter.Lanczos">
            <summary>
            Lanczos upscaling filter. Obsolete and not supported.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResUpscaleFilter.ContrastAdaptiveSharpen">
            <summary>
            Contrast Adaptive Sharpening upscaling filter.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResUpscaleFilter.EdgeAdaptiveScalingUpres">
            <summary>
            FidelityFX Super Resolution 1.0
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DynamicResUpscaleFilter.TAAU">
            <summary>
            Temporal Upscaling.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.GlobalDynamicResolutionSettings">
            <summary>User-facing settings for dynamic resolution.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.GlobalDynamicResolutionSettings.NewDefault">
            <summary>Default GlobalDynamicResolutionSettings</summary>
            <returns></returns>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.enabled">
            <summary>Select whether the dynamic resolution is enabled or not.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.useMipBias">
            <summary>Offsets the mip bias to recover mode detail. This only works if the camera is utilizing TAA.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.enableDLSS">
            <summary>Toggle NVIDIA Deep Learning Super Sampling (DLSS).</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.DLSSPerfQualitySetting">
            <summary>Opaque quality setting of NVIDIA Deep Learning Super Sampling (DLSS). Use the system enum UnityEngine.NVIDIA.DLSSQuality to set the quality.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.DLSSInjectionPoint">
            <summary>The injection point at which to apply DLSS upscaling.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.DLSSUseOptimalSettings">
            <summary>Toggle NVIDIA Deep Learning Super Sampling (DLSS) automatic recommendation system for scaling and sharpness.
            If this is on, the manually established scale callback for Dynamic Resolution Scaling is ignored. The sharpness setting of DLSS is also ignored.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.DLSSSharpness">
            <summary>Pixel sharpness of NVIDIA Deep Leraning Super Sampling (DLSS).</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.fsrOverrideSharpness">
            <summary>Toggle sharpness override for AMD FidelityFX Super Resolution (FSR).
            If this is on, a sharpness value specified by the user will be used instead of the default.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.fsrSharpness">
            <summary>Pixel sharpness of AMD FidelityFX Super Resolution (FSR).</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.maxPercentage">
            <summary>The maximum resolution percentage that dynamic resolution can reach.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.minPercentage">
            <summary>The minimum resolution percentage that dynamic resolution can reach.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.dynResType">
            <summary>The type of dynamic resolution method.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.upsampleFilter">
            <summary>The default of upscaling filter used. It can be overridden via the API DynamicResolutionHandler.SetUpscaleFilter </summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.forceResolution">
            <summary>Select whether dynamic resolution system will force a specific resolution percentage.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.forcedPercentage">
            <summary>The resolution percentage forced in case forceResolution is set to true.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.lowResTransparencyMinimumThreshold">
            <summary>The minimum percentage threshold allowed to clamp low resolution transparency. When the resolution percentage falls below this threshold, HDRP will clamp the low resolution to this percentage.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.GlobalDynamicResolutionSettings.rayTracingHalfResThreshold">
            <summary>The minimum percentage threshold allowed to render ray tracing effects at half resolution. When the resolution percentage falls below this threshold, HDRP will render ray tracing effects at full resolution.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.HableCurve">
            <summary>
            An implementation of Hable's artist-friendly tonemapping curve.
            http://filmicworlds.com/blog/filmic-tonemapping-with-piecewise-power-curves/
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.HableCurve.Segment">
            <summary>
            Individual curve segment.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.Segment.offsetX">
            <summary>
            The offset of the segment on the X axis.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.Segment.offsetY">
            <summary>
            The offset of the segment on the Y axis.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.Segment.scaleX">
            <summary>
            The scale of the segment on the X axis.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.Segment.scaleY">
            <summary>
            The scale of the segment on the Y axis.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.Segment.lnA">
            <summary>
            <c>ln(A)</c> constant in the power curve <c>y = e^(ln(A) + B*ln(x))</c>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.Segment.B">
            <summary>
            <c>B</c> constant in the power curve <c>y = e^(ln(A) + B*ln(x))</c>.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.HableCurve.Segment.Eval(System.Single)">
            <summary>
            Evaluate a point on the curve.
            </summary>
            <param name="x">The point to evaluate.</param>
            <returns>The value of the curve, at the point specified.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.whitePoint">
            <summary>
            The white point.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.inverseWhitePoint">
            <summary>
            The inverse of the white point.
            </summary>
            <seealso cref="P:UnityEngine.Rendering.HableCurve.whitePoint"/>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.x0">
            <summary>
            The start of the linear section (middle segment of the curve).
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.x1">
            <summary>
            The end of the linear section (middle segment of the curve).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.segments">
            <summary>
            The three segments of the curve.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.HableCurve.#ctor">
            <summary>
            Creates a new curve.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.HableCurve.Eval(System.Single)">
            <summary>
            Evaluates a point on the curve.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.HableCurve.Init(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes the curve.
            </summary>
            <param name="toeStrength">The strength of the transition between the curve's toe and the curve's mid-section. A value of 0 results in no transition and a value of 1 results in a very hard transition.</param>
            <param name="toeLength">The length of the curve's toe. Higher values result in longer toes and therefore contain more of the dynamic range.</param>
            <param name="shoulderStrength">The strength of the transition between the curve's midsection and the curve's shoulder. A value of 0 results in no transition and a value of 1 results in a very hard transition.</param>
            <param name="shoulderLength">The amount of f-stops to add to the dynamic range of the curve. This is how much of the highlights that the curve takes into account.</param>
            <param name="shoulderAngle">How much overshoot to add to the curve's shoulder.</param>
            <param name="gamma">A gamma correction to the entire curve.</param>
        </member>
        <member name="T:UnityEngine.Rendering.HableCurve.Uniforms">
            <summary>
            An utility class to ease the binding of curve parameters to shaders.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.curve">
            <summary>
            Main curve settings, stored as <c>(inverseWhitePoint, x0, x1, 0)</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.toeSegmentA">
            <summary>
            Toe segment settings, stored as <c>(offsetX, offsetY, scaleX, scaleY)</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.toeSegmentB">
            <summary>
            Toe segment settings, stored as <c>(ln1, B, 0, 0)</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.midSegmentA">
            <summary>
            Mid segment settings, stored as <c>(offsetX, offsetY, scaleX, scaleY)</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.midSegmentB">
            <summary>
            Mid segment settings, stored as <c>(ln1, B, 0, 0)</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.shoSegmentA">
            <summary>
            Shoulder segment settings, stored as <c>(offsetX, offsetY, scaleX, scaleY)</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.HableCurve.Uniforms.shoSegmentB">
            <summary>
            Shoulder segment settings, stored as <c>(ln1, B, 0, 0)</c>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HableCurve.uniforms">
            <summary>
            An instance of the <see cref="T:UnityEngine.Rendering.HableCurve.Uniforms"/> utility class for this curve.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Volume">
            <summary>
            A generic Volume component holding a <see cref="T:UnityEngine.Rendering.VolumeProfile"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Volume.isGlobal">
            <summary>
            Specifies whether to apply the Volume to the entire Scene or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Volume.priority">
            <summary>
            A value which determines which Volume is being used when Volumes have an equal amount of influence on the Scene. Volumes with a higher priority will override lower ones.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Volume.blendDistance">
            <summary>
            The outer distance to start blending from. A value of 0 means no blending and Unity applies
            the Volume overrides immediately upon entry.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Volume.weight">
            <summary>
            The total weight of this volume in the Scene. 0 means no effect and 1 means full effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Volume.sharedProfile">
            <summary>
            The shared Profile that this Volume uses.
            Modifying <c>sharedProfile</c> changes every Volumes that uses this Profile and also changes
            the Profile settings stored in the Project.
            </summary>
            <remarks>
            You should not modify Profiles that <c>sharedProfile</c> returns. If you want
            to modify the Profile of a Volume, use <see cref="P:UnityEngine.Rendering.Volume.profile"/> instead.
            </remarks>
            <seealso cref="P:UnityEngine.Rendering.Volume.profile"/>
        </member>
        <member name="P:UnityEngine.Rendering.Volume.profile">
            <summary>
            Gets the first instantiated <see cref="T:UnityEngine.Rendering.VolumeProfile"/> assigned to the Volume.
            Modifying <c>profile</c> changes the Profile for this Volume only. If another Volume
            uses the same Profile, this clones the shared Profile and starts using it from now on.
            </summary>
            <remarks>
            This property automatically instantiates the Profile and make it unique to this Volume
            so you can safely edit it via scripting at runtime without changing the original Asset
            in the Project.
            Note that if you pass your own Profile, you must destroy it when you finish using it.
            </remarks>
            <seealso cref="F:UnityEngine.Rendering.Volume.sharedProfile"/>
        </member>
        <member name="P:UnityEngine.Rendering.Volume.colliders">
            <summary>
            The colliders of the volume if <see cref="P:UnityEngine.Rendering.Volume.isGlobal"/> is false
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Volume.HasInstantiatedProfile">
            <summary>
            Checks if the Volume has an instantiated Profile or if it uses a shared Profile.
            </summary>
            <returns><c>true</c> if the profile has been instantiated.</returns>
            <seealso cref="P:UnityEngine.Rendering.Volume.profile"/>
            <seealso cref="F:UnityEngine.Rendering.Volume.sharedProfile"/>
        </member>
        <member name="T:UnityEngine.Rendering.DebugDisplaySettingsVolume">
            <summary>
            Debug Dispaly Settings Volume
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsVolume.volumeDebugSettings">
            <summary>Current volume debug settings.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsVolume.#ctor(UnityEngine.Rendering.IVolumeDebugSettings2)">
            <summary>
            Constructor with the settings
            </summary>
            <param name="volumeDebugSettings"></param>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsVolume.AreAnySettingsActive">
            <summary>
            Checks whether ANY of the debug settings are currently active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsVolume.IsPostProcessingAllowed">
            <summary>
            Checks whether the current state of these settings allows post-processing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsVolume.IsLightingActive">
            <summary>
            Checks whether lighting is active for these settings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsVolume.TryGetScreenClearColor(UnityEngine.Color@)">
            <summary>
            Attempts to get the color used to clear the screen for this debug setting.
            </summary>
            <param name="color">A reference to the screen clear color to use.</param>
            <returns>"true" if we updated the color, "false" if we didn't change anything.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsVolume.CreatePanel">
            <summary>
            Creates the panel
            </summary>
            <returns>The panel</returns>
        </member>
        <member name="T:UnityEngine.Rendering.HaltonSequence">
            <summary>
            An utility class to compute samples on the Halton sequence.
            https://en.wikipedia.org/wiki/Halton_sequence
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.HaltonSequence.Get(System.Int32,System.Int32)">
            <summary>
            Gets a deterministic sample in the Halton sequence.
            </summary>
            <param name="index">The index in the sequence.</param>
            <param name="radix">The radix of the sequence.</param>
            <returns>A sample from the Halton sequence.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreRenderPipelinePreferences.RegisterPreferenceColor(System.String,UnityEngine.Color)">
            <summary>
            Adds a <see cref="T:UnityEditor.PrefColor"/> into the **Preferences > Colors** panel./>
            </summary>
            <param name="name">The name the color has in the **Colors** panel. This is in the format of 'group/name'.</param>
            <param name="defaultColor">The initial color to use for the new entry in the **Colors** panel. This is also the value Unity uses when it resets the colors to their defaults.</param>
        </member>
        <member name="T:UnityEngine.Rendering.SerializedDictionary`2">
            <summary>
            Unity can't serialize Dictionary so here's a custom wrapper that does. Note that you have to
            extend it before it can be serialized as Unity won't serialized generic-based types either.
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value</typeparam>
            <example>
            public sealed class MyDictionary : SerializedDictionary&lt;KeyType, ValueType&gt; {}
            </example>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`2.SerializeKey(`0)">
            <summary>
            Conversion to serialize a key
            </summary>
            <param name="key">The key to serialize</param>
            <returns>The Key that has been serialized</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`2.SerializeValue(`1)">
            <summary>
            Conversion to serialize a value
            </summary>
            <param name="val">The value</param>
            <returns>The value</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`2.DeserializeKey(`0)">
            <summary>
            Conversion to serialize a key
            </summary>
            <param name="key">The key to serialize</param>
            <returns>The Key that has been serialized</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`2.DeserializeValue(`1)">
            <summary>
            Conversion to serialize a value
            </summary>
            <param name="val">The value</param>
            <returns>The value</returns>
        </member>
        <member name="T:UnityEngine.Rendering.SerializedDictionary`4">
            <summary>
            Dictionary that can serialize keys and values as other types
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
            <typeparam name="SK">The type which the key will be serialized for</typeparam>
            <typeparam name="SV">The type which the value will be serialized for</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`4.SerializeKey(`0)">
            <summary>
            From <see cref="!:K"/> to <see cref="!:SK"/>
            </summary>
            <param name="key">They key in <see cref="!:K"/></param>
            <returns>The key in <see cref="!:SK"/></returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`4.SerializeValue(`1)">
            <summary>
            From <see cref="!:V"/> to <see cref="!:SV"/>
            </summary>
            <param name="value">The value in <see cref="!:V"/></param>
            <returns>The value in <see cref="!:SV"/></returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`4.DeserializeKey(`2)">
            <summary>
            From <see cref="!:SK"/> to <see cref="!:K"/>
            </summary>
            <param name="serializedKey">They key in <see cref="!:SK"/></param>
            <returns>The key in <see cref="!:K"/></returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`4.DeserializeValue(`3)">
            <summary>
            From <see cref="!:SV"/> to <see cref="!:V"/>
            </summary>
            <param name="serializedValue">The value in <see cref="!:SV"/></param>
            <returns>The value in <see cref="!:V"/></returns>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`4.OnBeforeSerialize">
            <summary>
            OnBeforeSerialize implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SerializedDictionary`4.OnAfterDeserialize">
            <summary>
            OnAfterDeserialize implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeParameter">
            <summary>
            The base class for all parameters types stored in a <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.VolumeParameter`1"/>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeParameter.k_DebuggerDisplay">
            <summary>
            A beautified string for debugger output. This is set on a <c>DebuggerDisplay</c> on every
            parameter types.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeParameter.m_OverrideState">
            <summary>
            The current override state for this parameter. The Volume system considers overriden parameters
            for blending, and ignores non-overriden ones.
            </summary>
            <seealso cref="P:UnityEngine.Rendering.VolumeParameter.overrideState"/>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeParameter.overrideState">
            <summary>
            The current override state for this parameter. The Volume system considers overriden parameters
            for blending, and ignores non-overriden ones.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the override state
            changes.
            </remarks>
            <seealso cref="F:UnityEngine.Rendering.VolumeParameter.m_OverrideState"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter.GetValue``1">
            <summary>
            Casts and gets the typed value of this parameter.
            </summary>
            <typeparam name="T">The type of the value stored in this parameter</typeparam>
            <returns>A value of type <typeparamref name="T"/>.</returns>
            <remarks>
            This method is unsafe and does not do any type checking.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter.SetValue(UnityEngine.Rendering.VolumeParameter)">
            <summary>
            Sets the value of this parameter to the value in <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:UnityEngine.Rendering.VolumeParameter"/> to copy the value from.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter.OnEnable">
            <summary>
            Unity calls this method when the parent <see cref="T:UnityEngine.Rendering.VolumeComponent"/> loads.
            </summary>
            <remarks>
            Use this if you need to access fields and properties that you can not access in
            the constructor of a <c>ScriptableObject</c>. (<see cref="T:UnityEngine.Rendering.VolumeParameter"/> are
            generally declared and initialized in a <see cref="T:UnityEngine.Rendering.VolumeComponent"/>, which is a
            <c>ScriptableObject</c>). Unity calls this right after it constructs the parent
            <see cref="T:UnityEngine.Rendering.VolumeComponent"/>, thus allowing access to previously
            inaccessible fields and properties.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter.OnDisable">
            <summary>
            Unity calls this method when the parent <see cref="T:UnityEngine.Rendering.VolumeComponent"/> goes out of scope.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter.IsObjectParameter(System.Type)">
            <summary>
            Checks if a given type is an <see cref="T:UnityEngine.Rendering.ObjectParameter`1"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if <paramref name="type"/> is an <see cref="T:UnityEngine.Rendering.ObjectParameter`1"/>,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter.Release">
            <summary>
            Override this method to free all allocated resources
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeParameter`1">
             <summary>
             A generic implementation of <see cref="T:UnityEngine.Rendering.VolumeParameter"/>. Custom parameters should derive
             from this class and implement their own behavior.
             </summary>
             <typeparam name="T">The type of value to hold in this parameter.</typeparam>
             <remarks>
             <typeparamref name="T"/> should a serializable type.
             Due to limitations with the serialization system in Unity, you should not use this class
             directly to declare parameters in a <see cref="T:UnityEngine.Rendering.VolumeComponent"/>. Instead, use one of the
             pre-flatten types (like <see cref="T:UnityEngine.Rendering.FloatParameter"/>, or make your own by extending this
             class.
             </remarks>
             <example>
             This sample code shows how to make a custom parameter holding a <c>float</c>:
             <code>
             using UnityEngine.Rendering;
            
             [Serializable]
             public sealed class MyFloatParameter : VolumeParameter&lt;float&gt;
             {
                 public MyFloatParameter(float value, bool overrideState = false)
                     : base(value, overrideState) { }
            
                 public sealed override void Interp(float from, float to, float t)
                 {
                     m_Value = from + (to - from) * t;
                 }
             }
             </code>
             </example>
             <seealso cref="T:UnityEngine.Rendering.VolumeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.VolumeParameter`1.m_Value">
            <summary>
            The value stored and serialized by this parameter.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeParameter`1.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.#ctor">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/> instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.#ctor(`0,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.Interp(`0,`0,System.Single)">
            <summary>
            Interpolates two values using a factor <paramref name="t"/>.
            </summary>
            <remarks>
            By default, this method does a "snap" interpolation, meaning it returns the value
            <paramref name="to"/> if <paramref name="t"/> is higher than 0, and <paramref name="from"/>
            otherwise.
            </remarks>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.Override(`0)">
            <summary>
            Sets the value for this parameter and sets its override state to <c>true</c>.
            </summary>
            <param name="x">The value to assign to this parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.SetValue(UnityEngine.Rendering.VolumeParameter)">
            <summary>
            Sets the value of this parameter to the value in <paramref name="parameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:UnityEngine.Rendering.VolumeParameter"/> to copy the value from.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.op_Equality(UnityEngine.Rendering.VolumeParameter{`0},`0)">
            <summary>
            Compares the value in a parameter with another value of the same type.
            </summary>
            <param name="lhs">The first value in a <see cref="T:UnityEngine.Rendering.VolumeParameter"/>.</param>
            <param name="rhs">The second value.</param>
            <returns><c>true</c> if both values are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.op_Inequality(UnityEngine.Rendering.VolumeParameter{`0},`0)">
            <summary>
            Compares the value store in a parameter with another value of the same type.
            </summary>
            <param name="lhs">The first value in a <see cref="T:UnityEngine.Rendering.VolumeParameter"/>.</param>
            <param name="rhs">The second value.</param>
            <returns><c>false</c> if both values are equal, <c>true</c> otherwise</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.Equals(UnityEngine.Rendering.VolumeParameter{`0})">
            <summary>
            Checks if this parameter is equal to another.
            </summary>
            <param name="other">The other parameter to check against.</param>
            <returns><c>true</c> if both parameters are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.Equals(System.Object)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeParameter`1.op_Explicit(UnityEngine.Rendering.VolumeParameter{`0})~`0">
            <summary>
            Explicitly downcast a <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/> to a value of type
            <typeparamref name="T"/>.
            </summary>
            <param name="prop">The parameter to downcast.</param>
            <returns>A value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BoolParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>bool</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.BoolParameter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.BoolParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter</param>
            <param name="overrideState">The initial override state for the parameter</param>
        </member>
        <member name="M:UnityEngine.Rendering.BoolParameter.#ctor(System.Boolean,UnityEngine.Rendering.BoolParameter.DisplayType,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.BoolParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter</param>
            <param name="displayType">The display type to use for the parameter</param>
            <param name="overrideState">The initial override state for the parameter</param>
        </member>
        <member name="T:UnityEngine.Rendering.BoolParameter.DisplayType">
            <summary>
            Boolean widget type.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BoolParameter.DisplayType.Checkbox">
            <summary> Display boolean parameter as checkbox. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BoolParameter.DisplayType.EnumPopup">
            <summary> Display boolean parameter as enum popup with Disabled/Enabled options. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BoolParameter.displayType">
            <summary>
            Type of widget used to display the <see cref="T:UnityEngine.Rendering.BoolParameter"/> in the UI.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.LayerMaskParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>LayerMask</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LayerMaskParameter.#ctor(UnityEngine.LayerMask,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.LayerMaskParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.IntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds an <c>int</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.IntParameter.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.IntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.IntParameter.Interp(System.Int32,System.Int32,System.Single)">
            <summary>
            Interpolates between two <c>int</c> values.
            </summary>
            <param name="from">The start value</param>
            <param name="to">The end value</param>
            <param name="t">The interpolation factor in range [0,1]</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>int</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpIntParameter.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.NoInterpIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.MinIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds an <c>int</c> value clamped to a
            minimum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.MinIntParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.MinIntParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.MinIntParameter.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.MinIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpMinIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>int</c> value that
            clamped to a minimum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpMinIntParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpMinIntParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpMinIntParameter.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.MaxIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds an <c>int</c> value clamped to a
            maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.MaxIntParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.MaxIntParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.MaxIntParameter.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.MaxIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpMaxIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>int</c> value that
            clamped to a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpMaxIntParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpMaxIntParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpMaxIntParameter.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ClampedIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds an <c>int</c> value clamped between a
            minimum and a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.ClampedIntParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClampedIntParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ClampedIntParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.ClampedIntParameter.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.ClampedIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpClampedIntParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>int</c> value
            clamped between a minimum and a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.IntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinIntParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxIntParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpClampedIntParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpClampedIntParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpClampedIntParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpClampedIntParameter.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.NoInterpClampedIntParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.FloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>float</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.FloatParameter.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.FloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter</param>
            <param name="overrideState">The initial override state for the parameter</param>
        </member>
        <member name="M:UnityEngine.Rendering.FloatParameter.Interp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two <c>float</c> values.
            </summary>
            <param name="from">The start value</param>
            <param name="to">The end value</param>
            <param name="t">The interpolation factor in range [0,1]</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>float</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpFloatParameter.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.MinFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>float</c> value clamped to a minimum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.MinFloatParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.MinFloatParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.MinFloatParameter.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpMinFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>float</c> value clamped to
            a minimum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpMinFloatParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpMinFloatParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpMinFloatParameter.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to storedin the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.MaxFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>float</c> value clamped to a max value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.MaxFloatParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.MaxFloatParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.MaxFloatParameter.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpMaxFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>float</c> value clamped to
            a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpMaxFloatParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpMaxFloatParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpMaxFloatParameter.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ClampedFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>float</c> value clamped between a minimum and a
            maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.ClampedFloatParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ClampedFloatParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ClampedFloatParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.ClampedFloatParameter.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpClampedFloatParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>float</c> value clamped between
            a minimum and a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpClampedFloatParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpClampedFloatParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpClampedFloatParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpClampedFloatParameter.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.FloatRangeParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Vector2</c> value holding a range of two
            <c>float</c> values clamped between a minimum and a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.FloatRangeParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.FloatRangeParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.FloatRangeParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.FloatRangeParameter.#ctor(UnityEngine.Vector2,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.FloatRangeParameter.Interp(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Interpolates between two <c>Vector2</c> values.
            </summary>
            <param name="from">The start value</param>
            <param name="to">The end value</param>
            <param name="t">The interpolation factor in range [0,1]</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpFloatRangeParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Vector2</c> value holding
            a range of two <c>float</c> values clamped between a minimum and a maximum value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.FloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.MaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.ClampedFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.FloatRangeParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMinFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpMaxFloatParameter"/>
            <seealso cref="T:UnityEngine.Rendering.NoInterpClampedFloatParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpFloatRangeParameter.min">
            <summary>
            The minimum value to clamp this parameter to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpFloatRangeParameter.max">
            <summary>
            The maximum value to clamp this parameter to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.NoInterpFloatRangeParameter.value">
            <summary>
            The value that this parameter stores.
            </summary>
            <remarks>
            You can override this property to define custom behaviors when the value is changed.
            </remarks>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpFloatRangeParameter.#ctor(UnityEngine.Vector2,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpFloatRangeParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="min">The minimum value to clamp the parameter to</param>
            <param name="max">The maximum value to clamp the parameter to.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.ColorParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Color</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.NoInterpColorParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.ColorParameter.hdr">
            <summary>
            Is this color HDR?
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorParameter.showAlpha">
            <summary>
            Should the alpha channel be editable in the editor?
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ColorParameter.showEyeDropper">
            <summary>
            Should the eye dropper be visible in the editor?
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ColorParameter.#ctor(UnityEngine.Color,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.ColorParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ColorParameter.#ctor(UnityEngine.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.ColorParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="hdr">Specifies whether the color is HDR or not.</param>
            <param name="showAlpha">Specifies whether you can edit the alpha channel in the Inspector or not.</param>
            <param name="showEyeDropper">Specifies whether the eye dropper is visible in the editor or not.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.ColorParameter.Interp(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Interpolates between two <c>Color</c> values.
            </summary>
            <remarks>
            For performance reasons, this function interpolates the RGBA channels directly.
            </remarks>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpColorParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Color</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.ColorParameter"/>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpColorParameter.hdr">
            <summary>
            Specifies whether the color is HDR or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpColorParameter.showAlpha">
            <summary>
            Specifies whether you can edit the alpha channel in the Inspector or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.NoInterpColorParameter.showEyeDropper">
            <summary>
            Specifies whether the eye dropper is visible in the editor or not.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpColorParameter.#ctor(UnityEngine.Color,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpColorParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpColorParameter.#ctor(UnityEngine.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpColorParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="hdr">Specifies whether the color is HDR or not.</param>
            <param name="showAlpha">Specifies whether you can edit the alpha channel in the Inspector or not.</param>
            <param name="showEyeDropper">Specifies whether the eye dropper is visible in the editor or not.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Vector2Parameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Vector2</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.NoInterpVector2Parameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.Vector2Parameter.#ctor(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Vector2Parameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Vector2Parameter.Interp(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Interpolates between two <c>Vector2</c> values.
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpVector2Parameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Vector2</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.Vector2Parameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpVector2Parameter.#ctor(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpVector2Parameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Vector3Parameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Vector3</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.NoInterpVector3Parameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.Vector3Parameter.#ctor(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Vector3Parameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Vector3Parameter.Interp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Interpolates between two <c>Vector3</c> values.
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpVector3Parameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Vector3</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.Vector3Parameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpVector3Parameter.#ctor(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Vector3Parameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Vector4Parameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Vector4</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.NoInterpVector4Parameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.Vector4Parameter.#ctor(UnityEngine.Vector4,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Vector4Parameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Vector4Parameter.Interp(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
            <summary>
            Interpolates between two <c>Vector4</c> values.
            </summary>
            <param name="from">The start value.</param>
            <param name="to">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpVector4Parameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Vector4</c> value.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.Vector4Parameter"/>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpVector4Parameter.#ctor(UnityEngine.Vector4,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Vector4Parameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.TextureParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Texture</c> value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.TextureParameter.dimension">
            <summary>
            The accepted dimension of textures.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.TextureParameter.#ctor(UnityEngine.Texture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.TextureParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.TextureParameter.#ctor(UnityEngine.Texture,UnityEngine.Rendering.TextureDimension,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.TextureParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="dimension">The accepted dimension of textures.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.TextureParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpTextureParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Texture</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpTextureParameter.#ctor(UnityEngine.Texture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpTextureParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpTextureParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Texture2DParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a 2D <c>Texture</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DParameter.#ctor(UnityEngine.Texture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Texture2DParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Texture3DParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a 3D <c>Texture</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture3DParameter.#ctor(UnityEngine.Texture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.Texture3DParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture3DParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.RenderTextureParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>RenderTexture</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RenderTextureParameter.#ctor(UnityEngine.RenderTexture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.RenderTextureParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.RenderTextureParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpRenderTextureParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>RenderTexture</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpRenderTextureParameter.#ctor(UnityEngine.RenderTexture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpRenderTextureParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpRenderTextureParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.CubemapParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>Cubemap</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.CubemapParameter.#ctor(UnityEngine.Texture,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.CubemapParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CubemapParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.NoInterpCubemapParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a non-interpolating <c>Cubemap</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpCubemapParameter.#ctor(UnityEngine.Cubemap,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.NoInterpCubemapParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.NoInterpCubemapParameter.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ObjectParameter`1">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a serializable class or struct.
            </summary>
            <typeparam name="T">The type of serializable object or struct to hold in this parameter.
            </typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.ObjectParameter`1.overrideState">
            <summary>
            The current override state for this parameter. Note that this is always forced enabled
            on <see cref="T:UnityEngine.Rendering.ObjectParameter`1"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.ObjectParameter`1.value">
            <summary>
            The value stored by this parameter.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ObjectParameter`1.#ctor(`0)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.ObjectParameter`1"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.AnimationCurveParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds an <c>AnimationCurve</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.AnimationCurveParameter.#ctor(UnityEngine.AnimationCurve,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:UnityEngine.Rendering.AnimationCurveParameter"/> instance.
            </summary>
            <param name="value">The initial value to be stored in the parameter</param>
            <param name="overrideState">The initial override state for the parameter</param>
        </member>
        <member name="M:UnityEngine.Rendering.AnimationCurveParameter.Interp(UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,System.Single)">
            <summary>
            Interpolates between two AnimationCurve values. Note that it will overwrite the values in lhsCurve,
            whereas rhsCurve data will be unchanged. Thus, it is legal to call it as:
                stateParam.Interp(stateParam, toParam, interpFactor);
            However, It should NOT be called when the lhsCurve parameter needs to be preserved. But the current
            framework modifies it anyway in VolumeComponent.Override for all types of VolumeParameters
            </summary>
            <param name="lhsCurve">The start value.</param>
            <param name="rhsCurve">The end value.</param>
            <param name="t">The interpolation factor in range [0,1].</param>
        </member>
        <member name="T:UnityEngine.Rendering.MaterialParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <c>bool</c> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.MaterialParameter.#ctor(UnityEngine.Material,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.MaterialParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter</param>
            <param name="overrideState">The initial override state for the parameter</param>
        </member>
        <member name="T:UnityEngine.Rendering.DebugDisplaySettingsPanel">
            <summary>
            The abstract common implementation of the <see cref="T:UnityEngine.Rendering.IDebugDisplaySettingsPanelDisposable"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsPanel.PanelName">
            <summary>
            The Panel name
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsPanel.Order">
            <summary>
            The order where this panel should be shown
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsPanel.Widgets">
            <summary>
            The collection of widgets that are in this panel
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsPanel.Flags">
            <summary>
            The <see cref="T:UnityEngine.Rendering.DebugUI.Flags"/> for this panel
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsPanel.AddWidget(UnityEngine.Rendering.DebugUI.Widget)">
            <summary>
            Adds a widget to the panel
            </summary>
            <param name="widget">The <see cref="T:UnityEngine.Rendering.DebugUI.Widget"/> to be added.</param>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsPanel.Clear">
            <summary>
            Clears the widgets list
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsPanel.Dispose">
            <summary>
            Disposes the panel
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugDisplaySettingsPanel`1">
            <summary>
            Class to help declare rendering debugger panels
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.DebugDisplaySettingsPanel`1.data">
            <summary>
            Access to the data stored
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugDisplaySettingsPanel`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="data">The data that the panel holds</param>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeStack">
            <summary>
            Holds the state of a Volume blending update. A global stack is
            available by default in <see cref="T:UnityEngine.Rendering.VolumeManager"/> but you can also create your own using
            <see cref="M:UnityEngine.Rendering.VolumeManager.CreateStack"/> if you need to update the manager with specific
            settings and store the results for later use.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeStack.GetComponent``1">
            <summary>
            Gets the current state of the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> of type <typeparamref name="T"/>
            in the stack.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <returns>The current state of the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> of type <typeparamref name="T"/>
            in the stack.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeStack.GetComponent(System.Type)">
            <summary>
            Gets the current state of the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> of the specified type in the
            stack.
            </summary>
            <param name="type">The type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/> to look for.</param>
            <returns>The current state of the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> of the specified type,
            or <c>null</c> if the type is invalid.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeStack.Dispose">
            <summary>
            Cleans up the content of this stack. Once a <c>VolumeStack</c> is disposed, it souldn't
            be used anymore.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.AdditionalGIBakeRequestsManager">
            <summary>
            A manager to enqueue extra probe rendering outside of probe volumes.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.AdditionalGIBakeRequestsManager.instance">
            <summary>
            Get the manager that governs the additional light probe rendering requests.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.AdditionalGIBakeRequestsManager.EnqueueRequest(UnityEngine.Vector3,System.Int32)">
            <summary>
            Enqueue a request for probe rendering at the specified location.
            </summary>
            <param name ="capturePosition"> The position at which a probe is baked.</param>
            <param name ="probeInstanceID"> The instance ID of the probe doing the request.</param>
        </member>
        <member name="M:UnityEngine.Rendering.AdditionalGIBakeRequestsManager.DequeueRequest(System.Int32)">
            <summary>
            Dequeue a request for probe rendering.
            </summary>
            <param name ="probeInstanceID">The instance ID of the probe for which we want to dequeue a request. </param>
        </member>
        <member name="M:UnityEngine.Rendering.AdditionalGIBakeRequestsManager.RetrieveProbeSH(System.Int32,UnityEngine.Rendering.SphericalHarmonicsL2@,UnityEngine.Vector3@)">
            <summary>
            Retrieve the result of a capture request, it will return false if the request has not been fulfilled yet or the request ID is invalid.
            </summary>
            <param name ="probeInstanceID"> The instance ID of the probe doing the request.</param>
            <param name ="sh"> The output SH coefficients that have been computed.</param>
            <param name ="pos"> The position for which the computed SH coefficients are valid.</param>
            <returns>Whether the request for light probe rendering has been fulfilled and sh is valid.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.AdditionalGIBakeRequestsManager.UpdatePositionForRequest(System.Int32,UnityEngine.Vector3)">
            <summary>
            Update the capture location for the probe request.
            </summary>
            <param name ="probeInstanceID"> The instance ID of the probe doing the request and that wants the capture position updated.</param>
            <param name ="newPositionnewPosition"> The position at which a probe is baked.</param>
        </member>
        <member name="T:UnityEngine.Rendering.HDRRangeReduction">
            <summary>
            The available options for range reduction/tonemapping when outputting to an HDR device.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HDRRangeReduction.None">
            <summary>
            No range reduction.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HDRRangeReduction.Reinhard">
            <summary>
            Reinhard tonemapping.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HDRRangeReduction.BT2390">
            <summary>
            BT2390 Hermite spline EETF range reduction.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HDRRangeReduction.ACES1000Nits">
            <summary>
            ACES tonemapping preset for 1000 nits displays.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HDRRangeReduction.ACES2000Nits">
            <summary>
            ACES tonemapping preset for 2000 nits displays.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.HDRRangeReduction.ACES4000Nits">
            <summary>
            ACES tonemapping preset for 4000 nits displays.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.TileLayoutUtils">
            <summary>Utility for tiles layout</summary>
        </member>
        <member name="M:UnityEngine.Rendering.TileLayoutUtils.TryLayoutByTiles(UnityEngine.RectInt,System.UInt32,UnityEngine.RectInt@,UnityEngine.RectInt@,UnityEngine.RectInt@,UnityEngine.RectInt@)">
            <summary>Try decompose the givent rect into tiles given the parameter</summary>
            <param name="src">The rect to split</param>
            <param name="tileSize">The size of the tiles</param>
            <param name="main">Computed main area</param>
            <param name="topRow">Computed top row area</param>
            <param name="rightCol">Computed right column area</param>
            <param name="topRight">Computed top right corner area</param>
            <returns>If true, the tiles decomposition is a success</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TileLayoutUtils.TryLayoutByRow(UnityEngine.RectInt,System.UInt32,UnityEngine.RectInt@,UnityEngine.RectInt@)">
            <summary>Try decompose the givent rect into rows given the parameter</summary>
            <param name="src">The rect to split</param>
            <param name="tileSize">The size of the tiles</param>
            <param name="main">Computed main area</param>
            <param name="other">Computed other area</param>
            <returns>If true, the tiles decomposition is a success</returns>
        </member>
        <member name="M:UnityEngine.Rendering.TileLayoutUtils.TryLayoutByCol(UnityEngine.RectInt,System.UInt32,UnityEngine.RectInt@,UnityEngine.RectInt@)">
            <summary>Try decompose the givent rect into columns given the parameter</summary>
            <param name="src">The rect to split</param>
            <param name="tileSize">The size of the tiles</param>
            <param name="main">Computed main area</param>
            <param name="other">Computed other area</param>
            <returns>If true, the tiles decomposition is a success</returns>
        </member>
        <member name="T:UnityEngine.Rendering.LensFlareCommonSRP">
            <summary>
            Common code for all Data-Driven Lens Flare used
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.LensFlareCommonSRP.LensFlareCompInfo">
            <summary>
            Class describing internal information stored to describe a shown LensFlare
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareCommonSRP.LensFlareCompInfo.index">
            <summary>
            Index used to compute Occlusion in a fixed order
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareCommonSRP.LensFlareCompInfo.comp">
            <summary>
            Component used
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareCommonSRP.maxLensFlareWithOcclusion">
            <summary>
            Max lens-flares-with-occlusion supported
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareCommonSRP.maxLensFlareWithOcclusionTemporalSample">
            <summary>
            With TAA Occlusion jitter depth, thought frame on HDRP.
            So we do a "unanimity vote" for occlusion thought 'maxLensFlareWithOcclusionTemporalSample' frame
            Important to keep this value maximum of 8
            If this value change that could implies an implementation modification on:
            com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/LensFlareMergeOcclusionDataDriven.compute
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareCommonSRP.mergeNeeded">
            <summary>
            Set to 1 to enable temporal sample merge.
            Set to 0 to disable temporal sample merge (must support 16 bit textures, and the occlusion merge must be written in the last texel (vertical) of the lens flare texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareCommonSRP.occlusionRT">
            <summary>
            occlusion texture either provided or created automatically by the SRP for lens flare. (to be created automatically, please set mergeNeeded to 1).
            Texture width is the max number of lens flares that have occlusion (x axis the lens flare index).
            y axis is the number of samples (maxLensFlareWithOcclusionTemporalSample) plus the number of merge results.
            Merge results must be done by the SRP and stored in the [(lens flareIndex), (maxLensFlareWithOcclusionTemporalSample + 1)] coordinate.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.Initialize">
            <summary>
            Initialization function which must be called by the SRP.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.Dispose">
            <summary>
            Disposal function, must be called by the SRP to release all internal textures.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareCommonSRP.Instance">
            <summary>
            Current unique instance
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.IsEmpty">
            <summary>
            Check if we have at least one Lens Flare added on the pool
            </summary>
            <returns>true if no Lens Flare were added</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.AddData(UnityEngine.Rendering.LensFlareComponentSRP)">
            <summary>
            Add a new lens flare component on the pool.
            </summary>
            <param name="newData">The new data added</param>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.RemoveData(UnityEngine.Rendering.LensFlareComponentSRP)">
            <summary>
            Remove a lens flare data which exist in the pool.
            </summary>
            <param name="data">The data which exist in the pool</param>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationPointLight">
            <summary>
            Attenuation by Light Shape for Point Light
            </summary>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationDirLight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Attenuation by Light Shape for Directional Light
            </summary>
            <param name="forward">Forward Vector of Directional Light</param>
            <param name="wo">Vector pointing to the eye</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationSpotConeLight(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Attenuation by Light Shape for Spot Light with Cone Shape
            </summary>
            <param name="forward">Forward Vector of Directional Light</param>
            <param name="wo">Vector pointing to the eye</param>
            <param name="spotAngle">The angle of the light's spotlight cone in degrees.</param>
            <param name="innerSpotPercent01">Get the inner spot radius between 0 and 1.</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationSpotBoxLight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Attenuation by Light Shape for Spot Light with Box Shape
            </summary>
            <param name="forward">Forward Vector of Directional Light</param>
            <param name="wo">Vector pointing to the eye</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationSpotPyramidLight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Attenuation by Light Shape for Spot Light with Pyramid Shape
            </summary>
            <param name="forward">Forward Vector of Directional Light</param>
            <param name="wo">Vector pointing to the eye</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationAreaTubeLight(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Camera)">
            <summary>
            Attenuation by Light Shape for Area Light with Tube Shape
            </summary>
            <param name="lightPositionWS">World Space position of the Light</param>
            <param name="lightSide">Vector pointing to the side (right or left) or the light</param>
            <param name="lightWidth">Width (half extent) of the tube light</param>
            <param name="cam">Camera rendering the Tube Light</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationAreaRectangleLight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Attenuation by Light Shape for Area Light with Rectangular Shape
            </summary>
            <param name="forward">Forward Vector of Directional Light</param>
            <param name="wo">Vector pointing to the eye</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ShapeAttenuationAreaDiscLight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Attenuation by Light Shape for Area Light with Disc Shape
            </summary>
            <param name="forward">Forward Vector of Directional Light</param>
            <param name="wo">Vector pointing to the eye</param>
            <returns>Attenuation Factor</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.GetFlareData0(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Single,UnityEngine.Vector2,System.Boolean)">
            <summary>
            Compute internal parameters needed to render single flare
            </summary>
            <param name="screenPos"></param>
            <param name="translationScale"></param>
            <param name="rayOff0"></param>
            <param name="vLocalScreenRatio"></param>
            <param name="angleDeg"></param>
            <param name="position"></param>
            <param name="angularOffset"></param>
            <param name="positionOffset"></param>
            <param name="autoRotate"></param>
            <returns>Parameter used on the shader for _FlareData0</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.ComputeOcclusion(UnityEngine.Material,UnityEngine.Rendering.LensFlareCommonSRP,UnityEngine.Camera,System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Boolean,UnityEngine.Vector3,UnityEngine.Matrix4x4,UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Effective Job of drawing the set of Lens Flare registered
            </summary>
            <param name="lensFlareShader">Lens Flare material (HDRP or URP shader)</param>
            <param name="lensFlares">Set of Lens Flare</param>
            <param name="cam">Camera</param>
            <param name="actualWidth">Width actually used for rendering after dynamic resolution and XR is applied.</param>
            <param name="actualHeight">Height actually used for rendering after dynamic resolution and XR is applied.</param>
            <param name="usePanini">Set if use Panani Projection</param>
            <param name="paniniDistance">Distance used for Panini projection</param>
            <param name="paniniCropToFit">CropToFit parameter used for Panini projection</param>
            <param name="isCameraRelative">Set if camera is relative</param>
            <param name="cameraPositionWS">Camera World Space position</param>
            <param name="viewProjMatrix">View Projection Matrix of the current camera</param>
            <param name="cmd">Command Buffer</param>
            <param name="taaEnabled">Set if TAA is enabled</param>
            <param name="sunOcclusionTexture">Sun Occlusion Texture from VolumetricCloud on HDRP or null</param>
            <param name="_FlareOcclusionTex">ShaderID for the FlareOcclusionTex</param>
            <param name="_FlareOcclusionIndex">ShaderID for the FlareOcclusionIndex</param>
            <param name="_FlareTex">ShaderID for the FlareTex</param>
            <param name="_FlareColorValue">ShaderID for the FlareColor</param>
            <param name="_FlareSunOcclusionTex">ShaderID for the _FlareSunOcclusionTex</param>
            <param name="_FlareData0">ShaderID for the FlareData0</param>
            <param name="_FlareData1">ShaderID for the FlareData1</param>
            <param name="_FlareData2">ShaderID for the FlareData2</param>
            <param name="_FlareData3">ShaderID for the FlareData3</param>
            <param name="_FlareData4">ShaderID for the FlareData4</param>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareCommonSRP.DoLensFlareDataDrivenCommon(UnityEngine.Material,UnityEngine.Rendering.LensFlareCommonSRP,UnityEngine.Camera,System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Boolean,System.Boolean,UnityEngine.Vector3,UnityEngine.Matrix4x4,UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,System.Func{UnityEngine.Light,UnityEngine.Camera,UnityEngine.Vector3,System.Single},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Effective Job of drawing the set of Lens Flare registered
            </summary>
            <param name="lensFlareShader">Lens Flare material (HDRP or URP shader)</param>
            <param name="lensFlares">Set of Lens Flare</param>
            <param name="cam">Camera</param>
            <param name="actualWidth">Width actually used for rendering after dynamic resolution and XR is applied.</param>
            <param name="actualHeight">Height actually used for rendering after dynamic resolution and XR is applied.</param>
            <param name="usePanini">Set if use Panani Projection</param>
            <param name="paniniDistance">Distance used for Panini projection</param>
            <param name="paniniCropToFit">CropToFit parameter used for Panini projection</param>
            <param name="isCameraRelative">Set if camera is relative</param>
            <param name="taaEnabled">Set if TAA is enabled</param>
            <param name="cameraPositionWS">Camera World Space position</param>
            <param name="viewProjMatrix">View Projection Matrix of the current camera</param>
            <param name="cmd">Command Buffer</param>
            <param name="colorBuffer">Source Render Target which contains the Color Buffer</param>
            <param name="GetLensFlareLightAttenuation">Delegate to which return return the Attenuation of the light based on their shape which uses the functions ShapeAttenuation...(...), must reimplemented per SRP</param>
            <param name="_FlareOcclusionTex">ShaderID for the FlareOcclusionTex</param>
            <param name="_FlareOcclusionIndex">ShaderID for the FlareOcclusionIndex</param>
            <param name="_FlareOcclusionRemapTex">ShaderID for the OcclusionRemap</param>
            <param name="_FlareTex">ShaderID for the FlareTex</param>
            <param name="_FlareColorValue">ShaderID for the FlareColor</param>
            <param name="_FlareData0">ShaderID for the FlareData0</param>
            <param name="_FlareData1">ShaderID for the FlareData1</param>
            <param name="_FlareData2">ShaderID for the FlareData2</param>
            <param name="_FlareData3">ShaderID for the FlareData3</param>
            <param name="_FlareData4">ShaderID for the FlareData4</param>
            <param name="debugView">Debug View which setup black background to see only Lens Flare</param>
        </member>
        <member name="T:UnityEngine.Rendering.CoreUtils">
            <summary>
            Set of utility functions for the Core Scriptable Render Pipeline Library
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.lookAtList">
            <summary>
            List of look at matrices for cubemap faces.
            Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/bb204881(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.upVectorList">
            <summary>
            List of up vectors for cubemap faces.
            Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/bb204881(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.CoreUtils.Sections">
            <summary>
            Class to store the menu sections
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section1">
            <summary>Menu section 1</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section2">
            <summary>Menu section 2</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section3">
            <summary>Menu section 3</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section4">
            <summary>Menu section 4</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section5">
            <summary>Menu section 5</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section6">
            <summary>Menu section 6</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section7">
            <summary>Menu section 7</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Sections.section8">
            <summary>Menu section 8</summary>
        </member>
        <member name="T:UnityEngine.Rendering.CoreUtils.Priorities">
            <summary>
            Class to store the menu priorities on each top level menu
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Priorities.assetsCreateShaderMenuPriority">
            <summary>Assets > Create > Shader priority</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Priorities.assetsCreateRenderingMenuPriority">
            <summary>Assets > Create > Rendering priority</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Priorities.editMenuPriority">
            <summary>Edit Menu base priority</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Priorities.gameObjectMenuPriority">
            <summary>Game Object Menu priority</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.Priorities.srpLensFlareMenuPriority">
            <summary>Lens Flare Priority</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.editMenuPriority1">
            <summary>Edit Menu priority 1</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.editMenuPriority2">
            <summary>Edit Menu priority 2</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.editMenuPriority3">
            <summary>Edit Menu priority 3</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.editMenuPriority4">
            <summary>Edit Menu priority 4</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.assetCreateMenuPriority1">
            <summary>Asset Create Menu priority 1</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.assetCreateMenuPriority2">
            <summary>Asset Create Menu priority 2</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.assetCreateMenuPriority3">
            <summary>Asset Create Menu priority 3</summary>
        </member>
        <member name="F:UnityEngine.Rendering.CoreUtils.gameObjectMenuPriority">
            <summary>Game Object Menu priority</summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUtils.blackCubeTexture">
            <summary>
            Black cubemap texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUtils.magentaCubeTexture">
            <summary>
            Magenta cubemap texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUtils.magentaCubeTextureArray">
            <summary>
            Black cubemap array texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUtils.whiteCubeTexture">
            <summary>
            White cubemap texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUtils.emptyUAV">
            <summary>
            Empty 1x1 texture usable as a dummy UAV.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUtils.blackVolumeTexture">
            <summary>
            Black 3D texture.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.ClearRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Clear the currently bound render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="clearFlag">Specify how the render texture should be cleared.</param>
            <param name="clearColor">Specify with which color the render texture should be cleared.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">RenderTargetIdentifier of the render texture.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ClearFlag,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">RenderTargetIdentifier of the render texture.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">RenderTargetIdentifier of the color render texture.</param>
            <param name="depthBuffer">RenderTargetIdentifier of the depth render texture.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ClearFlag,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">RenderTargetIdentifier of the color render texture.</param>
            <param name="depthBuffer">RenderTargetIdentifier of the depth render texture.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">RenderTargetIdentifier of the color render texture.</param>
            <param name="depthBuffer">RenderTargetIdentifier of the depth render texture.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Set the current multiple render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color render textures.</param>
            <param name="depthBuffer">RenderTargetIdentifier of the depth render texture.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ClearFlag)">
            <summary>
            Set the current multiple render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color render textures.</param>
            <param name="depthBuffer">RenderTargetIdentifier of the depth render texture.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Set the current multiple render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color render textures.</param>
            <param name="depthBuffer">RenderTargetIdentifier of the depth render texture.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">Color buffer RenderTargetIdentifier.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">Color buffer RenderTargetIdentifier.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">Color buffer RenderTargetIdentifier.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">Color buffer RenderTargetIdentifier.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">Color buffer RenderTargetIdentifier.</param>
            <param name="colorLoadAction">Color buffer load action.</param>
            <param name="colorStoreAction">Color buffer store action.</param>
            <param name="depthBuffer">Depth buffer RenderTargetIdentifier.</param>
            <param name="depthLoadAction">Depth buffer load action.</param>
            <param name="depthStoreAction">Depth buffer store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">Color buffer RenderTargetIdentifier.</param>
            <param name="colorLoadAction">Color buffer load action.</param>
            <param name="colorStoreAction">Color buffer store action.</param>
            <param name="depthBuffer">Depth buffer RenderTargetIdentifier.</param>
            <param name="depthLoadAction">Depth buffer load action.</param>
            <param name="depthStoreAction">Depth buffer store action.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">Color buffer RenderTargetIdentifier.</param>
            <param name="colorLoadAction">Color buffer load action.</param>
            <param name="colorStoreAction">Color buffer store action.</param>
            <param name="depthBuffer">Depth buffer RenderTargetIdentifier.</param>
            <param name="depthLoadAction">Depth buffer load action.</param>
            <param name="depthStoreAction">Depth buffer store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">RenderTargetIdentifier of the render texture.</param>
            <param name="colorLoadAction">Color buffer load action.</param>
            <param name="colorStoreAction">Color buffer store action.</param>
            <param name="depthLoadAction">Depth buffer load action.</param>
            <param name="depthStoreAction">Depth buffer store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">Color buffer RenderTargetIdentifier.</param>
            <param name="colorLoadAction">Color buffer load action.</param>
            <param name="colorStoreAction">Color buffer store action.</param>
            <param name="depthBuffer">Depth buffer RenderTargetIdentifier.</param>
            <param name="depthLoadAction">Depth buffer load action.</param>
            <param name="depthStoreAction">Depth buffer store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Setup the current render texture using an RTHandle
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands</param>
            <param name="buffer">Color buffer RTHandle</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.ClearFlag,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Setup the current render texture using an RTHandle
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands</param>
            <param name="buffer">Color buffer RTHandle</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Setup the current render texture using an RTHandle
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands</param>
            <param name="colorBuffer">Color buffer RTHandle</param>
            <param name="depthBuffer">Depth buffer RTHandle</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.ClearFlag,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Setup the current render texture using an RTHandle
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands</param>
            <param name="colorBuffer">Color buffer RTHandle</param>
            <param name="depthBuffer">Depth buffer RTHandle</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Setup the current render texture using an RTHandle
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands</param>
            <param name="colorBuffer">Color buffer RTHandle</param>
            <param name="depthBuffer">Depth buffer RTHandle</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="buffer">Color buffer RTHandleRTR.</param>
            <param name="loadAction">Load action.</param>
            <param name="storeAction">Store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.ClearFlag,UnityEngine.Color,System.Int32,UnityEngine.CubemapFace,System.Int32)">
            <summary>
            Set the current render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffer">Color buffer RTHandle.</param>
            <param name="colorLoadAction">Color buffer load action.</param>
            <param name="colorStoreAction">Color buffer store action.</param>
            <param name="depthBuffer">Depth buffer RTHandle.</param>
            <param name="depthLoadAction">Depth buffer load action.</param>
            <param name="depthStoreAction">Depth buffer store action.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
            <param name="miplevel">Mip level that should be bound as a render texture if applicable.</param>
            <param name="cubemapFace">Cubemap face that should be bound as a render texture if applicable.</param>
            <param name="depthSlice">Depth slice that should be bound as a render texture if applicable.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RTHandle)">
            <summary>
            Set the current multiple render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color render textures.</param>
            <param name="depthBuffer">Depth Buffer RTHandle.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.ClearFlag)">
            <summary>
            Set the current multiple render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color render textures.</param>
            <param name="depthBuffer">Depth Buffer RTHandle.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetRenderTarget(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Set the current multiple render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color render textures.</param>
            <param name="depthBuffer">Depth Buffer RTHandle.</param>
            <param name="clearFlag">If not set to ClearFlag.None, specifies how to clear the render target after setup.</param>
            <param name="clearColor">If applicable, color with which to clear the render texture after setup.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetViewport(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle)">
            <summary>
            Setup the viewport to the size of the provided RTHandle.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="target">RTHandle from which to compute the proper viewport.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetRenderTargetAutoName(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,System.String,System.Boolean,System.Boolean,UnityEngine.Rendering.MSAASamples)">
            <summary>
            Generate a name based on render texture parameters.
            </summary>
            <param name="width">With of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="depth">Depth of the texture.</param>
            <param name="format">Format of the render texture.</param>
            <param name="name">Base name of the texture.</param>
            <param name="mips">True if the texture has mip maps.</param>
            <param name="enableMSAA">True if the texture is multisampled.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <returns>Generated names bassed on the provided parameters.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetRenderTargetAutoName(System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.String,System.Boolean,System.Boolean,UnityEngine.Rendering.MSAASamples)">
            <summary>
            Generate a name based on render texture parameters.
            </summary>
            <param name="width">With of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="depth">Depth of the texture.</param>
            <param name="format">Graphics format of the render texture.</param>
            <param name="name">Base name of the texture.</param>
            <param name="mips">True if the texture has mip maps.</param>
            <param name="enableMSAA">True if the texture is multisampled.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <returns>Generated names bassed on the provided parameters.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetRenderTargetAutoName(System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Rendering.TextureDimension,System.String,System.Boolean,System.Boolean,UnityEngine.Rendering.MSAASamples,System.Boolean)">
            <summary>
            Generate a name based on render texture parameters.
            </summary>
            <param name="width">With of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="depth">Depth of the texture.</param>
            <param name="format">Graphics format of the render texture.</param>
            <param name="dim">Dimension of the texture.</param>
            <param name="name">Base name of the texture.</param>
            <param name="mips">True if the texture has mip maps.</param>
            <param name="enableMSAA">True if the texture is multisampled.</param>
            <param name="msaaSamples">Number of MSAA samples.</param>
            <param name="dynamicRes">True if the texture uses dynamic resolution.</param>
            <returns>Generated names bassed on the provided parameters.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetTextureAutoName(System.Int32,System.Int32,UnityEngine.TextureFormat,UnityEngine.Rendering.TextureDimension,System.String,System.Boolean,System.Int32)">
            <summary>
            Generate a name based on texture parameters.
            </summary>
            <param name="width">With of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="format">Format of the texture.</param>
            <param name="dim">Dimension of the texture.</param>
            <param name="name">Base name of the texture.</param>
            <param name="mips">True if the texture has mip maps.</param>
            <param name="depth">Depth of the texture.</param>
            <returns>Generated names based on the provided parameters.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetTextureAutoName(System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Rendering.TextureDimension,System.String,System.Boolean,System.Int32)">
            <summary>
            Generate a name based on texture parameters.
            </summary>
            <param name="width">With of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="format">Graphics format of the texture.</param>
            <param name="dim">Dimension of the texture.</param>
            <param name="name">Base name of the texture.</param>
            <param name="mips">True if the texture has mip maps.</param>
            <param name="depth">Depth of the texture.</param>
            <returns>Generated names based on the provided parameters.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.ClearCubemap(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTexture,UnityEngine.Color,System.Boolean)">
            <summary>
            Clear a cubemap render texture.
            </summary>
            <param name="cmd">CommandBuffer used for rendering commands.</param>
            <param name="renderTexture">Cubemap render texture that needs to be cleared.</param>
            <param name="clearColor">Color used for clearing.</param>
            <param name="clearMips">Set to true to clear the mip maps of the render texture.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.DrawFullScreen(UnityEngine.Rendering.CommandBuffer,UnityEngine.Material,UnityEngine.MaterialPropertyBlock,System.Int32)">
            <summary>
            Draws a full screen triangle.
            </summary>
            <param name="commandBuffer">CommandBuffer used for rendering commands.</param>
            <param name="material">Material used on the full screen triangle.</param>
            <param name="properties">Optional material property block for the provided material.</param>
            <param name="shaderPassId">Index of the material pass.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.DrawFullScreen(UnityEngine.Rendering.CommandBuffer,UnityEngine.Material,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.MaterialPropertyBlock,System.Int32)">
            <summary>
            Draws a full screen triangle.
            </summary>
            <param name="commandBuffer">CommandBuffer used for rendering commands.</param>
            <param name="material">Material used on the full screen triangle.</param>
            <param name="colorBuffer">RenderTargetIdentifier of the color buffer that needs to be set before drawing the full screen triangle.</param>
            <param name="properties">Optional material property block for the provided material.</param>
            <param name="shaderPassId">Index of the material pass.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.DrawFullScreen(UnityEngine.Rendering.CommandBuffer,UnityEngine.Material,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.MaterialPropertyBlock,System.Int32)">
            <summary>
            Draws a full screen triangle.
            </summary>
            <param name="commandBuffer">CommandBuffer used for rendering commands.</param>
            <param name="material">Material used on the full screen triangle.</param>
            <param name="colorBuffer">RenderTargetIdentifier of the color buffer that needs to be set before drawing the full screen triangle.</param>
            <param name="depthStencilBuffer">RenderTargetIdentifier of the depth buffer that needs to be set before drawing the full screen triangle.</param>
            <param name="properties">Optional material property block for the provided material.</param>
            <param name="shaderPassId">Index of the material pass.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.DrawFullScreen(UnityEngine.Rendering.CommandBuffer,UnityEngine.Material,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.MaterialPropertyBlock,System.Int32)">
            <summary>
            Draws a full screen triangle.
            </summary>
            <param name="commandBuffer">CommandBuffer used for rendering commands.</param>
            <param name="material">Material used on the full screen triangle.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color buffers that needs to be set before drawing the full screen triangle.</param>
            <param name="depthStencilBuffer">RenderTargetIdentifier of the depth buffer that needs to be set before drawing the full screen triangle.</param>
            <param name="properties">Optional material property block for the provided material.</param>
            <param name="shaderPassId">Index of the material pass.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.DrawFullScreen(UnityEngine.Rendering.CommandBuffer,UnityEngine.Material,UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.MaterialPropertyBlock,System.Int32)">
            <summary>
            Draws a full screen triangle.
            </summary>
            <param name="commandBuffer">CommandBuffer used for rendering commands.</param>
            <param name="material">Material used on the full screen triangle.</param>
            <param name="colorBuffers">RenderTargetIdentifier array of the color buffers that needs to be set before drawing the full screen triangle.</param>
            <param name="properties">Optional material property block for the provided material.</param>
            <param name="shaderPassId">Index of the material pass.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.ConvertSRGBToActiveColorSpace(UnityEngine.Color)">
            <summary>
            Converts the provided sRGB color to the current active color space.
            </summary>
            <param name="color">Input color.</param>
            <returns>Linear color if the active color space is ColorSpace.Linear, the original input otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.ConvertLinearToActiveColorSpace(UnityEngine.Color)">
            <summary>
            Converts the provided linear color to the current active color space.
            </summary>
            <param name="color">Input color.</param>
            <returns>sRGB color if the active color space is ColorSpace.Gamma, the original input otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.CreateEngineMaterial(System.String)">
            <summary>
            Creates a Material with the provided shader path.
            hideFlags will be set to HideFlags.HideAndDontSave.
            </summary>
            <param name="shaderPath">Path of the shader used for the material.</param>
            <returns>A new Material instance using the shader found at the provided path.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.CreateEngineMaterial(UnityEngine.Shader)">
            <summary>
            Creates a Material with the provided shader.
            hideFlags will be set to HideFlags.HideAndDontSave.
            </summary>
            <param name="shader">Shader used for the material.</param>
            <returns>A new Material instance using the provided shader.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.HasFlag``1(``0,``0)">
            <summary>
            Bitfield flag test.
            </summary>
            <typeparam name="T">Type of the enum flag.</typeparam>
            <param name="mask">Bitfield to test the flag against.</param>
            <param name="flag">Flag to be tested against the provided mask.</param>
            <returns>True if the flag is present in the mask.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.Swap``1(``0@,``0@)">
            <summary>
            Swaps two values.
            </summary>
            <typeparam name="T">Type of the values</typeparam>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetKeyword(UnityEngine.Rendering.CommandBuffer,System.String,System.Boolean)">
            <summary>
            Set a global keyword using a CommandBuffer
            </summary>
            <param name="cmd">CommandBuffer on which to set the global keyword.</param>
            <param name="keyword">Keyword to be set.</param>
            <param name="state">Value of the keyword to be set.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetKeyword(UnityEngine.Material,System.String,System.Boolean)">
            <summary>
            Set a keyword immediatly on a Material.
            </summary>
            <param name="material">Material on which to set the keyword.</param>
            <param name="keyword">Keyword to set on the material.</param>
            <param name="state">Value of the keyword to set on the material.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SetKeyword(UnityEngine.ComputeShader,System.String,System.Boolean)">
            <summary>
            Set a keyword to a compute shader
            </summary>
            <param name="cs">Compute Shader on which to set the keyword.</param>
            <param name="keyword">Keyword to be set.</param>
            <param name="state">Value of the keyword to be set.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.Destroy(UnityEngine.Object)">
            <summary>
            Destroys a UnityObject safely.
            </summary>
            <param name="obj">Object to be destroyed.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetAllAssemblyTypes">
            <summary>
            Returns all assembly types.
            </summary>
            <returns>The list of all assembly types of the current domain.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetAllTypesDerivedFrom``1">
            <summary>
            Returns a list of types that inherit from the provided type.
            </summary>
            <typeparam name="T">Parent Type</typeparam>
            <returns>A list of types that inherit from the provided type.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SafeRelease(UnityEngine.GraphicsBuffer)">
            <summary>
            Safely release a Graphics Buffer.
            </summary>
            <param name="buffer">Graphics Buffer that needs to be released.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.SafeRelease(UnityEngine.ComputeBuffer)">
            <summary>
            Safely release a Compute Buffer.
            </summary>
            <param name="buffer">Compute Buffer that needs to be released.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.CreateCubeMesh(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates a cube mesh.
            </summary>
            <param name="min">Minimum corner coordinates in local space.</param>
            <param name="max">Maximum corner coordinates in local space.</param>
            <returns>A new instance of a cube Mesh.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.ArePostProcessesEnabled(UnityEngine.Camera)">
            <summary>
            Returns true if "Post Processes" are enabled for the view associated with the given camera.
            </summary>
            <param name="camera">Input camera.</param>
            <returns>True if "Post Processes" are enabled for the view associated with the given camera.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.AreAnimatedMaterialsEnabled(UnityEngine.Camera)">
            <summary>
            Returns true if "Animated Materials" are enabled for the view associated with the given camera.
            </summary>
            <param name="camera">Input camera.</param>
            <returns>True if "Animated Materials" are enabled for the view associated with the given camera.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.IsSceneLightingDisabled(UnityEngine.Camera)">
            <summary>
            Returns true if "Scene Lighting" is enabled for the view associated with the given camera.
            </summary>
            <param name="camera">Input camera.</param>
            <returns>True if "Scene Lighting" is enabled for the view associated with the given camera.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.IsLightOverlapDebugEnabled(UnityEngine.Camera)">
            <summary>
            Returns true if the "Light Overlap" scene view draw mode is enabled.
            </summary>
            <param name="camera">Input camera.</param>
            <returns>True if "Light Overlap" is enabled in the scene view associated with the input camera.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.IsSceneViewFogEnabled(UnityEngine.Camera)">
            <summary>
            Returns true if "Fog" is enabled for the view associated with the given camera.
            </summary>
            <param name="camera">Input camera.</param>
            <returns>True if "Fog" is enabled for the view associated with the given camera.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.IsSceneFilteringEnabled">
            <summary>
            Returns true if any Scene view is using the Scene filtering.
            </summary>
            <returns>True if any Scene view is using the Scene filtering.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.IsSceneViewPrefabStageContextHidden">
            <summary>
            Returns true if the currently opened prefab stage context is set to Hidden.
            </summary>
            <returns>True if the currently opened prefab stage context is set to Hidden.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.DrawRendererList(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RendererList)">
            <summary>
            Draw a renderer list.
            </summary>
            <param name="renderContext">Current Scriptable Render Context.</param>
            <param name="cmd">Command Buffer used for rendering.</param>
            <param name="rendererList">Renderer List to render.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetTextureHash(UnityEngine.Texture)">
            <summary>
            Compute a hash of texture properties.
            </summary>
            <param name="texture"> Source texture.</param>
            <returns>Returns hash of texture properties.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.PreviousPowerOfTwo(System.Int32)">
            <summary>
            Branchless previous power of two.
            </summary>
            <param name="size">Starting size or number.</param>
            <returns>Previous power of two.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUtils.GetLastEnumValue``1">
            <summary>
            Get the last declared value from an enum Type
            </summary>
            <typeparam name="T">Type of the enum</typeparam>
            <returns>Last value of the enum</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnityEngine.Rendering.CoreUtils.LoadAllAssets``1(System.String,System.Boolean)" -->
        <member name="M:UnityEngine.Rendering.CoreUtils.EnsureFolderTreeInAssetFilePath(System.String)">
            <summary>
            Create any missing folder in the file path given.
            Path must use '/' separator
            </summary>
            <param name="filePath">Path to a file or to a folder (ending with '/') to ensure existance of each sub folder in it. </param>
        </member>
        <member name="T:UnityEngine.Rendering.ComponentSingleton`1">
            <summary>
            Singleton of a Component class.
            </summary>
            <typeparam name="TType">Component type.</typeparam>
        </member>
        <member name="P:UnityEngine.Rendering.ComponentSingleton`1.instance">
            <summary>
            Instance of the required component type.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ComponentSingleton`1.Release">
            <summary>
            Release the component singleton.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugShapes">
            <summary>Debug class containing several debug shapes for debugging</summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugShapes.instance">
            <summary>Singleton instance</summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugShapes.RequestSphereMesh">
            <summary>Get a Sphere Mesh</summary>
            <returns>A Sphere Mesh</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugShapes.RequestBoxMesh">
            <summary>Get a Box Mesh</summary>
            <returns>A Box Mesh</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugShapes.RequestConeMesh">
            <summary>Get a Cone Mesh</summary>
            <returns>A Cone Mesh</returns>
        </member>
        <member name="M:UnityEngine.Rendering.DebugShapes.RequestPyramidMesh">
            <summary>Get a Pyramid Mesh</summary>
            <returns>A Pyramid Mesh</returns>
        </member>
        <member name="T:UnityEngine.Rendering.RemoveRangeExtensions">
            <summary>
            A set of extension methods for collections
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.RemoveRangeExtensions.TryRemoveElementsInRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Exception@)">
            <summary>
            Tries to remove a range of elements from the list in the given range.
            </summary>
            <param name="list">The list to remove the range</param>
            <param name="index">The zero-based starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove.</param>
            <param name="error">The exception raised by the implementation</param>
            <typeparam name="TValue">The value type stored on the list</typeparam>
            <returns>True if succeed, false otherwise</returns>
        </member>
        <member name="T:UnityEngine.Rendering.CameraSwitcher">
            <summary>
            Utility component allowing users to setup many different static camera and cycle through their positions using the Debug Window.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.CameraSwitcher.m_Cameras">
            <summary>
            List of target cameras.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.DebugFrameTiming">
            <summary>
            Debug frame timings class
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugFrameTiming.bottleneckHistorySize">
            <summary>
            Size of the Bottleneck History Window in number of samples.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.DebugFrameTiming.sampleHistorySize">
            <summary>
            Size of the Sample History Window in number of samples.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugFrameTiming.#ctor">
            <summary>
            Constructs the debug frame timing
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugFrameTiming.UpdateFrameTiming">
            <summary>
            Update timing data from profiling counters.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.DebugFrameTiming.RegisterDebugUI(System.Collections.Generic.List{UnityEngine.Rendering.DebugUI.Widget})">
            <summary>
            Add frame timing data widgets to debug UI.
            </summary>
            <param name="list">List of widgets to add the stats.</param>
        </member>
        <member name="T:UnityEngine.Rendering.RenderPipelineResources">
            <summary>
            Base of resources assets in SRP
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.RenderPipelineResources.packagePath">
            <summary>
            Utility to add Reload All button at the end of your asset inspector.
            It will provide your package path that you misu override in child class.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.SerializableEnum">
            <summary>
            Class to serizalize Enum as string and recover it's state
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.SerializableEnum.value">
            <summary> Value as enum </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SerializableEnum.#ctor(System.Type)">
            <summary>
            Construct an enum to be serialized with a type
            </summary>
            <param name="enumType">The underliying type of the enum</param>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeManager">
            <summary>
            A global manager that tracks all the Volumes in the currently loaded Scenes and does all the
            interpolation work.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeManager.instance">
            <summary>
            The current singleton instance of <see cref="T:UnityEngine.Rendering.VolumeManager"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeManager.stack">
            <summary>
            A reference to the main <see cref="T:UnityEngine.Rendering.VolumeStack"/>.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.VolumeStack"/>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeManager.baseComponentTypes">
            <summary>
            The current list of all available types that derive from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.VolumeManager.baseComponentTypeArray">
            <summary>
            The current list of all available types that derive from <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.CreateStack">
            <summary>
            Creates and returns a new <see cref="T:UnityEngine.Rendering.VolumeStack"/> to use when you need to store
            the result of the Volume blending pass in a separate stack.
            </summary>
            <returns></returns>
            <seealso cref="T:UnityEngine.Rendering.VolumeStack"/>
            <seealso cref="M:UnityEngine.Rendering.VolumeManager.Update(UnityEngine.Rendering.VolumeStack,UnityEngine.Transform,UnityEngine.LayerMask)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.ResetMainStack">
            <summary>
            Resets the main stack to be the default one.
            Call this function if you've assigned the main stack to something other than the default one.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.DestroyStack(UnityEngine.Rendering.VolumeStack)">
            <summary>
            Destroy a Volume Stack
            </summary>
            <param name="stack">Volume Stack that needs to be destroyed.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.Register(UnityEngine.Rendering.Volume,System.Int32)">
            <summary>
            Registers a new Volume in the manager. Unity does this automatically when a new Volume is
            enabled, or its layer changes, but you can use this function to force-register a Volume
            that is currently disabled.
            </summary>
            <param name="volume">The volume to register.</param>
            <param name="layer">The LayerMask that this volume is in.</param>
            <seealso cref="M:UnityEngine.Rendering.VolumeManager.Unregister(UnityEngine.Rendering.Volume,System.Int32)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.Unregister(UnityEngine.Rendering.Volume,System.Int32)">
            <summary>
            Unregisters a Volume from the manager. Unity does this automatically when a Volume is
            disabled or goes out of scope, but you can use this function to force-unregister a Volume
            that you added manually while it was disabled.
            </summary>
            <param name="volume">The Volume to unregister.</param>
            <param name="layer">The LayerMask that this Volume is in.</param>
            <seealso cref="M:UnityEngine.Rendering.VolumeManager.Register(UnityEngine.Rendering.Volume,System.Int32)"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.IsComponentActiveInMask``1(UnityEngine.LayerMask)">
            <summary>
            Checks if a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> is active in a given LayerMask.
            </summary>
            <typeparam name="T">A type derived from <see cref="T:UnityEngine.Rendering.VolumeComponent"/></typeparam>
            <param name="layerMask">The LayerMask to check against</param>
            <returns><c>true</c> if the component is active in the LayerMask, <c>false</c>
            otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.CheckBaseTypes">
            <summary>
            Checks the state of the base type library. This is only used in the editor to handle
            entering and exiting of play mode and domain reload.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.CheckStack(UnityEngine.Rendering.VolumeStack)">
            <summary>
            Checks the state of a given stack. This is only used in the editor to handle entering
            and exiting of play mode and domain reload.
            </summary>
            <param name="stack">The stack to check.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.Update(UnityEngine.Transform,UnityEngine.LayerMask)">
            <summary>
            Updates the global state of the Volume manager. Unity usually calls this once per Camera
            in the Update loop before rendering happens.
            </summary>
            <param name="trigger">A reference Transform to consider for positional Volume blending
            </param>
            <param name="layerMask">The LayerMask that the Volume manager uses to filter Volumes that it should consider
            for blending.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.Update(UnityEngine.Rendering.VolumeStack,UnityEngine.Transform,UnityEngine.LayerMask)">
            <summary>
            Updates the Volume manager and stores the result in a custom <see cref="T:UnityEngine.Rendering.VolumeStack"/>.
            </summary>
            <param name="stack">The stack to store the blending result into.</param>
            <param name="trigger">A reference Transform to consider for positional Volume blending.
            </param>
            <param name="layerMask">The LayerMask that Unity uses to filter Volumes that it should consider
            for blending.</param>
            <seealso cref="T:UnityEngine.Rendering.VolumeStack"/>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeManager.GetVolumes(UnityEngine.LayerMask)">
            <summary>
            Get all volumes on a given layer mask sorted by influence.
            </summary>
            <param name="layerMask">The LayerMask that Unity uses to filter Volumes that it should consider.</param>
            <returns>An array of volume.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.VolumeIsolationScope">
            <summary>
            A scope in which a Camera filters a Volume.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeIsolationScope.#ctor(System.Boolean)">
            <summary>
            Constructs a scope in which a Camera filters a Volume.
            </summary>
            <param name="unused">Unused parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.VolumeIsolationScope.System#IDisposable#Dispose">
            <summary>
            Stops the Camera from filtering a Volume.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.CoreUnsafeUtils">
            <summary>
            Static class with unsafe utility functions.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.CoreUnsafeUtils.FixedBufferStringQueue">
            <summary>
            Fixed Buffer String Queue class.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.CoreUnsafeUtils.FixedBufferStringQueue.Count">
            <summary>
            Number of element in the queue.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.FixedBufferStringQueue.#ctor(System.Byte*,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="ptr">Buffer pointer.</param>
            <param name="length">Length of the provided allocated buffer in byte.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.FixedBufferStringQueue.TryPush(System.String)">
            <summary>
            Try to push a new element in the queue.
            </summary>
            <param name="v">Element to push in the queue.</param>
            <returns>True if the new element could be pushed in the queue. False if reserved memory was not enough.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.FixedBufferStringQueue.TryPop(System.String@)">
            <summary>
            Pop an element of the queue.
            </summary>
            <param name="v">Output result string.</param>
            <returns>True if an element was succesfuly poped.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.FixedBufferStringQueue.Clear">
            <summary>
            Clear the queue.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.CoreUnsafeUtils.IKeyGetter`2">
            <summary>
            Key Getter interface.
            </summary>
            <typeparam name="TValue">Value</typeparam>
            <typeparam name="TKey">Key</typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.IKeyGetter`2.Get(`0@)">
            <summary>Getter</summary>
            <param name="v">The value</param>
            <returns>The key</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.CopyTo``1(System.Collections.Generic.List{``0},System.Void*,System.Int32)">
            <summary>
            Extension method to copy elements of a list into a buffer.
            </summary>
            <typeparam name="T">Type of the provided List.</typeparam>
            <param name="list">Input List.</param>
            <param name="dest">Destination buffer.</param>
            <param name="count">Number of elements to copy.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.CopyTo``1(``0[],System.Void*,System.Int32)">
            <summary>
            Extension method to copy elements of an array into a buffer.
            </summary>
            <typeparam name="T">Type of the provided array.</typeparam>
            <param name="list">Input List.</param>
            <param name="dest">Destination buffer.</param>
            <param name="count">Number of elements to copy.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.MergeSort(System.UInt32[],System.Int32,System.UInt32[]@)">
            <summary>
            Merge sort - non recursive
            </summary>
            <param name="arr">Array to sort.</param>
            <param name="sortSize">Size of the array to sort. If greater than array capacity, it will get clamped.</param>
            <param name="supportArray">Secondary array reference, used to store intermediate merge results.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.MergeSort(Unity.Collections.NativeArray{System.UInt32},System.Int32,Unity.Collections.NativeArray{System.UInt32}@)">
            <summary>
            Merge sort - non recursive
            </summary>
            <param name="arr">Array to sort.</param>
            <param name="sortSize">Size of the array to sort. If greater than array capacity, it will get clamped.</param>
            <param name="supportArray">Secondary array reference, used to store intermediate merge results.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.InsertionSort(System.UInt32[],System.Int32)">
            <summary>
            Insertion sort
            </summary>
            <param name="arr">Array to sort.</param>
            <param name="sortSize">Size of the array to sort. If greater than array capacity, it will get clamped.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.InsertionSort(Unity.Collections.NativeArray{System.UInt32},System.Int32)">
            <summary>
            Insertion sort
            </summary>
            <param name="arr">Array to sort.</param>
            <param name="sortSize">Size of the array to sort. If greater than array capacity, it will get clamped.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.RadixSort(System.UInt32[],System.Int32,System.UInt32[]@,System.Int32)">
            <summary>
            Radix sort or bucket sort, stable and non in place.
            </summary>
            <param name="arr">Array to sort.</param>
            <param name="sortSize">Size of the array to sort. If greater than array capacity, it will get clamped.</param>
            <param name="supportArray">Array of uints that is used for support data. The algorithm will automatically allocate it if necessary.</param>
            <param name="radixBits">Number of bits to use for each bucket. Can only be 8, 4 or 2.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.RadixSort(Unity.Collections.NativeArray{System.UInt32},System.Int32,Unity.Collections.NativeArray{System.UInt32}@,System.Int32)">
            <summary>
            Radix sort or bucket sort, stable and non in place.
            </summary>
            <param name="array">Array to sort.</param>
            <param name="sortSize">Size of the array to sort. If greater than array capacity, it will get clamped.</param>
            <param name="supportArray">Array of uints that is used for support data. The algorithm will automatically allocate it if necessary.</param>
            <param name="radixBits">Number of bits to use for each bucket. Can only be 8, 4 or 2.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.QuickSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Quick Sort
            </summary>
            <param name="arr">uint array.</param>
            <param name="left">Left boundary.</param>
            <param name="right">Left boundary.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.QuickSort``1(System.Int32,System.Void*)">
            <summary>
            Quick sort.
            </summary>
            <typeparam name="T">Type to compare.</typeparam>
            <param name="count">Number of element.</param>
            <param name="data">Buffer to sort.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.QuickSort``3(System.Int32,System.Void*)">
            <summary>
            Quick sort.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <typeparam name="TKey">Key Type.</typeparam>
            <typeparam name="TGetter">Getter type.</typeparam>
            <param name="count">Number of element.</param>
            <param name="data">Data to sort.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.QuickSort``3(System.Void*,System.Int32,System.Int32)">
            <summary>
            Quick sort.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <typeparam name="TKey">Key Type.</typeparam>
            <typeparam name="TGetter">Getter type.</typeparam>
            <param name="data">Data to sort.</param>
            <param name="left">Left boundary.</param>
            <param name="right">Right boundary.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.IndexOf``1(System.Void*,System.Int32,``0)">
            <summary>
            Index of an element in a buffer.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="data">Data buffer.</param>
            <param name="count">Number of elements.</param>
            <param name="v">Element to test against.</param>
            <returns>The first index of the provided element.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.CompareHashes``4(System.Int32,System.Void*,System.Int32,System.Void*,System.Int32*,System.Int32*,System.Int32@,System.Int32@)">
             <summary>
             Compare hashes of two collections and provide
             a list of indices <paramref name="removeIndices"/> to remove in <paramref name="oldHashes"/>
             and a list of indices <paramref name="addIndices"/> to add in <paramref name="newHashes"/>.
            
             Assumes that <paramref name="newHashes"/> and <paramref name="oldHashes"/> are sorted.
             </summary>
             <typeparam name="TOldValue">Old value type.</typeparam>
             <typeparam name="TOldGetter">Old getter type.</typeparam>
             <typeparam name="TNewValue">New value type.</typeparam>
             <typeparam name="TNewGetter">New getter type.</typeparam>
             <param name="oldHashCount">Number of hashes in <paramref name="oldHashes"/>.</param>
             <param name="oldHashes">Previous hashes to compare.</param>
             <param name="newHashCount">Number of hashes in <paramref name="newHashes"/>.</param>
             <param name="newHashes">New hashes to compare.</param>
             <param name="addIndices">Indices of element to add in <paramref name="newHashes"/> will be written here.</param>
             <param name="removeIndices">Indices of element to remove in <paramref name="oldHashes"/> will be written here.</param>
             <param name="addCount">Number of elements to add will be written here.</param>
             <param name="remCount">Number of elements to remove will be written here.</param>
             <returns>The number of operation to perform (<code><paramref name="addCount"/> + <paramref name="remCount"/></code>)</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.CompareHashes(System.Int32,UnityEngine.Hash128*,System.Int32,UnityEngine.Hash128*,System.Int32*,System.Int32*,System.Int32@,System.Int32@)">
            <summary>
            Compare hashes.
            </summary>
            <param name="oldHashCount">Number of hashes in <paramref name="oldHashes"/>.</param>
            <param name="oldHashes">Previous hashes to compare.</param>
            <param name="newHashCount">Number of hashes in <paramref name="newHashes"/>.</param>
            <param name="newHashes">New hashes to compare.</param>
            <param name="addIndices">Indices of element to add in <paramref name="newHashes"/> will be written here.</param>
            <param name="removeIndices">Indices of element to remove in <paramref name="oldHashes"/> will be written here.</param>
            <param name="addCount">Number of elements to add will be written here.</param>
            <param name="remCount">Number of elements to remove will be written here.</param>
            <returns>The number of operation to perform (<code><paramref name="addCount"/> + <paramref name="remCount"/></code>)</returns>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.CombineHashes``2(System.Int32,System.Void*,UnityEngine.Hash128*)">
            <summary>Combine all of the hashes of a collection of hashes.</summary>
            <typeparam name="TValue">Value type.</typeparam>
            <typeparam name="TGetter">Getter type.</typeparam>
            <param name="count">Number of hash to combine.</param>
            <param name="hashes">Hashes to combine.</param>
            <param name="outHash">Hash to update.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.CombineHashes(System.Int32,UnityEngine.Hash128*,UnityEngine.Hash128*)">
            <summary>
            Combine hashes.
            </summary>
            <param name="count">Number of hash to combine.</param>
            <param name="hashes">Hashes to combine.</param>
            <param name="outHash">Hash to update.</param>
        </member>
        <member name="M:UnityEngine.Rendering.CoreUnsafeUtils.HaveDuplicates(System.Int32[])">
            <summary>
            Checks for duplicates in an array.
            </summary>
            <param name="arr">Input array.</param>
            <returns>True if there is any duplicate in the input array.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ResourceReloader">
            <summary>
            The resources that need to be reloaded in Editor can live in Runtime.
            The reload call should only be done in Editor context though but it
            could be called from runtime entities.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ResourceReloader.TryReloadAllNullIn(System.Object,System.String)">
            <summary>
            Looks for resources in the given <paramref name="container"/> object and reload the ones
            that are missing or broken.
            This version will still return null value without throwing error if the issue is due to
            AssetDatabase being not ready. But in this case the assetDatabaseNotReady result will be true.
            </summary>
            <param name="container">The object containing reload-able resources</param>
            <param name="basePath">The base path for the package</param>
            <returns>
              - 1 hasChange: True if something have been reloaded.
              - 2 assetDatabaseNotReady: True if the issue preventing loading is due to state of AssetDatabase
            </returns>
        </member>
        <member name="M:UnityEngine.Rendering.ResourceReloader.ReloadAllNullIn(System.Object,System.String)">
            <summary>
            Looks for resources in the given <paramref name="container"/> object and reload the ones
            that are missing or broken.
            </summary>
            <param name="container">The object containing reload-able resources</param>
            <param name="basePath">The base path for the package</param>
            <returns>True if something have been reloaded.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.ReloadAttribute">
            <summary>
            Attribute specifying information to reload with <see cref="T:UnityEngine.Rendering.ResourceReloader"/>. This is only
            used in the editor and doesn't have any effect at runtime.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.ResourceReloader"/>
            <seealso cref="T:UnityEngine.Rendering.ReloadGroupAttribute"/>
        </member>
        <member name="T:UnityEngine.Rendering.ReloadAttribute.Package">
            <summary>
            Lookup method for a resource.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ReloadAttribute.Package.Builtin">
            <summary>
            Used for builtin resources when the resource isn't part of the package (i.e. builtin
            shaders).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ReloadAttribute.Package.Root">
            <summary>
            Used for resources inside the package.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ReloadAttribute.Package.BuiltinExtra">
            <summary>
            Used for builtin extra resources when the resource isn't part of the package (i.e. builtin
            extra Sprite).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ReloadAttribute.package">
            <summary>
            The lookup method.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ReloadAttribute.paths">
            <summary>
            Search paths.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ReloadAttribute.#ctor(System.String[],UnityEngine.Rendering.ReloadAttribute.Package)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.ReloadAttribute"/> for an array by specifying each resource
            path individually.
            </summary>
            <param name="paths">Search paths</param>
            <param name="package">The lookup method</param>
        </member>
        <member name="M:UnityEngine.Rendering.ReloadAttribute.#ctor(System.String,UnityEngine.Rendering.ReloadAttribute.Package)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.ReloadAttribute"/> for a single resource.
            </summary>
            <param name="path">Search path</param>
            <param name="package">The lookup method</param>
        </member>
        <member name="M:UnityEngine.Rendering.ReloadAttribute.#ctor(System.String,System.Int32,System.Int32,UnityEngine.Rendering.ReloadAttribute.Package)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.ReloadAttribute"/> for an array using automatic path name
            numbering.
            </summary>
            <param name="pathFormat">The format used for the path</param>
            <param name="rangeMin">The array start index (inclusive)</param>
            <param name="rangeMax">The array end index (exclusive)</param>
            <param name="package">The lookup method</param>
        </member>
        <member name="T:UnityEngine.Rendering.ReloadGroupAttribute">
            <summary>
            Attribute specifying that it contains element that should be reloaded.
            If the instance of the class is null, the system will try to recreate
            it with the default constructor.
            Be sure classes using it have default constructor!
            </summary>
            <seealso cref="T:UnityEngine.Rendering.ReloadAttribute"/>
        </member>
        <member name="T:UnityEngine.Rendering.PerformanceBottleneck">
            <summary>
            Represents a system bottleneck, meaning the factor that is most dominant in determining
            the total frame time.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.BottleneckHistogram">
            <summary>
            BottleneckHistogram represents the distribution of bottlenecks over the Bottleneck History Window,
            the size of which is determined by <see cref="P:UnityEngine.Rendering.DebugFrameTiming.bottleneckHistorySize"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.BottleneckHistory">
            <summary>
            Container class for bottleneck history with helper to calculate histogram.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ProbeVolumePerSceneData">
            <summary>
            A component that stores baked probe volume state and data references. Normally hidden from the user.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumePerSceneData.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            <summary>
            OnAfterDeserialize implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumePerSceneData.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            <summary>
            OnBeforeSerialize implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeVolumePerSceneData.StripSupportData">
            <summary>
            Call this function during OnProcessScene to strip debug from project builds.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Texture2DAtlas">
            <summary>
            A generic Atlas texture of 2D textures.
            An atlas texture is a texture collection that collects multiple sub-textures into a single big texture.
            Sub-texture allocation for Texture2DAtlas is static and will not change after initial allocation.
            Does not add mipmap padding for sub-textures.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.kGPUTexInvalid">
            <summary>
            Texture is not on the GPU or is not up to date.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.kGPUTexValidMip0">
            <summary>
            Texture Mip0 is on the GPU and up to date.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.kGPUTexValidMipAll">
            <summary>
            Texture and all mips are on the GPU and up to date.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.m_AtlasTexture">
            <summary>
            The texture for the atlas.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.m_Width">
            <summary>
            Width of the atlas.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.m_Height">
            <summary>
            Height of the atlas.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.m_Format">
            <summary>
            Format of the atlas.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Texture2DAtlas.m_UseMipMaps">
            <summary>
            Atlas uses mip maps.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Texture2DAtlas.maxMipLevelPadding">
            <summary>
            Maximum mip padding (pow2) that can be applied to the textures in the atlas
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Texture2DAtlas.AtlasTexture">
            <summary>
            Handle to the texture of the atlas.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.#ctor(System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.FilterMode,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new empty texture atlas.
            </summary>
            <param name="width">Width of the atlas in pixels.</param>
            <param name="height">Height of atlas in pixels.</param>
            <param name="format">GraphicsFormat of the atlas.</param>
            <param name="filterMode">Filtering mode of the atlas.</param>
            <param name="powerOfTwoPadding">Power of two padding.</param>
            <param name="name">Name of the atlas</param>
            <param name="useMipMap">Use mip maps</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.Release">
            <summary>
            Release atlas resources.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.ResetAllocator">
            <summary>
            Clear atlas sub-texture allocations.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.ClearTarget(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Clear atlas texture.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.GetTextureMipmapCount(System.Int32,System.Int32)">
            <summary>
            Return texture mip map count based on the width and height.
            </summary>
            <param name="width">The texture width in pixels.</param>
            <param name="height">The texture height in pixels.</param>
            <returns>The number of mip maps.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.Is2D(UnityEngine.Texture)">
            <summary>
            Test if a texture is a 2D texture.
            </summary>
            <param name="texture">Source texture.</param>
            <returns>True if texture is 2D, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.IsSingleChannelBlit(UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Checks if single/multi/single channel format conversion is required.
            </summary>
            <param name="source">Blit source texture</param>
            <param name="destination">Blit destination texture</param>
            <returns>true on single channel conversion false otherwise</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.MarkGPUTextureValid(System.Int32,System.Boolean)">
            <summary>
            Mark texture valid on the GPU.
            </summary>
            <param name="instanceId">Texture instance ID.</param>
            <param name="mipAreValid">Texture has valid mip maps.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.MarkGPUTextureInvalid(System.Int32)">
            <summary>
            Mark texture invalid on the GPU.
            </summary>
            <param name="instanceId">Texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.BlitTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,UnityEngine.Vector4,System.Boolean,System.Int32)">
            <summary>
            Blit 2D texture into the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.BlitOctahedralTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,UnityEngine.Vector4,System.Boolean,System.Int32)">
            <summary>
            Blit octahedral texture into the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.BlitCubeTexture2D(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4,UnityEngine.Texture,System.Boolean,System.Int32)">
            <summary>
            Blit and project Cube texture into a 2D texture in the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="blitMips">Blit mip maps.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.AllocateTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4@,UnityEngine.Texture,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocate space from the atlas for a texture and copy texture contents into the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="texture">Source Texture</param>
            <param name="width">Request width in pixels.</param>
            <param name="height">Request height in pixels.</param>
            <param name="overrideInstanceID">Override texture instance ID.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.AllocateTextureWithoutBlit(UnityEngine.Texture,System.Int32,System.Int32,UnityEngine.Vector4@)">
            <summary>
            Allocate space from the atlas for a texture.
            </summary>
            <param name="texture">Source texture.</param>
            <param name="width">Request width in pixels.</param>
            <param name="height">Request height in pixels.</param>
            <param name="scaleOffset">Allocated scale (.xy) and offset (.zw).</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.AllocateTextureWithoutBlit(System.Int32,System.Int32,System.Int32,UnityEngine.Vector4@)">
            <summary>
            Allocate space from the atlas for a texture.
            </summary>
            <param name="instanceId">Source texture instance ID.</param>
            <param name="width">Request width in pixels.</param>
            <param name="height">Request height in pixels.</param>
            <param name="scaleOffset">Allocated scale (.xy) and offset (.zw).</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.GetTextureHash(UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Compute hash from texture properties.
            </summary>
            <param name="textureA">Source texture A.</param>
            <param name="textureB">Source texture B.</param>
            <returns>Hash of texture porperties.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.GetTextureID(UnityEngine.Texture)">
            <summary>
            Get sub-texture ID for the atlas.
            </summary>
            <param name="texture">Source texture.</param>
            <returns>Texture instance ID.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.GetTextureID(UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Get sub-texture ID for the atlas.
            </summary>
            <param name="textureA">Source texture A.</param>
            <param name="textureB">Source texture B.</param>
            <returns>Combined texture instance ID.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.IsCached(UnityEngine.Vector4@,UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Check if the atlas contains the textures.
            </summary>
            <param name="scaleOffset">Texture scale (.xy) and offset (.zw).</param>
            <param name="textureA">Source texture A.</param>
            <param name="textureB">Source texture B.</param>
            <returns>True if the texture is in the atlas, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.IsCached(UnityEngine.Vector4@,UnityEngine.Texture)">
            <summary>
            Check if the atlas contains the textures.
            </summary>
            <param name="scaleOffset">Texture scale (.xy) and offset (.zw).</param>
            <param name="texture">Source texture</param>
            <returns>True if the texture is in the atlas, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.IsCached(UnityEngine.Vector4@,System.Int32)">
            <summary>
            Check if the atlas contains the texture.
            </summary>
            <param name="scaleOffset">Texture scale (.xy) and offset (.zw).</param>
            <param name="id">Source texture instance ID.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.GetCachedTextureSize(System.Int32)">
            <summary>
            Get cached texture size.
            </summary>
            <param name="id">Source texture instance ID.</param>
            <returns>Texture size.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.NeedsUpdate(UnityEngine.Texture,System.Boolean)">
            <summary>
            Check if contents of a texture needs to be updated in the atlas.
            </summary>
            <param name="texture">Source texture.</param>
            <param name="needMips">Texture uses mips.</param>
            <returns>True if texture needs update, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.NeedsUpdate(UnityEngine.Texture,UnityEngine.Texture,System.Boolean)">
            <summary>
            Check if contents of a texture needs to be updated in the atlas.
            </summary>
            <param name="textureA">Source texture A.</param>
            <param name="textureB">Source texture B.</param>
            <param name="needMips">Texture uses mips.</param>
            <returns>True if texture needs update, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.AddTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Vector4@,UnityEngine.Texture)">
            <summary>
            Add a texture into the atlas.
            </summary>
            <param name="cmd">Command buffer used for texture copy.</param>
            <param name="scaleOffset">Sub-texture rectangle for the added texture. Scale in .xy, offset int .zw</param>
            <param name="texture">The texture to be added.</param>
            <returns>True if the atlas contains the texture, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.UpdateTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Vector4@,UnityEngine.Vector4,System.Boolean,System.Boolean)">
            <summary>
            Update a texture in the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="oldTexture">Texture in atlas.</param>
            <param name="newTexture">Replacement source texture.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="sourceScaleOffset">Source scale (.xy) and offset(.zw).</param>
            <param name="updateIfNeeded">Enable texture blit.</param>
            <param name="blitMips">Blit mip maps.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Texture2DAtlas.UpdateTexture(UnityEngine.Rendering.CommandBuffer,UnityEngine.Texture,UnityEngine.Vector4@,System.Boolean,System.Boolean)">
            <summary>
            Update a texture in the atlas.
            </summary>
            <param name="cmd">Target command buffer for graphics commands.</param>
            <param name="texture">Texture in atlas.</param>
            <param name="scaleOffset">Destination scale (.xy) and offset (.zw)</param>
            <param name="updateIfNeeded">Enable texture blit.</param>
            <param name="blitMips">Blit mip maps.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.DisplayInfoAttribute">
            <summary>
            Attribute used to customize UI display.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.DisplayInfoAttribute.name">
            <summary>Display name used in UI.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.DisplayInfoAttribute.order">
            <summary>Display order used in UI.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.AdditionalPropertyAttribute">
            <summary>
            Attribute used to customize UI display to allow properties only be visible when "Show Additional Properties" is selected
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.ShaderVariantLogLevel">
            <summary>
            Specifies the logging level for shader variants
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.ShaderVariantLogLevel.Disabled">
            <summary>Disable all log for Shader Variant</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ShaderVariantLogLevel.OnlySRPShaders">
            <summary>Only logs SRP Shaders when logging Shader Variant</summary>
        </member>
        <member name="F:UnityEngine.Rendering.ShaderVariantLogLevel.AllShaders">
            <summary>Logs all Shader Variant</summary>
        </member>
        <member name="T:UnityEngine.Rendering.IShaderVariantSettings">
            <summary>
            Exposes settings for shader variants
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IShaderVariantSettings.shaderVariantLogLevel">
            <summary>
            Specifies the level of the logging for shader variants
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.IShaderVariantSettings.exportShaderVariants">
            <summary>
            Specifies if the stripping of the shaders variants needs to be exported
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.SHCoefficients">
             <summary>
             Contains spherical harmonic coefficients used for lighting representation in the format
             expected by <c>DOTS_INSTANCING_ON</c> shaders.
            
             The size of the struct is padded to a power of two so arrays of such structs can be efficiently
             indexed in shaders.
             </summary>
             <seealso cref="T:UnityEngine.Rendering.SphericalHarmonicsL2"/>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHAr">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHAr</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHAg">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHAg</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHAb">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHAb</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHBr">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHBr</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHBg">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHBg</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHBb">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHBb</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.SHC">
            <summary>
            Contains the SH coefficients that correspond to the <c>unity_SHC</c> shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.SHCoefficients.ProbesOcclusion">
            <summary>
            Contains the baked shadowing data that corresponds to the <c>unity_ProbesOcclusion</c> shader property.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.#ctor(UnityEngine.Rendering.SphericalHarmonicsL2)">
            <summary>
            Construct an instance of <c>SHCoefficients</c> that represents the same spherical
            harmonic coefficients as the parameter.
            </summary>
            <param name="sh">The spherical harmonic coefficients to initialize with.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.#ctor(UnityEngine.Rendering.SphericalHarmonicsL2,UnityEngine.Vector4)">
            <summary>
            Construct an instance of <c>SHCoefficients</c> that represents the same spherical
            harmonic coefficients as the parameter.
            </summary>
            <param name="sh">The spherical harmonic coefficients to initialize with.</param>
            <param name="probesOcclusion">The baked shadowing data to include with this set of spherical harmonic coefficients.</param>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.Equals(UnityEngine.Rendering.SHCoefficients)">
            <summary>
            Equals implementation.
            </summary>
            <param name="other">Other SHCoefficients instance to comapre this against.</param>
            <returns>True if contents are equal, False otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.Equals(System.Object)">
            <summary>
            Equals implementation.
            </summary>
            <param name="obj">Other object to compare this object against</param>
            <returns>True if contents are equal, False otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.GetHashCode">
            <summary>
            GetHashCode implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.op_Equality(UnityEngine.Rendering.SHCoefficients,UnityEngine.Rendering.SHCoefficients)">
            <summary>
            Equality operator implementation.
            </summary>
            <param name="left">Left operand of comparison</param>
            <param name="right">Right operand of comparison</param>
            <returns>True if contents are equal, False otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.SHCoefficients.op_Inequality(UnityEngine.Rendering.SHCoefficients,UnityEngine.Rendering.SHCoefficients)">
            <summary>
            Not equals operator implementation.
            </summary>
            <param name="left">Left operand of comparison</param>
            <param name="right">Right operand of comparison</param>
            <returns>True if contents are not equal, False otherwise.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.BatchRendererGroupGlobals">
            <summary>
            Contains default values for built-in properties that the user is expected to manually
            provide for <c>DOTS_INSTANCING_ON</c> shaders. The struct layout matches the
            <c>unity_DOTSInstanceGlobalValues</c> constant buffer the shader expects the default
            values in.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BatchRendererGroupGlobals.kGlobalsPropertyName">
            <summary>
            The string name of the constant buffer <c>DOTS_INSTANCING_ON</c> shaders use
            to read default values for the built-in properties contained in this struct.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BatchRendererGroupGlobals.kGlobalsPropertyId">
            <summary>
            The unique identifier for <see cref="F:UnityEngine.Rendering.BatchRendererGroupGlobals.kGlobalsPropertyName"/>, retrieved using
            <see cref="M:UnityEngine.Shader.PropertyToID(System.String)"/>.
            </summary>
            <seealso cref="M:UnityEngine.Shader.PropertyToID(System.String)"/>
        </member>
        <member name="F:UnityEngine.Rendering.BatchRendererGroupGlobals.ProbesOcclusion">
            <summary>
            The default value to use for the <c>unity_ProbesOcclusion</c> built-in shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BatchRendererGroupGlobals.SpecCube0_HDR">
            <summary>
            The default value to use for the <c>unity_SpecCube0_HDR</c> built-in shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BatchRendererGroupGlobals.SpecCube1_HDR">
            <summary>
            The default value to use for the <c>unity_SpecCube1_HDR</c> built-in shader property.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.BatchRendererGroupGlobals.SHCoefficients">
            <summary>
            The default values to use for the built-in spherical harmonics shader properties.
            </summary>
            <seealso cref="F:UnityEngine.Rendering.BatchRendererGroupGlobals.SHCoefficients"/>
        </member>
        <member name="P:UnityEngine.Rendering.BatchRendererGroupGlobals.Default">
            <summary>
            Construct a struct with default values based on the currently active reflection probe
            and ambient lighting settings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.BatchRendererGroupGlobals.Equals(UnityEngine.Rendering.BatchRendererGroupGlobals)">
            <summary>
            Equals implementation.
            </summary>
            <param name="other">Other BatchRendererGroupGlobals instance to comapre this against.</param>
            <returns>True if contents are equal, False otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BatchRendererGroupGlobals.Equals(System.Object)">
            <summary>
            Equals implementation.
            </summary>
            <param name="obj">Other object to comapre this against.</param>
            <returns>True if contents are equal, False otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BatchRendererGroupGlobals.GetHashCode">
            <summary>
            GetHashCode implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.BatchRendererGroupGlobals.op_Equality(UnityEngine.Rendering.BatchRendererGroupGlobals,UnityEngine.Rendering.BatchRendererGroupGlobals)">
            <summary>
            Equality operator implementation.
            </summary>
            <param name="left">Left operand of comparison</param>
            <param name="right">Right operand of comparison</param>
            <returns>True if contents are equal, False otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.BatchRendererGroupGlobals.op_Inequality(UnityEngine.Rendering.BatchRendererGroupGlobals,UnityEngine.Rendering.BatchRendererGroupGlobals)">
            <summary>
            Not equals operator implementation.
            </summary>
            <param name="left">Left operand of comparison</param>
            <param name="right">Right operand of comparison</param>
            <returns>True if contents are not equal, False otherwise.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.IDebugDisplaySettingsData">
            <summary>
            Debug UI panel interface
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.IDebugDisplaySettingsData.CreatePanel">
            <summary>
            Creates the debug UI panel needed for these debug settings.
            </summary>
            <returns>The debug UI panel created.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.LensFlareComponentSRP">
            <summary>
            Data-Driven Lens Flare can be added on any gameobject
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.LensFlareComponentSRP.lensFlareData">
            <summary>
            Lens flare asset used on this component
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.intensity">
            <summary>
            Intensity
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.maxAttenuationDistance">
            <summary>
            Distance used to scale the Distance Attenuation Curve
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.maxAttenuationScale">
            <summary>
            Distance used to scale the Scale Attenuation Curve
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.distanceAttenuationCurve">
            <summary>
            Attenuation by distance
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.scaleByDistanceCurve">
            <summary>
            Scale by distance, use the same distance as distanceAttenuationCurve
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.attenuationByLightShape">
            <summary>
            If component attached to a light, attenuation the lens flare per light type
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.radialScreenAttenuationCurve">
            <summary>
            Attenuation used radially, which allow for instance to enable flare only on the edge of the screen
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.useOcclusion">
            <summary>
            Enable Occlusion feature
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.occlusionRadius">
            <summary>
            Radius around the light used to occlude the flare (value in world space)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.sampleCount">
            <summary>
            Random Samples Count used inside the disk with 'occlusionRadius'
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.occlusionOffset">
            <summary>
            Z Occlusion Offset allow us to offset the plane where the disc of occlusion is place (closer to camera), value on world space.
            Useful for instance to sample occlusion outside a light bulb if we place a flare inside the light bulb
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.scale">
            <summary>
            Global Scale
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.allowOffScreen">
            <summary>
            If allowOffScreen is true then If the lens flare is outside the screen we still emit the flare on screen
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.volumetricCloudOcclusion">
            <summary>
            If volumetricCloudOcclusion is true then use the volumetric cloud (on HDRP only) for the occlusion
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.sCelestialAngularRadius">
            Our default celestial body will have an angular radius of 3.3 degrees. This is an arbitrary number, but must be kept constant
            so the occlusion radius for direct lights is consistent regardless of near / far clip plane configuration.
        </member>
        <member name="F:UnityEngine.Rendering.LensFlareComponentSRP.occlusionRemapCurve">
            <summary>
            OcclusionRemapCurve allow the occlusion [from 0 to 1] to be remap with any desired shape.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareComponentSRP.celestialProjectedOcclusionRadius(UnityEngine.Camera)">
            <summary>
            Retrieves the projected occlusion radius from a particular celestial in the infinity plane with an angular radius.
            This is used for directional lights which require to have consistent occlusion radius regardless of the near/farplane configuration.
            </summary>
            <param name="mainCam">The camera utilized to calculate the occlusion radius</param>
            <returns>The value, in world units, of the occlusion angular radius.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareComponentSRP.OnEnable">
            <summary>
            Add or remove the lens flare to the queue of PostProcess
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareComponentSRP.OnDisable">
            <summary>
            Remove the lens flare from the queue of PostProcess
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.LensFlareComponentSRP.OnValidate">
            <summary>
            Add or remove the lens flare from the queue of PostProcess
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle">
            <summary>
            Compute Buffer resource handle.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle.nullHandle">
            <summary>
            Returns a null compute buffer handle
            </summary>
            <returns>A null compute buffer handle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle)~UnityEngine.ComputeBuffer">
            <summary>
            Cast to ComputeBuffer
            </summary>
            <param name="buffer">Input ComputeBufferHandle</param>
            <returns>Resource as a Compute Buffer.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle.IsValid">
            <summary>
            Return true if the handle is valid.
            </summary>
            <returns>True if the handle is valid.</returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc">
            <summary>
            Descriptor used to create compute buffer resources
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.count">
            <summary>Number of elements in the buffer..</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.stride">
            <summary>Size of one element in the buffer. Has to match size of buffer type in the shader.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.type">
            <summary>Type of the buffer, default is ComputeBufferType.Default (structured buffer).</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.name">
            <summary>Compute Buffer name.</summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.#ctor(System.Int32,System.Int32)">
            <summary>
            ComputeBufferDesc constructor.
            </summary>
            <param name="count">Number of elements in the buffer.</param>
            <param name="stride">Size of one element in the buffer.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.#ctor(System.Int32,System.Int32,UnityEngine.ComputeBufferType)">
            <summary>
            ComputeBufferDesc constructor.
            </summary>
            <param name="count">Number of elements in the buffer.</param>
            <param name="stride">Size of one element in the buffer.</param>
            <param name="type">Type of the buffer.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc.GetHashCode">
            <summary>
            Hash function
            </summary>
            <returns>The texture descriptor hash.</returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess">
            <summary>
            Sets the read and write access for the depth buffer.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess.Read">
            <summary>Read Access.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess.Write">
            <summary>Write Access.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess.ReadWrite">
            <summary>Read and Write Access.</summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext">
            <summary>
            This class specifies the context given to every render pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext.renderContext">
            <summary>Scriptable Render Context used for rendering.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext.cmd">
            <summary>Command Buffer used for rendering.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext.renderGraphPool">
            <summary>Render Graph pool used for temporary data.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphContext.defaultResources">
            <summary>Render Graph default resources.</summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters">
            <summary>
            This struct contains properties which control the execution of the Render Graph.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters.executionName">
            <summary>Identifier for this render graph execution.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters.currentFrameIndex">
            <summary>Index of the current frame being rendered.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters.rendererListCulling">
            <summary> Controls whether to enable Renderer List culling or not.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters.scriptableRenderContext">
            <summary>Scriptable Render Context used by the render pipeline.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters.commandBuffer">
            <summary>Command Buffer used to execute graphic commands.</summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphExecution">
            <summary>
            This struct is used to define the scope where the Render Graph is recorded before the execution.
            When this struct goes out of scope or is disposed, the Render Graph will be automatically executed.
            </summary>
            <seealso cref="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.RecordAndExecute(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters@)"/>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphExecution.#ctor(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph)">
            <summary>
            Internal constructor for RenderGraphExecution
            </summary>
            <param name="renderGraph">renderGraph</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphExecution.Dispose">
            <summary>
            This function triggers the Render Graph to be executed.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderFunc`1">
            <summary>
            The Render Pass rendering delegate.
            </summary>
            <typeparam name="PassData">The type of the class used to provide data to the Render Pass.</typeparam>
            <param name="data">Render Pass specific data.</param>
            <param name="renderGraphContext">Global Render Graph context.</param>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph">
            <summary>
            This class is the main entry point of the Render Graph system.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.kMaxMRTCount">
            <summary>Maximum number of MRTs supported by Render Graph.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.name">
            <summary>Name of the Render Graph.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.requireDebugData">
            <summary>If true, the Render Graph will generate execution debug information.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.defaultResources">
            <summary>
            Set of default resources usable in a pass rendering code.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.#ctor(System.String)">
            <summary>
            Render Graph constructor.
            </summary>
            <param name="name">Optional name used to identify the render graph instnace.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.Cleanup">
            <summary>
            Cleanup the Render Graph.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.RegisterDebug(UnityEngine.Rendering.DebugUI.Panel)">
            <summary>
            Register the render graph to the debug window.
            </summary>
            <param name="panel"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.UnRegisterDebug">
            <summary>
            Unregister render graph from the debug window.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.GetRegisteredRenderGraphs">
            <summary>
            Get the list of all registered render graphs.
            </summary>
            <returns>The list of all registered render graphs.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.GetDebugData(System.String)">
            <summary>
            Returns the last rendered frame debug data. Can be null if requireDebugData is set to false.
            </summary>
            <returns>The last rendered frame debug data</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.EndFrame">
            <summary>
            End frame processing. Purge resources that have been used since last frame and resets internal states.
            This need to be called once per frame.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.ImportTexture(UnityEngine.Rendering.RTHandle)">
            <summary>
            Import an external texture to the Render Graph.
            Any pass writing to an imported texture will be considered having side effects and can't be automatically culled.
            </summary>
            <param name="rt">External RTHandle that needs to be imported.</param>
            <returns>A new TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.ImportBackbuffer(UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Import the final backbuffer to render graph.
            </summary>
            <param name="rt">Backbuffer render target identifier.</param>
            <returns>A new TextureHandle for the backbuffer.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc@)">
            <summary>
            Create a new Render Graph Texture resource.
            </summary>
            <param name="desc">Texture descriptor.</param>
            <returns>A new TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateSharedTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc@,System.Boolean)">
            <summary>
            Create a new Render Graph Shared Texture resource.
            This texture will be persistent across render graph executions.
            </summary>
            <param name="desc">Creation descriptor of the texture.</param>
            <param name="explicitRelease">Set to true if you want to manage the lifetime of the resource yourself. Otherwise the resource will be released automatically if unused for a time.</param>
            <returns>A new TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.RefreshSharedTextureDesc(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle,UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc@)">
            <summary>
            Refresh a shared texture with a new descriptor.
            </summary>
            <param name="handle">Shared texture that needs to be updated.</param>
            <param name="desc">New Descriptor for the texture.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.ReleaseSharedTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)">
            <summary>
            Release a Render Graph shared texture resource.
            </summary>
            <param name="texture">The handle to the texture that needs to be release.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)">
            <summary>
            Create a new Render Graph Texture resource using the descriptor from another texture.
            </summary>
            <param name="texture">Texture from which the descriptor should be used.</param>
            <returns>A new TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateTextureIfInvalid(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc@,UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@)">
            <summary>
            Create a new Render Graph Texture if the passed handle is invalid and use said handle as output.
            If the passed handle is valid, no texture is created.
            </summary>
            <param name="desc">Desc used to create the texture.</param>
            <param name="texture">Texture from which the descriptor should be used.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.GetTextureDesc(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)">
            <summary>
            Gets the descriptor of the specified Texture resource.
            </summary>
            <param name="texture">Texture resource from which the descriptor is requested.</param>
            <returns>The input texture descriptor.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateRendererList(UnityEngine.Rendering.RendererUtils.RendererListDesc@)">
            <summary>
            Creates a new Renderer List Render Graph resource.
            </summary>
            <param name="desc">Renderer List descriptor.</param>
            <returns>A new TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.ImportComputeBuffer(UnityEngine.ComputeBuffer)">
            <summary>
            Import an external Compute Buffer to the Render Graph
            Any pass writing to an imported compute buffer will be considered having side effects and can't be automatically culled.
            </summary>
            <param name="computeBuffer">External Compute Buffer that needs to be imported.</param>
            <returns>A new ComputeBufferHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateComputeBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc@)">
            <summary>
            Create a new Render Graph Compute Buffer resource.
            </summary>
            <param name="desc">Compute Buffer descriptor.</param>
            <returns>A new ComputeBufferHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.CreateComputeBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle@)">
            <summary>
            Create a new Render Graph Compute Buffer resource using the descriptor from another compute buffer.
            </summary>
            <param name="computeBuffer">Compute Buffer from which the descriptor should be used.</param>
            <returns>A new ComputeBufferHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.GetComputeBufferDesc(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle@)">
            <summary>
            Gets the descriptor of the specified Compute Buffer resource.
            </summary>
            <param name="computeBuffer">Compute Buffer resource from which the descriptor is requested.</param>
            <returns>The input compute buffer descriptor.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.AddRenderPass``1(System.String,``0@,UnityEngine.Rendering.ProfilingSampler)">
            <summary>
            Add a new Render Pass to the Render Graph.
            </summary>
            <typeparam name="PassData">Type of the class to use to provide data to the Render Pass.</typeparam>
            <param name="passName">Name of the new Render Pass (this is also be used to generate a GPU profiling marker).</param>
            <param name="passData">Instance of PassData that is passed to the render function and you must fill.</param>
            <param name="sampler">Profiling sampler used around the pass.</param>
            <returns>A new instance of a RenderGraphBuilder used to setup the new Render Pass.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.AddRenderPass``1(System.String,``0@)">
            <summary>
            Add a new Render Pass to the Render Graph.
            </summary>
            <typeparam name="PassData">Type of the class to use to provide data to the Render Pass.</typeparam>
            <param name="passName">Name of the new Render Pass (this is also be used to generate a GPU profiling marker).</param>
            <param name="passData">Instance of PassData that is passed to the render function and you must fill.</param>
            <returns>A new instance of a RenderGraphBuilder used to setup the new Render Pass.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.RecordAndExecute(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphParameters@)">
            <summary>
            Starts the recording of the the render graph and then automatically execute when the return value goes out of scope.
            This must be called before adding any pass to the render graph.
            </summary>
            <param name="parameters">Parameters necessary for the render graph execution.</param>
            <example>
            This shows how to increment an integer.
            <code>
            using (renderGraph.RecordAndExecute(parameters))
            {
                // Add your render graph passes here.
            }
            </code>
            </example>
            <seealso cref="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphExecution"/>
            <returns><see cref="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphExecution"/></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.Execute">
            <summary>
            Execute the Render Graph in its current state.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.BeginProfilingSampler(UnityEngine.Rendering.ProfilingSampler)">
            <summary>
            Begin a profiling scope.
            </summary>
            <param name="sampler">Sampler used for profiling.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph.EndProfilingSampler(UnityEngine.Rendering.ProfilingSampler)">
            <summary>
            End a profiling scope.
            </summary>
            <param name="sampler">Sampler used for profiling.</param>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphProfilingScope">
            <summary>
            Render Graph Scoped Profiling markers
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphProfilingScope.#ctor(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph,UnityEngine.Rendering.ProfilingSampler)">
            <summary>
            Profiling Scope constructor
            </summary>
            <param name="renderGraph">Render Graph used for this scope.</param>
            <param name="sampler">Profiling Sampler to be used for this scope.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphProfilingScope.Dispose">
            <summary>
             Dispose pattern implementation
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle">
            <summary>
            Renderer List resource handle.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle)~System.Int32">
            <summary>
            Conversion to int.
            </summary>
            <param name="handle">Renderer List handle to convert.</param>
            <returns>The integer representation of the handle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle)~UnityEngine.Rendering.RendererList">
            <summary>
            Cast to RendererList
            </summary>
            <param name="rendererList">Input RendererListHandle.</param>
            <returns>Resource as a RendererList.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle.IsValid">
            <summary>
            Return true if the handle is valid.
            </summary>
            <returns>True if the handle is valid.</returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder">
            <summary>
            Use this struct to set up a new Render Pass.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.UseColorBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@,System.Int32)">
            <summary>
            Specify that the pass will use a Texture resource as a color render target.
            This has the same effect as WriteTexture and also automatically sets the Texture to use as a render target.
            </summary>
            <param name="input">The Texture resource to use as a color render target.</param>
            <param name="index">Index for multiple render target usage.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.UseDepthBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@,UnityEngine.Experimental.Rendering.RenderGraphModule.DepthAccess)">
            <summary>
            Specify that the pass will use a Texture resource as a depth buffer.
            </summary>
            <param name="input">The Texture resource to use as a depth buffer during the pass.</param>
            <param name="flags">Specify the access level for the depth buffer. This allows you to say whether you will read from or write to the depth buffer, or do both.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.ReadTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@)">
            <summary>
            Specify a Texture resource to read from during the pass.
            </summary>
            <param name="input">The Texture resource to read from during the pass.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.WriteTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@)">
            <summary>
            Specify a Texture resource to write to during the pass.
            </summary>
            <param name="input">The Texture resource to write to during the pass.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.ReadWriteTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@)">
            <summary>
            Specify a Texture resource to read and write to during the pass.
            </summary>
            <param name="input">The Texture resource to read and write to during the pass.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.CreateTransientTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc@)">
            <summary>
            Create a new Render Graph Texture resource.
            This texture will only be available for the current pass and will be assumed to be both written and read so users don't need to add explicit read/write declarations.
            </summary>
            <param name="desc">Texture descriptor.</param>
            <returns>A new transient TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.CreateTransientTexture(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle@)">
            <summary>
            Create a new Render Graph Texture resource using the descriptor from another texture.
            This texture will only be available for the current pass and will be assumed to be both written and read so users don't need to add explicit read/write declarations.
            </summary>
            <param name="texture">Texture from which the descriptor should be used.</param>
            <returns>A new transient TextureHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.UseRendererList(UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle@)">
            <summary>
            Specify a Renderer List resource to use during the pass.
            </summary>
            <param name="input">The Renderer List resource to use during the pass.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.ReadComputeBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle@)">
            <summary>
            Specify a Compute Buffer resource to read from during the pass.
            </summary>
            <param name="input">The Compute Buffer resource to read from during the pass.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.WriteComputeBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle@)">
            <summary>
            Specify a Compute Buffer resource to write to during the pass.
            </summary>
            <param name="input">The Compute Buffer resource to write to during the pass.</param>
            <returns>An updated resource handle to the input resource.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.CreateTransientComputeBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferDesc@)">
            <summary>
            Create a new Render Graph Compute Buffer resource.
            This Compute Buffer will only be available for the current pass and will be assumed to be both written and read so users don't need to add explicit read/write declarations.
            </summary>
            <param name="desc">Compute Buffer descriptor.</param>
            <returns>A new transient ComputeBufferHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.CreateTransientComputeBuffer(UnityEngine.Experimental.Rendering.RenderGraphModule.ComputeBufferHandle@)">
            <summary>
            Create a new Render Graph Compute Buffer resource using the descriptor from another Compute Buffer.
            This Compute Buffer will only be available for the current pass and will be assumed to be both written and read so users don't need to add explicit read/write declarations.
            </summary>
            <param name="computebuffer">Compute Buffer from which the descriptor should be used.</param>
            <returns>A new transient ComputeBufferHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.SetRenderFunc``1(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderFunc{``0})">
            <summary>
            Specify the render function to use for this pass.
            A call to this is mandatory for the pass to be valid.
            </summary>
            <typeparam name="PassData">The Type of the class that provides data to the Render Pass.</typeparam>
            <param name="renderFunc">Render function for the pass.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.EnableAsyncCompute(System.Boolean)">
            <summary>
            Enable asynchronous compute for this pass.
            </summary>
            <param name="value">Set to true to enable asynchronous compute.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.AllowPassCulling(System.Boolean)">
            <summary>
            Allow or not pass culling
            By default all passes can be culled out if the render graph detects it's not actually used.
            In some cases, a pass may not write or read any texture but rather do something with side effects (like setting a global texture parameter for example).
            This function can be used to tell the system that it should not cull this pass.
            </summary>
            <param name="value">True to allow pass culling.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.Dispose">
            <summary>
            Dispose the RenderGraphBuilder instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.AllowRendererListCulling(System.Boolean)">
            <summary>
            Allow or not pass culling based on renderer list results
            By default all passes can be culled out if the render graph detects they are using a renderer list that is empty (does not draw any geometry)
            In some cases, a pass may not write or read any texture but rather do something with side effects (like setting a global texture parameter for example).
            This function can be used to tell the system that it should not cull this pass.
            </summary>
            <param name="value">True to allow pass culling.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphBuilder.DependsOn(UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle@)">
            <summary>
            Used to indicate that a pass depends on an external renderer list (that is not directly used in this pass).
            </summary>
            <param name="input">The renderer list handle this pass depends on.</param>
            <returns>A <see cref="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RendererListHandle"/></returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool">
            <summary>
            Helper class provided in the RenderGraphContext to all Render Passes.
            It allows you to do temporary allocations of various objects during a Render Pass.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool.GetTempArray``1(System.Int32)">
            <summary>
            Allocate a temporary typed array of a specific size.
            Unity releases the array at the end of the Render Pass.
            </summary>
            <typeparam name="T">Type of the array to be allocated.</typeparam>
            <param name="size">Number of element in the array.</param>
            <returns>A new array of type T with size number of elements.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphObjectPool.GetTempMaterialPropertyBlock">
            <summary>
            Allocate a temporary MaterialPropertyBlock for the Render Pass.
            </summary>
            <returns>A new clean MaterialPropertyBlock.</returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources">
            <summary>
            Helper class allowing access to default resources (black or white texture, etc.) during render passes.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.blackTexture">
            <summary>Default black 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.whiteTexture">
            <summary>Default white 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.clearTextureXR">
            <summary>Default clear color XR 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.magentaTextureXR">
            <summary>Default magenta XR 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.blackTextureXR">
            <summary>Default black XR 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.blackTextureArrayXR">
            <summary>Default black XR 2D Array texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.blackUIntTextureXR">
            <summary>Default black (UInt) XR 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.blackTexture3DXR">
            <summary>Default black XR 3D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.whiteTextureXR">
            <summary>Default white XR 2D texture.</summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraphDefaultResources.defaultShadowTexture">
            <summary>Default 1x1 shadow texture.</summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle">
            <summary>
            Texture resource handle.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.nullHandle">
            <summary>
            Returns a null texture handle
            </summary>
            <returns>A null texture handle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)~UnityEngine.Rendering.RenderTargetIdentifier">
            <summary>
            Cast to RenderTargetIdentifier
            </summary>
            <param name="texture">Input TextureHandle.</param>
            <returns>Resource as a RenderTargetIdentifier.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)~UnityEngine.Texture">
            <summary>
            Cast to Texture
            </summary>
            <param name="texture">Input TextureHandle.</param>
            <returns>Resource as a Texture.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)~UnityEngine.RenderTexture">
            <summary>
            Cast to RenderTexture
            </summary>
            <param name="texture">Input TextureHandle.</param>
            <returns>Resource as a RenderTexture.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.op_Implicit(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle)~UnityEngine.Rendering.RTHandle">
            <summary>
            Cast to RTHandle
            </summary>
            <param name="texture">Input TextureHandle.</param>
            <returns>Resource as a RTHandle.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle.IsValid">
            <summary>
            Return true if the handle is valid.
            </summary>
            <returns>True if the handle is valid.</returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureSizeMode">
            <summary>
            The mode that determines the size of a Texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureSizeMode.Explicit">
            <summary>Explicit size.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureSizeMode.Scale">
            <summary>Size automatically scaled by a Vector.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureSizeMode.Functor">
            <summary>Size automatically scaled by a Functor.</summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.FastMemoryDesc">
            <summary>
            Subset of the texture desc containing information for fast memory allocation (when platform supports it)
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.FastMemoryDesc.inFastMemory">
            <summary>Whether the texture will be in fast memory.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.FastMemoryDesc.flags">
            <summary>Flag to determine what parts of the render target is spilled if not fully resident in fast memory.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.FastMemoryDesc.residencyFraction">
            <summary>How much of the render target is to be switched into fast memory (between 0 and 1).</summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc">
            <summary>
            Descriptor used to create texture resources
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.sizeMode">
            <summary>Texture sizing mode.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.width">
            <summary>Texture width.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.height">
            <summary>Texture height.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.slices">
            <summary>Number of texture slices..</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.scale">
            <summary>Texture scale.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.func">
            <summary>Texture scale function.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.depthBufferBits">
            <summary>Depth buffer bit depth.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.colorFormat">
            <summary>Color format.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.filterMode">
            <summary>Filtering mode.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.wrapMode">
            <summary>Addressing mode.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.dimension">
            <summary>Texture dimension.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.enableRandomWrite">
            <summary>Enable random UAV read/write on the texture.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.useMipMap">
            <summary>Texture needs mip maps.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.autoGenerateMips">
            <summary>Automatically generate mip maps.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.isShadowMap">
            <summary>Texture is a shadow map.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.anisoLevel">
            <summary>Anisotropic filtering level.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.mipMapBias">
            <summary>Mip map bias.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.msaaSamples">
            <summary>Number of MSAA samples.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.bindTextureMS">
            <summary>Bind texture multi sampled.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.useDynamicScale">
            <summary>Texture uses dynamic scaling.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.memoryless">
            <summary>Memory less flag.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.vrUsage">
            <summary>Special treatment of the VR eye texture used in stereoscopic rendering.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.name">
            <summary>Texture name.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.fastMemoryDesc">
            <summary>Descriptor to determine how the texture will be in fast memory on platform that supports it.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.fallBackToBlackTexture">
            <summary>Determines whether the texture will fallback to a black texture if it is read without ever writing to it.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.disableFallBackToImportedTexture">
            <summary>
            If all passes writing to a texture are culled by Dynamic Render Pass Culling, it will automatically fallback to a similar preallocated texture.\n
            Set this to false to force the allocation.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.clearBuffer">
            <summary>Texture needs to be cleared on first use.</summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.clearColor">
            <summary>Clear color.</summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            TextureDesc constructor for a texture using explicit size
            </summary>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <param name="dynamicResolution">Use dynamic resolution</param>
            <param name="xrReady">Set this to true if the Texture is a render texture in an XR setting.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.#ctor(UnityEngine.Vector2,System.Boolean,System.Boolean)">
            <summary>
            TextureDesc constructor for a texture using a fixed scaling
            </summary>
            <param name="scale">RTHandle scale used for this texture</param>
            <param name="dynamicResolution">Use dynamic resolution</param>
            <param name="xrReady">Set this to true if the Texture is a render texture in an XR setting.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.#ctor(UnityEngine.Rendering.ScaleFunc,System.Boolean,System.Boolean)">
            <summary>
            TextureDesc constructor for a texture using a functor for scaling
            </summary>
            <param name="func">Function used to determine the texture size</param>
            <param name="dynamicResolution">Use dynamic resolution</param>
            <param name="xrReady">Set this to true if the Texture is a render texture in an XR setting.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.#ctor(UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc)">
            <summary>
            Copy constructor
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.RenderGraphModule.TextureDesc.GetHashCode">
            <summary>
            Hash function
            </summary>
            <returns>The texture descriptor hash.</returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.XRLayout">
            <summary>
            Used by render pipelines to store information about the XR device layout.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRLayout.AddCamera(UnityEngine.Camera,System.Boolean)">
            <summary>
            Configure the layout to render from the specified camera by generating passes from the the connected XR device.
            </summary>
            <param name="camera"></param>
            <param name="enableXR"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRLayout.ReconfigurePass(UnityEngine.Experimental.Rendering.XRPass,UnityEngine.Camera)">
            <summary>
            Used by render pipelines to reconfigure a pass from a camera.
            </summary>
            <param name="xrPass"></param>
            <param name="camera"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRLayout.GetActivePasses">
            <summary>
            Used by render pipelines to access all registered passes on this layout.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.XRSystem">
            <summary>
            Used by render pipelines to communicate with XR SDK.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.GetActiveDisplay">
            <summary>
            Returns the active XR display.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRSystem.displayActive">
            <summary>
            Returns true if a XR device is connected and running.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRSystem.emptyPass">
            <summary>
            Valid empty pass when a camera is not using XR.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRSystem.singlePassAllowed">
            <summary>
            If true, the system will try to create a layout compatible with single-pass rendering.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRSystem.foveatedRenderingCaps">
            <summary>
            Cached value of SystemInfo.foveatedRenderingCaps.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRSystem.dumpDebugInfo">
            <summary>
            If true, the system will log some information about the layout to the console.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.Initialize(System.Func{UnityEngine.Experimental.Rendering.XRPassCreateInfo,UnityEngine.Experimental.Rendering.XRPass},UnityEngine.Shader,UnityEngine.Shader)">
            <summary>
            Use this method to assign the shaders that will be used to render occlusion mesh for each XRPass and the final mirror view.
            </summary>
            <param name="passAllocator"></param>
            <param name="occlusionMeshPS"></param>
            <param name="mirrorViewPS"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.SetDisplayMSAASamples(UnityEngine.Rendering.MSAASamples)">
            <summary>
            Used by the render pipeline to communicate to the XR device how many samples are used by MSAA.
            </summary>
            <param name="msaaSamples"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.GetDisplayMSAASamples">
            <summary>
            Returns the number of samples (MSAA) currently configured on the XR device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.SetRenderScale(System.Single)">
            <summary>
            Used by the render pipeline to scale the render target on the XR device.
            </summary>
            <param name="renderScale">A value of 1.0f represents 100% of the original resolution.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.NewLayout">
            <summary>
            Used by the render pipeline to initiate a new rendering frame through a XR layout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.EndLayout">
            <summary>
            Used by the render pipeline to complete the XR layout at the end of the frame.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.RenderMirrorView(UnityEngine.Rendering.CommandBuffer,UnityEngine.Camera)">
            <summary>
            Used by the render pipeline to render the mirror view to the gameview, as configured by the XR device.
            </summary>
            <param name="cmd"></param>
            <param name="camera"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRSystem.Dispose">
            <summary>
            Free up resources used by the system.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants">
            <summary>
            Helper static class used by render pipelines to setup stereo constants accessed by builtin shaders.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoCameraProjection">
            <summary>
            Cached unique id for unity_StereoCameraProjection
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoCameraInvProjection">
            <summary>
            Cached unique id for unity_StereoCameraInvProjection
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoMatrixV">
            <summary>
            Cached unique id for unity_StereoMatrixV
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoMatrixInvV">
            <summary>
            Cached unique id for unity_StereoMatrixInvV
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoMatrixP">
            <summary>
            Cached unique id for unity_StereoMatrixP
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoMatrixInvP">
            <summary>
            Cached unique id for unity_StereoMatrixInvP
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoMatrixVP">
            <summary>
            Cached unique id for unity_StereoMatrixVP
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoMatrixInvVP">
            <summary>
            Cached unique id for unity_StereoMatrixInvVP
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.unity_StereoWorldSpaceCameraPos">
            <summary>
            Cached unique id for unity_StereoWorldSpaceCameraPos
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.UpdateBuiltinShaderConstants(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,System.Boolean,System.Int32)">
            <summary>
            Update the shader constant data used by the C++ builtin renderer.
            </summary>
            <param name="viewMatrix"></param>
            <param name="projMatrix"></param>
            <param name="renderIntoTexture"></param>
            <param name="viewIndex"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.SetBuiltinShaderConstants(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Bind the shader constants used by the C++ builtin renderer via a command buffer. `UpdateBuiltinShaderConstants` should be called before to update the constants.
            This is required to maintain compatibility with legacy code and shaders.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRBuiltinShaderConstants.Update(UnityEngine.Experimental.Rendering.XRPass,UnityEngine.Rendering.CommandBuffer,System.Boolean)">
            <summary>
            Update and bind shader constants used by the C++ builtin renderer given the XRPass. For better control of setting up builtin shader constants, see `UpdateBuiltinShaderConstants`
            and `SetBuiltinShaderConstants` which do the same logic but could take in custom projection and view matricies instead.
            This is required to maintain compatibility with legacy code and shaders.
            </summary>
            <param name="xrPass"></param>
            <param name="cmd"></param>
            <param name="renderIntoTexture"></param>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.XRPassCreateInfo">
            <summary>
            Set of data used to create a XRPass object.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.XRPass">
            <summary>
            XRPass holds the render target information and a list of XRView.
            XRView contains the parameters required to render (projection and view matrices, viewport, etc)
            When a pass has 2 views or more, single-pass will be active if the platform supports it.
            To avoid allocating every frame, XRView is a struct and XRPass is pooled.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.#ctor">
            <summary>
            Parameterless constructor.
            Note: in order to avoid GC, the render pipeline should use XRPass.Create instead of this method.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.CreateDefault(UnityEngine.Experimental.Rendering.XRPassCreateInfo)">
            <summary>
            Default allocator method for XRPass.
            </summary>
            <param name="createInfo"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.Release">
            <summary>
            Default release method. Can be overridden by render pipelines.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.enabled">
            <summary>
            Returns true if the pass contains at least one view.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.supportsFoveatedRendering">
            <summary>
            Returns true if the pass can use foveated rendering commands.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.copyDepth">
            <summary>
            If true, the render pipeline is expected to output a valid depth buffer to the renderTarget.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.multipassId">
            <summary>
            Index of the pass inside the frame.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.cullingPassId">
            <summary>
            Index used for culling. It can be shared between multiple passes.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.renderTarget">
            <summary>
            Destination render target.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.renderTargetDesc">
            <summary>
            Destination render target descriptor.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.cullingParams">
            <summary>
            Parameters used for culling.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.viewCount">
            <summary>
            Returns the number of views inside this pass.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.singlePassEnabled">
            <summary>
            If true, the render pipeline is expected to use single-pass techniques to save CPU time.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.foveatedRenderingInfo">
            <summary>
            Native pointer from the XR plugin to be consumed by ConfigureFoveatedRendering.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.GetProjMatrix(System.Int32)">
            <summary>
            Returns the projection matrix for a given view.
            </summary>
            <param name="viewIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.GetViewMatrix(System.Int32)">
            <summary>
            Returns the view matrix for a given view.
            </summary>
            <param name="viewIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.GetViewport(System.Int32)">
            <summary>
            Returns the viewport for a given view.
            </summary>
            <param name="viewIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.GetOcclusionMesh(System.Int32)">
            <summary>
            Returns the occlusion mesh for a given view.
            </summary>
            <param name="viewIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.GetTextureArraySlice(System.Int32)">
            <summary>
            Returns the destination slice index (for texture array) for a given view.
            </summary>
            <param name="viewIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.StartSinglePass(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Queue up render commands to enable single-pass techniques.
            Note: depending on the platform and settings, either single-pass instancing or the multiview extension will be used.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.StopSinglePass(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Queue up render commands to disable single-pass techniques.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.XRPass.hasValidOcclusionMesh">
            <summary>
            Returns true if the pass was setup with expected mesh and material.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.RenderOcclusionMesh(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Generate commands to render the occlusion mesh for this pass.
            In single-pass mode : the meshes for all views are combined into one mesh,
            where the corresponding view index is encoded into each vertex. The keyword
            "XR_OCCLUSION_MESH_COMBINED" is also enabled when rendering the combined mesh.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.ApplyXRViewCenterOffset(UnityEngine.Vector2)">
            <summary>
            Take a point that is center-relative (0.5, 0.5) and modify it to be placed relative to the view's center instead, respecting the asymmetric FOV (if it is used)
            </summary>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.XRPass.InitBase(UnityEngine.Experimental.Rendering.XRPassCreateInfo)">
            <summary>
            Initialize the base class fields.
            </summary>
            <param name="createInfo"></param>
        </member>
        <member name="T:UnityEngine.LightAnchor">
            <summary>
            Represents camera-space light controls around a virtual pivot point.
            </summary>
        </member>
        <member name="P:UnityEngine.LightAnchor.yaw">
            <summary>
            The camera-relative yaw.
            </summary>
            <remarks>
            The range is -180 through 180 inclusive. Values between 0 and 180 are to the right of the camera, and values between 0 and -180 to the left.
            </remarks>
        </member>
        <member name="P:UnityEngine.LightAnchor.pitch">
            <summary>
            The pitch relative to the horizon or camera depending on value of m_Space.
            </summary>
            <remarks>
            The range is -180 through 180 inclusive. Values between 0 and 180 are below the camera, and values between 0 and -180 are above the camera.
            </remarks>
        </member>
        <member name="P:UnityEngine.LightAnchor.roll">
            <summary>
            The camera-relative roll.
            </summary>
            <remarks>
            The range is -180 through 180 inclusive. Values between 0 and 180 are to the right of the camera, and values between 0 and -180 are to the left of the camera.
            </remarks>
        </member>
        <member name="P:UnityEngine.LightAnchor.distance">
            <summary>
            The distance from the light's anchor point.
            </summary>
        </member>
        <member name="T:UnityEngine.LightAnchor.UpDirection">
            <summary>
            Enum to describes to up vector for the Light Anchor
            </summary>
        </member>
        <member name="F:UnityEngine.LightAnchor.UpDirection.World">
            <summary>
            Up vector is world space Vector3.up
            </summary>
        </member>
        <member name="F:UnityEngine.LightAnchor.UpDirection.Local">
            <summary>
            Up vector is the up of the main camera
            </summary>
        </member>
        <member name="P:UnityEngine.LightAnchor.frameSpace">
            <summary>
            Indicates whether the up vector should be in world or camera space.
            </summary>
        </member>
        <member name="P:UnityEngine.LightAnchor.anchorPosition">
            <summary>
            The position of the light's anchor point.
            </summary>
        </member>
        <member name="P:UnityEngine.LightAnchor.anchorPositionOverride">
            <summary>
            Overrides the pivot of used to compute the light position. This is useful to track an existing object in the scene.
            The transform of the light will be automatically updated by the Update() method of the LightAnchor.
            </summary>
        </member>
        <member name="P:UnityEngine.LightAnchor.anchorPositionOffset">
            <summary>
            Offset relative to the position of the anchor position override transform in object space.
            </summary>
        </member>
        <member name="M:UnityEngine.LightAnchor.NormalizeAngleDegree(System.Single)">
            <summary>
            Normalizes the input angle to be in the range of -180 and 180.
            </summary>
            <param name="angle">Raw input angle or rotation.</param>
            <returns>Returns the angle of rotation between -180 and 180.</returns>
        </member>
        <member name="M:UnityEngine.LightAnchor.SynchronizeOnTransform(UnityEngine.Camera)">
            <summary>
            Updates Yaw, Pitch, Roll, and Distance based on the Transform.
            </summary>
            <param name="camera">The Camera to which light values are relative.</param>
        </member>
        <member name="M:UnityEngine.LightAnchor.UpdateTransform(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            Updates the light's transform with respect to a given camera and anchor point
            </summary>
            <param name="camera">The camera to which values are relative.</param>
            <param name="anchor">The anchor position.</param>
        </member>
        <member name="T:SceneRenderPipeline">
            <summary>
            Setup a specific render pipeline on scene loading.
            </summary>
        </member>
        <member name="F:SceneRenderPipeline.renderPipelineAsset">
            <summary>
            Scriptable Render Pipeline Asset to setup on scene load.
            </summary>
        </member>
    </members>
</doc>
