<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Burst</name>
    </assembly>
    <members>
        <member name="T:Unity.Burst.BurstRuntime">
            <summary>
            Provides helper intrinsics that can be used at runtime.
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstRuntime.GetHashCode32``1">
            <summary>
            Gets a 32-bits hashcode from a type computed for the <see cref="P:System.Type.AssemblyQualifiedName"/>
            </summary>
            <typeparam name="T">The type to compute the hash from</typeparam>
            <returns>The 32-bit hashcode.</returns>
        </member>
        <member name="M:Unity.Burst.BurstRuntime.GetHashCode32(System.Type)">
            <summary>
            Gets a 32-bits hashcode from a type computed for the <see cref="P:System.Type.AssemblyQualifiedName"/>
            This method cannot be used from a burst job.
            </summary>
            <param name="type">The type to compute the hash from</param>
            <returns>The 32-bit hashcode.</returns>
        </member>
        <member name="M:Unity.Burst.BurstRuntime.GetHashCode64``1">
            <summary>
            Gets a 64-bits hashcode from a type computed for the <see cref="P:System.Type.AssemblyQualifiedName"/>
            </summary>
            <typeparam name="T">The type to compute the hash from</typeparam>
            <returns>The 64-bit hashcode.</returns>
        </member>
        <member name="M:Unity.Burst.BurstRuntime.GetHashCode64(System.Type)">
            <summary>
            Gets a 64-bits hashcode from a type computed for the <see cref="P:System.Type.AssemblyQualifiedName"/>.
            This method cannot be used from a burst job.
            </summary>
            <param name="type">Type to calculate a hash for</param>
            <returns>The 64-bit hashcode.</returns>
        </member>
        <member name="M:Unity.Burst.BurstRuntime.LoadAdditionalLibrary(System.String)">
            <summary>
            Allows for loading additional Burst native libraries
            Important: Designed for Play mode / Desktop Standalone Players ONLY
            In Editor, any libraries that have been loaded will be unloaded on exit of playmode
            Only supported from 2021.1 and later. You can use BurstCompiler.IsLoadAdditionalLibrarySupported() to confirm it is available.
            </summary>
            <param name="pathToLibBurstGenerated">Absolute filesystem location of bursted library to load</param>
            <returns>true if the library was loaded successfully</returns>
        </member>
        <member name="M:Unity.Burst.BurstRuntime.GetUTF8LiteralPointer(System.String,System.Int32@)">
            <summary>
            Return a pointer to read-only memory consisting of the literal UTF-8 bytes of a string constant.
            </summary>
            <param name="str">A string which must a string literal</param>
            <param name="byteCount">Receives the number of UTF-8 encoded bytes the constant contains (excluding null terminator)</param>
            <returns>A pointer to constant data representing the UTF-8 encoded bytes of the string literal, terminated with a null terminator</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86">
            <summary>
            Static methods and properties for X86 instruction intrinsics.
            </summary>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Bmi2">
            <summary>
            bmi2 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Bmi2.IsBmi2Supported">
             <summary>
             Evaluates to true at compile time if bmi2 intrinsics are supported.
            
             Burst ties bmi2 support to AVX2 support to simplify feature sets to support.
             </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.bzhi_u32(System.UInt32,System.UInt32)">
            <summary>
            Copy all bits from unsigned 32-bit integer a to dst, and reset (set to 0) the high bits in dst starting at index.
            </summary>
            <remarks>
            **** bzhi r32, r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="index">Starting point</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.bzhi_u64(System.UInt64,System.UInt64)">
            <summary>
            Copy all bits from unsigned 64-bit integer a to dst, and reset (set to 0) the high bits in dst starting at index.
            </summary>
            <remarks>
            **** bzhi r64, r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <param name="index">Starting point</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.mulx_u32(System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            Multiply unsigned 32-bit integers a and b, store the low 32-bits of the result in dst, and store the high 32-bits in hi. This does not read or write arithmetic flags.
            </summary>
            <remarks>
            **** mulx r32, r32, m32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="b">32-bit integer</param>
            <param name="hi">Stores the high 32-bits</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.mulx_u64(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
            Multiply unsigned 64-bit integers a and b, store the low 64-bits of the result in dst, and store the high 64-bits in hi. This does not read or write arithmetic flags.
            </summary>
            <remarks>
            **** mulx r64, r64, m64
            </remarks>
            <param name="a">64-bit integer</param>
            <param name="b">64-bit integer</param>
            <param name="hi">Stores the high 64-bits</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.pdep_u32(System.UInt32,System.UInt32)">
            <summary>
            Deposit contiguous low bits from unsigned 32-bit integer a to dst at the corresponding bit locations specified by mask; all other bits in dst are set to zero.
            </summary>
            <remarks>
            **** pdep r32, r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="mask">Mask</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.pdep_u64(System.UInt64,System.UInt64)">
            <summary>
            Deposit contiguous low bits from unsigned 64-bit integer a to dst at the corresponding bit locations specified by mask; all other bits in dst are set to zero.
            </summary>
            <remarks>
            **** pdep r64, r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <param name="mask">Mask</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.pext_u32(System.UInt32,System.UInt32)">
            <summary>
            Extract bits from unsigned 32-bit integer a at the corresponding bit locations specified by mask to contiguous low bits in dst; the remaining upper bits in dst are set to zero.
            </summary>
            <remarks>
            **** pext r32, r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="mask">Mask</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi2.pext_u64(System.UInt64,System.UInt64)">
            <summary>
            Extract bits from unsigned 64-bit integer a at the corresponding bit locations specified by mask to contiguous low bits in dst; the remaining upper bits in dst are set to zero.
            </summary>
            <remarks>
            **** pext r64, r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <param name="mask">Mask</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Fma">
            <summary>
            FMA intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Fma.IsFmaSupported">
             <summary>
             Evaluates to true at compile time if FMA intrinsics are supported.
            
             Burst ties FMA support to AVX2 support to simplify feature sets to support.
             </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmadd_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfmadd213pd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmadd_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfmadd213pd ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmadd_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfmadd213ps xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmadd_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfmadd213ps ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmadd_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower double-precision (64-bit) floating-point elements in a and b, and add the intermediate result to the lower element in c. Store the result in the lower element of dst, and copy the upper element from a to the upper element of dst.
            </summary>
            <remarks>
            **** vfmadd213sd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmadd_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower single-precision (32-bit) floating-point elements in a and b, and add the intermediate result to the lower element in c. Store the result in the lower element of dst, and copy the upper 3 packed elements from a to the upper elements of dst.
            </summary>
            <remarks>
            **** vfmadd213ss xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmaddsub_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmaddsub213pd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmaddsub_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmaddsub213pd ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmaddsub_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmaddsub213ps xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmaddsub_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmaddsub213ps ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmsub_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsub213pd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmsub_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsub213pd ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmsub_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsub213ps xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmsub_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsub213ps ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmsub_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower double-precision(64-bit) floating-point elements in a and b, and subtract the lower element in c from the intermediate result.Store the result in the lower element of dst, and copy the upper element from a to the upper element of dst.
            </summary>
            <remarks>
            **** vfmsub213sd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmsub_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower single-precision (32-bit) floating-point elements in a and b, and subtract the lower element in c from the intermediate result. Store the result in the lower element of dst, and copy the upper 3 packed elements from a to the upper elements of dst.
            </summary>
            <remarks>
            **** vfmsub213ss xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmsubadd_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsubadd213pd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmsubadd_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsubadd213pd ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fmsubadd_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsubadd213ps xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fmsubadd_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c to/from the intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfmsubadd213ps ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmadd_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmadd213pd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fnmadd_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmadd213pd ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmadd_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmadd213ps xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fnmadd_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmadd213ps ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmadd_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower double-precision (64-bit) floating-point elements in a and b, and add the negated intermediate result to the lower element in c. Store the result in the lower element of dst, and copy the upper element from a to the upper element of dst.
            </summary>
            <remarks>
            **** vfnmadd213sd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmadd_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower single-precision (32-bit) floating-point elements in a and b, and add the negated intermediate result to the lower element in c. Store the result in the lower element of dst, and copy the upper 3 packed elements from a to the upper elements of dst.
            </summary>
            <remarks>
            **** vfnmadd213ss xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmsub_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmsub213pd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fnmsub_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmsub213pd ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmsub_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmsub213ps xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.mm256_fnmsub_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst.
            </summary>
            <remarks>
            **** vfnmsub213ps ymm, ymm, ymm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmsub_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower double-precision(64-bit) floating-point elements in a and b, and subtract the lower element in c from the negated intermediate result.Store the result in the lower element of dst, and copy the upper element from a to the upper element of dst.
            </summary>
            <remarks>
            **** vfnmsub213sd xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Fma.fnmsub_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Multiply the lower single-precision (32-bit) floating-point elements in a and b, and subtract the lower element in c from the negated intermediate result. Store the result in the lower element of dst, and copy the upper 3 packed elements from a to the upper elements of dst.
            </summary>
            <remarks>
            **** vfnmsub213ss xmm, xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="c">Vector c</param>
            <returns>Vector</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Sse2">
            <summary>
            SSE2 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Sse2.IsSse2Supported">
            <summary>
            Evaluates to true at compile time if SSE2 intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.SHUFFLE2(System.Int32,System.Int32)">
            <summary>
            Return a shuffle immediate suitable for use with _mm_shuffle_ps and similar instructions.
            </summary>
            <param name="x">Integer x</param>
            <param name="y">Integer y</param>
            <returns>Shuffle suitable for use with _mm_shuffle_ps and similar instructions</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.stream_si32(System.Int32*,System.Int32)">
            <summary>
            Store 32-bit integer "a" into memory using a non-temporal hint to minimize cache pollution. If the cache line containing address "mem_addr" is already in the cache, the cache will be updated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">32-bit integer</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.stream_si64(System.Int64*,System.Int64)">
            <summary>
            Store 64-bit integer a into memory using a non-temporal hint to minimize cache pollution. If the cache line containing address mem_addr is already in the cache, the cache will be updated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">64-bit integer</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.stream_pd(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from "a" into memory using a non-temporal memory hint. "mem_addr" must be aligned on a 16-byte boundary or a general-protection exception will be generated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.stream_si128(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits of integer data from a into memory using a non-temporal memory hint.mem_addr must be aligned on a 16-byte boundary or a general-protection exception may be generated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.add_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed 8-bit integers in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.add_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed 16-bit integers in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.add_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed 32-bit integers in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.add_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed 64-bit integers in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.adds_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed 8-bit integers in "a" and "b" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.adds_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed 16-bit integers in "a" and "b" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.adds_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed unsigned 8-bit integers in "a" and "b" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.adds_epu16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed unsigned 16-bit integers in "a" and "b" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.avg_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Average packed unsigned 8-bit integers in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.avg_epu16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Average packed unsigned 16-bit integers in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.madd_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply packed signed 16-bit integers in "a" and "b", producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in "dst".</summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.max_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 16-bit integers in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.max_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed unsigned 8-bit integers in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.min_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 16-bit integers in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.min_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed unsigned 8-bit integers in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.mulhi_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the packed 16-bit integers in "a" and "b", producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.mulhi_epu16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the packed unsigned 16-bit integers in "a" and "b", producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.mullo_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the packed 16-bit integers in "a" and "b", producing intermediate 32-bit integers, and store the low 16 bits of the intermediate integers in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.mul_epu32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the low unsigned 32-bit integers from each packed 64-bit element in "a" and "b", and store the unsigned 64-bit results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sad_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the absolute differences of packed unsigned 8-bit integers in "a" and "b", then horizontally sum each consecutive 8 differences to produce two unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of 64-bit elements in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sub_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed 8-bit integers in "b" from packed 8-bit integers in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sub_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed 16-bit integers in "b" from packed 16-bit integers in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sub_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed 32-bit integers in "b" from packed 32-bit integers in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sub_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed 64-bit integers in "b" from packed 64-bit integers in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.subs_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed 8-bit integers in "b" from packed 8-bit integers in "a" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.subs_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed 16-bit integers in "b" from packed 16-bit integers in "a" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.subs_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed unsigned 8-bit integers in "b" from packed unsigned 8-bit integers in "a" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.subs_epu16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed unsigned 16-bit integers in "b" from packed unsigned 16-bit integers in "a" using saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.slli_si128(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift "a" left by "imm8" bytes while shifting in zeros, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.bslli_si128(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift "a" left by "imm8" bytes while shifting in zeros, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.bsrli_si128(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift "a" right by "imm8" bytes while shifting in zeros, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.slli_epi16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 16-bit integers in "a" left by "imm8" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sll_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 16-bit integers in "a" left by "count" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.slli_epi32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 32-bit integers in "a" left by "imm8" while shifting in zeros, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sll_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 32-bit integers in "a" left by "count" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.slli_epi64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 64-bit integers in "a" left by "imm8" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sll_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 64-bit integers in "a" left by "count" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srai_epi16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 16-bit integers in "a" right by "imm8" while shifting in sign bits, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sra_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 16-bit integers in "a" right by "count" while shifting in sign bits, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srai_epi32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 32-bit integers in "a" right by "imm8" while shifting in sign bits, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sra_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 32-bit integers in "a" right by "count" while shifting in sign bits, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srli_si128(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift "a" right by "imm8" bytes while shifting in zeros, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srli_epi16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 16-bit integers in "a" right by "imm8" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srl_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 16-bit integers in "a" right by "count" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srli_epi32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 32-bit integers in "a" right by "imm8" while shifting in zeros, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srl_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 32-bit integers in "a" right by "count" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srli_epi64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shift packed 64-bit integers in "a" right by "imm8" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.srl_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shift packed 64-bit integers in "a" right by "count" while shifting in zeros, and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.and_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.andnot_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise NOT of 128 bits (representing integer data) in "a" and then AND with "b", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.or_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise OR of 128 bits (representing integer data) in "a" and "b", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.xor_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise XOR of 128 bits (representing integer data) in "a" and "b", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpeq_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 8-bit integers in "a" and "b" for equality, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpeq_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 16-bit integers in "a" and "b" for equality, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpeq_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 32-bit integers in "a" and "b" for equality, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpgt_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 8-bit integers in "a" and "b" for greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpgt_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 16-bit integers in "a" and "b" for greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpgt_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 32-bit integers in "a" and "b" for greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmplt_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 8-bit integers in "a" and "b" for less-than, and store the results in "dst". Note: This intrinsic emits the pcmpgtb instruction with the order of the operands switched. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmplt_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 16-bit integers in "a" and "b" for less-than, and store the results in "dst". Note: This intrinsic emits the pcmpgtw instruction with the order of the operands switched. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmplt_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 32-bit integers in "a" and "b" for less-than, and store the results in "dst". Note: This intrinsic emits the pcmpgtd instruction with the order of the operands switched. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtepi32_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed 32-bit integers in "a" to packed double-precision (64-bit) floating-point elements, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi32_sd(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Convert the 32-bit integer "b" to a double-precision (64-bit) floating-point element, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">32-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi64_sd(Unity.Burst.Intrinsics.v128,System.Int64)">
            <summary> Convert the 64-bit integer "b" to a double-precision (64-bit) floating-point element, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">64-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi64x_sd(Unity.Burst.Intrinsics.v128,System.Int64)">
            <summary> Convert the 64-bit integer "b" to a double-precision (64-bit) floating-point element, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">64-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtepi32_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed 32-bit integers in "a" to packed single-precision (32-bit) floating-point elements, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi32_si128(System.Int32)">
            <summary> Copy 32-bit integer "a" to the lower elements of "dst", and zero the upper elements of "dst". </summary>
            <param name="a">32-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi64_si128(System.Int64)">
            <param name="a">64-bit integer</param>
            <returns>Vector</returns>
            <summary> Copy 64-bit integer "a" to the lower element of "dst", and zero the upper element. </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi64x_si128(System.Int64)">
            <summary> Copy 64-bit integer "a" to the lower element of "dst", and zero the upper element. </summary>
            <param name="a">64-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi128_si32(Unity.Burst.Intrinsics.v128)">
            <summary> Copy the lower 32-bit integer in "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi128_si64(Unity.Burst.Intrinsics.v128)">
            <summary> Copy the lower 64-bit integer in "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsi128_si64x(Unity.Burst.Intrinsics.v128)">
            <summary> Copy the lower 64-bit integer in "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_epi64x(System.Int64,System.Int64)">
            <summary> Set packed 64-bit integers in "dst" with the supplied values. </summary>
            <param name="e1">Value 1</param>
            <param name="e0">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_epi32(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Set packed 32-bit integers in "dst" with the supplied values. </summary>
            <param name="e3">Value 3</param>
            <param name="e2">Value 2</param>
            <param name="e1">Value 1</param>
            <param name="e0">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_epi16(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary> Set packed 16-bit integers in "dst" with the supplied values. </summary>
            <param name="e7">Value 7</param>
            <param name="e6">Value 6</param>
            <param name="e5">Value 5</param>
            <param name="e4">Value 4</param>
            <param name="e3">Value 3</param>
            <param name="e2">Value 2</param>
            <param name="e1">Value 1</param>
            <param name="e0">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_epi8(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary> Set packed 8-bit integers in "dst" with the supplied values in reverse order. </summary>
            <param name="e15_">Value 15</param>
            <param name="e14_">Value 14</param>
            <param name="e13_">Value 13</param>
            <param name="e12_">Value 12</param>
            <param name="e11_">Value 11</param>
            <param name="e10_">Value 10</param>
            <param name="e9_">Value 9</param>
            <param name="e8_">Value 8</param>
            <param name="e7_">Value 7</param>
            <param name="e6_">Value 6</param>
            <param name="e5_">Value 5</param>
            <param name="e4_">Value 4</param>
            <param name="e3_">Value 3</param>
            <param name="e2_">Value 2</param>
            <param name="e1_">Value 1</param>
            <param name="e0_">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set1_epi64x(System.Int64)">
            <summary> Broadcast 64-bit integer "a" to all elements of "dst". This intrinsic may generate the "vpbroadcastq". </summary>
            <param name="a">64-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set1_epi32(System.Int32)">
            <summary> Broadcast 32-bit integer "a" to all elements of "dst". This intrinsic may generate "vpbroadcastd". </summary>
            <param name="a">32-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set1_epi16(System.Int16)">
            <summary> Broadcast 16-bit integer "a" to all all elements of "dst". This intrinsic may generate "vpbroadcastw". </summary>
            <param name="a">16-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set1_epi8(System.SByte)">
            <summary> Broadcast 8-bit integer "a" to all elements of "dst". This intrinsic may generate "vpbroadcastb". </summary>
            <param name="a">8-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.setr_epi32(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Set packed 32-bit integers in "dst" with the supplied values in reverse order. </summary>
            <param name="e3">Value 3</param>
            <param name="e2">Value 2</param>
            <param name="e1">Value 1</param>
            <param name="e0">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.setr_epi16(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary> Set packed 16-bit integers in "dst" with the supplied values in reverse order. </summary>
            <param name="e7">Value 7</param>
            <param name="e6">Value 6</param>
            <param name="e5">Value 5</param>
            <param name="e4">Value 4</param>
            <param name="e3">Value 3</param>
            <param name="e2">Value 2</param>
            <param name="e1">Value 1</param>
            <param name="e0">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.setr_epi8(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary> Set packed 8-bit integers in "dst" with the supplied values in reverse order. </summary>
            <param name="e15_">Value 15</param>
            <param name="e14_">Value 14</param>
            <param name="e13_">Value 13</param>
            <param name="e12_">Value 12</param>
            <param name="e11_">Value 11</param>
            <param name="e10_">Value 10</param>
            <param name="e9_">Value 9</param>
            <param name="e8_">Value 8</param>
            <param name="e7_">Value 7</param>
            <param name="e6_">Value 6</param>
            <param name="e5_">Value 5</param>
            <param name="e4_">Value 4</param>
            <param name="e3_">Value 3</param>
            <param name="e2_">Value 2</param>
            <param name="e1_">Value 1</param>
            <param name="e0_">Value 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.setzero_si128">
            <summary> Return vector of type __m128i with all elements set to zero. </summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.move_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Copy the lower 64-bit integer in "a" to the lower element of "dst", and zero the upper element. </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.packs_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed 16-bit integers from "a" and "b" to packed 8-bit integers using signed saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.packs_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed 32-bit integers from "a" and "b" to packed 16-bit integers using signed saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.packus_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed 16-bit integers from "a" and "b" to packed 8-bit integers using unsigned saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.extract_epi16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Extract a 16-bit integer from "a", selected with "imm8", and store the result in the lower element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Selection</param>
            <returns>ushort</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.insert_epi16(Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary> Copy "a" to "dst", and insert the 16-bit integer "i" into "dst" at the location specified by "imm8".  </summary>
            <param name="a">Vector a</param>
            <param name="i">16-bit integer</param>
            <param name="imm8">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.movemask_epi8(Unity.Burst.Intrinsics.v128)">
            <summary> Create mask from the most significant bit of each 8-bit element in "a", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.shuffle_epi32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shuffle 32-bit integers in "a" using the control in "imm8", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.shufflehi_epi16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shuffle 16-bit integers in the high 64 bits of "a" using the control in "imm8". Store the results in the high 64 bits of "dst", with the low 64 bits being copied from from "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.shufflelo_epi16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shuffle 16-bit integers in the low 64 bits of "a" using the control in "imm8". Store the results in the low 64 bits of "dst", with the high 64 bits being copied from from "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpackhi_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 8-bit integers from the high half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpackhi_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 16-bit integers from the high half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpackhi_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 32-bit integers from the high half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpackhi_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 64-bit integers from the high half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpacklo_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 8-bit integers from the low half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpacklo_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 16-bit integers from the low half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpacklo_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 32-bit integers from the low half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpacklo_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave 64-bit integers from the low half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.add_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add the lower double-precision (64-bit) floating-point element in "a" and "b", store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.add_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed double-precision (64-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.div_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Divide the lower double-precision (64-bit) floating-point element in "a" by the lower double-precision (64-bit) floating-point element in "b", store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.div_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Divide packed double-precision (64-bit) floating-point elements in "a" by packed elements in "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.max_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b", store the maximum value in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.max_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.min_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b", store the minimum value in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.min_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.mul_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the lower double-precision (64-bit) floating-point element in "a" and "b", store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.mul_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply packed double-precision (64-bit) floating-point elements in "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sqrt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the square root of the lower double-precision (64-bit) floating-point element in "b", store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sqrt_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the square root of packed double-precision (64-bit) floating-point elements in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sub_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract the lower double-precision (64-bit) floating-point element in "b" from the lower double-precision (64-bit) floating-point element in "a", store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.sub_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed double-precision (64-bit) floating-point elements in "b" from packed double-precision (64-bit) floating-point elements in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.and_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise AND of packed double-precision (64-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.andnot_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise NOT of packed double-precision (64-bit) floating-point elements in "a" and then AND with "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.or_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise OR of packed double-precision (64-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.xor_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise XOR of packed double-precision (64-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpeq_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for equality, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmplt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for less-than, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmple_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for less-than-or-equal, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpgt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for greater-than, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpge_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for greater-than-or-equal, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpord_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" to see if neither is NaN, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpunord_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" to see if either is NaN, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpneq_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for not-equal, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpnlt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for not-less-than, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpnle_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for not-less-than-or-equal, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpngt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for not-greater-than, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpnge_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point elements in "a" and "b" for not-greater-than-or-equal, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpeq_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for equality, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmplt_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for less-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmple_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for less-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpgt_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpge_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for greater-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpord_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" to see if neither is NaN, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpunord_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" to see if either is NaN, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpneq_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for not-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpnlt_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for not-less-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpnle_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for not-less-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpngt_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for not-greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cmpnge_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed double-precision (64-bit) floating-point elements in "a" and "b" for not-greater-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.comieq_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for equality, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.comilt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for less-than, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.comile_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for less-than-or-equal, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.comigt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for greater-than, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.comige_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for greater-than-or-equal, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.comineq_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for not-equal, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.ucomieq_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for equality, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.ucomilt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for less-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.ucomile_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for less-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.ucomigt_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for greater-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.ucomige_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for greater-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.ucomineq_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower double-precision (64-bit) floating-point element in "a" and "b" for not-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtpd_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed double-precision (64-bit) floating-point elements in "a" to packed single-precision (32-bit) floating-point elements, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtps_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed single-precision (32-bit) floating-point elements in "a" to packed double-precision (64-bit) floating-point elements, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtpd_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed double-precision (64-bit) floating-point elements in "a" to packed 32-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsd_si32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "a" to a 32-bit integer, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsd_si64(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "a" to a 64-bit integer, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsd_si64x(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "a" to a 64-bit integer, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsd_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "b" to a single-precision (32-bit) floating-point element, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtsd_f64(Unity.Burst.Intrinsics.v128)">
            <summary> Copy the lower double-precision (64-bit) floating-point element of "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit floating-point element</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtss_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "b" to a double-precision (64-bit) floating-point element, store the result in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvttpd_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed double-precision (64-bit) floating-point elements in "a" to packed 32-bit integers with truncation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvttsd_si32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "a" to a 32-bit integer with truncation, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvttsd_si64(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "a" to a 64-bit integer with truncation, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvttsd_si64x(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower double-precision (64-bit) floating-point element in "a" to a 64-bit integer with truncation, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvtps_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed single-precision (32-bit) floating-point elements in "a" to packed 32-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.cvttps_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed single-precision (32-bit) floating-point elements in "a" to packed 32-bit integers with truncation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_sd(System.Double)">
            <summary> Copy double-precision (64-bit) floating-point element "a" to the lower element of "dst", and zero the upper element. </summary>
            <param name="a">Double-precision floating-point element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set1_pd(System.Double)">
            <summary> Broadcast double-precision (64-bit) floating-point value "a" to all elements of "dst". </summary>
            <param name="a">Double-precision floating-point element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_pd1(System.Double)">
            <summary> Broadcast double-precision (64-bit) floating-point value "a" to all elements of "dst". </summary>
            <param name="a">Double-precision floating-point element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.set_pd(System.Double,System.Double)">
            <summary> Set packed double-precision (64-bit) floating-point elements in "dst" with the supplied values. </summary>
            <param name="e1">Double-precision floating-point element 1</param>
            <param name="e0">Double-precision floating-point element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.setr_pd(System.Double,System.Double)">
            <summary> Set packed double-precision (64-bit) floating-point elements in "dst" with the supplied values in reverse order. </summary>
            <param name="e1">Double-precision floating-point element 1</param>
            <param name="e0">Double-precision floating-point element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpackhi_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave double-precision (64-bit) floating-point elements from the high half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.unpacklo_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave double-precision (64-bit) floating-point elements from the low half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.movemask_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Set each bit of mask "dst" based on the most significant bit of the corresponding packed double-precision (64-bit) floating-point element in "a". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.shuffle_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shuffle double-precision (64-bit) floating-point elements using the control in "imm8", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.move_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Move the lower double-precision (64-bit) floating-point element from "b" to the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.loadu_si32(System.Void*)">
            <summary>
            Load unaligned 32-bit integer from memory into the first element of dst.
            </summary>
            <param name="mem_addr">Memory address</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.storeu_si32(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 32-bit integer from the first element of a into memory.
            mem_addr does not need to be aligned on any particular
            boundary.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.load_si128(System.Void*)">
            <summary>
            Load 128-bits of integer data from memory into dst.
            </summary>
            <remarks>
            Burst always generates unaligned loads.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.loadu_si128(System.Void*)">
            <summary>
            Load 128-bits of integer data from memory into dst.
            </summary>
            <remarks>
            Burst always generates unaligned loads.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.store_si128(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits of integer data from a into memory.
            </summary>
            <remarks>
            Burst always generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.storeu_si128(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits of integer data from a into memory.
            </summary>
            <remarks>
            Burst always generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse2.clflush(System.Void*)">
            <summary>
            Invalidate and flush the cache line that contains p from all levels of the cache hierarchy.
            </summary>
            <remarks>
            **** clflush m8
            </remarks>
            <param name="ptr">Pointer to the cache line to be flushed.</param>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Bmi1">
            <summary>
            bmi1 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Bmi1.IsBmi1Supported">
             <summary>
             Evaluates to true at compile time if bmi1 intrinsics are supported.
            
             Burst ties bmi1 support to AVX2 support to simplify feature sets to support.
             </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.andn_u32(System.UInt32,System.UInt32)">
            <summary>
            Compute the bitwise NOT of 32-bit integer a and then AND with b, and store the results in dst.
            </summary>
            <remarks>
            **** andn r32, r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="b">32-bit integer</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.andn_u64(System.UInt64,System.UInt64)">
            <summary>
            Compute the bitwise NOT of 64-bit integer a and then AND with b, and store the results in dst.
            </summary>
            <remarks>
            **** andn r64, r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <param name="b">64-bit integer</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.bextr_u32(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Extract contiguous bits from unsigned 32-bit integer a, and store the result in dst. Extract the number of bits specified by len, starting at the bit specified by start.
            </summary>
            <remarks>
            **** bextr r32, r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="start">Starting bit</param>
            <param name="len">Number of bits</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.bextr_u64(System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Extract contiguous bits from unsigned 64-bit integer a, and store the result in dst. Extract the number of bits specified by len, starting at the bit specified by start.
            </summary>
            <remarks>
            **** bextr r64, r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <param name="start">Starting bit</param>
            <param name="len">Number of bits</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.bextr2_u32(System.UInt32,System.UInt32)">
            <summary>
            Extract contiguous bits from unsigned 32-bit integer a, and store the result in dst. Extract the number of bits specified by bits 15:8 of control, starting at the bit specified by bits 0:7 of control..
            </summary>
            <remarks>
            **** bextr r32, r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="control">Control</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.bextr2_u64(System.UInt64,System.UInt64)">
            <summary>
            Extract contiguous bits from unsigned 64-bit integer a, and store the result in dst. Extract the number of bits specified by bits 15:8 of control, starting at the bit specified by bits 0:7 of control..
            </summary>
            <remarks>
            **** bextr r64, r64, r64
            </remarks>
            <param name="a">32-bit integer</param>
            <param name="control">Control</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.blsi_u32(System.UInt32)">
            <summary>
            Extract the lowest set bit from unsigned 32-bit integer a and set the corresponding bit in dst. All other bits in dst are zeroed, and all bits are zeroed if no bits are set in a.
            </summary>
            <remarks>
            **** blsi r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.blsi_u64(System.UInt64)">
            <summary>
            Extract the lowest set bit from unsigned 64-bit integer a and set the corresponding bit in dst. All other bits in dst are zeroed, and all bits are zeroed if no bits are set in a.
            </summary>
            <remarks>
            **** blsi r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.blsmsk_u32(System.UInt32)">
            <summary>
            Set all the lower bits of dst up to and including the lowest set bit in unsigned 32-bit integer a.
            </summary>
            <remarks>
            **** blsmsk r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.blsmsk_u64(System.UInt64)">
            <summary>
            Set all the lower bits of dst up to and including the lowest set bit in unsigned 64-bit integer a.
            </summary>
            <remarks>
            **** blsmsk r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.blsr_u32(System.UInt32)">
            <summary>
            Copy all bits from unsigned 32-bit integer a to dst, and reset (set to 0) the bit in dst that corresponds to the lowest set bit in a.
            </summary>
            <remarks>
            **** blsr r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.blsr_u64(System.UInt64)">
            <summary>
            Copy all bits from unsigned 64-bit integer a to dst, and reset (set to 0) the bit in dst that corresponds to the lowest set bit in a.
            </summary>
            <remarks>
            **** blsr r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.tzcnt_u32(System.UInt32)">
            <summary>
            Count the number of trailing zero bits in unsigned 32-bit integer a, and return that count in dst.
            </summary>
            <remarks>
            **** tzcnt r32, r32
            </remarks>
            <param name="a">32-bit integer</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Bmi1.tzcnt_u64(System.UInt64)">
            <summary>
            Count the number of trailing zero bits in unsigned 64-bit integer a, and return that count in dst.
            </summary>
            <remarks>
            **** tzcnt r64, r64
            </remarks>
            <param name="a">64-bit integer</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Avx">
            <summary>
            AVX intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Avx.IsAvxSupported">
            <summary>
            Evaluates to true at compile time if AVX intrinsics are supported.
            </summary>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Avx.CMP">
            <summary>
            Compare predicates for scalar and packed compare intrinsic functions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.EQ_OQ">
            <summary>
             Equal (ordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.LT_OS">
            <summary>
            Less-than (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.LE_OS">
            <summary>
            Less-than-or-equal (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.UNORD_Q">
            <summary>
            Unordered (nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NEQ_UQ">
            <summary>
            Not-equal (unordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NLT_US">
            <summary>
            Not-less-than (unordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NLE_US">
            <summary>
            Not-less-than-or-equal (unordered, ignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.ORD_Q">
            <summary>
            Ordered (nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.EQ_UQ">
            <summary>
            Equal (unordered, non-signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NGE_US">
            <summary>
            Not-greater-than-or-equal (unordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NGT_US">
            <summary>
            Not-greater-than (unordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.FALSE_OQ">
            <summary>
            False (ordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NEQ_OQ">
            <summary>
            Not-equal (ordered, non-signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.GE_OS">
            <summary>
            Greater-than-or-equal (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.GT_OS">
            <summary>
            Greater-than (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.TRUE_UQ">
            <summary>
            True (unordered, non-signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.EQ_OS">
            <summary>
            Equal (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.LT_OQ">
            <summary>
            Less-than (ordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.LE_OQ">
            <summary>
            Less-than-or-equal (ordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.UNORD_S">
            <summary>
            Unordered (signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NEQ_US">
            <summary>
            Not-equal (unordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NLT_UQ">
            <summary>
            Not-less-than (unordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NLE_UQ">
            <summary>
            Not-less-than-or-equal (unordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.ORD_S">
            <summary>
            Ordered (signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.EQ_US">
            <summary>
            Equal (unordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NGE_UQ">
            <summary>
            Not-greater-than-or-equal (unordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NGT_UQ">
            <summary>
            Not-greater-than (unordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.FALSE_OS">
            <summary>
            False (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.NEQ_OS">
            <summary>
            Not-equal (ordered, signaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.GE_OQ">
            <summary>
            Greater-than-or-equal (ordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.GT_OQ">
            <summary>
            Greater-than (ordered, nonsignaling)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Avx.CMP.TRUE_US">
            <summary>
            True (unordered, signaling)
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_add_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_add_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_addsub_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Alternatively add and subtract packed double-precision (64-bit) floating-point elements in a to/from packed elements in b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_addsub_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Alternatively add and subtract packed single-precision (32-bit) floating-point elements in a to/from packed elements in b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_and_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_and_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_andnot_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise NOT of packed double-precision (64-bit) floating-point elements in a and then AND with b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_andnot_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise NOT of packed single-precision (32-bit) floating-point elements in a and then AND with b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_blend_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Blend packed double-precision (64-bit) floating-point elements from a and b using control mask imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VBLENDPD ymm1, ymm2, ymm3/v256, imm8
            Double-Precision Floating-Point values from the second source operand are
            conditionally merged with values from the first source operand and written
            to the destination. The immediate bits [3:0] determine whether the
            corresponding Double-Precision Floating Point value in the destination is
            copied from the second source or first source. If a bit in the mask,
            corresponding to a word, is "1", then the Double-Precision Floating-Point
            value in the second source operand is copied, else the value in the first
            source operand is copied
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_blend_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Blend packed single-precision (32-bit) floating-point elements from a and b using control mask imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VBLENDPS ymm1, ymm2, ymm3/v256, imm8
            Single precision floating point values from the second source operand are
            conditionally merged with values from the first source operand and written
            to the destination. The immediate bits [7:0] determine whether the
            corresponding single precision floating-point value in the destination is
            copied from the second source or first source. If a bit in the mask,
            corresponding to a word, is "1", then the single-precision floating-point
            value in the second source operand is copied, else the value in the first
            source operand is copied
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_blendv_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Blend packed double-precision (64-bit) floating-point elements from a and b using mask, and store the results in dst.
            </summary>
            <remarks>
            **** VBLENDVPD ymm1, ymm2, ymm3/v256, ymm4
            Conditionally copy each quadword data element of double-precision
            floating-point value from the second source operand (third operand) and the
            first source operand (second operand) depending on mask bits defined in the
            mask register operand (fourth operand).
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_blendv_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Blend packed single-precision (32-bit) floating-point elements from a and b using mask, and store the results in dst.
            </summary>
            <remarks>
            Blend Packed Single Precision Floating-Point Values
            **** VBLENDVPS ymm1, ymm2, ymm3/v256, ymm4
            Conditionally copy each dword data element of single-precision
            floating-point value from the second source operand (third operand) and the
            first source operand (second operand) depending on mask bits defined in the
            mask register operand (fourth operand).
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_div_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Divide packed double-precision (64-bit) floating-point elements in a by packed elements in b, and store the results in dst.
            </summary>
            <remarks>
            **** VDIVPD ymm1, ymm2, ymm3/v256
            Performs an SIMD divide of the four packed double-precision floating-point
            values in the first source operand by the four packed double-precision
            floating-point values in the second source operand
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_div_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Divide packed single-precision (32-bit) floating-point elements in a by packed elements in b, and store the results in dst.
            </summary>
            <remarks>
            Divide Packed Single-Precision Floating-Point Values
            **** VDIVPS ymm1, ymm2, ymm3/v256
            Performs an SIMD divide of the eight packed single-precision
            floating-point values in the first source operand by the eight packed
            single-precision floating-point values in the second source operand
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_dp_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Conditionally multiply the packed single-precision (32-bit)
            floating-point elements in a and b using the high 4 bits in
            imm8, sum the four products, and conditionally store the sum in
            dst using the low 4 bits of imm8.
            </summary>
            <remarks>
            **** VDPPS ymm1, ymm2, ymm3/v256, imm8
            Multiplies the packed single precision floating point values in the
            first source operand with the packed single-precision floats in the
            second source. Each of the four resulting single-precision values is
            conditionally summed depending on a mask extracted from the high 4 bits
            of the immediate operand. This sum is broadcast to each of 4 positions
            in the destination if the corresponding bit of the mask selected from
            the low 4 bits of the immediate operand is "1". If the corresponding
            low bit 0-3 of the mask is zero, the destination is set to zero.
            The process is replicated for the high elements of the destination.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_hadd_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally add adjacent pairs of double-precision (64-bit) floating-point elements in a and b, and pack the results in dst.
            </summary>
            <remarks>
            **** VHADDPD ymm1, ymm2, ymm3/v256
            Adds pairs of adjacent double-precision floating-point values in the
            first source operand and second source operand and stores results in
            the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_hadd_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in a and b, and pack the results in dst.
            </summary>
            <remarks>
            **** VHADDPS ymm1, ymm2, ymm3/v256
            Adds pairs of adjacent single-precision floating-point values in the
            first source operand and second source operand and stores results in
            the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_hsub_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally subtract adjacent pairs of double-precision (64-bit) floating-point elements in a and b, and pack the results in dst.
            </summary>
            <remarks>
            **** VHSUBPD ymm1, ymm2, ymm3/v256
            Subtract pairs of adjacent double-precision floating-point values in
            the first source operand and second source operand and stores results
            in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_hsub_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in a and b, and pack the results in dst.
            </summary>
            <remarks>
            **** VHSUBPS ymm1, ymm2, ymm3/v256
            Subtract pairs of adjacent single-precision floating-point values in
            the first source operand and second source operand and stores results
            in the destination.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_max_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed maximum values in dst.
            </summary>
            <remarks>
            **** VMAXPD ymm1, ymm2, ymm3/v256
            Performs an SIMD compare of the packed double-precision floating-point
            values in the first source operand and the second source operand and
            returns the maximum value for each pair of values to the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_max_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed maximum values in dst.
            </summary>
            <remarks>
            **** VMAXPS ymm1, ymm2, ymm3/v256
            Performs an SIMD compare of the packed single-precision floating-point
            values in the first source operand and the second source operand and
            returns the maximum value for each pair of values to the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_min_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed minimum values in dst. 
            </summary>
            <remarks>
            **** VMINPD ymm1, ymm2, ymm3/v256
            Performs an SIMD compare of the packed double-precision floating-point
            values in the first source operand and the second source operand and
            returns the minimum value for each pair of values to the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_min_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed minimum values in dst.
            </summary>
            <remarks>
            **** VMINPS ymm1, ymm2, ymm3/v256
            Performs an SIMD compare of the packed single-precision floating-point
            values in the first source operand and the second source operand and
            returns the minimum value for each pair of values to the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_mul_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VMULPD ymm1, ymm2, ymm3/v256
            Performs a SIMD multiply of the four packed double-precision floating-point
            values from the first Source operand to the Second Source operand, and
            stores the packed double-precision floating-point results in the
            destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_mul_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VMULPS ymm1, ymm2, ymm3/v256
            Performs an SIMD multiply of the eight packed single-precision
            floating-point values from the first source operand to the second source
            operand, and stores the packed double-precision floating-point results in
            the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_or_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise OR of packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VORPD ymm1, ymm2, ymm3/v256
            Performs a bitwise logical OR of the four packed double-precision
            floating-point values from the first source operand and the second
            source operand, and stores the result in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_or_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise OR of packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VORPS ymm1, ymm2, ymm3/v256
            Performs a bitwise logical OR of the eight packed single-precision
            floating-point values from the first source operand and the second
            source operand, and stores the result in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_shuffle_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VSHUFPD ymm1, ymm2, ymm3/v256, imm8
            Moves either of the two packed double-precision floating-point values from
            each double quadword in the first source operand into the low quadword
            of each double quadword of the destination; moves either of the two packed
            double-precision floating-point values from the second source operand into
            the high quadword of each double quadword of the destination operand.
            The selector operand determines which values are moved to the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_shuffle_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VSHUFPS ymm1, ymm2, ymm3/v256, imm8
            Moves two of the four packed single-precision floating-point values
            from each double qword of the first source operand into the low
            quadword of each double qword of the destination; moves two of the four
            packed single-precision floating-point values from each double qword of
            the second source operand into to the high quadword of each double qword
            of the destination. The selector operand determines which values are moved
            to the destination.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_sub_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed double-precision (64-bit) floating-point elements in b from packed double-precision (64-bit) floating-point elements in a, and store the results in dst.
            </summary>
            <remarks>
            **** VSUBPD ymm1, ymm2, ymm3/v256
            Performs an SIMD subtract of the four packed double-precision floating-point
            values of the second Source operand from the first Source operand, and
            stores the packed double-precision floating-point results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_sub_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed single-precision (32-bit) floating-point elements in b from packed single-precision (32-bit) floating-point elements in a, and store the results in dst.
            </summary>
            <remarks>
            **** VSUBPS ymm1, ymm2, ymm3/v256
            Performs an SIMD subtract of the eight packed single-precision
            floating-point values in the second Source operand from the First Source
            operand, and stores the packed single-precision floating-point results in
            the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_xor_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise XOR of packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VXORPD ymm1, ymm2, ymm3/v256
            Performs a bitwise logical XOR of the four packed double-precision
            floating-point values from the first source operand and the second
            source operand, and stores the result in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_xor_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise XOR of packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VXORPS ymm1, ymm2, ymm3/v256
            Performs a bitwise logical XOR of the eight packed single-precision
            floating-point values from the first source operand and the second
            source operand, and stores the result in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.cmp_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed double-precision (64-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VCMPPD xmm1, xmm2, xmm3/v128, imm8
            Performs an SIMD compare of the four packed double-precision floating-point
            values in the second source operand (third operand) and the first source
            operand (second operand) and returns the results of the comparison to the
            destination operand (first operand). The comparison predicate operand
            (immediate) specifies the type of comparison performed on each of the pairs
            of packed values.
            For 128-bit intrinsic function with compare predicate values in range 0-7
            compiler may generate SSE2 instructions if it is warranted for performance
            reasons.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cmp_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Compare packed double-precision (64-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VCMPPD ymm1, ymm2, ymm3/v256, imm8
            Performs an SIMD compare of the four packed double-precision floating-point
            values in the second source operand (third operand) and the first source
            operand (second operand) and returns the results of the comparison to the
            destination operand (first operand). The comparison predicate operand
            (immediate) specifies the type of comparison performed on each of the pairs
            of packed values.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.cmp_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            **** VCMPPS ymm1, ymm2, ymm3/v256, imm8
            <summary>
            Compare packed single-precision (32-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VCMPPS xmm1, xmm2, xmm3/v256, imm8
            Performs a SIMD compare of the packed single-precision floating-point values
            in the second source operand (third operand) and the first source operand
            (second operand) and returns the results of the comparison to the
            destination operand (first operand). The comparison predicate operand
            (immediate) specifies the type of comparison performed on each of the pairs
            of packed values.
            For 128-bit intrinsic function with compare predicate values in range 0-7
            compiler may generate SSE2 instructions if it is warranted for performance
            reasons.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cmp_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Compare packed single-precision (32-bit) floating-point elements in a and b based on the comparison operand specified by imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VCMPPS xmm1, xmm2, xmm3/v256, imm8
            Performs a SIMD compare of the packed single-precision floating-point values
            in the second source operand (third operand) and the first source operand
            (second operand) and returns the results of the comparison to the
            destination operand (first operand). The comparison predicate operand
            (immediate) specifies the type of comparison performed on each of the pairs
            of packed values.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.cmp_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare the lower double-precision (64-bit) floating-point
            element in a and b based on the comparison operand specified by
            imm8, store the result in the lower element of dst, and copy
            the upper element from a to the upper element of dst.
            </summary>
            <remarks>
            **** VCMPSD xmm1, xmm2, xmm3/m64, imm8
            Compares the low double-precision floating-point values in the second source
            operand (third operand) and the first source operand (second operand) and
            returns the results in of the comparison to the destination operand (first
            operand). The comparison predicate operand (immediate operand) specifies the
            type of comparison performed.
            For compare predicate values in range 0-7 compiler may generate SSE2
            instructions if it is warranted for performance reasons.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.cmp_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare the lower single-precision (32-bit) floating-point
            element in a and b based on the comparison operand specified by
            imm8, store the result in the lower element of dst, and copy
            the upper 3 packed elements from a to the upper elements of
            dst.
            </summary>
            <remarks>
            **** VCMPSS xmm1, xmm2, xmm3/m64, imm8
            Compares the low single-precision floating-point values in the second source
            operand (third operand) and the first source operand (second operand) and
            returns the results of the comparison to the destination operand (first
            operand). The comparison predicate operand (immediate operand) specifies
            the type of comparison performed.
            For compare predicate values in range 0-7 compiler may generate SSE2
            instructions if it is warranted for performance reasons.
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtepi32_pd(Unity.Burst.Intrinsics.v128)">
            <summary>
            Convert packed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.
            </summary>
            <param name="a"></param>
            <remarks>
            **** VCVTDQ2PD ymm1, xmm2/v128
            Converts four packed signed doubleword integers in the source operand to
            four packed double-precision floating-point values in the destination
            </remarks>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtepi32_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.
            </summary>
            <remarks>
            **** VCVTDQ2PS ymm1, ymm2/v256
            Converts eight packed signed doubleword integers in the source operand to
            eight packed double-precision floating-point values in the destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtpd_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed double-precision (64-bit) floating-point
            elements in a to packed single-precision (32-bit)
            floating-point elements, and store the results in dst.
            </summary>
            <remarks>
            **** VCVTPD2PS xmm1, ymm2/v256
            Converts four packed double-precision floating-point values in the source
            operand to four packed single-precision floating-point values in the
            destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtps_epi32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed single-precision (32-bit) floating-point
            elements in a to packed 32-bit integers, and store the results
            in dst.
            </summary>
            <remarks>
            **** VCVTPS2DQ ymm1, ymm2/v256
            Converts eight packed single-precision floating-point values in the source
            operand to eight signed doubleword integers in the destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtps_pd(Unity.Burst.Intrinsics.v128)">
            <summary>
            Convert packed single-precision (32-bit) floating-point
            elements in a to packed double-precision (64-bit)
            floating-point elements, and store the results in dst.
            </summary>
            <remarks>
            **** VCVTPS2PD ymm1, xmm2/v128
            Converts four packed single-precision floating-point values in the source
            operand to four packed double-precision floating-point values in the
            destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvttpd_epi32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed double-precision (64-bit) floating-point
            elements in a to packed 32-bit integers with truncation, and
            store the results in dst.
            </summary>
            <remarks>
            **** VCVTTPD2DQ xmm1, ymm2/v256
            Converts four packed double-precision floating-point values in the source
            operand to four packed signed doubleword integers in the destination.
            When a conversion is inexact, a truncated (round toward zero) value is
            returned. If a converted result is larger than the maximum signed doubleword
            integer, the floating-point invalid exception is raised, and if this
            exception is masked, the indefinite integer value (80000000H) is returned
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtpd_epi32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed double-precision(64-bit) floating-point elements
            in a to packed 32-bit integers, and store the results in dst.
            </summary>
            <remarks>
            **** VCVTPD2DQ xmm1, ymm2/v256
            Converts four packed double-precision floating-point values in the source
            operand to four packed signed doubleword integers in the destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvttps_epi32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed single-precision (32-bit) floating-point
            elements in a to packed 32-bit integers with truncation, and
            store the results in dst.
            </summary>
            <remarks>
            **** VCVTTPS2DQ ymm1, ymm2/v256
            Converts eight packed single-precision floating-point values in the source
            operand to eight signed doubleword integers in the destination.
            When a conversion is inexact, a truncated (round toward zero) value is
            returned. If a converted result is larger than the maximum signed doubleword
            integer, the floating-point invalid exception is raised, and if this
            exception is masked, the indefinite integer value (80000000H) is returned
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_cvtss_f32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Copy the lower single-precision (32-bit) floating-point element of a to dst.
            </summary>
            <remarks>
            Identical in HPC# to accessing Float0, kept for compatibility with existing code while porting.
            </remarks>
            <param name="a">Vector a</param>
            <returns>Float</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_extractf128_ps(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from a, selected with imm8, and store the result in dst.
            </summary>
            <remarks>
            **** VEXTRACTF128 xmm1/v128, ymm2, imm8
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_extractf128_pd(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from a, selected with imm8, and store the result in dst.
            </summary>
            <remarks>
            **** VEXTRACTF128 xmm1/v128, ymm2, imm8
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_extractf128_si256(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract 128 bits (composed of integer data) from a, selected with imm8, and store the result in dst.
            </summary>
            <remarks>
            **** VEXTRACTF128 xmm1/v128, ymm2, imm8
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_zeroall">
            <summary>
            Zeros the contents of all YMM registers
            </summary>
            <remarks>
            **** VZEROALL
            </remarks>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_zeroupper">
            <summary>
            Zero the upper 128 bits of all YMM registers; the lower 128-bits of the registers are unmodified.
            </summary>
            <remarks>
            **** VZEROUPPER
            </remarks>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.permutevar_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shuffle single-precision (32-bit) floating-point elements in a using the control in b, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPS xmm1, xmm2, xmm3/v128
            Permute Single-Precision Floating-Point values in the first source operand
            using 8-bit control fields in the low bytes of corresponding elements the
            shuffle control and store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permutevar_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPS ymm1, ymm2, ymm3/v256
            Permute Single-Precision Floating-Point values in the first source operand
            using 8-bit control fields in the low bytes of corresponding elements the
            shuffle control and store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.permute_ps(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Shuffle single-precision (32-bit) floating-point elements in a using the control in imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPS xmm1, xmm2/v128, imm8
            Permute Single-Precision Floating-Point values in the first source operand
            using four 2-bit control fields in the 8-bit immediate and store results
            in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permute_ps(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle single-precision (32-bit) floating-point elements in a
            within 128-bit lanes using the control in imm8, and store the
            results in dst.
            </summary>
            <remarks>
            **** VPERMILPS ymm1, ymm2/v256, imm8
            Permute Single-Precision Floating-Point values in the first source operand
            using four 2-bit control fields in the 8-bit immediate and store results
            in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.permutevar_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shuffle double-precision (64-bit) floating-point elements in a using the control in b, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPD xmm1, xmm2, xmm3/v128
            Permute Double-Precision Floating-Point values in the first source operand
            using 8-bit control fields in the low bytes of the second source operand
            and store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permutevar_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPD ymm1, ymm2, ymm3/v256
            Permute Double-Precision Floating-Point values in the first source operand
            using 8-bit control fields in the low bytes of the second source operand
            and store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permute_pd(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPD ymm1, ymm2/v256, imm8
            Permute Double-Precision Floating-Point values in the first source operand
            using two, 1-bit control fields in the low 2 bits of the 8-bit immediate
            and store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.permute_pd(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Shuffle double-precision (64-bit) floating-point elements in a using the control in imm8, and store the results in dst.
            </summary>
            <remarks>
            **** VPERMILPD xmm1, xmm2/v128, imm8
            Permute Double-Precision Floating-Point values in the first source operand
            using two, 1-bit control fields in the low 2 bits of the 8-bit immediate
            and store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permute2f128_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VPERM2F128 ymm1, ymm2, ymm3/v256, imm8
            Permute 128 bit floating-point-containing fields from the first source
            operand and second source operand using bits in the 8-bit immediate and
            store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permute2f128_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst. 
            </summary>
            <remarks>
            **** VPERM2F128 ymm1, ymm2, ymm3/v256, imm8
            Permute 128 bit floating-point-containing fields from the first source
            operand and second source operand using bits in the 8-bit immediate and
            store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_permute2f128_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 128-bits (composed of integer data) selected by imm8 from a and b, and store the results in dst.
            </summary>
            <remarks>
            **** VPERM2F128 ymm1, ymm2, ymm3/v256, imm8
            Permute 128 bit floating-point-containing fields from the first source
            operand and second source operand using bits in the 8-bit immediate and
            store results in the destination
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_broadcast_ss(System.Void*)">
            <summary>
            Broadcast a single-precision (32-bit) floating-point element from memory to all elements of dst.
            </summary>
            <remarks>
            **** VBROADCASTSS ymm1, m32
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.broadcast_ss(System.Void*)">
            <summary>
            Broadcast a single-precision (32-bit) floating-point element from memory to all elements of dst.
            </summary>
            <remarks>
            **** VBROADCASTSS xmm1, m32
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_broadcast_sd(System.Void*)">
            <summary>
            Broadcast a double-precision (64-bit) floating-point element from memory to all elements of dst.
            </summary>
            <remarks>
            **** VBROADCASTSD ymm1, m64
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_broadcast_ps(System.Void*)">
            <summary>
            Broadcast 128 bits from memory (composed of 4 packed single-precision (32-bit) floating-point elements) to all elements of dst.
            </summary>
            <remarks>
            **** VBROADCASTF128 ymm1, v128
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_broadcast_pd(System.Void*)">
            <summary>
            Broadcast 128 bits from memory (composed of 2 packed double-precision (64-bit) floating-point elements) to all elements of dst.
            </summary>
            <param name="ptr">Pointer</param>
            <returns>
            **** VBROADCASTF128 ymm1, v128
            </returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insertf128_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Copy a to dst, then insert 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from b into dst at the location specified by imm8.
            </summary>
            <remarks>
            **** VINSERTF128 ymm1, ymm2, xmm3/v128, imm8
            Performs an insertion of 128-bits of packed floating-point values from the
            second source operand into an the destination at an 128-bit offset from
            imm8[0]. The remaining portions of the destination are written by the
            corresponding fields of the first source operand
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insertf128_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Copy a to dst, then insert 128 bits (composed of 2 packed double-precision (64-bit) floating-point elements) from b into dst at the location specified by imm8.
            </summary>
            <remarks>
            **** VINSERTF128 ymm1, ymm2, xmm3/v128, imm8
            Performs an insertion of 128-bits of packed floating-point values from the
            second source operand into an the destination at an 128-bit offset from
            imm8[0]. The remaining portions of the destination are written by the
            corresponding fields of the first source operand
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insertf128_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Copy a to dst, then insert 128 bits of integer data from b into dst at the location specified by imm8.
            </summary>
            <remarks>
            **** VINSERTF128 ymm1, ymm2, xmm3/v128, imm8
            Performs an insertion of 128-bits of packed floating-point values from the
            second source operand into an the destination at an 128-bit offset from
            imm8[0]. The remaining portions of the destination are written by the
            corresponding fields of the first source operand
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_load_ps(System.Void*)">
            <summary>
            Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory
            </summary>
            <remarks>
            **** VMOVUPS ymm1, v256
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_store_ps(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from a into memory
            </summary>
            <remarks>
            **** VMOVUPS v256, ymm1
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_load_pd(System.Void*)">
            <summary>
            Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory
            </summary>
            <remarks>
            **** VMOVUPS ymm1, v256
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_store_pd(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory
            </summary>
            <remarks>
            **** VMOVUPS v256, ymm1
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_loadu_pd(System.Void*)">
            <summary>
            Load 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from memory
            </summary>
            <remarks>
            **** VMOVUPS ymm1, v256
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_storeu_pd(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a into memory
            </summary>
            <remarks>
            **** VMOVUPS v256, ymm1
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_loadu_ps(System.Void*)">
            <summary>
            Load 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from memory
            </summary>
            <remarks>
            **** VMOVUPS ymm1, v256
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_storeu_ps(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 8 packed single-precision (32-bit) floating-point elements) from a into memory
            </summary>
            <remarks>
            **** VMOVUPS v256, ymm1
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_load_si256(System.Void*)">
            <summary>
            Load 256-bits (composed of 8 packed 32-bit integers elements) from memory
            </summary>
            <remarks>
            **** VMOVDQU ymm1, v256
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_store_si256(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 8 packed 32-bit integer elements) from a into memory
            </summary>
            <remarks>
            **** VMOVDQU v256, ymm1
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="v">Vector</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_loadu_si256(System.Void*)">
            <summary>
            Load 256-bits (composed of 8 packed 32-bit integers elements) from memory
            </summary>
            <remarks>
            **** VMOVDQU ymm1, v256
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_storeu_si256(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 8 packed 32-bit integer elements) from a into memory
            </summary>
            <remarks>
            **** VMOVDQU v256, ymm1
            Burst only generates unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="v">Vector</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_loadu2_m128(System.Void*,System.Void*)">
            <summary>
            Load two 128-bit values (composed of 4 packed single-precision
            (32-bit) floating-point elements) from memory, and combine them
            into a 256-bit value in dst. hiaddr and loaddr do not need to
            be aligned on any particular boundary.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hiaddr">High address pointer</param>
            <param name="loaddr">Low address pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_loadu2_m128d(System.Void*,System.Void*)">
            <summary>
            Load two 128-bit values (composed of 2 packed double-precision
            (64-bit) floating-point elements) from memory, and combine them
            into a 256-bit value in dst. hiaddr and loaddr do not need to
            be aligned on any particular boundary.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hiaddr">High address pointer</param>
            <param name="loaddr">Low address pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_loadu2_m128i(System.Void*,System.Void*)">
            <summary>
            Load two 128-bit values (composed of integer data) from memory,
            and combine them into a 256-bit value in dst. hiaddr and loaddr
            do not need to be aligned on any particular boundary.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hiaddr">High address pointer</param>
            <param name="loaddr">Low address pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_m128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Set packed __m256 vector dst with the supplied values.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hi">High half of the vector</param>
            <param name="lo">Low half of the vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_storeu2_m128(System.Void*,System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store the high and low 128-bit halves (each composed of 4
            packed single-precision (32-bit) floating-point elements) from
            a into memory two different 128-bit locations. hiaddr and
            loaddr do not need to be aligned on any particular boundary.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hiaddr">High address pointer</param>
            <param name="loaddr">Low address pointer</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_storeu2_m128d(System.Void*,System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store the high and low 128-bit halves (each composed of 2
            packed double-precision (64-bit) floating-point elements) from
            a into memory two different 128-bit locations. hiaddr and
            loaddr do not need to be aligned on any particular boundary.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hiaddr">High address pointer</param>
            <param name="loaddr">Low address pointer</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_storeu2_m128i(System.Void*,System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store the high and low 128-bit halves (each composed of integer
            data) from a into memory two different 128-bit locations. hiaddr
            and loaddr do not need to be aligned on any particular boundary.
            </summary>
            <remarks>
            This is a composite function which can generate more than one instruction.
            </remarks>
            <param name="hiaddr">High address pointer</param>
            <param name="loaddr">Low address pointer</param>
            <param name="val">Value</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.maskload_pd(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Load packed double-precision (64-bit) floating-point elements
            from memory into dst using mask (elements are zeroed out when
            the high bit of the corresponding element is not set).
            </summary>
            <remarks>
            **** VMASKMOVPD xmm1, xmm2, v128
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_maskload_pd(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Load packed double-precision (64-bit) floating-point elements
            from memory into dst using mask (elements are zeroed out when
            the high bit of the corresponding element is not set).
            </summary>
            <remarks>
            **** VMASKMOVPD ymm1, ymm2, v256
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.maskstore_pd(System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store packed double-precision (64-bit) floating-point elements from a into memory using mask.
            </summary>
            <remarks>
            **** VMASKMOVPD v128, xmm1, xmm2
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_maskstore_pd(System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store packed double-precision (64-bit) floating-point elements from a into memory using mask.
            </summary>
            <remarks>
            **** VMASKMOVPD v256, ymm1, ymm2
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.maskload_ps(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Load packed single-precision (32-bit) floating-point elements
            from memory into dst using mask (elements are zeroed out when
            the high bit of the corresponding element is not set).
            </summary>
            <remarks>
            **** VMASKMOVPS xmm1, xmm2, v128
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_maskload_ps(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Load packed single-precision (32-bit) floating-point elements
            from memory into dst using mask (elements are zeroed out when
            the high bit of the corresponding element is not set).
            </summary>
            <remarks>
            **** VMASKMOVPS ymm1, ymm2, v256
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.maskstore_ps(System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store packed single-precision (32-bit) floating-point elements from a into memory using mask.
            </summary>
            <remarks>
            **** VMASKMOVPS v128, xmm1, xmm2
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_maskstore_ps(System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store packed single-precision (32-bit) floating-point elements from a into memory using mask.
            </summary>
            <remarks>
            **** VMASKMOVPS v256, ymm1, ymm2
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_movehdup_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Duplicate odd-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst. 
            </summary>
            <remarks>
            **** VMOVSHDUP ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_moveldup_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Duplicate even-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst.
            </summary>
            <remarks>
            **** VMOVSLDUP ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_movedup_pd(Unity.Burst.Intrinsics.v256)">
            <summary>
            Duplicate even-indexed double-precision (64-bit) floating-point elements from a, and store the results in dst.
            </summary>
            <remarks>
            **** VMOVDDUP ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_lddqu_si256(System.Void*)">
            <summary>
            Load 256-bits of integer data from unaligned memory into dst.
            This intrinsic may perform better than mm256_loadu_si256 when
            the data crosses a cache line boundary.
            </summary>
            <remarks>
            **** VLDDQU ymm1, v256
            </remarks>
            <param name="mem_addr">Memory address</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_stream_si256(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits of integer data from a into memory using a
            non-temporal memory hint. mem_addr must be aligned on a 32-byte
            boundary or a general-protection exception may be generated.
            </summary>
            <remarks>
            **** VMOVNTDQ v256, ymm1
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_stream_pd(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 4 packed double-precision (64-bit)
            floating-point elements) from a into memory using a
            non-temporal memory hint. mem_addr must be aligned on a 32-byte
            boundary or a general-protection exception may be generated.
            </summary>
            <remarks>
            **** VMOVNTPD v256, ymm1
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_stream_ps(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store 256-bits (composed of 8 packed single-precision (32-bit)
            floating-point elements) from a into memory using a
            non-temporal memory hint. mem_addr must be aligned on a 32-byte
            boundary or a general-protection exception may be generated.
            </summary>
            <remarks>
            **** VMOVNTPS v256, ymm1
            </remarks>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_rcp_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the approximate reciprocal of packed single-precision
            (32-bit) floating-point elements in a, and store the results in
            dst. The maximum relative error for this approximation is less
            than 1.5*2^-12.
            </summary>
            <remarks>
            **** VRCPPS ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_rsqrt_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the approximate reciprocal square root of packed
            single-precision (32-bit) floating-point elements in a, and
            store the results in dst. The maximum relative error for this
            approximation is less than 1.5*2^-12.
            </summary>
            <remarks>
            **** VRSQRTPS ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_sqrt_pd(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the square root of packed double-precision (64-bit)
            floating-point elements in a, and store the results in dst.
            </summary>
            <remarks>
            **** VSQRTPD ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_sqrt_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the square root of packed single-precision (32-bit)
            floating-point elements in a, and store the results in dst.
            </summary>
            <remarks>
            **** VSQRTPS ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_round_pd(Unity.Burst.Intrinsics.v256,System.Int32)">
             <summary>
             Round the packed double-precision (64-bit) floating-point
             elements in a using the rounding parameter, and store the
             results as packed double-precision floating-point elements in
             dst.
             </summary>
             <remarks>
            **** VROUNDPD ymm1,ymm2/v256,imm8
             Rounding is done according to the rounding parameter, which can be one of:
             (_MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) // round to nearest, and suppress exceptions
             (_MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)     // round down, and suppress exceptions
             (_MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)     // round up, and suppress exceptions
             (_MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)        // truncate, and suppress exceptions
             _MM_FROUND_CUR_DIRECTION                       // use MXCSR.RC; see _MM_SET_ROUNDING_MODE
             </remarks>
             <param name="a">Vector a</param>
             <param name="rounding">Rounding mode</param>
             <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_ceil_pd(Unity.Burst.Intrinsics.v256)">
            <summary>
            Round the packed double-precision (64-bit) floating-point
            elements in a up to an integer value, and store the results as
            packed double-precision floating-point elements in dst.
            </summary>
            <param name="val">Value</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_floor_pd(Unity.Burst.Intrinsics.v256)">
            <summary>
            Round the packed double-precision (64-bit) floating-point
            elements in a down to an integer value, and store the results
            as packed double-precision floating-point elements in dst.
            </summary>
            <param name="val">Value</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_round_ps(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Round the packed single-precision (32-bit) floating-point
            elements in a using the rounding parameter, and store the
            results as packed single-precision floating-point elements in
            dst.
            </summary>
            <remarks>
            **** VROUNDPS ymm1,ymm2/v256,imm8
            Round the four single-precision floating-point values values in the source
            operand by the rounding mode specified in the immediate operand and place
            the result in the destination. The rounding process rounds the input to an
            integral value and returns the result as a double-precision floating-point
            value. The Precision Floating Point Exception is signaled according to the
            immediate operand. If any source operand is an SNaN then it will be
            converted to a QNaN.
            </remarks>
            <param name="a">Vector a</param>
            <param name="rounding">Rounding mode</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_ceil_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Round the packed single-precision (32-bit) floating-point
            elements in a up to an integer value, and store the results as
            packed single-precision floating-point elements in dst.
            </summary>
            <param name="val">Value</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_floor_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Round the packed single-precision (32-bit) floating-point
            elements in a down to an integer value, and store the results
            as packed single-precision floating-point elements in dst.
            </summary>
            <param name="val">Value</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_unpackhi_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave double-precision (64-bit) floating-point
            elements from the high half of each 128-bit lane in a and b,
            and store the results in dst.
            </summary>
            <remarks>
            **** VUNPCKHPD ymm1,ymm2,ymm3/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_unpacklo_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave double-precision (64-bit) floating-point
            elements from the low half of each 128-bit lane in a and b, and
            store the results in dst.
            </summary>
            <remarks>
            **** VUNPCKLPD ymm1,ymm2,ymm3/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_unpackhi_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave single-precision(32-bit) floating-point
            elements from the high half of each 128-bit lane in a and b,
            and store the results in dst.
            </summary>
            <remarks>
            **** VUNPCKHPS ymm1,ymm2,ymm3/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_unpacklo_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave single-precision (32-bit) floating-point
            elements from the low half of each 128-bit lane in a and b, and
            store the results in dst.
            </summary>
            <remarks>
            **** VUNPCKLPS ymm1,ymm2,ymm3/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testz_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing integer data)
            in a and b, and set ZF to 1 if the result is zero, otherwise
            set ZF to 0. Compute the bitwise NOT of a and then AND with b,
            and set CF to 1 if the result is zero, otherwise set CF to 0.
            Return the ZF value.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>ZF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testc_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing integer data)
            in a and b, and set ZF to 1 if the result is zero, otherwise
            set ZF to 0. Compute the bitwise NOT of a and then AND with b,
            and set CF to 1 if the result is zero, otherwise set CF to 0.
            Return the CF value.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>CF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testnzc_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing integer data)
            in a and b, and set ZF to 1 if the result is zero, otherwise
            set ZF to 0. Compute the bitwise NOT of a and then AND with b,
            and set CF to 1 if the result is zero, otherwise set CF to 0.
            Return 1 if both the ZF and CF values are zero, otherwise
            return 0.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testz_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing
            double-precision (64-bit) floating-point elements) in a and b,
            producing an intermediate 256-bit value, and set ZF to 1 if the
            sign bit of each 64-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 64-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the ZF value.
            </summary>
            <remarks>
            **** VTESTPD ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>ZF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testc_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing
            double-precision (64-bit) floating-point elements) in a and b,
            producing an intermediate 256-bit value, and set ZF to 1 if the
            sign bit of each 64-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 64-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the CF value.
            </summary>
            <remarks>
            **** VTESTPD ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>CF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testnzc_pd(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing
            double-precision (64-bit) floating-point elements) in a and b,
            producing an intermediate 256-bit value, and set ZF to 1 if the
            sign bit of each 64-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 64-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return 1 if both the ZF
            and CF values are zero, otherwise return 0.
            </summary>
            <remarks>
            **** VTESTPD ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.testz_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compute the bitwise AND of 128 bits (representing
            double-precision (64-bit) floating-point elements) in a and b,
            producing an intermediate 128-bit value, and set ZF to 1 if the
            sign bit of each 64-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 64-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the ZF value.
            </summary>
            <remarks>
            **** VTESTPD xmm1, xmm2/v128
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>ZF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.testc_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compute the bitwise AND of 128 bits (representing
            double-precision (64-bit) floating-point elements) in a and b,
            producing an intermediate 128-bit value, and set ZF to 1 if the
            sign bit of each 64-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 64-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the CF value.
            </summary>
            <remarks>
            **** VTESTPD xmm1, xmm2/v128
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>CF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.testnzc_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compute the bitwise AND of 128 bits (representing
            double-precision (64-bit) floating-point elements) in a and b,
            producing an intermediate 128-bit value, and set ZF to 1 if the
            sign bit of each 64-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 64-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return 1 if both the ZF
            and CF values are zero, otherwise return 0.
            </summary>
            <remarks>
            **** VTESTPD xmm1, xmm2/v128
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testz_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing
            single-precision (32-bit) floating-point elements) in a and b,
            producing an intermediate 256-bit value, and set ZF to 1 if the
            sign bit of each 32-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 32-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the ZF value.
            </summary>
            <remarks>
            **** VTESTPS ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>ZF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testc_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing
            single-precision (32-bit) floating-point elements) in a and b,
            producing an intermediate 256-bit value, and set ZF to 1 if the
            sign bit of each 32-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 32-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the CF value.
            </summary>
            <remarks>
            **** VTESTPS ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>CF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_testnzc_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing
            single-precision (32-bit) floating-point elements) in a and b,
            producing an intermediate 256-bit value, and set ZF to 1 if the
            sign bit of each 32-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 32-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return 1 if both the ZF
            and CF values are zero, otherwise return 0.
            </summary>
            <remarks>
            **** VTESTPS ymm1, ymm2/v256
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.testz_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compute the bitwise AND of 128 bits (representing
            single-precision (32-bit) floating-point elements) in a and b,
            producing an intermediate 128-bit value, and set ZF to 1 if the
            sign bit of each 32-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 32-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the ZF value.
            </summary>
            <remarks>
            **** VTESTPS xmm1, xmm2/v128
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>ZF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.testc_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compute the bitwise AND of 128 bits (representing
            single-precision (32-bit) floating-point elements) in a and b,
            producing an intermediate 128-bit value, and set ZF to 1 if the
            sign bit of each 32-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 32-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return the CF value.
            </summary>
            <remarks>
            **** VTESTPS xmm1, xmm2/v128
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>CF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.testnzc_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compute the bitwise AND of 128 bits (representing
            single-precision (32-bit) floating-point elements) in a and b,
            producing an intermediate 128-bit value, and set ZF to 1 if the
            sign bit of each 32-bit element in the intermediate value is
            zero, otherwise set ZF to 0. Compute the bitwise NOT of a and
            then AND with b, producing an intermediate value, and set CF to
            1 if the sign bit of each 32-bit element in the intermediate
            value is zero, otherwise set CF to 0. Return 1 if both the ZF
            and CF values are zero, otherwise return 0.
            </summary>
            <remarks>
            **** VTESTPS xmm1, xmm2/v128
            </remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_movemask_pd(Unity.Burst.Intrinsics.v256)">
            <summary>
            Set each bit of mask dst based on the most significant bit of the corresponding packed double-precision (64-bit) floating-point element in a.
            </summary>
            <remarks>
            **** VMOVMSKPD r32, ymm2
            Extracts the sign bits from the packed double-precision floating-point
            values in the source operand, formats them into a 4-bit mask, and stores
            the mask in the destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_movemask_ps(Unity.Burst.Intrinsics.v256)">
            <summary>
            Set each bit of mask dst based on the most significant bit of the corresponding packed single-precision (32-bit) floating-point element in a.
            </summary>
            <remarks>
            **** VMOVMSKPS r32, ymm2
            Extracts the sign bits from the packed single-precision floating-point
            values in the source operand, formats them into a 8-bit mask, and stores
            the mask in the destination
            </remarks>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setzero_pd">
            <summary>
            Return Vector with all elements set to zero.
            </summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setzero_ps">
            <summary>
            Return Vector with all elements set to zero.
            </summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setzero_si256">
            <summary>
            Return Vector with all elements set to zero.
            </summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_pd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set packed double-precision (64-bit) floating-point elements in dst with the supplied values.
            </summary>
            <param name="d">Element d</param>
            <param name="c">Element c</param>
            <param name="b">Element b</param>
            <param name="a">Element a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_ps(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set packed single-precision (32-bit) floating-point elements in dst with the supplied values.
            </summary>
            <param name="e7">Element 7</param>
            <param name="e6">Element 6</param>
            <param name="e5">Element 5</param>
            <param name="e4">Element 4</param>
            <param name="e3">Element 3</param>
            <param name="e2">Element 2</param>
            <param name="e1">Element 1</param>
            <param name="e0">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_epi8(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set packed byte elements in dst with the supplied values.
            </summary>
            <param name="e31_">Element 31</param>
            <param name="e30_">Element 30</param>
            <param name="e29_">Element 29</param>
            <param name="e28_">Element 28</param>
            <param name="e27_">Element 27</param>
            <param name="e26_">Element 26</param>
            <param name="e25_">Element 25</param>
            <param name="e24_">Element 24</param>
            <param name="e23_">Element 23</param>
            <param name="e22_">Element 22</param>
            <param name="e21_">Element 21</param>
            <param name="e20_">Element 20</param>
            <param name="e19_">Element 19</param>
            <param name="e18_">Element 18</param>
            <param name="e17_">Element 17</param>
            <param name="e16_">Element 16</param>
            <param name="e15_">Element 15</param>
            <param name="e14_">Element 14</param>
            <param name="e13_">Element 13</param>
            <param name="e12_">Element 12</param>
            <param name="e11_">Element 11</param>
            <param name="e10_">Element 10</param>
            <param name="e9_">Element 9</param>
            <param name="e8_">Element 8</param>
            <param name="e7_">Element 7</param>
            <param name="e6_">Element 6</param>
            <param name="e5_">Element 5</param>
            <param name="e4_">Element 4</param>
            <param name="e3_">Element 3</param>
            <param name="e2_">Element 2</param>
            <param name="e1_">Element 1</param>
            <param name="e0_">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_epi16(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set packed short elements in dst with the supplied values.
            </summary>
            <param name="e15_">Element 15</param>
            <param name="e14_">Element 14</param>
            <param name="e13_">Element 13</param>
            <param name="e12_">Element 12</param>
            <param name="e11_">Element 11</param>
            <param name="e10_">Element 10</param>
            <param name="e9_">Element 9</param>
            <param name="e8_">Element 8</param>
            <param name="e7_">Element 7</param>
            <param name="e6_">Element 6</param>
            <param name="e5_">Element 5</param>
            <param name="e4_">Element 4</param>
            <param name="e3_">Element 3</param>
            <param name="e2_">Element 2</param>
            <param name="e1_">Element 1</param>
            <param name="e0_">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_epi32(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set packed int elements in dst with the supplied values.
            </summary>
            <param name="e7">Element 7</param>
            <param name="e6">Element 6</param>
            <param name="e5">Element 5</param>
            <param name="e4">Element 4</param>
            <param name="e3">Element 3</param>
            <param name="e2">Element 2</param>
            <param name="e1">Element 1</param>
            <param name="e0">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_epi64x(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Set packed 64-bit integers in dst with the supplied values.
            </summary>
            <param name="e3">Element 3</param>
            <param name="e2">Element 2</param>
            <param name="e1">Element 1</param>
            <param name="e0">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_m128d(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Set packed v256 vector with the supplied values.
            </summary>
            <param name="hi">High half of the vector</param>
            <param name="lo">Low half of the vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set_m128i(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Set packed v256 vector with the supplied values.
            </summary>
            <param name="hi">High half of the vector</param>
            <param name="lo">Low half of the vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_pd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set packed double-precision (64-bit) floating-point elements in dst with the supplied values in reverse order.
            </summary>
            <param name="d">Element d</param>
            <param name="c">Element c</param>
            <param name="b">Element b</param>
            <param name="a">Element a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_ps(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set packed single-precision (32-bit) floating-point elements in dst with the supplied values in reverse order.
            </summary>
            <param name="e7">Element 7</param>
            <param name="e6">Element 6</param>
            <param name="e5">Element 5</param>
            <param name="e4">Element 4</param>
            <param name="e3">Element 3</param>
            <param name="e2">Element 2</param>
            <param name="e1">Element 1</param>
            <param name="e0">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_epi8(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set packed byte elements in dst with the supplied values in reverse order.
            </summary>
            <param name="e31_">Element 31</param>
            <param name="e30_">Element 30</param>
            <param name="e29_">Element 29</param>
            <param name="e28_">Element 28</param>
            <param name="e27_">Element 27</param>
            <param name="e26_">Element 26</param>
            <param name="e25_">Element 25</param>
            <param name="e24_">Element 24</param>
            <param name="e23_">Element 23</param>
            <param name="e22_">Element 22</param>
            <param name="e21_">Element 21</param>
            <param name="e20_">Element 20</param>
            <param name="e19_">Element 19</param>
            <param name="e18_">Element 18</param>
            <param name="e17_">Element 17</param>
            <param name="e16_">Element 16</param>
            <param name="e15_">Element 15</param>
            <param name="e14_">Element 14</param>
            <param name="e13_">Element 13</param>
            <param name="e12_">Element 12</param>
            <param name="e11_">Element 11</param>
            <param name="e10_">Element 10</param>
            <param name="e9_">Element 9</param>
            <param name="e8_">Element 8</param>
            <param name="e7_">Element 7</param>
            <param name="e6_">Element 6</param>
            <param name="e5_">Element 5</param>
            <param name="e4_">Element 4</param>
            <param name="e3_">Element 3</param>
            <param name="e2_">Element 2</param>
            <param name="e1_">Element 1</param>
            <param name="e0_">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_epi16(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set packed short elements in dst with the supplied values in reverse order.
            </summary>
            <param name="e15_">Element 15</param>
            <param name="e14_">Element 14</param>
            <param name="e13_">Element 13</param>
            <param name="e12_">Element 12</param>
            <param name="e11_">Element 11</param>
            <param name="e10_">Element 10</param>
            <param name="e9_">Element 9</param>
            <param name="e8_">Element 8</param>
            <param name="e7_">Element 7</param>
            <param name="e6_">Element 6</param>
            <param name="e5_">Element 5</param>
            <param name="e4_">Element 4</param>
            <param name="e3_">Element 3</param>
            <param name="e2_">Element 2</param>
            <param name="e1_">Element 1</param>
            <param name="e0_">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_epi32(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set packed int elements in dst with the supplied values in reverse order.
            </summary>
            <param name="e7">Element 7</param>
            <param name="e6">Element 6</param>
            <param name="e5">Element 5</param>
            <param name="e4">Element 4</param>
            <param name="e3">Element 3</param>
            <param name="e2">Element 2</param>
            <param name="e1">Element 1</param>
            <param name="e0">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_epi64x(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Set packed 64-bit integers in dst with the supplied values in reverse order.
            </summary>
            <param name="e3">Element 3</param>
            <param name="e2">Element 2</param>
            <param name="e1">Element 1</param>
            <param name="e0">Element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_m128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Set packed v256 vector with the supplied values in reverse order.
            </summary>
            <param name="hi">High half of the vector</param>
            <param name="lo">Low half of the vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_m128d(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Set packed v256 vector with the supplied values in reverse order.
            </summary>
            <param name="hi">High half of the vector</param>
            <param name="lo">Low half of the vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_setr_m128i(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Set packed v256 vector with the supplied values in reverse order.
            </summary>
            <param name="hi">High half of the vector</param>
            <param name="lo">Low half of the vector</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set1_pd(System.Double)">
            <summary>
            Broadcast double-precision (64-bit) floating-point value a to all elements of dst.
            </summary>
            <param name="a">Value</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set1_ps(System.Single)">
            <summary>
            Broadcast single-precision (32-bit) floating-point value a to all elements of dst.
            </summary>
            <param name="a">Value</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set1_epi8(System.Byte)">
            <summary>
            Broadcast 8-bit integer a to all elements of dst. This intrinsic may generate the vpbroadcastb instruction.
            </summary>
            <param name="a">8-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set1_epi16(System.Int16)">
            <summary>
            Broadcast 16-bit integer a to all all elements of dst. This intrinsic may generate the vpbroadcastw instruction.
            </summary>
            <param name="a">16-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set1_epi32(System.Int32)">
            <summary>
            Broadcast 32-bit integer a to all elements of dst. This intrinsic may generate the vpbroadcastd instruction.
            </summary>
            <param name="a">32-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_set1_epi64x(System.Int64)">
            <summary>
            Broadcast 64-bit integer a to all elements of dst. This intrinsic may generate the vpbroadcastq instruction.
            </summary>
            <param name="a">64-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castpd_ps(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castps_pd(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castps_si256(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castpd_si256(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castsi256_ps(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castsi256_pd(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castps256_ps128(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castpd256_pd128(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castsi256_si128(Unity.Burst.Intrinsics.v256)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castps128_ps256(Unity.Burst.Intrinsics.v128)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castpd128_pd256(Unity.Burst.Intrinsics.v128)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_castsi128_si256(Unity.Burst.Intrinsics.v128)">
            <summary>For compatibility with C++ code only. This is a no-op in Burst.</summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.undefined_ps">
            <summary>Return a 128-bit vector with undefined contents.</summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.undefined_pd">
            <summary>Return a 128-bit vector with undefined contents.</summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.undefined_si128">
            <summary>Return a 128-bit vector with undefined contents.</summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_undefined_ps">
            <summary>Return a 256-bit vector with undefined contents.</summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_undefined_pd">
            <summary>Return a 256-bit vector with undefined contents.</summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_undefined_si256">
            <summary>Return a 256-bit vector with undefined contents.</summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_zextps128_ps256(Unity.Burst.Intrinsics.v128)">
            <summary>
            Casts vector of type v128 to type v256; the upper 128 bits of the result
            are zeroed. This intrinsic is only used for compilation and does not
            generate any instructions, thus it has zero latency.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_zextpd128_pd256(Unity.Burst.Intrinsics.v128)">
            <summary>
            Casts vector of type v128 to type v256; the upper 128 bits of the result
            are zeroed. This intrinsic is only used for compilation and does not
            generate any instructions, thus it has zero latency.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_zextsi128_si256(Unity.Burst.Intrinsics.v128)">
            <summary>
            Casts vector of type v128 to type v256; the upper 128 bits of the result
            are zeroed. This intrinsic is only used for compilation and does not
            generate any instructions, thus it has zero latency.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insert_epi8(Unity.Burst.Intrinsics.v256,System.Int32,System.Int32)">
            <summary>
            Copy a to dst, and insert the 8-bit integer i into dst at the location specified by index (which must be a constant).
            </summary>
            <param name="a">Vector a</param>
            <param name="i">8-bit integer i</param>
            <param name="index">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insert_epi16(Unity.Burst.Intrinsics.v256,System.Int32,System.Int32)">
            <summary>
            Copy a to dst, and insert the 16-bit integer i into dst at the location specified by index (which must be a constant).
            </summary>
            <param name="a">Vector a</param>
            <param name="i">16-bit integer i</param>
            <param name="index">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insert_epi32(Unity.Burst.Intrinsics.v256,System.Int32,System.Int32)">
            <summary>
            Copy a to dst, and insert the 32-bit integer i into dst at the location specified by index (which must be a constant).
            </summary>
            <param name="a">Vector a</param>
            <param name="i">32-bit integer i</param>
            <param name="index">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_insert_epi64(Unity.Burst.Intrinsics.v256,System.Int64,System.Int32)">
            <summary>
            Copy a to dst, and insert the 64-bit integer i into dst at the location specified by index (which must be a constant).
            </summary>
            <remarks>
            This intrinsic requires a 64-bit processor.
            </remarks>
            <param name="a">Vector a</param>
            <param name="i">64-bit integer i</param>
            <param name="index">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_extract_epi32(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract a 32-bit integer from a, selected with index (which must be a constant), and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="index">Index</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx.mm256_extract_epi64(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract a 64-bit integer from a, selected with index (which must be a constant), and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="index">Index</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Sse">
            <summary>
            SSE intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Sse.IsSseSupported">
            <summary>
            Evaluates to true at compile time if SSE intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.load_ps(System.Void*)">
            <summary>
            Load 128-bits (composed of 4 packed single-precision (32-bit)
            floating-point elements) from memory into dst.
            </summary>
            <remarks>
            Burst will always generate unaligned loads.
            </remarks>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.loadu_ps(System.Void*)">
            <summary>
            Load 128-bits (composed of 4 packed single-precision (32-bit)
            floating-point elements) from memory into dst. mem_addr does
            not need to be aligned on any particular boundary.
            </summary>
            <param name="ptr">Pointer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.store_ps(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits (composed of 4 packed single-precision (32-bit)
            floating-point elements) from a into memory.
            </summary>
            <remarks>
            Burst will always generate unaligned stores.
            </remarks>
            <param name="ptr">Pointer</param>
            <param name="val">Value vector</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.storeu_ps(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits (composed of 4 packed single-precision (32-bit)
            floating-point elements) from a into memory. mem_addr does not
            need to be aligned on any particular boundary.
            </summary>
            <param name="ptr">Pointer</param>
            <param name="val">Value vector</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.stream_ps(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 128-bits (composed of 4 packed single-precision (32-bit) floating-point elements) from "a" into memory using a non-temporal memory hint. "mem_addr" must be aligned on a 16-byte boundary or a general-protection exception will be generated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvtsi32_ss(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Convert the 32-bit integer "b" to a single-precision (32-bit) floating-point element, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">32-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvtsi64_ss(Unity.Burst.Intrinsics.v128,System.Int64)">
            <summary> Convert the 64-bit integer "b" to a single-precision (32-bit) floating-point element, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">64-bit integer</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.add_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add the lower single-precision (32-bit) floating-point element in "a" and "b", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.add_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Add packed single-precision (32-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.sub_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract the lower single-precision (32-bit) floating-point element in "b" from the lower single-precision (32-bit) floating-point element in "a", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.sub_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Subtract packed single-precision (32-bit) floating-point elements in "b" from packed single-precision (32-bit) floating-point elements in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.mul_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the lower single-precision (32-bit) floating-point element in "a" and "b", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.mul_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply packed single-precision (32-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.div_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Divide the lower single-precision (32-bit) floating-point element in "a" by the lower single-precision (32-bit) floating-point element in "b", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.div_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Divide packed single-precision (32-bit) floating-point elements in "a" by packed elements in "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.sqrt_ss(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the square root of the lower single-precision (32-bit) floating-point element in "a", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.sqrt_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the square root of packed single-precision (32-bit) floating-point elements in "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.rcp_ss(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the approximate reciprocal of the lower single-precision (32-bit) floating-point element in "a", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". The maximum relative error for this approximation is less than 1.5*2^-12. </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.rcp_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in "a", and store the results in "dst". The maximum relative error for this approximation is less than 1.5*2^-12. </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.rsqrt_ss(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the approximate reciprocal square root of the lower single-precision (32-bit) floating-point element in "a", store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". The maximum relative error for this approximation is less than 1.5*2^-12. </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.rsqrt_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in "a", and store the results in "dst". The maximum relative error for this approximation is less than 1.5*2^-12. </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.min_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b", store the minimum value in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.min_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.max_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b", store the maximum value in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.max_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.and_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise AND of packed single-precision (32-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.andnot_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise NOT of packed single-precision (32-bit) floating-point elements in "a" and then AND with "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.or_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise OR of packed single-precision (32-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.xor_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise XOR of packed single-precision (32-bit) floating-point elements in "a" and "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpeq_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for equality, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpeq_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for equality, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmplt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for less-than, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmplt_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for less-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmple_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for less-than-or-equal, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmple_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for less-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpgt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for greater-than, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpgt_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpge_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for greater-than-or-equal, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpge_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for greater-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpneq_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for not-equal, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpneq_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for not-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpnlt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for not-less-than, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpnlt_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for not-less-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpnle_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for not-less-than-or-equal, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpnle_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for not-less-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpngt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for not-greater-than, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpngt_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for not-greater-than, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpnge_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" for not-greater-than-or-equal, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpnge_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" for not-greater-than-or-equal, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpord_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" to see if neither is NaN, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpord_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" to see if neither is NaN, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpunord_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point elements in "a" and "b" to see if either is NaN, store the result in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cmpunord_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed single-precision (32-bit) floating-point elements in "a" and "b" to see if either is NaN, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.comieq_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for equality, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.comilt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for less-than, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.comile_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for less-than-or-equal, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.comigt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for greater-than, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.comige_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for greater-than-or-equal, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.comineq_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for not-equal, and return the boolean result (0 or 1). </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.ucomieq_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for equality, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.ucomilt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for less-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.ucomile_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for less-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.ucomigt_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for greater-than, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.ucomige_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for greater-than-or-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.ucomineq_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare the lower single-precision (32-bit) floating-point element in "a" and "b" for not-equal, and return the boolean result (0 or 1). This instruction will not signal an exception for QNaNs. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvtss_si32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "a" to a 32-bit integer, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvt_ss2si(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "a" to a 32-bit integer, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvtss_si64(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "a" to a 64-bit integer, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvtss_f32(Unity.Burst.Intrinsics.v128)">
            <summary> Copy the lower single-precision (32-bit) floating-point element of "a" to "dst". </summary>
            <param name="a">Vector a</param>
            <returns>32-bit floating point element</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvttss_si32(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "a" to a 32-bit integer with truncation, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvtt_ss2si(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "a" to a 32-bit integer with truncation, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>32-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.cvttss_si64(Unity.Burst.Intrinsics.v128)">
            <summary> Convert the lower single-precision (32-bit) floating-point element in "a" to a 64-bit integer with truncation, and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.set_ss(System.Single)">
            <summary> Copy single-precision (32-bit) floating-point element "a" to the lower element of "dst", and zero the upper 3 elements. </summary>
            <param name="a">Floating point element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.set1_ps(System.Single)">
            <summary> Broadcast single-precision (32-bit) floating-point value "a" to all elements of "dst". </summary>
            <param name="a">Floating point element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.set_ps1(System.Single)">
            <summary> Broadcast single-precision (32-bit) floating-point value "a" to all elements of "dst". </summary>
            <param name="a">Floating point element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.set_ps(System.Single,System.Single,System.Single,System.Single)">
            <summary> Set packed single-precision (32-bit) floating-point elements in "dst" with the supplied values. </summary>
            <param name="e3">Floating point element 3</param>
            <param name="e2">Floating point element 2</param>
            <param name="e1">Floating point element 1</param>
            <param name="e0">Floating point element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.setr_ps(System.Single,System.Single,System.Single,System.Single)">
            <summary> Set packed single-precision (32-bit) floating-point elements in "dst" with the supplied values in reverse order. </summary>
            <param name="e3">Floating point element 3</param>
            <param name="e2">Floating point element 2</param>
            <param name="e1">Floating point element 1</param>
            <param name="e0">Floating point element 0</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.move_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Move the lower single-precision (32-bit) floating-point element from "b" to the lower element of "dst", and copy the upper 3 elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.SHUFFLE(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return a shuffle immediate suitable for use with shuffle_ps and similar instructions.
            </summary>
            <param name="d">Integer d</param>
            <param name="c">Integer c</param>
            <param name="b">Integer b</param>
            <param name="a">Integer a</param>
            <returns>Shuffle suitable for use with shuffle_ps</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.shuffle_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Shuffle single-precision (32-bit) floating-point elements in "a" using the control in "imm8", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.unpackhi_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave single-precision (32-bit) floating-point elements from the high half "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.unpacklo_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Unpack and interleave single-precision (32-bit) floating-point elements from the low half of "a" and "b", and store the results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.movehl_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Move the upper 2 single-precision (32-bit) floating-point elements from "b" to the lower 2 elements of "dst", and copy the upper 2 elements from "a" to the upper 2 elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.movelh_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Move the lower 2 single-precision (32-bit) floating-point elements from "b" to the upper 2 elements of "dst", and copy the lower 2 elements from "a" to the lower 2 elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.movemask_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Set each bit of mask "dst" based on the most significant bit of the corresponding packed single-precision (32-bit) floating-point element in "a". </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.TRANSPOSE4_PS(Unity.Burst.Intrinsics.v128@,Unity.Burst.Intrinsics.v128@,Unity.Burst.Intrinsics.v128@,Unity.Burst.Intrinsics.v128@)">
            <summary>
            Transposes a 4x4 matrix of single precision floating point values (_MM_TRANSPOSE4_PS).
            </summary>
            <remarks>
            Arguments row0, row1, row2, and row3 are __m128    
            values whose elements form the corresponding rows
            of a 4x4 matrix.  The matrix transpose is returned
            in arguments row0, row1, row2, and row3 where row0 
            now holds column 0 of the original matrix, row1 now 
            holds column 1 of the original matrix, etc.          
            </remarks>
            <param name="row0">__m128 value on corresponding row</param>
            <param name="row1">__m128 value on corresponding row</param>
            <param name="row2">__m128 value on corresponding row</param>
            <param name="row3">__m128 value on corresponding row</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.setzero_ps">
            <summary>
            Return vector of type v128 with all elements set to zero.
            </summary>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.loadu_si16(System.Void*)">
            <summary>
            Load unaligned 16-bit integer from memory into the first element of dst.
            </summary>
            <param name="mem_addr">Memory address</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.storeu_si16(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 16-bit integer from the first element of a into memory.
            mem_addr does not need to be aligned on any particular
            boundary.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.loadu_si64(System.Void*)">
            <summary>
            Load unaligned 64-bit integer from memory into the first element of dst.
            </summary>
            <param name="mem_addr">Memory address</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse.storeu_si64(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store 64-bit integer from the first element of a into memory.
            mem_addr does not need to be aligned on any particular
            boundary.
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="a">Vector a</param>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Avx2">
            <summary>
            AVX2 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Avx2.IsAvx2Supported">
            <summary>
            Evaluates to true at compile time if AVX2 intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_movemask_epi8(Unity.Burst.Intrinsics.v256)">
            <summary>
            Create mask from the most significant bit of each 8-bit element in a, and store the result in dst. 
            </summary>
            <remarks>
            **** vpmovmskb r32, ymm
            </remarks>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_extract_epi8(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract an 8-bit integer from a, selected with index (which must be constant), and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="index">Index in the vector</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_extract_epi16(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract a 16-bit integer from a, selected with index (which must be constant), and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="index">Index in the vector</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtsd_f64(Unity.Burst.Intrinsics.v256)">
            <summary>
            Copy the lower double-precision (64-bit) floating-point element of a to dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtsi256_si32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Copy the lower 32-bit integer in a to dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtsi256_si64(Unity.Burst.Intrinsics.v256)">
            <summary>
            Copy the lower 64-bit integer in a to dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpeq_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 8-bit integers in a and b for equality, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpeq_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 16-bit integers in a and b for equality, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpeq_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 32-bit integers in a and b for equality, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpeq_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 64-bit integers in a and b for equality, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpgt_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 8-bit integers in a and b for greater-than, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpgt_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 16-bit integers in a and b for greater-than, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpgt_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 32-bit integers in a and b for greater-than, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cmpgt_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 64-bit integers in a and b for equality, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_max_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 8-bit integers in a and b, and store packed maximum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_max_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 16-bit integers in a and b, and store packed maximum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_max_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 32-bit integers in a and b, and store packed maximum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_max_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed unsigned 8-bit integers in a and b, and store packed maximum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_max_epu16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed unsigned 16-bit integers in a and b, and store packed maximum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_max_epu32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed unsigned 32-bit integers in a and b, and store packed maximum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_min_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 8-bit integers in a and b, and store packed minimum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_min_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 16-bit integers in a and b, and store packed minimum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_min_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed 32-bit integers in a and b, and store packed minimum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_min_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed unsigned 8-bit integers in a and b, and store packed minimum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_min_epu16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed unsigned 16-bit integers in a and b, and store packed minimum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_min_epu32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compare packed unsigned 32-bit integers in a and b, and store packed minimum values in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_and_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise AND of 256 bits (representing integer data) in a and b, and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_andnot_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise NOT of 256 bits (representing integer data) in a and then AND with b, and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_or_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise OR of 256 bits (representing integer data) in a and b, and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_xor_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the bitwise XOR of 256 bits (representing integer data) in a and b, and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_abs_epi8(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the absolute value of packed 8-bit integers in a, and store the unsigned results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_abs_epi16(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the absolute value of packed 16-bit integers in a, and store the unsigned results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_abs_epi32(Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the absolute value of packed 32-bit integers in a, and store the unsigned results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_add_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed 8-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_add_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed 16-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_add_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed 32-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_add_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed 64-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_adds_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed 8-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_adds_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed 16-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_adds_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed unsigned 8-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_adds_epu16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Add packed unsigned 16-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sub_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed 8-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sub_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed 16-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sub_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed 32-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sub_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed 64-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_subs_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed 8-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_subs_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed 16-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_subs_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed unsigned 8-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_subs_epu16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Subtract packed unsigned 16-bit integers in a and b using saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_avg_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Average packed unsigned 8-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_avg_epu16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Average packed unsigned 16-bit integers in a and b, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_hadd_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally add adjacent pairs of 16-bit integers in a and b, and pack the signed 16-bit results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_hadd_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally add adjacent pairs of 32-bit integers in a and b, and pack the signed 16-bit results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_hadds_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally add adjacent pairs of 16-bit integers in a and b using saturation, and pack the signed 16-bit results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_hsub_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally subtract adjacent pairs of 16-bit integers in a and b, and pack the signed 16-bit results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_hsub_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally subtract adjacent pairs of 32-bit integers in a and b, and pack the signed 16-bit results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_hsubs_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Horizontally subtract adjacent pairs of 16-bit integers in a and b using saturation, and pack the signed 16-bit results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_madd_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed signed 16-bit integers in a and b, producing
            intermediate signed 32-bit integers. Horizontally add adjacent
            pairs of intermediate 32-bit integers, and pack the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_maddubs_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Vertically multiply each unsigned 8-bit integer from a with the
            corresponding signed 8-bit integer from b, producing
            intermediate signed 16-bit integers. Horizontally add adjacent
            pairs of intermediate signed 16-bit integers, and pack the
            saturated results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mulhi_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply the packed 16-bit integers in a and b, producing intermediate 32-bit integers, and store the high 16 bits of the intermediate integers in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mulhi_epu16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply the packed unsigned 16-bit integers in a and b,
            producing intermediate 32-bit integers, and store the high 16
            bits of the intermediate integers in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mullo_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply the packed 16-bit integers in a and b, producing
            intermediate 32-bit integers, and store the low 16 bits of the
            intermediate integers in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mullo_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply the packed 32-bit integers in a and b, producing
            intermediate 64-bit integers, and store the low 32 bits of the
            intermediate integers in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mul_epu32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply the low unsigned 32-bit integers from each packed 64-bit element in a and b, and store the unsigned 64-bit results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mul_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply the low 32-bit integers from each packed 64-bit element in a and b, and store the signed 64-bit results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sign_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Negate packed 8-bit integers in a when the corresponding signed
            8-bit integer in b is negative, and store the results in dst.
            Element in dst are zeroed out when the corresponding element in
            b is zero.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sign_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Negate packed 16-bit integers in a when the corresponding signed
            16-bit integer in b is negative, and store the results in dst.
            Element in dst are zeroed out when the corresponding element in
            b is zero.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sign_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Negate packed 32-bit integers in a when the corresponding signed
            32-bit integer in b is negative, and store the results in dst.
            Element in dst are zeroed out when the corresponding element in
            b is zero.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mulhrs_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Multiply packed 16-bit integers in a and b, producing
            intermediate signed 32-bit integers. Truncate each intermediate
            integer to the 18 most significant bits, round by adding 1, and
            store bits [16:1] to dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sad_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Compute the absolute differences of packed unsigned 8-bit
            integers in a and b, then horizontally sum each consecutive 8
            differences to produce four unsigned 16-bit integers, and pack
            these unsigned 16-bit integers in the low 16 bits of 64-bit
            elements in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mpsadbw_epu8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Compute the sum of absolute differences (SADs) of quadruplets of
            unsigned 8-bit integers in a compared to those in b, and store
            the 16-bit results in dst. Eight SADs are performed for each
            128-bit lane using one quadruplet from b and eight quadruplets
            from a. One quadruplet is selected from b starting at on the
            offset specified in imm8. Eight quadruplets are formed from
            sequential 8-bit integers selected from a starting at the offset
            specified in imm8.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_slli_si256(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift 128-bit lanes in a left by imm8 bytes while shifting in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_bslli_epi128(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift 128-bit lanes in a left by imm8 bytes while shifting in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srli_si256(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift 128-bit lanes in a right by imm8 bytes while shifting in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_bsrli_epi128(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift 128-bit lanes in a right by imm8 bytes while shifting in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sll_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 16-bit integers in a left by count while shifting
            in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Shift amount</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sll_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 32-bit integers in a left by count while shifting
            in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sll_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 64-bit integers in a left by count while shifting
            in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_slli_epi16(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 16-bit integers in a left by imm8 while shifting in zeros, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_slli_epi32(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 32-bit integers in a left by imm8 while shifting in zeros, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_slli_epi64(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 64-bit integers in a left by imm8 while shifting in zeros, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sllv_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shift packed 32-bit integers in a left by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sllv_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shift packed 64-bit integers in a left by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.sllv_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 32-bit integers in a left by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.sllv_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 64-bit integers in a left by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sra_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 16-bit integers in a right by count while shifting in sign bits, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_sra_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 32-bit integers in a right by count while shifting in sign bits, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srai_epi16(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 16-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srai_epi32(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 32-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srav_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shift packed 32-bit integers in a right by the amount specified
            by the corresponding element in count while shifting in sign
            bits, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.srav_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 32-bit integers in a right by the amount specified
            by the corresponding element in count while shifting in sign
            bits, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srl_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 16-bit integers in a right by count while shifting
            in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srl_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 32-bit integers in a right by count while shifting
            in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srl_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 64-bit integers in a right by count while shifting
            in zeros, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srli_epi16(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 16-bit integers in a right by imm8 while shifting in zeros, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srli_epi32(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 32-bit integers in a right by imm8 while shifting in zeros, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srli_epi64(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shift packed 64-bit integers in a right by imm8 while shifting in zeros, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srlv_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shift packed 32-bit integers in a right by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_srlv_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shift packed 64-bit integers in a right by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.srlv_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 32-bit integers in a right by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.srlv_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Shift packed 64-bit integers in a right by the amount specified
            by the corresponding element in count while shifting in zeros,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="count">Corresponding element</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.blend_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Blend packed 32-bit integers from a and b using control mask imm8, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_blend_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Blend packed 32-bit integers from a and b using control mask imm8, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_alignr_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Concatenate pairs of 16-byte blocks in a and b into a 32-byte temporary result, shift the result right by imm8 bytes, and store the low 16 bytes in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_blendv_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Blend packed 8-bit integers from a and b using mask, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_blend_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Blend packed 16-bit integers from a and b within 128-bit lanes using control mask imm8, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_packs_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed 16-bit integers from a and b to packed 8-bit integers using signed saturation, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_packs_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed 32-bit integers from a and b to packed 16-bit integers using signed saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_packus_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed 16-bit integers from a and b to packed 8-bit integers using unsigned saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_packus_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Convert packed 32-bit integers from a and b to packed 16-bit integers using unsigned saturation, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpackhi_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 8-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpackhi_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 16-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpackhi_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 32-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpackhi_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 64-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpacklo_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 8-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpacklo_epi16(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 16-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpacklo_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 32-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_unpacklo_epi64(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Unpack and interleave 64-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_shuffle_epi8(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shuffle 8-bit integers in a within 128-bit lanes according to
            shuffle control mask in the corresponding 8-bit element of b,
            and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_shuffle_epi32(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 32-bit integers in a within 128-bit lanes using the control in imm8, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_shufflehi_epi16(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 16-bit integers in the high 64 bits of 128-bit lanes of
            a using the control in imm8. Store the results in the high 64
            bits of 128-bit lanes of dst, with the low 64 bits of 128-bit
            lanes being copied from from a to dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_shufflelo_epi16(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 16-bit integers in the low 64 bits of 128-bit lanes of
            a using the control in imm8. Store the results in the low 64
            bits of 128-bit lanes of dst, with the high 64 bits of 128-bit
            lanes being copied from from a to dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_extracti128_si256(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Extract 128 bits (composed of integer data) from a, selected with imm8, and store the result in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Selection</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_inserti128_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Copy a to dst, then insert 128 bits (composed of integer data) from b into dst at the location specified by imm8.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.broadcastss_ps(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low single-precision (32-bit) floating-point element from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastss_ps(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low single-precision (32-bit) floating-point element from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.broadcastsd_pd(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low double-precision (64-bit) floating-point element from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastsd_pd(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low double-precision (64-bit) floating-point element from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.broadcastb_epi8(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 8-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.broadcastw_epi16(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 16-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.broadcastd_epi32(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 32-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.broadcastq_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 64-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastb_epi8(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 8-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastw_epi16(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 16-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastd_epi32(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 32-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastq_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast the low packed 64-bit integer from a to all elements of dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_broadcastsi128_si256(Unity.Burst.Intrinsics.v128)">
            <summary>
            Broadcast 128 bits of integer data from a to all 128-bit lanes in dst
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepi8_epi16(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed 8-bit integers in a to packed 16-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepi8_epi32(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed 8-bit integers in a to packed 32-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepi8_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed 8-bit integers in a to packed 64-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepi16_epi32(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed 16-bit integers in a to packed 32-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepi16_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed 16-bit integers in a to packed 64-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepi32_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed 32-bit integers in a to packed 64-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepu8_epi16(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed unsigned 8-bit integers in a to packed 16-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepu8_epi32(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed unsigned 8-bit integers in a to packed 32-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepu8_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed unsigned 8-bit integers in a to packed 64-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepu16_epi32(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed unsigned 16-bit integers in a to packed 32-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepu16_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed unsigned 16-bit integers in a to packed 64-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_cvtepu32_epi64(Unity.Burst.Intrinsics.v128)">
            <summary>
            Sign extend packed unsigned 32-bit integers in a to packed 64-bit integers, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.maskload_epi32(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Load packed 32-bit integers from memory into dst using mask
            (elements are zeroed out when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.maskload_epi64(System.Void*,Unity.Burst.Intrinsics.v128)">
            <summary>
            Load packed 64-bit integers from memory into dst using mask
            (elements are zeroed out when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.maskstore_epi32(System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store packed 32-bit integers from a into memory using mask
            (elements are not stored when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.maskstore_epi64(System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Store packed 64-bit integers from a into memory using mask
            (elements are not stored when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_maskload_epi32(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Load packed 32-bit integers from memory into dst using mask
            (elements are zeroed out when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_maskload_epi64(System.Void*,Unity.Burst.Intrinsics.v256)">
            <summary>
            Load packed 64-bit integers from memory into dst using mask
            (elements are zeroed out when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_maskstore_epi32(System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store packed 32-bit integers from a into memory using mask
            (elements are not stored when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_maskstore_epi64(System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Store packed 64-bit integers from a into memory using mask
            (elements are not stored when the highest bit is not set in the
            corresponding element).
            </summary>
            <param name="mem_addr">Memory address</param>
            <param name="mask">Mask</param>
            <param name="a">Vector a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_permutevar8x32_epi32(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shuffle 32-bit integers in a across lanes using the corresponding index in idx, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="idx">idx</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_permutevar8x32_ps(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256)">
            <summary>
            Shuffle single-precision (32-bit) floating-point elements in a across lanes using the corresponding index in idx.
            </summary>
            <param name="a">Vector a</param>
            <param name="idx">idx</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_permute4x64_epi64(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 64-bit integers in a across lanes using the control in imm8, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_permute4x64_pd(Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle double-precision (64-bit) floating-point elements in a across lanes using the control in imm8, and store the results in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_permute2x128_si256(Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Shuffle 128-bits (composed of integer data) selected by imm8 from a and b, and store the results in dst. 
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Selection</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_stream_load_si256(System.Void*)">
            <summary>
            Load 256-bits of integer data from memory into dst using a
            non-temporal memory hint. mem_addr must be aligned on a 32-byte
            boundary or a general-protection exception may be generated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i32gather_epi32(System.Void*,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 32-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i32gather_pd(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 32-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i32gather_ps(System.Void*,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 32-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i64gather_pd(System.Void*,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 64-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i64gather_ps(System.Void*,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 64-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i32gather_pd(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 32-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i32gather_ps(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 32-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i64gather_pd(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 64-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i64gather_ps(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 64-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst. scale should be
            1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i32gather_epi64(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 32-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i64gather_epi32(System.Void*,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 64-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_i64gather_epi64(System.Void*,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 64-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i32gather_epi32(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 32-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i32gather_epi64(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 32-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i64gather_epi32(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 64-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.i64gather_epi64(System.Void*,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 64-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst.
            scale should be 1, 2, 4 or 8.
            </summary>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i32gather_pd(Unity.Burst.Intrinsics.v256,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 32-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i32gather_ps(Unity.Burst.Intrinsics.v256,System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 32-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i64gather_pd(Unity.Burst.Intrinsics.v256,System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 64-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i64gather_ps(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 64-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i32gather_epi32(Unity.Burst.Intrinsics.v256,System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 32-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i32gather_epi64(Unity.Burst.Intrinsics.v256,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 32-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i64gather_epi64(Unity.Burst.Intrinsics.v256,System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v256,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 64-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mm256_mask_i64gather_epi32(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v256,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 64-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i32gather_pd(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 32-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i32gather_ps(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 32-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 32-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i64gather_pd(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather double-precision (64-bit) floating-point elements from
            memory using 64-bit indices. 64-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i64gather_ps(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather single-precision (32-bit) floating-point elements from
            memory using 64-bit indices. 32-bit elements are loaded from
            addresses starting at base_addr and offset by each 64-bit
            element in vindex (each index is scaled by the factor in
            scale). Gathered elements are merged into dst using mask
            (elements are copied from src when the highest bit is not set
            in the corresponding element). scale should be 1, 2, 4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i32gather_epi32(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 32-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i32gather_epi64(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 32-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 32-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i64gather_epi32(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 32-bit integers from memory using 64-bit indices. 32-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Avx2.mask_i64gather_epi64(Unity.Burst.Intrinsics.v128,System.Void*,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Gather 64-bit integers from memory using 64-bit indices. 64-bit
            elements are loaded from addresses starting at base_addr and
            offset by each 64-bit element in vindex (each index is scaled
            by the factor in scale). Gathered elements are merged into dst
            using mask (elements are copied from src when the highest bit
            is not set in the corresponding element). scale should be 1, 2,
            4 or 8.
            </summary>
            <param name="src">Source</param>
            <param name="base_addr">Base address</param>
            <param name="vindex">Offset</param>
            <param name="mask">Mask</param>
            <param name="scale">Index scale</param>
            <returns>Vector</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Popcnt">
            <summary>
            popcnt intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Popcnt.IsPopcntSupported">
             <summary>
             Evaluates to true at compile time if popcnt intrinsics are supported.
            
             Burst ties popcnt support to SSE4.2 support to simplify feature sets to support.
             </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Popcnt.popcnt_u32(System.UInt32)">
            <summary>
            Count the number of bits set to 1 in unsigned 32-bit integer a, and return that count in dst.
            </summary>
            <remarks>
            **** popcnt r32, r32
            </remarks>
            <param name="v">Integer to be counted in</param>
            <returns>Count</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Popcnt.popcnt_u64(System.UInt64)">
            <summary>
            Count the number of bits set to 1 in unsigned 64-bit integer a, and return that count in dst.
            </summary>
            <remarks>
            **** popcnt r64, r64
            </remarks>
            <param name="v">Integer to be counted in</param>
            <returns>Count</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.MXCSRBits">
            <summary>
            The 32-bit MXCSR register contains control and status information for SSE and AVX SIMD floating-point operations.
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.FlushToZero">
             <summary>
             Bit 15 (FTZ) of the MXCSR register enables the flush-to-zero mode, which controls the masked response to a SIMD floating-point underflow condition.
             </summary>
             <remarks>
             When the underflow exception is masked and the flush-to-zero mode is enabled, the processor performs the following operations when it detects a floating-point underflow condition.
             - Returns a zero result with the sign of the true result
             - Sets the precision and underflow exception flags.
            
             If the underflow exception is not masked, the flush-to-zero bit is ignored.
            
             The flush-to-zero mode is not compatible with IEEE Standard 754. The IEEE-mandated masked response to under-flow is to deliver the denormalized result.
             The flush-to-zero mode is provided primarily for performance reasons. At the cost of a slight precision loss, faster execution can be achieved for applications where underflows
             are common and rounding the underflow result to zero can be tolerated. The flush-to-zero bit is cleared upon a power-up or reset of the processor, disabling the flush-to-zero mode.
             </remarks>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.RoundingControlMask">
             <summary>
             Mask for rounding control bits.
             </summary>
            
             The rounding modes have no effect on comparison operations, operations that produce exact results, or operations that produce NaN results.
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.RoundToNearest">
            <summary>
            Rounded result is the closest to the infinitely precise result. If two values are equally close, the result is the even value (that is, the one with the least-significant bit of zero). Default.
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.RoundDown">
            <summary>
            Rounded result is closest to but no greater than the infinitely precise result.
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.RoundUp">
            <summary>
            Rounded result is closest to but no less than the infinitely precise result.
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.RoundTowardZero">
            <summary>
            Rounded result is closest to but no greater in absolute value than the infinitely precise result.
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.PrecisionMask">
            <summary>Bits 7 through 12 provide individual mask bits for the SIMD floating-point exceptions. An exception type is masked if the corresponding mask bit is set, and it is unmasked if the bit is clear. These mask bits are set upon a power-up or reset. This causes all SIMD floating-point exceptions to be initially masked.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.UnderflowMask">
            <summary>Bits 7 through 12 provide individual mask bits for the SIMD floating-point exceptions. An exception type is masked if the corresponding mask bit is set, and it is unmasked if the bit is clear. These mask bits are set upon a power-up or reset. This causes all SIMD floating-point exceptions to be initially masked.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.OverflowMask">
            <summary>Bits 7 through 12 provide individual mask bits for the SIMD floating-point exceptions. An exception type is masked if the corresponding mask bit is set, and it is unmasked if the bit is clear. These mask bits are set upon a power-up or reset. This causes all SIMD floating-point exceptions to be initially masked.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.DivideByZeroMask">
            <summary>Bits 7 through 12 provide individual mask bits for the SIMD floating-point exceptions. An exception type is masked if the corresponding mask bit is set, and it is unmasked if the bit is clear. These mask bits are set upon a power-up or reset. This causes all SIMD floating-point exceptions to be initially masked.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.DenormalOperationMask">
            <summary>Bits 7 through 12 provide individual mask bits for the SIMD floating-point exceptions. An exception type is masked if the corresponding mask bit is set, and it is unmasked if the bit is clear. These mask bits are set upon a power-up or reset. This causes all SIMD floating-point exceptions to be initially masked.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.InvalidOperationMask">
            <summary>Bits 7 through 12 provide individual mask bits for the SIMD floating-point exceptions. An exception type is masked if the corresponding mask bit is set, and it is unmasked if the bit is clear. These mask bits are set upon a power-up or reset. This causes all SIMD floating-point exceptions to be initially masked.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.ExceptionMask">
            <summary>
            Combine all bits for exception masking into one mask for convenience.
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.DenormalsAreZeroes">
             <summary>
             Bit 6 (DAZ) of the MXCSR register enables the denormals-are-zeros mode, which controls the processor’s response to a SIMD floating-point denormal operand condition.
             </summary>
            
             When the denormals-are-zeros flag is set, the processor converts all denormal source operands to a zero with the sign of the original operand before performing any computations on them.
             The processor does not set the denormal-operand exception flag (DE), regardless of the setting of the denormal-operand exception mask bit (DM); and it does not generate a denormal-operand
             exception if the exception is unmasked.The denormals-are-zeros mode is not compatible with IEEE Standard 754.
            
             The denormals-are-zeros mode is provided to improve processor performance for applications such as streaming media processing, where rounding a denormal operand to zero does not
             appreciably affect the quality of the processed data. The denormals-are-zeros flag is cleared upon a power-up or reset of the processor, disabling the denormals-are-zeros mode.
            
             The denormals-are-zeros mode was introduced in the Pentium 4 and Intel Xeon processor with the SSE2 extensions; however, it is fully compatible with the SSE SIMD floating-point instructions
             (that is, the denormals-are-zeros flag affects the operation of the SSE SIMD floating-point instructions). In earlier IA-32 processors and in some models of the Pentium 4 processor, this flag
             (bit 6) is reserved. Attempting to set bit 6 of the MXCSR register on processors that do not support the DAZ flag will cause a general-protection exception (#GP).
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.PrecisionFlag">
            <summary>Bits 0 through 5 of the MXCSR register indicate whether a SIMD floating-point exception has been detected. They are "sticky" flags. That is, after a flag is set, it remains set until explicitly cleared. To clear these flags, use the LDMXCSR or the FXRSTOR instruction to write zeroes to them.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.UnderflowFlag">
            <summary>Bits 0 through 5 of the MXCSR register indicate whether a SIMD floating-point exception has been detected. They are "sticky" flags. That is, after a flag is set, it remains set until explicitly cleared. To clear these flags, use the LDMXCSR or the FXRSTOR instruction to write zeroes to them.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.OverflowFlag">
            <summary>Bits 0 through 5 of the MXCSR register indicate whether a SIMD floating-point exception has been detected. They are "sticky" flags. That is, after a flag is set, it remains set until explicitly cleared. To clear these flags, use the LDMXCSR or the FXRSTOR instruction to write zeroes to them.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.DivideByZeroFlag">
            <summary>Bits 0 through 5 of the MXCSR register indicate whether a SIMD floating-point exception has been detected. They are "sticky" flags. That is, after a flag is set, it remains set until explicitly cleared. To clear these flags, use the LDMXCSR or the FXRSTOR instruction to write zeroes to them.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.DenormalFlag">
            <summary>Bits 0 through 5 of the MXCSR register indicate whether a SIMD floating-point exception has been detected. They are "sticky" flags. That is, after a flag is set, it remains set until explicitly cleared. To clear these flags, use the LDMXCSR or the FXRSTOR instruction to write zeroes to them.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.InvalidOperationFlag">
            <summary>Bits 0 through 5 of the MXCSR register indicate whether a SIMD floating-point exception has been detected. They are "sticky" flags. That is, after a flag is set, it remains set until explicitly cleared. To clear these flags, use the LDMXCSR or the FXRSTOR instruction to write zeroes to them.</summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.MXCSRBits.FlagMask">
            <summary>
            Combines all bits for flags into one mask for convenience.
            </summary>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.RoundingMode">
            <summary>
            Rounding mode flags
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_TO_NEAREST_INT">
            <summary>
            Round to the nearest integer
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_TO_NEG_INF">
            <summary>
            Round to negative infinity
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_TO_POS_INF">
            <summary>
            Round to positive infinity
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_TO_ZERO">
            <summary>
            Round to zero
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_CUR_DIRECTION">
            <summary>
            Round to current direction
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_RAISE_EXC">
            <summary>
            Do not suppress exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_NO_EXC">
            <summary>
            Suppress exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_NINT">
            <summary>
            Round to the nearest integer without suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_FLOOR">
            <summary>
            Round using Floor function without suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_CEIL">
            <summary>
            Round using Ceiling function without suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_TRUNC">
            <summary>
            Round by truncating without suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_RINT">
            <summary>
            Round using MXCSR.RC without suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_NEARBYINT">
            <summary>
            Round using MXCSR.RC and suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_NINT_NOEXC">
            <summary>
            Round to nearest integer and suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_FLOOR_NOEXC">
            <summary>
            Round using Floor function and suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_CEIL_NOEXC">
            <summary>
            Round using Ceiling function and suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_TRUNC_NOEXC">
            <summary>
            Round by truncating and suppressing exceptions
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.RoundingMode.FROUND_RINT_NOEXC">
            <summary>
            Round using MXCSR.RC and suppressing exceptions
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.MXCSR">
            <summary>
            Allows access to the CSR register
            </summary>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Sse4_1">
            <summary>
            SSE 4.1 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Sse4_1.IsSse41Supported">
            <summary>
            Evaluates to true at compile time if SSE 4.1 intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.stream_load_si128(System.Void*)">
            <summary>
            Load 128-bits of integer data from memory into dst using a non-temporal memory hint. mem_addr must be aligned on a 16-byte boundary or a general-protection exception may be generated.
            </summary>
            <param name="mem_addr">Memory address</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.blend_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Blend packed double-precision (64-bit) floating-point elements from "a" and "b" using control mask "imm8", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.blend_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Blend packed single-precision (32-bit) floating-point elements from "a" and "b" using control mask "imm8", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.blendv_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Blend packed double-precision (64-bit) floating-point elements from "a" and "b" using "mask", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.blendv_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Blend packed single-precision (32-bit) floating-point elements from "a" and "b" using "mask", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.blendv_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Blend packed 8-bit integers from "a" and "b" using "mask", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="mask">Mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.blend_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Blend packed 16-bit integers from "a" and "b" using control mask "imm8", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.dp_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Conditionally multiply the packed double-precision (64-bit) floating-point elements in "a" and "b" using the high 4 bits in "imm8", sum the four products, and conditionally store the sum in "dst" using the low 4 bits of "imm8". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">High 4 bits in imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.dp_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Conditionally multiply the packed single-precision (32-bit) floating-point elements in "a" and "b" using the high 4 bits in "imm8", sum the four products, and conditionally store the sum in "dst" using the low 4 bits of "imm8". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">High 4 bits in imm8</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.extract_ps(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Extract a single-precision (32-bit) floating-point element from "a", selected with "imm8", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.extractf_ps(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Extract a single-precision (32-bit) floating-point element from "a", selected with "imm8", and store the result in "dst" (as a float).</summary>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Float</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.extract_epi8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Extract an 8-bit integer from "a", selected with "imm8", and store the result in the lower element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.extract_epi32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Extract a 32-bit integer from "a", selected with "imm8", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>Integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.extract_epi64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Extract a 64-bit integer from "a", selected with "imm8", and store the result in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="imm8">imm8</param>
            <returns>64-bit integer</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.insert_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Copy "a" to "tmp", then insert a single-precision (32-bit) floating-point element from "b" into "tmp" using the control in "imm8". Store "tmp" to "dst" using the mask in "imm8" (elements are zeroed out when the corresponding bit is set).  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control mask</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.insert_epi8(Unity.Burst.Intrinsics.v128,System.Byte,System.Int32)">
            <summary> Copy "a" to "dst", and insert the lower 8-bit integer from "i" into "dst" at the location specified by "imm8".  </summary>
            <param name="a">Vector a</param>
            <param name="i">lower 8-bit integer</param>
            <param name="imm8">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.insert_epi32(Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary> Copy "a" to "dst", and insert the 32-bit integer "i" into "dst" at the location specified by "imm8".  </summary>
            <param name="a">Vector a</param>
            <param name="i">32-bit integer</param>
            <param name="imm8">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.insert_epi64(Unity.Burst.Intrinsics.v128,System.Int64,System.Int32)">
            <summary> Copy "a" to "dst", and insert the 64-bit integer "i" into "dst" at the location specified by "imm8".  </summary>
            <param name="a">Vector a</param>
            <param name="i">64-bit integer</param>
            <param name="imm8">Location</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.max_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 8-bit integers in "a" and "b", and store packed maximum values in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.max_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 32-bit integers in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.max_epu32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed unsigned 32-bit integers in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.max_epu16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed unsigned 16-bit integers in "a" and "b", and store packed maximum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.min_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 8-bit integers in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.min_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 32-bit integers in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.min_epu32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed unsigned 32-bit integers in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.min_epu16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed unsigned 16-bit integers in "a" and "b", and store packed minimum values in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.packus_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Convert packed 32-bit integers from "a" and "b" to packed 16-bit integers using unsigned saturation, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cmpeq_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compare packed 64-bit integers in "a" and "b" for equality, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepi8_epi16(Unity.Burst.Intrinsics.v128)">
            <summary> Sign extend packed 8-bit integers in "a" to packed 16-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepi8_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Sign extend packed 8-bit integers in "a" to packed 32-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepi8_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Sign extend packed 8-bit integers in the low 8 bytes of "a" to packed 64-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepi16_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Sign extend packed 16-bit integers in "a" to packed 32-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepi16_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Sign extend packed 16-bit integers in "a" to packed 64-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepi32_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Sign extend packed 32-bit integers in "a" to packed 64-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepu8_epi16(Unity.Burst.Intrinsics.v128)">
            <summary> Zero extend packed unsigned 8-bit integers in "a" to packed 16-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepu8_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Zero extend packed unsigned 8-bit integers in "a" to packed 32-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepu8_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Zero extend packed unsigned 8-bit integers in the low 8 byte sof "a" to packed 64-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepu16_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Zero extend packed unsigned 16-bit integers in "a" to packed 32-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepu16_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Zero extend packed unsigned 16-bit integers in "a" to packed 64-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.cvtepu32_epi64(Unity.Burst.Intrinsics.v128)">
            <summary> Zero extend packed unsigned 32-bit integers in "a" to packed 64-bit integers, and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.mul_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the low 32-bit integers from each packed 64-bit element in "a" and "b", and store the signed 64-bit results in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.mullo_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply the packed 32-bit integers in "a" and "b", producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.testz_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return the "ZF" value. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>ZF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.testc_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return the "CF" value. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>CF value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.testnzc_si128(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "b", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "b", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return 1 if both the "ZF" and "CF" values are zero, otherwise return 0.</summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.test_all_zeros(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Compute the bitwise AND of 128 bits (representing integer data) in "a" and "mask", and return 1 if the result is zero, otherwise return 0. </summary>
            <param name="a">Vector a</param>
            <param name="mask">Mask</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.test_mix_ones_zeroes(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compute the bitwise AND of 128 bits (representing integer data) in "a" and "mask", and set "ZF" to 1 if the result is zero, otherwise set "ZF" to 0. Compute the bitwise NOT of "a" and then AND with "mask", and set "CF" to 1 if the result is zero, otherwise set "CF" to 0. Return 1 if both the "ZF" and "CF" values are zero, otherwise return 0.</summary>
            <param name="a">Vector a</param>
            <param name="mask">Mask</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.test_all_ones(Unity.Burst.Intrinsics.v128)">
            <summary>Compute the bitwise NOT of "a" and then AND with a 128-bit vector containing all 1's, and return 1 if the result is zero, otherwise return 0.></summary> 
            <param name="a">Vector a</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.round_pd(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Round the packed double-precision (64-bit) floating-point elements in "a" using the "rounding" parameter, and store the results as packed double-precision floating-point elements in "dst".</summary>
            <param name="a">Vector a</param>
            <param name="rounding">Rounding mode</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.floor_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Round the packed double-precision (64-bit) floating-point elements in "a" down to an integer value, and store the results as packed double-precision floating-point elements in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.ceil_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Round the packed double-precision (64-bit) floating-point elements in "a" up to an integer value, and store the results as packed double-precision floating-point elements in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.round_ps(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Round the packed single-precision (32-bit) floating-point elements in "a" using the "rounding" parameter, and store the results as packed single-precision floating-point elements in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="rounding">Rounding mode</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.floor_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Round the packed single-precision (32-bit) floating-point elements in "a" down to an integer value, and store the results as packed single-precision floating-point elements in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.ceil_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Round the packed single-precision (32-bit) floating-point elements in "a" up to an integer value, and store the results as packed single-precision floating-point elements in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.round_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Round the lower double-precision (64-bit) floating-point element in "b" using the "rounding" parameter, store the result as a double-precision floating-point element in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="rounding">Rounding mode</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.floor_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Round the lower double-precision (64-bit) floating-point element in "b" down to an integer value, store the result as a double-precision floating-point element in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.ceil_sd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Round the lower double-precision (64-bit) floating-point element in "b" up to an integer value, store the result as a double-precision floating-point element in the lower element of "dst", and copy the upper element from "a" to the upper element of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.round_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Round the lower single-precision (32-bit) floating-point element in "b" using the "rounding" parameter, store the result as a single-precision floating-point element in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst".</summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="rounding">Rounding mode</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.floor_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Round the lower single-precision (32-bit) floating-point element in "b" down to an integer value, store the result as a single-precision floating-point element in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.ceil_ss(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Round the lower single-precision (32-bit) floating-point element in "b" up to an integer value, store the result as a single-precision floating-point element in the lower element of "dst", and copy the upper 3 packed elements from "a" to the upper elements of "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.minpos_epu16(Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally compute the minimum amongst the packed unsigned 16-bit integers in "a", store the minimum and index in "dst", and zero the remaining bits in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.mpsadbw_epu8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in "a" compared to those in "b", and store the 16-bit results in "dst".</summary>
            <remarks>Eight SADs are performed using one quadruplet from "b" and eight quadruplets from "a". One quadruplet is selected from "b" starting at on the offset specified in "imm8". Eight quadruplets are formed from sequential 8-bit integers selected from "a" starting at the offset specified in "imm8".</remarks>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Offset</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_1.MK_INSERTPS_NDX(System.Int32,System.Int32,System.Int32)">
            <summary>Helper macro to create index-parameter value for insert_ps</summary> 
            <param name="srcField">Source field</param>
            <param name="dstField">Destination field</param>
            <param name="zeroMask">Zero mask</param>
            <returns>Integer</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.F16C">
            <summary>
            F16C intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.F16C.IsF16CSupported">
             <summary>
             Evaluates to true at compile time if F16C intrinsics are supported.
            
             Burst ties F16C support to AVX2 support to simplify feature sets to support.
             </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.F16C.HalfToFloat(System.UInt16)">
            <summary>
            Converts a half (hiding in a ushort) to a float (hiding in a uint).
            </summary>
            <param name="h">The half to convert</param>
            <returns>The float result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.F16C.cvtph_ps(Unity.Burst.Intrinsics.v128)">
            <summary>
            Convert packed half-precision (16-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.
            </summary>
            <remarks>
            **** vcvtph2ps xmm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.F16C.mm256_cvtph_ps(Unity.Burst.Intrinsics.v128)">
            <summary>
            Convert packed half-precision (16-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.
            </summary>
            <remarks>
            **** vcvtph2ps ymm, xmm
            </remarks>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.F16C.FloatToHalf(System.UInt32,System.Int32)">
            <summary>
            Converts a float (hiding in a uint) to a half (hiding in a ushort).
            </summary>
            <param name="f">The float to convert</param>
            <param name="rounding">Rounding mode</param>
            <returns>The half result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.F16C.cvtps_ph(Unity.Burst.Intrinsics.v128,System.Int32)">
             <summary>
             Convert packed single-precision (32-bit) floating-point elements in a to packed half-precision (16-bit) floating-point elements, and store the results in dst.
            
             Rounding is done according to the rounding parameter, which can be one of:
             </summary>
             <remarks>
             **** cvtps2ph xmm, xmm, imm
             </remarks>
             <param name="a">Vector a</param>
             <param name="rounding">Rounding mode</param>
             <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.F16C.mm256_cvtps_ph(Unity.Burst.Intrinsics.v256,System.Int32)">
             <summary>
             Convert packed single-precision (32-bit) floating-point elements in a to packed half-precision (16-bit) floating-point elements, and store the results in dst.
            
             Rounding is done according to the rounding parameter, which can be one of:
             </summary>
             <remarks>
             **** cvtps2ph xmm, ymm, imm
             </remarks>
             <param name="a">Vector a</param>
             <param name="rounding">Rounding mode</param>
             <returns>Vector</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Sse4_2">
            <summary>
            SSE 4.2 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Sse4_2.IsSse42Supported">
            <summary>
            Evaluates to true at compile time if SSE 4.2 intrinsics are supported.
            </summary>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD">
            <summary>
            Constants for string comparison intrinsics
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.UBYTE_OPS">
            <summary>
            Compare 8-bit unsigned characters
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.UWORD_OPS">
            <summary>
            Compare 16-bit unsigned characters
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.SBYTE_OPS">
            <summary>
            Compare 8-bit signed characters
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.SWORD_OPS">
            <summary>
            Compare 16-bit signed characters
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.CMP_EQUAL_ANY">
            <summary>
            Compare any equal
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.CMP_RANGES">
            <summary>
            Compare ranges
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.CMP_EQUAL_EACH">
            <summary>
            Compare equal each
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.CMP_EQUAL_ORDERED">
            <summary>
            Compare equal ordered
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.POSITIVE_POLARITY">
            <summary>
            Normal result polarity
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.NEGATIVE_POLARITY">
            <summary>
            Negate results
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.MASKED_POSITIVE_POLARITY">
            <summary>
            Normal results only before end of string
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.MASKED_NEGATIVE_POLARITY">
            <summary>
            Negate results only before end of string
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.LEAST_SIGNIFICANT">
            <summary>
            Index only: return least significant bit
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.MOST_SIGNIFICANT">
            <summary>
            Index only: return most significan bit
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.BIT_MASK">
            <summary>
            mask only: return bit mask
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.X86.Sse4_2.SIDD.UNIT_MASK">
            <summary>
            mask only: return byte/word mask
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistrm(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and store the generated mask in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistri(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and store the generated index in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Index</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestrm(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and store the generated mask in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestri(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and store the generated index in dst.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Index</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistrz(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and returns 1 if any character in b was null, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistrc(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and returns 1 if the resulting mask was non-zero, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistrs(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and returns 1 if any character in a was null, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistro(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and returns bit 0 of the resulting bit mask.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Bit 0</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpistra(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Compare packed strings with implicit lengths in a and b using the control in imm8, and returns 1 if b did not contain a null character and the resulting mask was zero, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestrz(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and returns 1 if any character in b was null, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestrc(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and returns 1 if the resulting mask was non-zero, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestrs(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and returns 1 if any character in a was null, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestro(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and returns bit 0 of the resulting bit mask.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Bit 0</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpestra(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32,System.Int32)">
            <summary>
            Compare packed strings in a and b with lengths la and lb using the control in imm8, and returns 1 if b did not contain a null character and the resulting mask was zero, and 0 otherwise.
            </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="la">Length a</param>
            <param name="lb">Length b</param>
            <param name="imm8">Control</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.cmpgt_epi64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Compare packed 64-bit integers in a and b for greater-than, and store the results in dst.
            </summary>
            <param name="val1">Vector a</param>
            <param name="val2">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.crc32_u32(System.UInt32,System.UInt32)">
            <summary>
            Starting with the initial value in crc, accumulates a CRC32 value for unsigned 32-bit integer v, and stores the result in dst.
            </summary>
            <param name="crc">Initial value</param>
            <param name="v">Unsigned 32-bit integer</param>
            <returns>Result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.crc32_u8(System.UInt32,System.Byte)">
            <summary>
            Starting with the initial value in crc, accumulates a CRC32 value for unsigned 8-bit integer v, and stores the result in dst.
            </summary>
            <param name="crc">Initial value</param>
            <param name="v">Unsigned 8-bit integer</param>
            <returns>Result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.crc32_u16(System.UInt32,System.UInt16)">
            <summary>
            Starting with the initial value in crc, accumulates a CRC32 value for unsigned 16-bit integer v, and stores the result in dst.
            </summary>
            <param name="crc">Initial value</param>
            <param name="v">Unsigned 16-bit integer</param>
            <returns>Result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.crc32_u64(System.UInt64,System.Int64)">
            <summary>
            Starting with the initial value in crc, accumulates a CRC32 value for unsigned 64-bit integer v, and stores the result in dst.
            </summary>
            <param name="crc_ul">Initial value</param>
            <param name="v">Signed 64-bit integer</param>
            <returns>Result</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse4_2.crc32_u64(System.UInt64,System.UInt64)">
            <summary>
            Starting with the initial value in crc, accumulates a CRC32 value for unsigned 64-bit integer v, and stores the result in dst.
            </summary>
            <param name="crc_ul">Initial value</param>
            <param name="v">Unsigned 64-bit integer</param>
            <returns>Result</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Ssse3">
            <summary>
            SSSE3 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Ssse3.IsSsse3Supported">
            <summary>
            Evaluates to true at compile time if SSSE3 intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.abs_epi8(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the absolute value of packed 8-bit integers in "a", and store the unsigned results in "dst".  </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.abs_epi16(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the absolute value of packed 16-bit integers in "a", and store the unsigned results in "dst".  </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.abs_epi32(Unity.Burst.Intrinsics.v128)">
            <summary> Compute the absolute value of packed 32-bit integers in "a", and store the unsigned results in "dst".  </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.shuffle_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Shuffle packed 8-bit integers in "a" according to shuffle control mask in the corresponding 8-bit element of "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.alignr_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary> Concatenate 16-byte blocks in "a" and "b" into a 32-byte temporary result, shift the result right by "count" bytes, and store the low 16 bytes in "dst".  </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <param name="count">Byte count</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.hadd_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally add adjacent pairs of 16-bit integers in "a" and "b", and pack the signed 16-bit results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.hadds_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally add adjacent pairs of 16-bit integers in "a" and "b" using saturation, and pack the signed 16-bit results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.hadd_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally add adjacent pairs of 32-bit integers in "a" and "b", and pack the signed 32-bit results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.hsub_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally subtract adjacent pairs of 16-bit integers in "a" and "b", and pack the signed 16-bit results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.hsubs_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally subtract adjacent pairs of 16-bit integers in "a" and "b" using saturation, and pack the signed 16-bit results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.hsub_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally subtract adjacent pairs of 32-bit integers in "a" and "b", and pack the signed 32-bit results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.maddubs_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Vertically multiply each unsigned 8-bit integer from "a" with the corresponding signed 8-bit integer from "b", producing intermediate signed 16-bit integers. Horizontally add adjacent pairs of intermediate signed 16-bit integers, and pack the saturated results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.mulhrs_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Multiply packed 16-bit integers in "a" and "b", producing intermediate signed 32-bit integers. Truncate each intermediate integer to the 18 most significant bits, round by adding 1, and store bits [16:1] to "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.sign_epi8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Negate packed 8-bit integers in "a" when the corresponding signed 8-bit integer in "b" is negative, and store the results in "dst". Element in "dst" are zeroed out when the corresponding element in "b" is zero. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.sign_epi16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Negate packed 16-bit integers in "a" when the corresponding signed 16-bit integer in "b" is negative, and store the results in "dst". Element in "dst" are zeroed out when the corresponding element in "b" is zero. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Ssse3.sign_epi32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Negate packed 32-bit integers in "a" when the corresponding signed 32-bit integer in "b" is negative, and store the results in "dst". Element in "dst" are zeroed out when the corresponding element in "b" is zero. </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.X86.Sse3">
            <summary>
            SSE3 intrinsics
            </summary>
        </member>
        <member name="P:Unity.Burst.Intrinsics.X86.Sse3.IsSse3Supported">
            <summary>
            Evaluates to true at compile time if SSE3 intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.addsub_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Alternatively add and subtract packed single-precision (32-bit) floating-point elements in "a" to/from packed elements in "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.addsub_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Alternatively add and subtract packed double-precision (64-bit) floating-point elements in "a" to/from packed elements in "b", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.hadd_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally add adjacent pairs of double-precision (64-bit) floating-point elements in "a" and "b", and pack the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.hadd_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in "a" and "b", and pack the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.hsub_pd(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally subtract adjacent pairs of double-precision (64-bit) floating-point elements in "a" and "b", and pack the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.hsub_ps(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary> Horizontally add adjacent pairs of single-precision (32-bit) floating-point elements in "a" and "b", and pack the results in "dst". </summary>
            <param name="a">Vector a</param>
            <param name="b">Vector b</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.movedup_pd(Unity.Burst.Intrinsics.v128)">
            <summary> Duplicate the low double-precision (64-bit) floating-point element from "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.movehdup_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Duplicate odd-indexed single-precision (32-bit) floating-point elements from "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.X86.Sse3.moveldup_ps(Unity.Burst.Intrinsics.v128)">
            <summary> Duplicate even-indexed single-precision (32-bit) floating-point elements from "a", and store the results in "dst". </summary>
            <param name="a">Vector a</param>
            <returns>Vector</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.Arm">
            <summary>
            Static methods and properties for Arm instruction intrinsics.
            </summary>
        </member>
        <member name="T:Unity.Burst.Intrinsics.Arm.Neon">
            <summary>
            Neon intrinsics
            </summary>
            <summary>
            Neon intrinsics
            </summary>
             <summary>
             Neon intrinsics.
             </summary>
             <remarks> 
             For an ordered index of these methods, see the [Burst Arm Neon intrinsics reference](xref:neon-intrinsics).
            </remarks>
        </member>
        <member name="P:Unity.Burst.Intrinsics.Arm.Neon.IsNeonArmv82FeaturesSupported">
            <summary>
            Evaluates to true at compile time if Armv8.2 extension feature intrinsics are supported. These include DotProd, Crypto, RDMA, so the property is equivalent to <c>(Is​Neon​Crypto​Supported &amp;&amp; Is​Neon​Dot​Prod​Supported &amp;&amp; Is​Neon​RDMASupported)</c>
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&amp;FP registers, writes the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADD Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&amp;FP registers, writes the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADD Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddd_s64(System.Int64,System.Int64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddd_u64(System.UInt64,System.UInt64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SADDL instruction extracts each source vector from the lower half of each source register, while the SADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SADDL instruction extracts each source vector from the lower half of each source register, while the SADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SADDL instruction extracts each source vector from the lower half of each source register, while the SADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UADDL instruction extracts each source vector from the lower half of each source register, while the UADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UADDL instruction extracts each source vector from the lower half of each source register, while the UADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UADDL instruction extracts each source vector from the lower half of each source register, while the UADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.The SADDW instruction extracts the second source vector from the lower half of the second source register, while the SADDW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDW2 Vd.8H,Vn.8H,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.The SADDW instruction extracts the second source vector from the lower half of the second source register, while the SADDW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDW2 Vd.4S,Vn.4S,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.The SADDW instruction extracts the second source vector from the lower half of the second source register, while the SADDW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDW2 Vd.2D,Vn.2D,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.The UADDW instruction extracts vector elements from the lower half of the second source register, while the UADDW2 instruction extracts vector elements from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDW2 Vd.8H,Vn.8H,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.The UADDW instruction extracts vector elements from the lower half of the second source register, while the UADDW2 instruction extracts vector elements from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDW2 Vd.4S,Vn.4S,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.The UADDW instruction extracts vector elements from the lower half of the second source register, while the UADDW2 instruction extracts vector elements from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDW2 Vd.2D,Vn.2D,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddb_s8(System.SByte,System.SByte)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Bd,Bn,Bm</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">SByte a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadds_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddd_s64(System.Int64,System.Int64)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddb_u8(System.Byte,System.Byte)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Bd,Bn,Bm</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">Byte a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddh_u16(System.UInt16,System.UInt16)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Hd,Hn,Hm</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadds_u32(System.UInt32,System.UInt32)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Sd,Sn,Sm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddd_u64(System.UInt64,System.UInt64)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqadd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqadd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqadd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqadd_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddb_s8(System.SByte,System.Byte)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Bd,Bn</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">Byte a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddh_s16(System.Int16,System.UInt16)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Hd,Hn</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqadds_s32(System.Int32,System.UInt32)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Sd,Sn</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuqaddd_s64(System.Int64,System.UInt64)">
            <summary>Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&amp;FP register to corresponding signed integer values of the vector elements in the destination SIMD&amp;FP register, and writes the resulting signed integer values to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUQADD Dd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqadd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqadd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqadd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqadd_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddb_u8(System.Byte,System.SByte)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Bd,Bn</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">SByte a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddh_u16(System.UInt16,System.Int16)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Hd,Hn</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqadds_u32(System.UInt32,System.Int32)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Sd,Sn</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqaddd_u64(System.UInt64,System.Int64)">
            <summary>Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&amp;FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&amp;FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USQADD Dd,Dn</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_high_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_high_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_high_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_high_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_high_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_high_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulx_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulx_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxs_f32(System.Single,System.Single)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxd_f64(System.Double,System.Double)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulx_lane_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxq_lane_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulx_lane_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxq_lane_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxs_lane_f32(System.Single,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxd_lane_f64(System.Double,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulx_laneq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxq_laneq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulx_laneq_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxq_laneq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxs_laneq_f32(System.Single,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulxd_laneq_f64(System.Double,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply extended (by element). This instruction multiplies the floating-point values in the vector elements in the first source SIMD&amp;FP register by the specified floating-point value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If one value is zero and the other value is infinite, the result is 2.0. In this case, the result is negative if only one of the values is negative, otherwise the result is positive.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMULX Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdiv_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&amp;FP register, by the floating-point values in the corresponding elements in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FDIV Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdivq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&amp;FP register, by the floating-point values in the corresponding elements in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FDIV Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdiv_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&amp;FP register, by the floating-point values in the corresponding elements in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FDIV Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdivq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&amp;FP register, by the floating-point values in the corresponding elements in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FDIV Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * c[i]) for i = 0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * c[i]) for i = 0 to 1</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * c[i]) for i = 0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * c[i]) for i = 0 to 1</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, adds the product to the value of the third SIMD&amp;FP source register, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMADD Dd,Dn,Dm,Da</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_lane_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_lane_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_lane_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_lane_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmas_lane_f32(System.Single,System.Single,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmad_lane_f64(System.Double,System.Double,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_laneq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_laneq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_laneq_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_laneq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmas_laneq_f32(System.Single,System.Single,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmad_laneq_f64(System.Double,System.Double,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, negates the product, adds that to the value of the third SIMD&amp;FP source register, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMSUB Dd,Dn,Dm,Da</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_lane_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_lane_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_lane_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_lane_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmss_lane_f32(System.Single,System.Single,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsd_lane_f64(System.Double,System.Double,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_laneq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_laneq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_laneq_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_laneq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmss_laneq_f32(System.Single,System.Single,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsd_laneq_f64(System.Double,System.Double,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhs_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhs_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlalh_s16(System.Int32,System.Int16,System.Int16)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Sd,Hn,Hm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">Int16 a2</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlals_s32(System.Int64,System.Int32,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Dd,Sn,Sm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlslh_s16(System.Int32,System.Int16,System.Int16)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Sd,Hn,Hm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">Int16 a2</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsls_s32(System.Int64,System.Int32,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Dd,Sn,Sm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmullh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Sd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulls_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Dd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register, from the corresponding elements in the vector in the first source SIMD&amp;FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSUB Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register, from the corresponding elements in the vector in the first source SIMD&amp;FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSUB Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubd_s64(System.Int64,System.Int64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubd_u64(System.UInt64,System.UInt64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.The SSUBL instruction extracts each source vector from the lower half of each source register, while the SSUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.The SSUBL instruction extracts each source vector from the lower half of each source register, while the SSUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.The SSUBL instruction extracts each source vector from the lower half of each source register, while the SSUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.The USUBL instruction extracts each source vector from the lower half of each source register, while the USUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.The USUBL instruction extracts each source vector from the lower half of each source register, while the USUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.The USUBL instruction extracts each source vector from the lower half of each source register, while the USUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The SSUBW instruction extracts the second source vector from the lower half of the second source register, while the SSUBW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBW2 Vd.8H,Vn.8H,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The SSUBW instruction extracts the second source vector from the lower half of the second source register, while the SSUBW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBW2 Vd.4S,Vn.4S,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The SSUBW instruction extracts the second source vector from the lower half of the second source register, while the SSUBW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBW2 Vd.2D,Vn.2D,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register.The USUBW instruction extracts vector elements from the lower half of the first source register, while the USUBW2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBW2 Vd.8H,Vn.8H,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register.The USUBW instruction extracts vector elements from the lower half of the first source register, while the USUBW2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBW2 Vd.4S,Vn.4S,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register.The USUBW instruction extracts vector elements from the lower half of the first source register, while the USUBW2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBW2 Vd.2D,Vn.2D,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubb_s8(System.SByte,System.SByte)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Bd,Bn,Bm</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">SByte a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubs_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubd_s64(System.Int64,System.Int64)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubb_u8(System.Byte,System.Byte)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Bd,Bn,Bm</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">Byte a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubh_u16(System.UInt16,System.UInt16)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Hd,Hn,Hm</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubs_u32(System.UInt32,System.UInt32)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Sd,Sn,Sm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubd_u64(System.UInt64,System.UInt64)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_high_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_high_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_high_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_high_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN2 Vd.16B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_high_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN2 Vd.8H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_high_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN2 Vd.4S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqd_s64(System.Int64,System.Int64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqd_u64(System.UInt64,System.UInt64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqs_f32(System.Single,System.Single)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqd_f64(System.Double,System.Double)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8B,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.16B,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4H,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8H,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8B,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.16B,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4H,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8H,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_u64(Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqz_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzd_s64(System.Int64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,#0</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzd_u64(System.UInt64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Dd,Dn,#0</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzs_f32(System.Single)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Sd,Sn,#0</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqzd_f64(System.Double)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Dd,Dn,#0</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcged_s64(System.Int64,System.Int64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcged_u64(System.UInt64,System.UInt64)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcges_f32(System.Single,System.Single)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcged_f64(System.Double,System.Double)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgez_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.8B,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.16B,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgez_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.4H,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.8H,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgez_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgez_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgez_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgez_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezd_s64(System.Int64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Dd,Dn,#0</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezs_f32(System.Single)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Sd,Sn,#0</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgezd_f64(System.Double)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Dd,Dn,#0</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcled_s64(System.Int64,System.Int64)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Dd,Dm,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcled_u64(System.UInt64,System.UInt64)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Dd,Dm,Dn</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcles_f32(System.Single,System.Single)">
            <summary>Floating-point Compare Less than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Sd,Sm,Sn</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcled_f64(System.Double,System.Double)">
            <summary>Floating-point Compare Less than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Dd,Dm,Dn</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclez_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.8B,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.16B,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclez_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.4H,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.8H,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclez_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclez_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclez_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLE Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclez_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLE Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLE Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezd_s64(System.Int64)">
            <summary>Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLE Dd,Dn,#0</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezs_f32(System.Single)">
            <summary>Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLE Sd,Sn,#0</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclezd_f64(System.Double)">
            <summary>Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLE Dd,Dn,#0</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtd_s64(System.Int64,System.Int64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtd_u64(System.UInt64,System.UInt64)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgts_f32(System.Single,System.Single)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtd_f64(System.Double,System.Double)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtz_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.8B,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.16B,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtz_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.4H,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.8H,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtz_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtz_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtz_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtz_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzd_s64(System.Int64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Dd,Dn,#0</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzs_f32(System.Single)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Sd,Sn,#0</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtzd_f64(System.Double)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Dd,Dn,#0</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltd_s64(System.Int64,System.Int64)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Dd,Dm,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltd_u64(System.UInt64,System.UInt64)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Dd,Dm,Dn</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclts_f32(System.Single,System.Single)">
            <summary>Floating-point Compare Less than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Sd,Sm,Sn</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltd_f64(System.Double,System.Double)">
            <summary>Floating-point Compare Less than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Dd,Dm,Dn</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltz_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.8B,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.16B,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltz_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.4H,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.8H,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltz_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltz_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltz_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLT Vd.2S,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLT Vd.4S,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltz_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLT Dd,Dn,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLT Vd.2D,Vn.2D,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzd_s64(System.Int64)">
            <summary>Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&amp;FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMLT Dd,Dn,#0</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzs_f32(System.Single)">
            <summary>Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLT Sd,Sn,#0</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltzd_f64(System.Double)">
            <summary>Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&amp;FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMLT Dd,Dn,#0</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcage_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcageq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcages_f32(System.Single,System.Single)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaged_f64(System.Double,System.Double)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcale_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaleq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Vd.2D,Vm.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcales_f32(System.Single,System.Single)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Sd,Sm,Sn</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaled_f64(System.Double,System.Double)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Dd,Dm,Dn</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcagt_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcagtq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcagts_f32(System.Single,System.Single)">
            <summary>Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcagtd_f64(System.Double,System.Double)">
            <summary>Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcalt_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Less than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is less than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Dd,Dm,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaltq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Less than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is less than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcalts_f32(System.Single,System.Single)">
            <summary>Floating-point Absolute Compare Less than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is less than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Sd,Sm,Sn</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaltd_f64(System.Double,System.Double)">
            <summary>Floating-point Absolute Compare Less than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is less than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Dd,Dm,Dn</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstd_s64(System.Int64,System.Int64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstd_u64(System.UInt64,System.UInt64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABD Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABD Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabds_f32(System.Single,System.Single)">
            <summary>Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABD Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdd_f64(System.Double,System.Double)">
            <summary>Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABD Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABDL instruction writes the vector to the lower half of the destination register and clears the upper half, while the SABDL2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABDL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABDL instruction writes the vector to the lower half of the destination register and clears the upper half, while the SABDL2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABDL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABDL instruction writes the vector to the lower half of the destination register and clears the upper half, while the SABDL2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABDL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABDL instruction extracts each source vector from the lower half of each source register, while the UABDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABDL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABDL instruction extracts each source vector from the lower half of each source register, while the UABDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABDL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABDL instruction extracts each source vector from the lower half of each source register, while the UABDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABDL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_high_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABAL instruction extracts each source vector from the lower half of each source register, while the SABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABAL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_high_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABAL instruction extracts each source vector from the lower half of each source register, while the SABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABAL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_high_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABAL instruction extracts each source vector from the lower half of each source register, while the SABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABAL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_high_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABAL instruction extracts each source vector from the lower half of each source register, while the UABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABAL2 Vd.8H,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_high_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABAL instruction extracts each source vector from the lower half of each source register, while the UABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABAL2 Vd.4S,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_high_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABAL instruction extracts each source vector from the lower half of each source register, while the UABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABAL2 Vd.2D,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAX Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAX Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMIN Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMIN Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnm_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMAX (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNM Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnmq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMAX (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNM Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnm_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMAX (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNM Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnmq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMAX (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNM Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnm_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMIN (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNM Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnmq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMIN (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNM Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnm_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMIN (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNM Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnmq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result placed in the vector is the numerical value, otherwise the result is identical to FMIN (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNM Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshld_s64(System.Int64,System.Int64)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshld_u64(System.UInt64,System.Int64)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlb_s8(System.SByte,System.SByte)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Bd,Bn,Bm</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">SByte a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshls_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshld_s64(System.Int64,System.Int64)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlb_u8(System.Byte,System.SByte)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Bd,Bn,Bm</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">SByte a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlh_u16(System.UInt16,System.Int16)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Hd,Hn,Hm</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshls_u32(System.UInt32,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Sd,Sn,Sm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshld_u64(System.UInt64,System.Int64)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshld_s64(System.Int64,System.Int64)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshld_u64(System.UInt64,System.Int64)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlb_s8(System.SByte,System.SByte)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Bd,Bn,Bm</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">SByte a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlh_s16(System.Int16,System.Int16)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshls_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshld_s64(System.Int64,System.Int64)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Dd,Dn,Dm</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlb_u8(System.Byte,System.SByte)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Bd,Bn,Bm</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">SByte a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlh_u16(System.UInt16,System.Int16)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Hd,Hn,Hm</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">Int16 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshls_u32(System.UInt32,System.Int32)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Sd,Sn,Sm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshld_u64(System.UInt64,System.Int64)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Dd,Dn,Dm</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int64 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrd_n_s64(System.Int64,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrd_n_u64(System.UInt64,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshld_n_s64(System.Int64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshld_n_u64(System.UInt64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrd_n_s64(System.Int64,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrd_n_u64(System.UInt64,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsrad_n_s64(System.Int64,System.Int64,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsrad_n_u64(System.UInt64,System.UInt64,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsrad_n_s64(System.Int64,System.Int64,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsrad_n_u64(System.UInt64,System.UInt64,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlb_n_s8(System.SByte,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Bd,Bn,#n</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">Int32 a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlh_n_s16(System.Int16,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Hd,Hn,#n</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshls_n_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Sd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshld_n_s64(System.Int64,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlb_n_u8(System.Byte,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Bd,Bn,#n</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlh_n_u16(System.UInt16,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Hd,Hn,#n</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshls_n_u32(System.UInt32,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Sd,Sn,#n</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshld_n_u64(System.UInt64,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlub_n_s8(System.SByte,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Bd,Bn,#n</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshluh_n_s16(System.Int16,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Hd,Hn,#n</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlus_n_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Sd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlud_n_s64(System.Int64,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_high_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_high_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_high_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_high_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_high_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_high_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrunh_n_s16(System.Int16,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN Bd,Hn,#n</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshruns_n_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN Hd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrund_n_s64(System.Int64,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN Sd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrun_high_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrun_high_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrun_high_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrunh_n_s16(System.Int16,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN Bd,Hn,#n</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshruns_n_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN Hd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrund_n_s64(System.Int64,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN Sd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrun_high_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrun_high_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrun_high_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrnh_n_s16(System.Int16,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN Bd,Hn,#n</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrns_n_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN Hd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrnd_n_s64(System.Int64,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN Sd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrnh_n_u16(System.UInt16,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN Bd,Hn,#n</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrns_n_u32(System.UInt32,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN Hd,Sn,#n</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrnd_n_u64(System.UInt64,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN Sd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_high_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_high_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_high_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_high_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_high_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_high_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_high_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_high_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_high_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_high_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_high_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_high_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrnh_n_s16(System.Int16,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN Bd,Hn,#n</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrns_n_s32(System.Int32,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN Hd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrnd_n_s64(System.Int64,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN Sd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrnh_n_u16(System.UInt16,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN Bd,Hn,#n</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrns_n_u32(System.UInt32,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN Hd,Sn,#n</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrnd_n_u64(System.UInt64,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN Sd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_high_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_high_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_high_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_high_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN2 Vd.16B,Vn.8H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_high_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN2 Vd.8H,Vn.4S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_high_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN2 Vd.4S,Vn.2D,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_high_n_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL2 Vd.8H,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_high_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL2 Vd.4S,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_high_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL2 Vd.2D,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_high_n_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL2 Vd.8H,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_high_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL2 Vd.4S,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_high_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL2 Vd.2D,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsrid_n_s64(System.Int64,System.Int64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsrid_n_u64(System.UInt64,System.UInt64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vslid_n_s64(System.Int64,System.Int64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vslid_n_u64(System.UInt64,System.UInt64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">UInt64 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtn_s32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtnq_s32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtn_u32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNU Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtnq_u32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNU Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtm_s32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtmq_s32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtm_u32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMU Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtmq_u32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMU Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtp_s32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtpq_s32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtp_u32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPU Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtpq_u32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPU Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvta_s32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtaq_s32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvta_u32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAU Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtaq_u32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAU Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_s32_f32(System.Single)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_u32_f32(System.Single)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtns_s32_f32(System.Single)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNS Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtns_u32_f32(System.Single)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNU Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtms_s32_f32(System.Single)">
            <summary>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMS Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtms_u32_f32(System.Single)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMU Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtps_s32_f32(System.Single)">
            <summary>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPS Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtps_u32_f32(System.Single)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPU Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtas_s32_f32(System.Single)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAS Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtas_u32_f32(System.Single)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAU Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_s64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_s64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_u64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_u64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtn_s64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtnq_s64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtn_u64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNU Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtnq_u64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNU Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtm_s64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtmq_s64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtm_u64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMU Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtmq_u64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMU Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtp_s64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtpq_s64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtp_u64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPU Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtpq_u64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPU Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvta_s64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtaq_s64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvta_u64_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAU Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtaq_u64_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAU Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_s64_f64(System.Double)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_u64_f64(System.Double)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtnd_s64_f64(System.Double)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNS Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtnd_u64_f64(System.Double)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTNU Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtmd_s64_f64(System.Double)">
            <summary>Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMS Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtmd_u64_f64(System.Double)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTMU Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtpd_s64_f64(System.Double)">
            <summary>Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPS Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtpd_u64_f64(System.Double)">
            <summary>Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTPU Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtad_s64_f64(System.Double)">
            <summary>Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAS Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtad_u64_f64(System.Double)">
            <summary>Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTAU Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_n_s32_f32(System.Single,System.Int32)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Sd,Sn,#n</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_n_u32_f32(System.Single,System.Int32)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Sd,Sn,#n</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_s64_f64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_s64_f64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_u64_f64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_u64_f64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_n_s64_f64(System.Double,System.Int32)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Dd,Dn,#n</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_n_u64_f64(System.Double,System.Int32)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Dd,Dn,#n</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Int32 a1</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_f32_s32(System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Sd,Sn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_f32_u32(System.UInt32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Sd,Sn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_f64_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_f64_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_f64_u64(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_f64_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_f64_s64(System.Int64)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Dd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_f64_u64(System.UInt64)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Dd,Dn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_n_f32_s32(System.Int32,System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Sd,Sn,#n</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvts_n_f32_u32(System.UInt32,System.Int32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Sd,Sn,#n</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_f64_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_f64_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_f64_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_f64_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_n_f64_s64(System.Int64,System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Dd,Dn,#n</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtd_n_f64_u64(System.UInt64,System.Int32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Dd,Dn,#n</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">Int32 a1</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_f32_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&amp;FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.The FCVTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the FCVTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_high_f32_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&amp;FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.
            <br/>Equivalent instruction: <c>FCVTN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_f64_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&amp;FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&amp;FP destination register.Where the operation lengthens a 64-bit vector to a 128-bit vector, the FCVTL2 variant operates on the elements in the top 64 bits of the source register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTL Vd.2D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_high_f64_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&amp;FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&amp;FP destination register.Where the operation lengthens a 64-bit vector to a 128-bit vector, the FCVTL2 variant operates on the elements in the top 64 bits of the source register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTL2 Vd.2D,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtx_f32_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&amp;FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction uses the Round to Odd rounding mode which is not defined by the IEEE 754-2008 standard. This rounding mode ensures that if the result of the conversion is inexact the least significant bit of the mantissa is forced to 1. This rounding mode enables a floating-point value to be converted to a lower precision format via an intermediate precision format while avoiding double rounding errors. For example, a 64-bit floating-point value can be converted to a correctly rounded 16-bit floating-point value by first using this instruction to produce a 32-bit value and then using another instruction with the wanted rounding mode to convert the 32-bit value to the final 16-bit floating-point value.The FCVTXN instruction writes the vector to the lower half of the destination register and clears the upper half, while the FCVTXN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTXN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtxd_f32_f64(System.Double)">
            <summary>Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&amp;FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction uses the Round to Odd rounding mode which is not defined by the IEEE 754-2008 standard. This rounding mode ensures that if the result of the conversion is inexact the least significant bit of the mantissa is forced to 1. This rounding mode enables a floating-point value to be converted to a lower precision format via an intermediate precision format while avoiding double rounding errors. For example, a 64-bit floating-point value can be converted to a correctly rounded 16-bit floating-point value by first using this instruction to produce a 32-bit value and then using another instruction with the wanted rounding mode to convert the 32-bit value to the final 16-bit floating-point value.The FCVTXN instruction writes the vector to the lower half of the destination register and clears the upper half, while the FCVTXN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTXN Sd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtx_high_f32_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&amp;FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction uses the Round to Odd rounding mode which is not defined by the IEEE 754-2008 standard. This rounding mode ensures that if the result of the conversion is inexact the least significant bit of the mantissa is forced to 1. This rounding mode enables a floating-point value to be converted to a lower precision format via an intermediate precision format while avoiding double rounding errors. For example, a 64-bit floating-point value can be converted to a correctly rounded 16-bit floating-point value by first using this instruction to produce a 32-bit value and then using another instruction with the wanted rounding mode to convert the 32-bit value to the final 16-bit floating-point value.The FCVTXN instruction writes the vector to the lower half of the destination register and clears the upper half, while the FCVTXN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTXN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrnd_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTZ Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTZ Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrnd_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTZ Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTZ Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndn_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTN Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndnq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTN Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndn_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTN Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndnq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTN Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndns_f32(System.Single)">
            <summary>Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTN Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndm_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTM Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndmq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTM Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndm_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTM Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndmq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTM Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndp_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTP Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndpq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTP Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndp_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTP Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndpq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTP Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrnda_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTA Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndaq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTA Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrnda_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTA Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndaq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTA Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndi_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTI Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndiq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTI Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndi_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTI Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndiq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTI Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndx_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.When a result value is not numerically equal to the corresponding input value, an Inexact exception is raised. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTX Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndxq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.When a result value is not numerically equal to the corresponding input value, an Inexact exception is raised. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTX Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndx_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.When a result value is not numerically equal to the corresponding input value, an Inexact exception is raised. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTX Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrndxq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&amp;FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&amp;FP destination register.When a result value is not numerically equal to the corresponding input value, an Inexact exception is raised. A zero input gives a zero result with the same sign, an infinite input gives an infinite result with the same sign, and a NaN is propagated as for normal arithmetic.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRINTX Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_high_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL2 Vd.8H,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_high_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL2 Vd.4S,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_high_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL2 Vd.2D,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_high_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL2 Vd.8H,Vn.16B,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_high_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL2 Vd.4S,Vn.8H,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_high_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL2 Vd.2D,Vn.4S,#0</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovnh_s16(System.Int16)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN Bd,Hn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovns_s32(System.Int32)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN Hd,Sn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovnd_s64(System.Int64)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN Sd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovnh_u16(System.UInt16)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN Bd,Hn</c></summary>
            <param name="a0">UInt16 a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovns_u32(System.UInt32)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN Hd,Sn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovnd_u64(System.UInt64)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN Sd,Dn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN2 Vd.16B,Vn.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN2 Vd.8H,Vn.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_high_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN2 Vd.16B,Vn.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_high_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN2 Vd.8H,Vn.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_high_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovunh_s16(System.Int16)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN Bd,Hn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovuns_s32(System.Int32)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN Hd,Sn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovund_s64(System.Int64)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN Sd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovun_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN2 Vd.16B,Vn.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovun_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN2 Vd.8H,Vn.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovun_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_laneq_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_laneq_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_laneq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_laneq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlalh_lane_s16(System.Int32,System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Sd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlals_lane_s32(System.Int64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Dd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlalh_laneq_s16(System.Int32,System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Sd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlals_laneq_s32(System.Int64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Dd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_laneq_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_laneq_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_laneq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_laneq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlslh_lane_s16(System.Int32,System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Sd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsls_lane_s32(System.Int64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Dd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlslh_laneq_s16(System.Int32,System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Sd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsls_laneq_s32(System.Int64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Dd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_n_f64(Unity.Burst.Intrinsics.v64,System.Double)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Dd,Dn,Vm.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Double a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_n_f64(Unity.Burst.Intrinsics.v128,System.Double)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2D,Vn.2D,Vm.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Double a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_lane_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_lane_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmuls_lane_f32(System.Single,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmuld_lane_f64(System.Double,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Dd,Dn,Vm.S[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_laneq_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_laneq_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_laneq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_laneq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_laneq_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_laneq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2D,Vn.2D,Vm.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmuls_laneq_f32(System.Single,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmuld_laneq_f64(System.Double,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Dd,Dn,Vm.D[lane]</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_n_s16(Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_n_u16(Unity.Burst.Intrinsics.v128,System.UInt16)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_n_u32(Unity.Burst.Intrinsics.v128,System.UInt32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_laneq_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_laneq_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_laneq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_high_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_n_s16(Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmullh_lane_s16(System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Sd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulls_lane_s32(System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Dd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmullh_laneq_s16(System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Sd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulls_laneq_s32(System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Dd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.4S,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_high_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL2 Vd.2D,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhh_lane_s16(System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhs_lane_s32(System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Sd,Sn,Vm.H[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhh_laneq_s16(System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhs_laneq_s32(System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Sd,Sn,Vm.H[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhh_lane_s16(System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhs_lane_s32(System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhh_laneq_s16(System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhs_laneq_s32(System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt16)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_high_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_high_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt16)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_high_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.4S,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_high_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL2 Vd.2D,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabs_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsd_s64(System.Int64)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Dd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabs_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabs_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsb_s8(System.SByte)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Bd,Bn</c></summary>
            <param name="a0">SByte a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsh_s16(System.Int16)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Hd,Hn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabss_s32(System.Int32)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Sd,Sn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsd_s64(System.Int64)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Dd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vneg_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegd_s64(System.Int64)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Dd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vneg_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FNEG Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FNEG Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqneg_s64(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegb_s8(System.SByte)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Bd,Bn</c></summary>
            <param name="a0">SByte a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegh_s16(System.Int16)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Hd,Hn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegs_s32(System.Int32)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Sd,Sn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegd_s64(System.Int64)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Dd,Dn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpe_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPE Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpeq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPE Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpes_f32(System.Single)">
            <summary>Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPE Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecped_f64(System.Double)">
            <summary>Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPE Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecps_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPS Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpsq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPS Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpss_f32(System.Single,System.Single)">
            <summary>Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPS Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpsd_f64(System.Double,System.Double)">
            <summary>Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPS Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqrt_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSQRT Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqrtq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSQRT Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqrt_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSQRT Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsqrtq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSQRT Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrte_f64(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTE Dd,Dn</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrteq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTE Vd.2D,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrtes_f32(System.Single)">
            <summary>Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTE Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrted_f64(System.Double)">
            <summary>Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTE Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrts_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTS Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrtsq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTS Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrtss_f32(System.Single,System.Single)">
            <summary>Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTS Sd,Sn,Sm</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">Single a1</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrtsd_f64(System.Double,System.Double)">
            <summary>Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTS Dd,Dn,Dm</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">Double a1</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_s8(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_s8(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_s16(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_s16(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_s32(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_s32(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_s64(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_s64(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[lane1],Vn.D[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_u8(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_u8(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_u16(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_u16(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_u32(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_u32(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_u64(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_u64(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[lane1],Vn.D[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_f32(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_f32(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_lane_f64(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_lane_f64(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[lane1],Vn.D[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_s8(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..15]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_s8(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..15]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_s16(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_s16(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_s32(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_s32(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_s64(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_s64(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[lane1],Vn.D[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_u8(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..15]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_u8(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.B[lane1],Vn.B[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..15]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_u16(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_u16(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.H[lane1],Vn.H[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_u32(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_u32(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_u64(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_u64(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[lane1],Vn.D[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_f32(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_f32(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.S[lane1],Vn.S[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopy_laneq_f64(Unity.Burst.Intrinsics.v64,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane2]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcopyq_laneq_f64(Unity.Burst.Intrinsics.v128,System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[lane1],Vn.D[lane2]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrbit_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&amp;FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RBIT Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrbitq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&amp;FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RBIT Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrbit_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&amp;FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RBIT Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrbitq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&amp;FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RBIT Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_f64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_f64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_f32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_f32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_laneq_f64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_laneq_f64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupb_lane_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Bd,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vduph_lane_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Hd,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdups_lane_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupd_lane_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupb_lane_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Bd,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vduph_lane_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Hd,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdups_lane_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupd_lane_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdups_lane_f32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupd_lane_f64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupb_laneq_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Bd,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vduph_laneq_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Hd,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdups_laneq_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupd_laneq_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupb_laneq_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Bd,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vduph_laneq_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Hd,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdups_laneq_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupd_laneq_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdups_laneq_f32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupd_laneq_f64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxnm_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxnmq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxnmq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminnm_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminnmq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminnmq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddd_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddd_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadds_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddd_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxs_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxqd_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmins_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminqd_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxnms_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmaxnmqd_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminnms_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpminnmqd_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Bd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Bd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Hd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Hd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP  Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Bd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Bd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Hd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Hd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP  Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Add across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddv_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Vt.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddvq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlv_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLV Hd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlvq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLV Hd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlv_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLV Sd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlvq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLV Sd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlv_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.1D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlvq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLV Dd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlv_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLV Hd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlvq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLV Hd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlv_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLV Sd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlvq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLV Sd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlv_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.1D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddlvq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&amp;FP register together, and writes the scalar result to the destination SIMD&amp;FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLV Dd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXV Bd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXV Bd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXV Hd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXV Hd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP  Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXV Bd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXV Bd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXV Hd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXV Hd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP  Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxv_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxvq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINV Bd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINV Bd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINV Hd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINV Hd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP  Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINV Bd,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINV Bd,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINV Hd,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINV Hd,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP  Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminv_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminvq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnmv_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnmvq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the largest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result of the comparison is the numerical value, otherwise the result is identical to FMAX (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxnmvq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXNMP  Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnmv_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP  Sd,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnmvq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number across Vector. This instruction compares all the vector elements in the source SIMD&amp;FP register, and writes the smallest of the values as a scalar to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.NaNs are handled according to the IEEE 754-2008 standard. If one vector element is numeric and the other is a quiet NaN, the result of the comparison is the numerical value, otherwise the result is identical to FMIN (scalar).This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMV Sd,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminnmvq_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Minimum Number of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINNMP  Dd,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;3)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;3)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip1q_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP2 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vzip2q_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&amp;FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&amp;FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.This instruction can be used with ZIP1 to interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ZIP2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp1q_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP2 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vuzp2q_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can be used with UZP1 to de-interleave two vectors.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UZP2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn1q_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&amp;FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN2, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN1 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtrn2q_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&amp;FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&amp;FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.By using this instruction with TRN1, a 2 x 2 matrix can be transposed.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TRN2 Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbl1_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBL Vd.8B,{Vn.16B},Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbl1q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBL Vd.16B,{Vn.16B},Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbl1_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBL Vd.8B,{Vn.16B},Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbl1q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBL Vd.16B,{Vn.16B},Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbx1_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBX Vd.8B,{Vn.16B},Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbx1q_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBX Vd.16B,{Vn.16B},Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbx1_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBX Vd.8B,{Vn.16B},Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqtbx1q_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBX Vd.16B,{Vn.16B},Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_f64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_f64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_f64(System.Double,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.D[lane],Rn</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_f64(System.Double,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.D[lane],Rn</c></summary>
            <param name="a0">Double a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpxs_f32(System.Single)">
            <summary>Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPX Sd,Sn</c></summary>
            <param name="a0">Single a0</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpxd_f64(System.Double)">
            <summary>Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPX Dd,Dn</c></summary>
            <param name="a0">Double a0</param>
            <returns>Double</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_n_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Single)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_n_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Single)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_n_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Double)">
            <summary>Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, adds the product to the value of the third SIMD&amp;FP source register, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMADD Dd,Dn,Dm,Da</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Double a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_n_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Double)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2D,Vn.2D,Vm.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Double a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_n_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Double)">
            <summary>Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&amp;FP source registers, negates the product, adds that to the value of the third SIMD&amp;FP source register, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMSUB Dd,Dn,Dm,Da</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Double a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_n_f64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Double)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2D,Vn.2D,Vm.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Double a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_s8(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_s16(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_s32(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_s64(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_u8(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_u16(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_u32(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_u64(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_f16(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_f32(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcreate_f64(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Vd.D[0],Xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_s8(System.SByte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,rn</c></summary>
            <param name="a0">SByte a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_s8(System.SByte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,rn</c></summary>
            <param name="a0">SByte a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_s16(System.Int16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,rn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_s16(System.Int16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,rn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_s32(System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,rn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_s32(System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,rn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_s64(System.Int64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Dd.D[0],xn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_s64(System.Int64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,rn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_u8(System.Byte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,rn</c></summary>
            <param name="a0">Byte a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_u8(System.Byte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,rn</c></summary>
            <param name="a0">Byte a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_u16(System.UInt16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,rn</c></summary>
            <param name="a0">UInt16 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_u16(System.UInt16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,rn</c></summary>
            <param name="a0">UInt16 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_u32(System.UInt32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,rn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_u32(System.UInt32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,rn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_u64(System.UInt64)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Dd.D[0],xn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_u64(System.UInt64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,rn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_f32(System.Single)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,rn</c></summary>
            <param name="a0">Single a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_f32(System.Single)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,rn</c></summary>
            <param name="a0">Single a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_n_f64(System.Double)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>INS Dd.D[0],xn</c></summary>
            <param name="a0">Double a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_n_f64(System.Double)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,rn</c></summary>
            <param name="a0">Double a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_s8(System.SByte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,rn</c></summary>
            <param name="a0">SByte a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_s8(System.SByte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,rn</c></summary>
            <param name="a0">SByte a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_s16(System.Int16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,rn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_s16(System.Int16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,rn</c></summary>
            <param name="a0">Int16 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_s32(System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,rn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_s32(System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,rn</c></summary>
            <param name="a0">Int32 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_s64(System.Int64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,rn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_s64(System.Int64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,rn</c></summary>
            <param name="a0">Int64 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_u8(System.Byte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,rn</c></summary>
            <param name="a0">Byte a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_u8(System.Byte)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,rn</c></summary>
            <param name="a0">Byte a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_u16(System.UInt16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,rn</c></summary>
            <param name="a0">UInt16 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_u16(System.UInt16)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,rn</c></summary>
            <param name="a0">UInt16 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_u32(System.UInt32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,rn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_u32(System.UInt32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,rn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_u64(System.UInt64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,rn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_u64(System.UInt64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,rn</c></summary>
            <param name="a0">UInt64 a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_f32(System.Single)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,rn</c></summary>
            <param name="a0">Single a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_f32(System.Single)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,rn</c></summary>
            <param name="a0">Single a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmov_n_f64(System.Double)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,rn</c></summary>
            <param name="a0">Double a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovq_n_f64(System.Double)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,rn</c></summary>
            <param name="a0">Double a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_f16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcombine_f64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_high_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[1]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_low_f64(Unity.Burst.Intrinsics.v128)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.1D,Vn.D[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_s8(System.SByte*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.8B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_s8(System.SByte*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.16B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_s16(System.Int16*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.4H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_s16(System.Int16*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.8H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_s32(System.Int32*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.2S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_s32(System.Int32*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.4S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_s64(System.Int64*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.1D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_s64(System.Int64*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.2D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_u8(System.Byte*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.8B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_u8(System.Byte*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.16B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_u16(System.UInt16*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.4H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_u16(System.UInt16*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.8H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_u32(System.UInt32*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.2S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_u32(System.UInt32*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.4S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_u64(System.UInt64*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.1D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_u64(System.UInt64*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.2D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_f32(System.Single*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.2S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_f32(System.Single*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.4S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1_f64(System.Double*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.1D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vld1q_f64(System.Double*)">
            <summary>Load multiple single-element structures to a register. This instruction loads multiple single-element structures from memory and writes the result to a SIMD&amp;FP register.
            <br/>Equivalent instruction: <c>LD1 {Vt.2D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to load from</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_s8(System.SByte*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.8B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_s8(System.SByte*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.16B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_s16(System.Int16*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.4H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_s16(System.Int16*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.8H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_s32(System.Int32*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.2S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_s32(System.Int32*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.4S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_s64(System.Int64*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.1D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_s64(System.Int64*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.2D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_u8(System.Byte*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.8B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_u8(System.Byte*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.16B},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_u16(System.UInt16*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.4H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_u16(System.UInt16*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.8H},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_u32(System.UInt32*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.2S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_u32(System.UInt32*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.4S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_u64(System.UInt64*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.1D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_u64(System.UInt64*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.2D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_f32(System.Single*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.2S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_f32(System.Single*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.4S},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1_f64(System.Double*,Unity.Burst.Intrinsics.v64)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.1D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">64-bit vector a1</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vst1q_f64(System.Double*,Unity.Burst.Intrinsics.v128)">
            <summary>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ST1 {Vt.2D},[Xn]</c></summary>
            <param name="a0">Pointer to the address to store to</param>
            <param name="a1">128-bit vector a1</param>
        </member>
        <member name="P:Unity.Burst.Intrinsics.Arm.Neon.IsNeonCryptoSupported">
            <summary>
            Evaluates to true at compile time if Armv8.1 Crypto intrinsics (AES, SHA1, SHA2, CRC32) are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha1cq_u32(Unity.Burst.Intrinsics.v128,System.UInt32,Unity.Burst.Intrinsics.v128)">
            <summary>SHA1 hash update (choose).
            <br/>Equivalent instruction: <c>SHA1C Qd,Sn,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha1pq_u32(Unity.Burst.Intrinsics.v128,System.UInt32,Unity.Burst.Intrinsics.v128)">
            <summary>SHA1 hash update (parity).
            <br/>Equivalent instruction: <c>SHA1P Qd,Sn,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha1mq_u32(Unity.Burst.Intrinsics.v128,System.UInt32,Unity.Burst.Intrinsics.v128)">
            <summary>SHA1 hash update (majority).
            <br/>Equivalent instruction: <c>SHA1M Qd,Sn,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha1h_u32(System.UInt32)">
            <summary>SHA1 fixed rotate.
            <br/>Equivalent instruction: <c>SHA1H Sd,Sn</c></summary>
            <param name="a0">UInt32 a0</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha1su0q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>SHA1 schedule update 0.
            <br/>Equivalent instruction: <c>SHA1SU0 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha1su1q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>SHA1 schedule update 1.
            <br/>Equivalent instruction: <c>SHA1SU1 Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha256hq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>SHA256 hash update (part 1).
            <br/>Equivalent instruction: <c>SHA256H Qd,Qn,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha256h2q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>SHA256 hash update (part 2).
            <br/>Equivalent instruction: <c>SHA256H2 Qd,Qn,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha256su0q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>SHA256 schedule update 0.
            <br/>Equivalent instruction: <c>SHA256SU0 Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsha256su1q_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>SHA256 schedule update 1.
            <br/>Equivalent instruction: <c>SHA256SU1 Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32b(System.UInt32,System.Byte)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32B Wd,Wn,Wm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Byte a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32h(System.UInt32,System.UInt16)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32H Wd,Wn,Wm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32w(System.UInt32,System.UInt32)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32W Wd,Wn,Wm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32d(System.UInt32,System.UInt64)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32X Wd,Wn,Xm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32cb(System.UInt32,System.Byte)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32CB Wd,Wn,Wm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">Byte a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32ch(System.UInt32,System.UInt16)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32CH Wd,Wn,Wm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32cw(System.UInt32,System.UInt32)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32CW Wd,Wn,Wm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.__crc32cd(System.UInt32,System.UInt64)">
            <summary>CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value held in a general-purpose register. It takes an input CRC value in the first source operand, performs a CRC on the input value in the second source operand, and returns the output CRC value. The second source operand can be 8, 16, 32, or 64 bits. To align with common usage, the bit order of the values is reversed as part of the operation, and the polynomial 0x04C11DB7 is used for the CRC calculation.
            <br/>Equivalent instruction: <c>CRC32CX Wd,Wn,Xm</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">UInt64 a1</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaeseq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>AES single round encryption.
            <br/>Equivalent instruction: <c>AESE Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaesdq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>AES single round decryption.
            <br/>Equivalent instruction: <c>AESD Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaesmcq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>AES mix columns.
            <br/>Equivalent instruction: <c>AESMC Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaesimcq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>AES inverse mix columns.
            <br/>Equivalent instruction: <c>AESIMC Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="P:Unity.Burst.Intrinsics.Arm.Neon.IsNeonRDMASupported">
            <summary>
            Evaluates to true at compile time if Armv8.1 Rounding Double Multiply Add/Subtract intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlah_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlah_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlsh_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlsh_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlah_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlah_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlah_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlah_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlsh_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlsh_laneq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshq_laneq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlsh_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlsh_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahh_s16(System.Int16,System.Int16,System.Int16)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">Int16 a2</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahs_s32(System.Int32,System.Int32,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshh_s16(System.Int16,System.Int16,System.Int16)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Hd,Hn,Hm</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">Int16 a2</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshs_s32(System.Int32,System.Int32,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Sd,Sn,Sm</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">Int32 a2</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahh_lane_s16(System.Int16,System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahh_laneq_s16(System.Int16,System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlahs_lane_s32(System.Int32,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLAH Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshh_lane_s16(System.Int16,System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshh_laneq_s16(System.Int16,System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Hd,Hn,Vm.H[lane]</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">Int16 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..7]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmlshs_lane_s32(System.Int32,System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element). This instruction multiplies the vector elements of the first source SIMD&amp;FP register with the value of a vector element of the second source SIMD&amp;FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&amp;FP register. The results are rounded.If any of the results overflow, they are saturated. The cumulative saturation bit, FPSR.QC, is set if saturation occurs.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMLSH Sd,Sn,Vm.S[lane]</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">Int32 a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="P:Unity.Burst.Intrinsics.Arm.Neon.IsNeonDotProdSupported">
            <summary>
            Evaluates to true at compile time if Armv8.2 Dot Product intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdot_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>UDOT Vd.2S,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdot_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>SDOT Vd.2S,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdotq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>UDOT Vd.4S,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdotq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>SDOT Vd.4S,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdot_lane_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>UDOT Vd.2S,Vn.8B,Vm.4B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdot_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>SDOT Vd.2S,Vn.8B,Vm.4B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdotq_laneq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>UDOT Vd.4S,Vn.16B,Vm.4B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdotq_laneq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>SDOT Vd.4S,Vn.16B,Vm.4B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdot_laneq_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>UDOT Vd.2S,Vn.8B,Vm.4B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdot_laneq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>SDOT Vd.2S,Vn.8B,Vm.4B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdotq_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Dot Product unsigned arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>UDOT Vd.4S,Vn.16B,Vm.4B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdotq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Dot Product signed arithmetic (vector, by element). This instruction performs the dot product of the four 8-bit elements in each 32-bit element of the first source register with the four 8-bit elements of an indexed 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.In Armv8.2 and Armv8.3, this is an optional instruction. From Armv8.4 it is mandatory for all implementations to support it.ID_AA64ISAR0_EL1.DP indicates whether this instruction is supported.
            <br/>Equivalent instruction: <c>SDOT Vd.4S,Vn.16B,Vm.4B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="P:Unity.Burst.Intrinsics.Arm.Neon.IsNeonSupported">
            <summary>
            Evaluates to true at compile time if Neon intrinsics are supported.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add (vector). This instruction adds corresponding elements in the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADD Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vadd_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&amp;FP registers, writes the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&amp;FP registers, writes the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SADDL instruction extracts each source vector from the lower half of each source register, while the SADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SADDL instruction extracts each source vector from the lower half of each source register, while the SADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.  The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SADDL instruction extracts each source vector from the lower half of each source register, while the SADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UADDL instruction extracts each source vector from the lower half of each source register, while the UADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UADDL instruction extracts each source vector from the lower half of each source register, while the UADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&amp;FP register to the corresponding vector element of the second source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UADDL instruction extracts each source vector from the lower half of each source register, while the UADDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.The SADDW instruction extracts the second source vector from the lower half of the second source register, while the SADDW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDW Vd.8H,Vn.8H,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.The SADDW instruction extracts the second source vector from the lower half of the second source register, while the SADDW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDW Vd.4S,Vn.4S,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Wide. This instruction adds vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the SIMD&amp;FP destination register.The SADDW instruction extracts the second source vector from the lower half of the second source register, while the SADDW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDW Vd.2D,Vn.2D,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.The UADDW instruction extracts vector elements from the lower half of the second source register, while the UADDW2 instruction extracts vector elements from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDW Vd.8H,Vn.8H,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.The UADDW instruction extracts vector elements from the lower half of the second source register, while the UADDW2 instruction extracts vector elements from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDW Vd.4S,Vn.4S,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddw_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&amp;FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.The UADDW instruction extracts vector elements from the lower half of the second source register, while the UADDW2 instruction extracts vector elements from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDW Vd.2D,Vn.2D,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhadd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SRHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhaddq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SRHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhadd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SRHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhaddq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SRHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhadd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SRHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhaddq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SRHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhadd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see URHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhaddq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see URHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhadd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see URHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhaddq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see URHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhadd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see URHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhaddq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see URHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhadd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRHADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhaddq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRHADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhadd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRHADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhaddq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRHADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhadd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRHADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhaddq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRHADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhadd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see UHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URHADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhaddq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see UHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URHADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhadd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see UHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URHADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhaddq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see UHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URHADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhadd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see UHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URHADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrhaddq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&amp;FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see UHADD.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URHADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQADD Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqadd_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqaddq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&amp;FP registers, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQADD Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaddhn_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are truncated. For rounded results, see RADDHN.The ADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the ADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vraddhn_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&amp;FP register to the corresponding vector element in the second source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see ADDHN.The RADDHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RADDHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RADDHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point multiply-add to accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * c[i]) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point multiply-add to accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * c[i]) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Multiply-subtract from accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * c[i]) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Multiply-subtract from accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * c[i]) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfms_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmsq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point fused Multiply-Subtract from accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLS Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract (vector). This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUB Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsub_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register, from the corresponding elements in the vector in the first source SIMD&amp;FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register, from the corresponding elements in the vector in the first source SIMD&amp;FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FSUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.The SSUBL instruction extracts each source vector from the lower half of each source register, while the SSUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.The SSUBL instruction extracts each source vector from the lower half of each source register, while the SSUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.The SSUBL instruction extracts each source vector from the lower half of each source register, while the SSUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.The USUBL instruction extracts each source vector from the lower half of each source register, while the USUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.The USUBL instruction extracts each source vector from the lower half of each source register, while the USUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.The USUBL instruction extracts each source vector from the lower half of each source register, while the USUBL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The SSUBW instruction extracts the second source vector from the lower half of the second source register, while the SSUBW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBW Vd.8H,Vn.8H,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The SSUBW instruction extracts the second source vector from the lower half of the second source register, while the SSUBW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBW Vd.4S,Vn.4S,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The SSUBW instruction extracts the second source vector from the lower half of the second source register, while the SSUBW2 instruction extracts the second source vector from the upper half of the second source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSUBW Vd.2D,Vn.2D,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register.The USUBW instruction extracts vector elements from the lower half of the first source register, while the USUBW2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBW Vd.8H,Vn.8H,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register.The USUBW instruction extracts vector elements from the lower half of the first source register, while the USUBW2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBW Vd.4S,Vn.4S,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubw_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element in the lower or upper half of the first source SIMD&amp;FP register, places the result in a vector, and writes the vector to the SIMD&amp;FP destination register. All the values in this instruction are signed integer values.The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register.The USUBW instruction extracts vector elements from the lower half of the first source register, while the USUBW2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USUBW Vd.2D,Vn.2D,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsub_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHSUB Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsubq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHSUB Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsub_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHSUB Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsubq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHSUB Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsub_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHSUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsubq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&amp;FP register from the corresponding elements in the vector in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHSUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsub_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHSUB Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsubq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHSUB Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsub_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHSUB Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsubq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHSUB Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsub_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHSUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vhsubq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&amp;FP register from the corresponding vector elements in the first source SIMD&amp;FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UHSUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSUB Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsub_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqsubq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&amp;FP register from the corresponding element values of the first source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSUB Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.The results are truncated. For rounded results, see RSUBHN.The SUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.The results are truncated. For rounded results, see RSUBHN.The SUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.The results are truncated. For rounded results, see RSUBHN.The SUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.The results are truncated. For rounded results, see RSUBHN.The SUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.The results are truncated. For rounded results, see RSUBHN.The SUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsubhn_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&amp;FP register from the corresponding vector element in the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.The results are truncated. For rounded results, see RSUBHN.The SUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SUBHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN Vd.8B,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN Vd.4H,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsubhn_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&amp;FP register from the corresponding vector element of the first source SIMD&amp;FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SUBHN.The RSUBHN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSUBHN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSUBHN Vd.2S,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&amp;FP register with the corresponding vector element from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMEQ Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceq_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vceqq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&amp;FP register, with the corresponding floating-point value from the second source SIMD&amp;FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMEQ Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.8B,Vm.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.16B,Vm.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.4H,Vm.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.8H,Vm.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.8B,Vm.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.16B,Vm.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.4H,Vm.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.8H,Vm.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcge_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgeq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.8B,Vm.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.16B,Vm.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.4H,Vm.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.8H,Vm.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than or Equal (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGE Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.8B,Vm.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.16B,Vm.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.4H,Vm.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.8H,Vm.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower or Same (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHS Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcle_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcleq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than or equal to the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGE Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgt_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcgtq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.8B,Vm.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.16B,Vm.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.4H,Vm.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.8H,Vm.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare signed Less than (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first signed integer value is less than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMGT Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.8B,Vm.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.16B,Vm.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.4H,Vm.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.8H,Vm.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare unsigned Lower (vector). This instruction compares each vector element in the first source SIMD&amp;FP register with the corresponding vector element in the second source SIMD&amp;FP register and if the first unsigned integer value is less than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMHI Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclt_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Compare Less than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcltq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Compare Less than (vector). This instruction reads each floating-point value in the first source SIMD&amp;FP register and if the value is less than the corresponding floating-point value in the second source SIMD&amp;FP register sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCMGT Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcage_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcageq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcale_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaleq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&amp;FP register with the absolute value of the corresponding floating-point value in the second source SIMD&amp;FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGE Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcagt_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcagtq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcalt_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Compare Less than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is less than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Vd.2S,Vm.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcaltq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Compare Less than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&amp;FP register with the absolute value of the corresponding vector element in the second source SIMD&amp;FP register and if the first value is less than the second value sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FACGT Vd.4S,Vm.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtst_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtstq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&amp;FP register, performs an AND with the corresponding vector element in the second source SIMD&amp;FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&amp;FP register to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CMTST Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABD Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABD Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABD Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABD Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabd_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABD Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&amp;FP register, from the corresponding floating-point values in the elements of the first source SIMD&amp;FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABD Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABDL instruction writes the vector to the lower half of the destination register and clears the upper half, while the SABDL2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABDL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABDL instruction writes the vector to the lower half of the destination register and clears the upper half, while the SABDL2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABDL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABDL instruction writes the vector to the lower half of the destination register and clears the upper half, while the SABDL2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABDL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABDL instruction extracts each source vector from the lower half of each source register, while the UABDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABDL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABDL instruction extracts each source vector from the lower half of each source register, while the UABDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABDL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabdl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABDL instruction extracts each source vector from the lower half of each source register, while the UABDL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABDL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaba_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABA Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabaq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABA Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaba_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABA Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabaq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABA Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaba_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABA Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabaq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABA Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaba_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABA Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabaq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABA Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaba_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABA Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabaq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABA Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vaba_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABA Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabaq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&amp;FP register from the corresponding elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABA Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABAL instruction extracts each source vector from the lower half of each source register, while the SABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABAL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABAL instruction extracts each source vector from the lower half of each source register, while the SABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABAL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The SABAL instruction extracts each source vector from the lower half of each source register, while the SABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SABAL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABAL instruction extracts each source vector from the lower half of each source register, while the UABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABAL Vd.8H,Vn.8B,Vm.8B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABAL instruction extracts each source vector from the lower half of each source register, while the UABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABAL Vd.4S,Vn.4H,Vm.4H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabal_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&amp;FP register from the corresponding vector elements of the first source SIMD&amp;FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.The UABAL instruction extracts each source vector from the lower half of each source register, while the UABAL2 instruction extracts each source vector from the upper half of each source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UABAL Vd.2D,Vn.2S,Vm.2S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAX Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAX Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAX Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAX Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAX Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAX Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAX Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAX Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAX Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAX Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAX Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAX Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmax_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAX Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmaxq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAX Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMIN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMIN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMIN Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMIN Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMIN Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMIN Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMIN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMIN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMIN Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMIN Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMIN Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&amp;FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMIN Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmin_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMIN Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vminq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&amp;FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMIN Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see SRSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a truncating right shift. For a rounding shift, see URSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift. For a truncating shift, see SSHL.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshl_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshlq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. If the shift value is negative, it is a rounding right shift.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&amp;FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see SQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.8H,Vn.8H,Vm.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshl_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshlq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&amp;FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.If the shift value is positive, the operation is a left shift. Otherwise, it is a right shift. The results are rounded. For truncated results, see UQSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHL Vd.2D,Vn.2D,Vm.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHR Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshr_n_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrq_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHR Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshl_n_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshlq_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHL Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSHR Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshr_n_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrq_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSHR Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSRA Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsra_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsraq_n_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USRA Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRSRA Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsra_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsraq_n_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSRA Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, shifts each result by an immediate value, places the final result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHL Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshl_n_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlq_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Left (immediate). This instruction takes each vector element in the source SIMD&amp;FP register, shifts it by an immediate value, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHL Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlu_n_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshluq_n_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlu_n_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshluq_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlu_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshluq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshlu_n_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshluq_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see UQRSHL.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHLU Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshrn_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrun_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrun_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrun_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are truncated. For rounded results, see SQRSHRUN.The SQSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRUN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrun_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrun_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrun_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&amp;FP register. The results are rounded. For truncated results, see SQSHRUN.The SQRSHRUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRUN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.The SQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQSHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqshrn_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.The UQSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQSHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrshrn_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&amp;FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.The RSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the RSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>RSHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_n_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_n_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.The SQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRSHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_n_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN Vd.8B,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_n_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN Vd.4H,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrshrn_n_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.The UQRSHRN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQRSHRN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQRSHRN Vd.2S,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_n_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL Vd.8H,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_n_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL Vd.4S,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL Vd.2D,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_n_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL Vd.8H,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_n_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL Vd.4S,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vshll_n_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL Vd.2D,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsri_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsriq_n_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SRI Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.8B,Vn.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.16B,Vn.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.4H,Vn.4H,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.8H,Vn.8H,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsli_n_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Dd,Dn,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsliq_n_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&amp;FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&amp;FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SLI Vd.2D,Vn.2D,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_s32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_s32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_u32_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_u32_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_s32_f32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_s32_f32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZS Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_u32_f32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_u32_f32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FCVTZU Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_f32_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_f32_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_f32_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_f32_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_f32_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_f32_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SCVTF Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvt_n_f32_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Vd.2S,Vn.2S,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcvtq_n_f32_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&amp;FP destination register.A floating-point exception can be generated by this instruction. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the Security state and Exception level in which the instruction is executed, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UCVTF Vd.4S,Vn.4S,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.The XTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the XTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN Vd.8B,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.The XTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the XTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN Vd.4H,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.The XTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the XTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.The XTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the XTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN Vd.8B,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.The XTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the XTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN Vd.4H,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.The XTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the XTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_high_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN2 Vd.16B,Vn.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_high_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN2 Vd.8H,Vn.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_high_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_high_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN2 Vd.16B,Vn.8H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_high_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN2 Vd.8H,Vn.4S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovn_high_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>XTN2 Vd.4S,Vn.2D</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL Vd.8H,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL Vd.4S,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&amp;FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.The SSHLL instruction extracts vector elements from the lower half of the source register, while the SSHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SSHLL Vd.2D,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL Vd.8H,Vn.8B,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL Vd.4S,Vn.4H,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmovl_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&amp;FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.The USHLL instruction extracts vector elements from the lower half of the source register, while the USHLL2 instruction extracts vector elements from the upper half of the source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>USHLL Vd.2D,Vn.2S,#0</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN Vd.8B,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN Vd.4H,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN Vd.8B,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN Vd.4H,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovn_u64(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&amp;FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The UQXTN instruction writes the vector to the lower half of the destination register and clears the upper half, while the UQXTN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UQXTN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovun_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN Vd.8B,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovun_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN Vd.4H,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqmovun_s64(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&amp;FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&amp;FP register. The destination vector elements are half as long as the source vector elements.If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQXTUN instruction writes the vector to the lower half of the destination register and clears the upper half, while the SQXTUN2 instruction writes the vector to the upper half of the destination register without affecting the other bits of the register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQXTUN Vd.2S,Vn.2D</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_lane_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_lane_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_lane_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_lane_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * v[lane]) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_lane_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_lane_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_lane_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-subtract from accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_lane_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-subtract from accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * v[lane]) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <param name="a3">Lane index to a2. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_n_s16(Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_n_s16(Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_n_u16(Unity.Burst.Intrinsics.v64,System.UInt16)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_n_u16(Unity.Burst.Intrinsics.v128,System.UInt16)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_n_u32(Unity.Burst.Intrinsics.v64,System.UInt32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_n_u32(Unity.Burst.Intrinsics.v128,System.UInt32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_n_f32(Unity.Burst.Intrinsics.v64,System.Single)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Single a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_n_f32(Unity.Burst.Intrinsics.v128,System.Single)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Single a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_lane_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_lane_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_lane_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_lane_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MUL Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmul_lane_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmulq_lane_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Floating-point Multiply (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMUL Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_n_s16(Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_n_u16(Unity.Burst.Intrinsics.v64,System.UInt16)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">UInt16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_n_u32(Unity.Burst.Intrinsics.v64,System.UInt32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">UInt32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMULL instruction extracts vector elements from the lower half of the first source register, while the SMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMULL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_lane_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmull_lane_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Multiply Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, places the results in a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMULL instruction extracts vector elements from the lower half of the first source register, while the UMULL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMULL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_n_s16(Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.4S,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmull_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMULL instruction extracts the first source vector from the lower half of the first source register, while the SQDMULL2 instruction extracts the first source vector from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULL Vd.2D,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_n_s16(Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_n_s16(Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulh_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmulhq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are truncated. For rounded results, see SQRDMULH.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMULH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_n_s16(Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_n_s16(Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int16 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_n_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_n_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Int32 a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_lane_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4H,Vn.4H,Vm.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_lane_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.8H,Vn.8H,Vm.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulh_lane_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.2S,Vn.2S,Vm.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqrdmulhq_lane_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Rounding Doubling Multiply returning High half (by element). This instruction multiplies each vector element in the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&amp;FP register.The results are rounded. For truncated results, see SQDMULH.If any of the results overflows, they are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQRDMULH Vd.4S,Vn.4S,Vm.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.UInt16)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt16)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.UInt32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt32)">
            <summary>Multiply-Add to accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLA Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmla_n_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Single)">
            <summary>Multiply-Add to accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * c) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlaq_n_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Single)">
            <summary>Multiply-Add to accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] + (b[i] * c) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element in the second source SIMD&amp;FP register, and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.The SMLAL instruction extracts vector elements from the lower half of the first source register, while the SMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLAL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.UInt16)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlal_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.UInt32)">
            <summary>Unsigned Multiply-Add Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLAL instruction extracts vector elements from the lower half of the first source register, while the UMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLAL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlal_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Add Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLAL instruction extracts vector elements from the lower half of the first source register, while the SQDMLAL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLAL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_n_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int16)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_n_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_n_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.UInt16)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4H,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt16)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.8H,Vn.8H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_n_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.UInt32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.UInt32)">
            <summary>Multiply-Subtract from accumulator (vector, by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and subtracts the results from the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MLS Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmls_n_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Single)">
            <summary>Multiply-subtract from accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * c) for i = 0 to 1</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsq_n_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Single)">
            <summary>Multiply-subtract from accumulator
            <br/>Equivalent instruction: <c>RESULT[I] = a[i] - (b[i] * c) for i = 0 to 3</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The SMLSL instruction extracts vector elements from the lower half of the first source register, while the SMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMLSL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_n_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.UInt16)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmlsl_n_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.UInt32)">
            <summary>Unsigned Multiply-Subtract Long (vector, by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register and subtracts the results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied.The UMLSL instruction extracts vector elements from the lower half of the first source register, while the UMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMLSL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">UInt32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_n_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int16)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.4S,Vn.4H,Vm.H[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int16 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqdmlsl_n_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed saturating Doubling Multiply-Subtract Long (by element). This instruction multiplies each vector element in the lower or upper half of the first source SIMD&amp;FP register by the specified vector element of the second source SIMD&amp;FP register, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.The SQDMLSL instruction extracts vector elements from the lower half of the first source register, while the SQDMLSL2 instruction extracts vector elements from the upper half of the first source register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQDMLSL Vd.2D,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabs_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabs_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabs_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ABS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabs_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vabsq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FABS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabs_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabs_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabs_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqabsq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&amp;FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQABS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vneg_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vneg_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vneg_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Negate (vector). This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>NEG Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vneg_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FNEG Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vnegq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&amp;FP register, writes the result to a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FNEG Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqneg_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqneg_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqneg_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vqnegq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed saturating Negate. This instruction reads each vector element from the source SIMD&amp;FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are signed integer values.If overflow occurs with any of the results, those results are saturated. If saturation occurs, the cumulative saturation bit FPSR.QC is set.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SQNEG Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcls_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLS Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclsq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLS Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcls_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLS Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclsq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLS Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcls_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLS Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclsq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The count does not include the most significant bit itself.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLS Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclz_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclzq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclz_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclzq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclz_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclzq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclz_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclzq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclz_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclzq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclz_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vclzq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CLZ Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcnt_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CNT Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcntq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CNT Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcnt_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CNT Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vcntq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>CNT Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpe_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Reciprocal Estimate. This instruction reads each vector element from the source SIMD&amp;FP register, calculates an approximate inverse for the unsigned integer value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URECPE Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpeq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Reciprocal Estimate. This instruction reads each vector element from the source SIMD&amp;FP register, calculates an approximate inverse for the unsigned integer value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URECPE Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpe_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPE Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpeq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPE Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecps_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPS Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrecpsq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRECPS Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrte_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Reciprocal Square Root Estimate. This instruction reads each vector element from the source SIMD&amp;FP register, calculates an approximate inverse square root for each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSQRTE Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrteq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Reciprocal Square Root Estimate. This instruction reads each vector element from the source SIMD&amp;FP register, calculates an approximate inverse square root for each value, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. All the values in this instruction are unsigned integer values.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>URSQRTE Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrte_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTE Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrteq_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&amp;FP register, places the result in a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTE Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrts_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTS Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrsqrtsq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&amp;FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR, or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FRSQRTS Vd.4S,Vn.4S,Vm.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvn_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvnq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvn_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvnq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvn_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvnq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvn_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvnq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvn_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvnq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvn_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vmvnq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&amp;FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MVN Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Dd,Dn,Dm</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vand_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vandq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>AND Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorr_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorrq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise OR between each result and an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veor_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.veorq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&amp;FP registers, and places the result in the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EOR Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbic_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbicq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise bit Clear (vector, immediate). This instruction reads each vector element from the destination SIMD&amp;FP register, performs a bitwise AND between each result and the complement of an immediate constant, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BIC Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vorn_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vornq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&amp;FP registers, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ORN Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbsl_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vbslq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>BSL Vd.16B,Vn.16B,Vm.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">128-bit vector a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8B,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.16B,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4H,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.8H,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Dd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2D,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdup_lane_f32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.2S,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vdupq_lane_f32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Vd.4S,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Add Pair of elements (scalar). This instruction adds two vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>ADDP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadd_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Add Pair of elements (scalar). This instruction adds two floating-point vector elements in the source SIMD&amp;FP register and writes the scalar result into the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FADDP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddl_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.4H,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddlq_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.8H,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddl_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.2S,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddlq_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.4S,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddl_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.1D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddlq_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADDLP Vd.2D,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddl_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.4H,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddlq_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.8H,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddl_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.2S,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddlq_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.4S,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddl_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.1D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpaddlq_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register, places the result into a vector, and writes the vector to the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADDLP Vd.2D,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadal_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADALP Vd.4H,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadalq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADALP Vd.8H,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadal_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADALP Vd.2S,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadalq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADALP Vd.4S,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadal_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADALP Vd.1D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadalq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&amp;FP register and accumulates the results into the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SADALP Vd.2D,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadal_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADALP Vd.4H,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadalq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADALP Vd.8H,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadal_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADALP Vd.2S,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadalq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADALP Vd.4S,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadal_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADALP Vd.1D,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpadalq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&amp;FP register and accumulates the results with the vector elements of the destination SIMD&amp;FP register. The destination vector elements are twice as long as the source vector elements.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UADALP Vd.2D,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMAXP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMAXP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmax_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Maximum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the largest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMAXP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMINP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP Vd.8B,Vn.8B,Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP Vd.4H,Vn.4H,Vm.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&amp;FP register after the vector elements of the second source SIMD&amp;FP register, reads each pair of adjacent vector elements in the two source SIMD&amp;FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMINP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vpmin_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Floating-point Minimum of Pair of elements (scalar). This instruction compares two vector elements in the source SIMD&amp;FP register and writes the smallest of the floating-point values as a scalar to the destination SIMD&amp;FP register.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMINP Vd.2S,Vn.2S,Vm.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_s8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_s16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;1)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_s16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;1)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_s32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;2)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_s32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;2)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_s64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;3)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_s64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;3)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#n</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_u8(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#n</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_u16(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;1)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_u16(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;1)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_u32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;2)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_u32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;2)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_u64(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;3)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_u64(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;3)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vext_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.8B,Vn.8B,Vm.8B,#(n&lt;&lt;2)</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vextq_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&amp;FP register and the highest vector elements from the first source SIMD&amp;FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&amp;FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>EXT Vd.16B,Vn.16B,Vm.16B,#(n&lt;&lt;2)</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Int32 a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_s32(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_s32(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_u32(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_u32(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64_f32(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.2S,Vn.2S</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev64q_f32(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV64 Vd.4S,Vn.4S</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32q_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32_s16(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32q_s16(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32q_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32_u16(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.4H,Vn.4H</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev32q_u16(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV32 Vd.8H,Vn.8H</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev16_s8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV16 Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev16q_s8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV16 Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev16_u8(Unity.Burst.Intrinsics.v64)">
            <summary>Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV16 Vd.8B,Vn.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vrev16q_u8(Unity.Burst.Intrinsics.v128)">
            <summary>Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&amp;FP register, places the results into a vector, and writes the vector to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>REV16 Vd.16B,Vn.16B</c></summary>
            <param name="a0">128-bit vector a0</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtbl1_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBL Vd.8B,{Vn.16B},Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtbl1_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&amp;FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&amp;FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&amp;FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>TBL Vd.8B,{Vn.16B},Vm.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtbx1_s8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Insert if False. This instruction inserts each bit from the first source SIMD&amp;FP register into the destination SIMD&amp;FP register if the corresponding bit of the second source SIMD&amp;FP register is 0, otherwise leaves the bit in the destination register unchanged.
            <br/>Equivalent instructions:
            <br/><c>MOVI Vtmp.8B,#8</c>
            <br/><c>CMHS Vtmp.8B,Vm.8B,Vtmp.8B</c>
            <br/><c>TBL Vtmp1.8B,{Vn.16B},Vm.8B</c>
            <br/><c>BIF Vd.8B,Vtmp1.8B,Vtmp.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vtbx1_u8(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>Bitwise Insert if False. This instruction inserts each bit from the first source SIMD&amp;FP register into the destination SIMD&amp;FP register if the corresponding bit of the second source SIMD&amp;FP register is 0, otherwise leaves the bit in the destination register unchanged.
            <br/>Equivalent instructions:
            <br/><c>MOVI Vtmp.8B,#8</c>
            <br/><c>CMHS Vtmp.8B,Vm.8B,Vtmp.8B</c>
            <br/><c>TBL Vtmp1.8B,{Vn.16B},Vm.8B</c>
            <br/><c>BIF Vd.8B,Vtmp1.8B,Vtmp.8B</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">64-bit vector a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_u8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_u16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_u32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_u64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_s8(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMOV Rd,Vn.B[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_s16(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMOV Rd,Vn.H[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_s32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMOV Rd,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_s64(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.D[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..0]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vget_lane_f32(Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_u8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_u16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>UInt16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_u32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>UInt32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_u64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_s8(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMOV Rd,Vn.B[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..15]</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_s16(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMOV Rd,Vn.H[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..7]</param>
            <returns>Int16</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_s32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&amp;FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>SMOV Rd,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_s64(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&amp;FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>UMOV Rd,Vn.D[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..1]</param>
            <returns>Int64</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vgetq_lane_f32(Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&amp;FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&amp;FP register.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>DUP Sd,Vn.S[lane]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">Lane index to a0. Must be an immediate in the range of [0..3]</param>
            <returns>Single</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_u8(System.Byte,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.B[lane],Rn</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_u16(System.UInt16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.H[lane],Rn</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_u32(System.UInt32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.S[lane],Rn</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_u64(System.UInt64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.D[lane],Rn</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_s8(System.SByte,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.B[lane],Rn</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_s16(System.Int16,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.H[lane],Rn</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_s32(System.Int32,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.S[lane],Rn</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_s64(System.Int64,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.D[lane],Rn</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..0]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vset_lane_f32(System.Single,Unity.Burst.Intrinsics.v64,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.S[lane],Rn</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_u8(System.Byte,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.B[lane],Rn</c></summary>
            <param name="a0">Byte a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..15]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_u16(System.UInt16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.H[lane],Rn</c></summary>
            <param name="a0">UInt16 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_u32(System.UInt32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.S[lane],Rn</c></summary>
            <param name="a0">UInt32 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_u64(System.UInt64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.D[lane],Rn</c></summary>
            <param name="a0">UInt64 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_s8(System.SByte,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.B[lane],Rn</c></summary>
            <param name="a0">SByte a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..15]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_s16(System.Int16,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.H[lane],Rn</c></summary>
            <param name="a0">Int16 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..7]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_s32(System.Int32,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.S[lane],Rn</c></summary>
            <param name="a0">Int32 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_s64(System.Int64,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.D[lane],Rn</c></summary>
            <param name="a0">Int64 a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..1]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vsetq_lane_f32(System.Single,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&amp;FP register to the specified vector element of the destination SIMD&amp;FP register.This instruction can insert data into individual elements within a SIMD&amp;FP register without clearing the remaining bits to zero.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>MOV Vd.S[lane],Rn</c></summary>
            <param name="a0">Single a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Lane index to a1. Must be an immediate in the range of [0..3]</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfma_n_f32(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64,System.Single)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.2S,Vn.2S,Vm.S[0]</c></summary>
            <param name="a0">64-bit vector a0</param>
            <param name="a1">64-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>64-bit vector</returns>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Arm.Neon.vfmaq_n_f32(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128,System.Single)">
            <summary>Floating-point fused Multiply-Add to accumulator (by element). This instruction multiplies the vector elements in the first source SIMD&amp;FP register by the specified value in the second source SIMD&amp;FP register, and accumulates the results in the vector elements of the destination SIMD&amp;FP register. All the values in this instruction are floating-point values.This instruction can generate a floating-point exception. Depending on the settings in FPCR, the exception results in either a flag being set in FPSR or a synchronous exception being generated. For more information, see Floating-point exception traps.Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.
            <br/>Equivalent instruction: <c>FMLA Vd.4S,Vn.4S,Vm.S[0]</c></summary>
            <param name="a0">128-bit vector a0</param>
            <param name="a1">128-bit vector a1</param>
            <param name="a2">Single a2</param>
            <returns>128-bit vector</returns>
        </member>
        <member name="T:Unity.Burst.Intrinsics.v64">
            <summary>
            Represents a 64-bit SIMD value (Arm only)
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte0">
            <summary>
            Get the 0th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte1">
            <summary>
            Get the 1st Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte2">
            <summary>
            Get the 2nd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte3">
            <summary>
            Get the 3rd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte4">
            <summary>
            Get the 4th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte5">
            <summary>
            Get the 5th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte6">
            <summary>
            Get the 6th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Byte7">
            <summary>
            Get the 7th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte0">
            <summary>
            Get the 0th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte1">
            <summary>
            Get the 1st SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte2">
            <summary>
            Get the 2nd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte3">
            <summary>
            Get the 3rd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte4">
            <summary>
            Get the 4th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte5">
            <summary>
            Get the 5th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte6">
            <summary>
            Get the 6th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SByte7">
            <summary>
            Get the 7th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.UShort0">
            <summary>
            Get the 0th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.UShort1">
            <summary>
            Get the 1st UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.UShort2">
            <summary>
            Get the 2nd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.UShort3">
            <summary>
            Get the 3rd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SShort0">
            <summary>
            Get the 0th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SShort1">
            <summary>
            Get the 1st SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SShort2">
            <summary>
            Get the 2nd SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SShort3">
            <summary>
            Get the 3rd SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.UInt0">
            <summary>
            Get the 0th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.UInt1">
            <summary>
            Get the 1st UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SInt0">
            <summary>
            Get the 0th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SInt1">
            <summary>
            Get the 1st SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.ULong0">
            <summary>
            Get the 0th ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.SLong0">
            <summary>
            Get the 0th SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Float0">
            <summary>
            Get the 0th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Float1">
            <summary>
            Get the 1st Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v64.Double0">
            <summary>
            Get the 0th Double of the vector
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Byte)">
            <summary>
            Splat a single byte across the v64
            </summary>
            <param name="b">Splatted byte</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the v64 with 8 bytes
            </summary>
            <param name="a">byte a</param>
            <param name="b">byte b</param>
            <param name="c">byte c</param>
            <param name="d">byte d</param>
            <param name="e">byte e</param>
            <param name="f">byte f</param>
            <param name="g">byte g</param>
            <param name="h">byte h</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.SByte)">
            <summary>
            Splat a single sbyte across the v64
            </summary>
            <param name="b">Splatted sbyte</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Initialize the v64 with 8 sbytes
            </summary>
            <param name="a">sbyte a</param>
            <param name="b">sbyte b</param>
            <param name="c">sbyte c</param>
            <param name="d">sbyte d</param>
            <param name="e">sbyte e</param>
            <param name="f">sbyte f</param>
            <param name="g">sbyte g</param>
            <param name="h">sbyte h</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Int16)">
            <summary>
            Splat a single short across the v64
            </summary>
            <param name="v">Splatted short</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize the v64 with 4 shorts
            </summary>
            <param name="a">short a</param>
            <param name="b">short b</param>
            <param name="c">short c</param>
            <param name="d">short d</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.UInt16)">
            <summary>
            Splat a single ushort across the v64
            </summary>
            <param name="v">Splatted ushort</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize the v64 with 4 ushorts
            </summary>
            <param name="a">ushort a</param>
            <param name="b">ushort b</param>
            <param name="c">ushort c</param>
            <param name="d">ushort d</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Int32)">
            <summary>
            Splat a single int across the v64
            </summary>
            <param name="v">Splatted int</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the v64 with 2 ints
            </summary>
            <param name="a">int a</param>
            <param name="b">int b</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.UInt32)">
            <summary>
            Splat a single uint across the v64
            </summary>
            <param name="v">Splatted uint</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initialize the v64 with 2 uints
            </summary>
            <param name="a">uint a</param>
            <param name="b">uint b</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Single)">
            <summary>
            Splat a single float across the v64
            </summary>
            <param name="f">Splatted float</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Single,System.Single)">
            <summary>
            Initialize the v64 with 2 floats
            </summary>
            <param name="a">float a</param>
            <param name="b">float b</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Double)">
            <summary>
            Initialize the v64 with a double
            </summary>
            <param name="a">Splatted double</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.Int64)">
            <summary>
            Initialize the v64 with a long
            </summary>
            <param name="a">long a</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v64.#ctor(System.UInt64)">
            <summary>
            Initialize the v64 with a ulong
            </summary>
            <param name="a">ulong a</param>
        </member>
        <member name="T:Unity.Burst.Intrinsics.v128">
            <summary>
            Represents a 128-bit SIMD value
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte0">
            <summary>
            Get the 0th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte1">
            <summary>
            Get the 1st Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte2">
            <summary>
            Get the 2nd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte3">
            <summary>
            Get the 3rd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte4">
            <summary>
            Get the 4th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte5">
            <summary>
            Get the 5th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte6">
            <summary>
            Get the 6th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte7">
            <summary>
            Get the 7th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte8">
            <summary>
            Get the 8th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte9">
            <summary>
            Get the 9th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte10">
            <summary>
            Get the 10th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte11">
            <summary>
            Get the 11th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte12">
            <summary>
            Get the 12 Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte13">
            <summary>
            Get the 13th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte14">
            <summary>
            Get the 14th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Byte15">
            <summary>
            Get the 15th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte0">
            <summary>
            Get the 0th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte1">
            <summary>
            Get the 1st SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte2">
            <summary>
            Get the 2nd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte3">
            <summary>
            Get the 3rd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte4">
            <summary>
            Get the 4th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte5">
            <summary>
            Get the 5th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte6">
            <summary>
            Get the 6th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte7">
            <summary>
            Get the 7th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte8">
            <summary>
            Get the 8th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte9">
            <summary>
            Get the 9th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte10">
            <summary>
            Get the 10th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte11">
            <summary>
            Get the 11th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte12">
            <summary>
            Get the 12th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte13">
            <summary>
            Get the 13th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte14">
            <summary>
            Get the 14th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SByte15">
            <summary>
            Get the 15th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort0">
            <summary>
            Get the 0th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort1">
            <summary>
            Get the 1st UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort2">
            <summary>
            Get the 2nd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort3">
            <summary>
            Get the 3rd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort4">
            <summary>
            Get the 4th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort5">
            <summary>
            Get the 5th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort6">
            <summary>
            Get the 6th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UShort7">
            <summary>
            Get the 7th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort0">
            <summary>
            Get the 0th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort1">
            <summary>
            Get the 1st UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort2">
            <summary>
            Get the 2nd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort3">
            <summary>
            Get the 3rd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort4">
            <summary>
            Get the 4th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort5">
            <summary>
            Get the 5th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort6">
            <summary>
            Get the 6th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SShort7">
            <summary>
            Get the 7th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UInt0">
            <summary>
            Get the 0th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UInt1">
            <summary>
            Get the 1st UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UInt2">
            <summary>
            Get the 2nd UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.UInt3">
            <summary>
            Get the 3rd UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SInt0">
            <summary>
            Get the 0th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SInt1">
            <summary>
            Get the 1st SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SInt2">
            <summary>
            Get the 2nd SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SInt3">
            <summary>
            Get the 3rd SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.ULong0">
            <summary>
            Get the 0th ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.ULong1">
            <summary>
            Get the 1st ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SLong0">
            <summary>
            Get the 0th SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.SLong1">
            <summary>
            Get the 1st SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Float0">
            <summary>
            Get the 0th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Float1">
            <summary>
            Get the 1st Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Float2">
            <summary>
            Get the 2nd Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Float3">
            <summary>
            Get the 3rd Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Double0">
            <summary>
            Get the 0th Double of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Double1">
            <summary>
            Get the 1st Double of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Lo64">
            <summary>
            Get the low half of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v128.Hi64">
            <summary>
            Get the high half of the vector
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Byte)">
            <summary>
            Splat a single byte across the v128
            </summary>
            <param name="b">Splatted byte.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the v128 with 16 bytes
            </summary>
            <param name="a">byte a.</param>
            <param name="b">byte b.</param>
            <param name="c">byte c.</param>
            <param name="d">byte d.</param>
            <param name="e">byte e.</param>
            <param name="f">byte f.</param>
            <param name="g">byte g.</param>
            <param name="h">byte h.</param>
            <param name="i">byte i.</param>
            <param name="j">byte j.</param>
            <param name="k">byte k.</param>
            <param name="l">byte l.</param>
            <param name="m">byte m.</param>
            <param name="n">byte n.</param>
            <param name="o">byte o.</param>
            <param name="p">byte p.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.SByte)">
            <summary>
            Splat a single sbyte across the v128
            </summary>
            <param name="b">Splatted sbyte.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Initialize the v128 with 16 sbytes
            </summary>
            <param name="a">sbyte a.</param>
            <param name="b">sbyte b.</param>
            <param name="c">sbyte c.</param>
            <param name="d">sbyte d.</param>
            <param name="e">sbyte e.</param>
            <param name="f">sbyte f.</param>
            <param name="g">sbyte g.</param>
            <param name="h">sbyte h.</param>
            <param name="i">sbyte i.</param>
            <param name="j">sbyte j.</param>
            <param name="k">sbyte k.</param>
            <param name="l">sbyte l.</param>
            <param name="m">sbyte m.</param>
            <param name="n">sbyte n.</param>
            <param name="o">sbyte o.</param>
            <param name="p">sbyte p.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Int16)">
            <summary>
            Splat a single short across the v128
            </summary>
            <param name="v">Splatted short.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize the v128 with 8 shorts
            </summary>
            <param name="a">short a.</param>
            <param name="b">short b.</param>
            <param name="c">short c.</param>
            <param name="d">short d.</param>
            <param name="e">short e.</param>
            <param name="f">short f.</param>
            <param name="g">short g.</param>
            <param name="h">short h.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.UInt16)">
            <summary>
            Splat a single ushort across the v128
            </summary>
            <param name="v">Splatted ushort.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize the v128 with 8 ushorts
            </summary>
            <param name="a">ushort a.</param>
            <param name="b">ushort b.</param>
            <param name="c">ushort c.</param>
            <param name="d">ushort d.</param>
            <param name="e">ushort e.</param>
            <param name="f">ushort f.</param>
            <param name="g">ushort g.</param>
            <param name="h">ushort h.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Int32)">
            <summary>
            Splat a single int across the v128
            </summary>
            <param name="v">Splatted int.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize the v128 with 4 ints
            </summary>
            <param name="a">int a.</param>
            <param name="b">int b.</param>
            <param name="c">int c.</param>
            <param name="d">int d.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.UInt32)">
            <summary>
            Splat a single uint across the v128
            </summary>
            <param name="v">Splatted uint.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initialize the v128 with 4 uints
            </summary>
            <param name="a">uint a.</param>
            <param name="b">uint b.</param>
            <param name="c">uint c.</param>
            <param name="d">uint d.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Single)">
            <summary>
            Splat a single float across the v128
            </summary>
            <param name="f">Splatted float.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize the v128 with 4 floats
            </summary>
            <param name="a">float a.</param>
            <param name="b">float b.</param>
            <param name="c">float c.</param>
            <param name="d">float d.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Double)">
            <summary>
            Splat a single double across the v128
            </summary>
            <param name="f">Splatted double.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Double,System.Double)">
            <summary>
            Initialize the v128 with 2 doubles
            </summary>
            <param name="a">double a.</param>
            <param name="b">double b.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Int64)">
            <summary>
            Splat a single long across the v128
            </summary>
            <param name="f">Splatted long.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.Int64,System.Int64)">
            <summary>
            Initialize the v128 with 2 longs
            </summary>
            <param name="a">long a.</param>
            <param name="b">long b.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.UInt64)">
            <summary>
            Splat a single ulong across the v128
            </summary>
            <param name="f">Splatted ulong.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initialize the v128 with 2 ulongs
            </summary>
            <param name="a">ulong a.</param>
            <param name="b">ulong b.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v128.#ctor(Unity.Burst.Intrinsics.v64,Unity.Burst.Intrinsics.v64)">
            <summary>
            Initialize the v128 with 2 v64's
            </summary>
            <param name="lo">Low half of v64.</param>
            <param name="hi">High half of v64.</param>
        </member>
        <member name="T:Unity.Burst.Intrinsics.v256">
            <summary>
            Represents a 256-bit SIMD value
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte0">
            <summary>
            Get the 0th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte1">
            <summary>
            Get the 1st Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte2">
            <summary>
            Get the 2nd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte3">
            <summary>
            Get the 3rd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte4">
            <summary>
            Get the 4th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte5">
            <summary>
            Get the 5th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte6">
            <summary>
            Get the 6th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte7">
            <summary>
            Get the 7th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte8">
            <summary>
            Get the 8th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte9">
            <summary>
            Get the 9th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte10">
            <summary>
            Get the 10th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte11">
            <summary>
            Get the 11th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte12">
            <summary>
            Get the 12 Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte13">
            <summary>
            Get the 13th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte14">
            <summary>
            Get the 14th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte15">
            <summary>
            Get the 15th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte16">
            <summary>
            Get the 16th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte17">
            <summary>
            Get the 17th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte18">
            <summary>
            Get the 18th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte19">
            <summary>
            Get the 19th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte20">
            <summary>
            Get the 20th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte21">
            <summary>
            Get the 21st Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte22">
            <summary>
            Get the 22nd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte23">
            <summary>
            Get the 23rd Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte24">
            <summary>
            Get the 24th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte25">
            <summary>
            Get the 25th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte26">
            <summary>
            Get the 26th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte27">
            <summary>
            Get the 27th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte28">
            <summary>
            Get the 28th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte29">
            <summary>
            Get the 29th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte30">
            <summary>
            Get the 30th Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Byte31">
            <summary>
            Get the 31st Byte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte0">
            <summary>
            Get the 0th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte1">
            <summary>
            Get the 1st SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte2">
            <summary>
            Get the 2nd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte3">
            <summary>
            Get the 3rd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte4">
            <summary>
            Get the 4th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte5">
            <summary>
            Get the 5th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte6">
            <summary>
            Get the 6th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte7">
            <summary>
            Get the 7th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte8">
            <summary>
            Get the 8th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte9">
            <summary>
            Get the 9th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte10">
            <summary>
            Get the 10th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte11">
            <summary>
            Get the 11th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte12">
            <summary>
            Get the 12th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte13">
            <summary>
            Get the 13th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte14">
            <summary>
            Get the 14th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte15">
            <summary>
            Get the 15th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte16">
            <summary>
            Get the 16th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte17">
            <summary>
            Get the 17th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte18">
            <summary>
            Get the 18th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte19">
            <summary>
            Get the 19th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte20">
            <summary>
            Get the 20th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte21">
            <summary>
            Get the 21st SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte22">
            <summary>
            Get the 22nd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte23">
            <summary>
            Get the 23rd SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte24">
            <summary>
            Get the 24th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte25">
            <summary>
            Get the 25th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte26">
            <summary>
            Get the 26th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte27">
            <summary>
            Get the 27th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte28">
            <summary>
            Get the 28th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte29">
            <summary>
            Get the 29th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte30">
            <summary>
            Get the 30th SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SByte31">
            <summary>
            Get the 31st SByte of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort0">
            <summary>
            Get the 0th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort1">
            <summary>
            Get the 1st UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort2">
            <summary>
            Get the 2nd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort3">
            <summary>
            Get the 3rd UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort4">
            <summary>
            Get the 4th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort5">
            <summary>
            Get the 5th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort6">
            <summary>
            Get the 6th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort7">
            <summary>
            Get the 7th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort8">
            <summary>
            Get the 8th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort9">
            <summary>
            Get the 9th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort10">
            <summary>
            Get the 10th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort11">
            <summary>
            Get the 11th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort12">
            <summary>
            Get the 12th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort13">
            <summary>
            Get the 13th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort14">
            <summary>
            Get the 14th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UShort15">
            <summary>
            Get the 15th UShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort0">
            <summary>
            Get the 0th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort1">
            <summary>
            Get the 1st SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort2">
            <summary>
            Get the 2nd SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort3">
            <summary>
            Get the 3rd SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort4">
            <summary>
            Get the 4th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort5">
            <summary>
            Get the 5th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort6">
            <summary>
            Get the 6th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort7">
            <summary>
            Get the 7th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort8">
            <summary>
            Get the 8th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort9">
            <summary>
            Get the 9th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort10">
            <summary>
            Get the 10th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort11">
            <summary>
            Get the 11th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort12">
            <summary>
            Get the 12th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort13">
            <summary>
            Get the 13th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort14">
            <summary>
            Get the 14th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SShort15">
            <summary>
            Get the 15th SShort of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt0">
            <summary>
            Get the 0th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt1">
            <summary>
            Get the 1st UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt2">
            <summary>
            Get the 2nd UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt3">
            <summary>
            Get the 3rd UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt4">
            <summary>
            Get the 4th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt5">
            <summary>
            Get the 5th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt6">
            <summary>
            Get the 6th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.UInt7">
            <summary>
            Get the 7th UInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt0">
            <summary>
            Get the 0th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt1">
            <summary>
            Get the 1st SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt2">
            <summary>
            Get the 2nd SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt3">
            <summary>
            Get the 3rd SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt4">
            <summary>
            Get the 4th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt5">
            <summary>
            Get the 5th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt6">
            <summary>
            Get the 6th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SInt7">
            <summary>
            Get the 7th SInt of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.ULong0">
            <summary>
            Get the 0th ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.ULong1">
            <summary>
            Get the 1st ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.ULong2">
            <summary>
            Get the 2nd ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.ULong3">
            <summary>
            Get the 3rd ULong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SLong0">
            <summary>
            Get the 0th SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SLong1">
            <summary>
            Get the 1st SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SLong2">
            <summary>
            Get the 2nd SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.SLong3">
            <summary>
            Get the 3rd SLong of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float0">
            <summary>
            Get the 0th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float1">
            <summary>
            Get the 1st Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float2">
            <summary>
            Get the 2nd Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float3">
            <summary>
            Get the 3rd Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float4">
            <summary>
            Get the 4th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float5">
            <summary>
            Get the 5th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float6">
            <summary>
            Get the 6th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Float7">
            <summary>
            Get the 7th Float of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Double0">
            <summary>
            Get the 0th Double of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Double1">
            <summary>
            Get the 1st Double of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Double2">
            <summary>
            Get the 2nd Double of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Double3">
            <summary>
            Get the 3rd Double of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Lo128">
            <summary>
            Get the low half of the vector
            </summary>
        </member>
        <member name="F:Unity.Burst.Intrinsics.v256.Hi128">
            <summary>
            Get the high half of the vector
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Byte)">
            <summary>
            Splat a single byte across the v256
            </summary>
            <param name="b">Splatted byte.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the v128 with 32 bytes
            </summary>
            <param name="a">byte a.</param>
            <param name="b">byte b.</param>
            <param name="c">byte c.</param>
            <param name="d">byte d.</param>
            <param name="e">byte e.</param>
            <param name="f">byte f.</param>
            <param name="g">byte g.</param>
            <param name="h">byte h.</param>
            <param name="i">byte i.</param>
            <param name="j">byte j.</param>
            <param name="k">byte k.</param>
            <param name="l">byte l.</param>
            <param name="m">byte m.</param>
            <param name="n">byte n.</param>
            <param name="o">byte o.</param>
            <param name="p">byte p.</param>
            <param name="q">byte q.</param>
            <param name="r">byte r.</param>
            <param name="s">byte s.</param>
            <param name="t">byte t.</param>
            <param name="u">byte u.</param>
            <param name="v">byte v.</param>
            <param name="w">byte w.</param>
            <param name="x">byte x.</param>
            <param name="y">byte y.</param>
            <param name="z">byte z.</param>
            <param name="A">byte A.</param>
            <param name="B">byte B.</param>
            <param name="C">byte C.</param>
            <param name="D">byte D.</param>
            <param name="E">byte E.</param>
            <param name="F">byte F.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.SByte)">
            <summary>
            Splat a single sbyte across the v256
            </summary>
            <param name="b">Splatted sbyte.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Initialize the v256 with 32 sbytes
            </summary>
            <param name="a">sbyte a.</param>
            <param name="b">sbyte b.</param>
            <param name="c">sbyte c.</param>
            <param name="d">sbyte d.</param>
            <param name="e">sbyte e.</param>
            <param name="f">sbyte f.</param>
            <param name="g">sbyte g.</param>
            <param name="h">sbyte h.</param>
            <param name="i">sbyte i.</param>
            <param name="j">sbyte j.</param>
            <param name="k">sbyte k.</param>
            <param name="l">sbyte l.</param>
            <param name="m">sbyte m.</param>
            <param name="n">sbyte n.</param>
            <param name="o">sbyte o.</param>
            <param name="p">sbyte p.</param>
            <param name="q">sbyte q.</param>
            <param name="r">sbyte r.</param>
            <param name="s">sbyte s.</param>
            <param name="t">sbyte t.</param>
            <param name="u">sbyte u.</param>
            <param name="v">sbyte v.</param>
            <param name="w">sbyte w.</param>
            <param name="x">sbyte x.</param>
            <param name="y">sbyte y.</param>
            <param name="z">sbyte z.</param>
            <param name="A">sbyte A.</param>
            <param name="B">sbyte B.</param>
            <param name="C">sbyte C.</param>
            <param name="D">sbyte D.</param>
            <param name="E">sbyte E.</param>
            <param name="F">sbyte F.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Int16)">
            <summary>
            Splat a single short across the v256
            </summary>
            <param name="v">Splatted short.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize the v256 with 16 shorts
            </summary>
            <param name="a">short a.</param>
            <param name="b">short b.</param>
            <param name="c">short c.</param>
            <param name="d">short d.</param>
            <param name="e">short e.</param>
            <param name="f">short f.</param>
            <param name="g">short g.</param>
            <param name="h">short h.</param>
            <param name="i">short i.</param>
            <param name="j">short j.</param>
            <param name="k">short k.</param>
            <param name="l">short l.</param>
            <param name="m">short m.</param>
            <param name="n">short n.</param>
            <param name="o">short o.</param>
            <param name="p">short p.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.UInt16)">
            <summary>
            Splat a single ushort across the v256
            </summary>
            <param name="v">Splatted ushort.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize the v256 with 16 ushorts
            </summary>
            <param name="a">ushort a.</param>
            <param name="b">ushort b.</param>
            <param name="c">ushort c.</param>
            <param name="d">ushort d.</param>
            <param name="e">ushort e.</param>
            <param name="f">ushort f.</param>
            <param name="g">ushort g.</param>
            <param name="h">ushort h.</param>
            <param name="i">ushort i.</param>
            <param name="j">ushort j.</param>
            <param name="k">ushort k.</param>
            <param name="l">ushort l.</param>
            <param name="m">ushort m.</param>
            <param name="n">ushort n.</param>
            <param name="o">ushort o.</param>
            <param name="p">ushort p.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Int32)">
            <summary>
            Splat a single int across the v256
            </summary>
            <param name="v">Splatted int.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize the v256 with 8 ints
            </summary>
            <param name="a">int a.</param>
            <param name="b">int b.</param>
            <param name="c">int c.</param>
            <param name="d">int d.</param>
            <param name="e">int e.</param>
            <param name="f">int f.</param>
            <param name="g">int g.</param>
            <param name="h">int h.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.UInt32)">
            <summary>
            Splat a single uint across the v256
            </summary>
            <param name="v">Splatted uint.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initialize the v256 with 8 uints
            </summary>
            <param name="a">uint a.</param>
            <param name="b">uint b.</param>
            <param name="c">uint c.</param>
            <param name="d">uint d.</param>
            <param name="e">uint e.</param>
            <param name="f">uint f.</param>
            <param name="g">uint g.</param>
            <param name="h">uint h.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Single)">
            <summary>
            Splat a single float across the v256
            </summary>
            <param name="f">Splatted float.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize the v256 with 8 floats
            </summary>
            <param name="a">float a.</param>
            <param name="b">float b.</param>
            <param name="c">float c.</param>
            <param name="d">float d.</param>
            <param name="e">float e.</param>
            <param name="f">float f.</param>
            <param name="g">float g.</param>
            <param name="h">float h.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Double)">
            <summary>
            Splat a single double across the v256
            </summary>
            <param name="f">Splatted double.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize the v256 with 4 doubles
            </summary>
            <param name="a">double a.</param>
            <param name="b">double b.</param>
            <param name="c">double c.</param>
            <param name="d">double d.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Int64)">
            <summary>
            Splat a single long across the v256
            </summary>
            <param name="f">Splatted long.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initialize the v256 with 4 longs
            </summary>
            <param name="a">long a.</param>
            <param name="b">long b.</param>
            <param name="c">long c.</param>
            <param name="d">long d.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.UInt64)">
            <summary>
            Splat a single ulong across the v256
            </summary>
            <param name="f">Splatted ulong.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Initialize the v256 with 4 ulongs
            </summary>
            <param name="a">ulong a.</param>
            <param name="b">ulong b.</param>
            <param name="c">ulong c.</param>
            <param name="d">ulong d.</param>
        </member>
        <member name="M:Unity.Burst.Intrinsics.v256.#ctor(Unity.Burst.Intrinsics.v128,Unity.Burst.Intrinsics.v128)">
            <summary>
            Initialize the v256 with 2 v128's
            </summary>
            <param name="lo">Low half of v128.</param>
            <param name="hi">High half of v128.</param>
        </member>
        <member name="T:Unity.Burst.Intrinsics.Common">
            <summary>
            Common intrinsics that are exposed across all Burst targets.
            </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Common.Pause">
             <summary>
             Hint that the current thread should pause.
            
             In Burst compiled code this will map to platform specific
             ways to hint that the current thread should be paused as
             it is performing a calculation that would benefit from
             not contending with other threads. Atomic operations in
             tight loops (like spin-locks) can benefit from use of this
             intrinsic.
            
             - On x86 systems this maps to the `pause` instruction.
             - On ARM systems this maps to the `yield` instruction.
            
             Note that this is not an operating system level thread yield,
             it only provides a hint to the CPU that the current thread can
             afford to pause its execution temporarily.
             </summary>
        </member>
        <member name="M:Unity.Burst.Intrinsics.Common.umul128(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
            Return the low half of the multiplication of two numbers, and the high part as an out parameter.
            </summary>
            <param name="x">A value to multiply.</param>
            <param name="y">A value to multiply.</param>
            <param name="high">The high-half of the multiplication result.</param>
            <returns>The low-half of the multiplication result.</returns>
        </member>
        <member name="T:Unity.Burst.Editor.BurstEditorOptions">
            <summary>
            Responsible to synchronize <see cref="F:Unity.Burst.BurstCompiler.Options"/> with the menu
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstEditorOptions._isSynchronized">
            <summary>
            <c>true</c> if the menu options are synchronized with <see cref="F:Unity.Burst.BurstCompiler.Options"/>
            </summary>
        </member>
        <member name="M:Unity.Burst.Editor.BurstReflection.EnsureInitialized">
            <summary>
            This method exists solely to ensure that the static constructor has been called.
            </summary>
        </member>
        <member name="M:Unity.Burst.Editor.BurstReflection.#cctor">
            <summary>
            Collects (and caches) all editor assemblies - transitively.
            </summary>
        </member>
        <member name="M:Unity.Burst.Editor.BurstReflection.CollectGenericTypeInstances(System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.Collections.Generic.List{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Gets the list of concrete generic type instances used in an assembly.
            See remarks
            </summary>
            <param name="assembly">The assembly</param>
            <param name="types"></param>
            <returns>The list of generic type instances</returns>
            <remarks>
            Note that this method fetchs only direct type instances but
            cannot fetch transitive generic type instances.
            </remarks>
        </member>
        <member name="T:Unity.Burst.Editor.BurstLoader">
            <summary>
            Main entry point for initializing the burst compiler service for both JIT and AOT
            </summary>
        </member>
        <member name="P:Unity.Burst.Editor.BurstLoader.RuntimePath">
            <summary>
            Gets the location to the runtime path of burst.
            </summary>
        </member>
        <member name="M:Unity.Burst.Editor.BurstLoader.CheckIsCodegenComplete(System.Boolean@,System.Boolean@)">
             <summary>
             Unity 2020.1 and older Editors did a special domain reload just for IL postprocessing.
             If we detect that we're in that special domain reload, we don't want Burst to do anything.
            
             In Unity 2019.4 and 2020.1, a new API was added - CompilationPipeline.IsCodegenComplete() -
             which helpfully tells us when we're in that special domain reload.
            
             The problem is that older releases of those two editors don't have that API.
             So in older releases we can't be sure whether we're in a normal domain reload,
             or the special IL postprocessing one.
            
             So we have the following rules:
            
             1. When it's possible that it's a normal domain reload, then we enable Burst compilation,
                but not compilation logging - we don't want errors to appear in the console that may be spurious.
            
             2. When we're 100% sure that it's a normal domain reload, then we enable compilation logging.
             </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.IsStaticMethod">
            <summary>
            <c>true</c> if the <see cref="F:Unity.Burst.Editor.BurstCompileTarget.Method"/> is directly tagged with a [BurstCompile] attribute
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.Method">
            <summary>
            The Execute method of the target's producer type.
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.JobType">
            <summary>
            The type of the actual job (i.e. BoidsSimulationJob).
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.JobInterfaceType">
            <summary>
            The interface of the job (IJob, IJobParallelFor...)
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.Options">
            <summary>
            The default compiler options
            </summary>
        </member>
        <member name="P:Unity.Burst.Editor.BurstCompileTarget.HasRequiredBurstCompileAttributes">
            <summary>
            Set to true if burst compilation is actually requested via proper `[BurstCompile]` attribute:
            - On the job if it is a job only
            - On the method and parent class it if is a static method
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.RawDisassembly">
            <summary>
            Generated raw disassembly (IR, IL, ASM...), or null if disassembly failed (only valid for the current TargetCpu)
            </summary>
        </member>
        <member name="F:Unity.Burst.Editor.BurstCompileTarget.FormattedDisassembly">
            <summary>
            Formatted disassembly for the associated <see cref="F:Unity.Burst.Editor.BurstCompileTarget.RawDisassembly"/>, currently only valid for <see cref="F:Unity.Burst.Editor.DisassemblyKind.Asm"/>
            </summary>
        </member>
        <member name="T:Unity.Burst.BurstCompiler">
             <summary>
             The burst compiler runtime frontend.
             </summary>
            
        </member>
        <member name="M:Unity.Burst.BurstCompiler.IsLoadAdditionalLibrarySupported">
            <summary>
            Check if the LoadAdditionalLibrary API is supported by the current version of Unity
            </summary>
            <returns>True if the LoadAdditionalLibrary API can be used by the current version of Unity</returns>
        </member>
        <member name="F:Unity.Burst.BurstCompiler._IsEnabled">
            <summary>
            Internal variable setup by BurstCompilerOptions.
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompiler.IsEnabled">
            <summary>
            Gets a value indicating whether Burst is enabled.
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstCompiler.Options">
            <summary>
            Gets the global options for the burst compiler.
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.SetExecutionMode(Unity.Burst.BurstExecutionEnvironment)">
            <summary>
            Sets the execution mode for all jobs spawned from now on.
            </summary>
            <param name="mode">Specifiy the required execution mode</param>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.GetExecutionMode">
            <summary>
            Retrieve the current execution mode that is configured.
            </summary>
            <returns>Currently configured execution mode</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.CompileDelegate``1(``0)">
            <summary>
            Compile the following delegate with burst and return a new delegate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delegateMethod"></param>
            <returns></returns>
            <remarks>NOT AVAILABLE, unsafe to use</remarks>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.CompileILPPMethod(System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
            <summary>
            DO NOT USE - deprecated.
            </summary>
            <param name="burstMethodHandle">The Burst method to compile.</param>
            <param name="managedMethodHandle">The fallback managed method to use.</param>
            <param name="delegateTypeHandle">The type of the delegate used to execute these methods.</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.CompileILPPMethod2(System.RuntimeMethodHandle)">
            <summary>
            Compile an IL Post-Processed method.
            </summary>
            <param name="burstMethodHandle">The Burst method to compile.</param>
            <returns>A token that must be passed to <see cref="M:Unity.Burst.BurstCompiler.GetILPPMethodFunctionPointer2(System.IntPtr,System.RuntimeMethodHandle,System.RuntimeTypeHandle)"/> to get an actual executable function pointer.</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.GetILPPMethodFunctionPointer(System.IntPtr)">
            <summary>
            DO NOT USE - deprecated.
            </summary>
            <param name="ilppMethod">The result of a previous call to <see cref="M:Unity.Burst.BurstCompiler.CompileILPPMethod(System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeTypeHandle)"/>.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.GetILPPMethodFunctionPointer2(System.IntPtr,System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
            <summary>
            For a previous call to <see cref="M:Unity.Burst.BurstCompiler.CompileILPPMethod2(System.RuntimeMethodHandle)"/>, get the actual executable function pointer.
            </summary>
            <param name="ilppMethod">The result of a previous call to <see cref="M:Unity.Burst.BurstCompiler.CompileILPPMethod(System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeTypeHandle)"/>.</param>
            <param name="managedMethodHandle">The fallback managed method to use.</param>
            <param name="delegateTypeHandle">The type of the delegate used to execute these methods.</param>
            <returns>A pointer into an executable region, for running the function pointer.</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.CompileUnsafeStaticMethod(System.RuntimeMethodHandle)">
            <summary>
            DO NOT USE - deprecated.
            </summary>
            <param name="handle">A runtime method handle.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.CompileFunctionPointer``1(``0)">
            <summary>
            Compile the following delegate into a function pointer with burst, invokable from a Burst Job or from regular C#.
            </summary>
            <typeparam name="T">Type of the delegate of the function pointer</typeparam>
            <param name="delegateMethod">The delegate to compile</param>
            <returns>A function pointer invokable from a Burst Job or from regular C#</returns>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.Shutdown">
            <summary>
            Lets the compiler service know we are shutting down, called by the event on OnDomainUnload, if EditorApplication.quitting was called
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.Cancel">
            <summary>
            Cancel any compilation being processed by the JIT Compiler in the background.
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.IsCurrentCompilationDone">
            <summary>
            Check if there is any job pending related to the last compilation ID.
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompiler.DummyMethod">
            <summary>
            Dummy empty method for being able to send a command to the compiler
            </summary>
        </member>
        <member name="T:Unity.Burst.BurstCompiler.FakeDelegate">
            <summary>
            Fake delegate class to make BurstCompilerService.CompileAsyncDelegateMethod happy
            so that it can access the underlying static method via the property get_Method.
            So this class is not a delegate.
            </summary>
        </member>
        <member name="T:Unity.Burst.IFunctionPointer">
            <summary>
            Base interface for a function pointer.
            </summary>
        </member>
        <member name="M:Unity.Burst.IFunctionPointer.FromIntPtr(System.IntPtr)">
            <summary>
            Converts a pointer to a function pointer.
            </summary>
            <param name="ptr">The native pointer.</param>
            <returns>An instance of this interface.</returns>
        </member>
        <member name="T:Unity.Burst.FunctionPointer`1">
            <summary>
            A function pointer that can be used from a Burst Job or from regular C#.
            It needs to be compiled through <see cref="M:Unity.Burst.BurstCompiler.CompileFunctionPointer``1(``0)"/>
            </summary>
            <typeparam name="T">Type of the delegate of this function pointer</typeparam>
        </member>
        <member name="M:Unity.Burst.FunctionPointer`1.#ctor(System.IntPtr)">
            <summary>
            Creates a new instance of this function pointer with the following native pointer.
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:Unity.Burst.FunctionPointer`1.Value">
            <summary>
            Gets the underlying pointer.
            </summary>
        </member>
        <member name="P:Unity.Burst.FunctionPointer`1.Invoke">
            <summary>
            Gets the delegate associated to this function pointer in order to call the function pointer.
            This delegate can be called from a Burst Job or from regular C#.
            If calling from regular C#, it is recommended to cache the returned delegate of this property
            instead of using this property every time you need to call the delegate.
            </summary>
        </member>
        <member name="P:Unity.Burst.FunctionPointer`1.IsCreated">
            <summary>
            Whether the function pointer is valid.
            </summary>
        </member>
        <member name="M:Unity.Burst.FunctionPointer`1.Unity#Burst#IFunctionPointer#FromIntPtr(System.IntPtr)">
            <summary>
            Converts a pointer to a function pointer.
            </summary>
            <param name="ptr">The native pointer.</param>
            <returns>An instance of this interface.</returns>
        </member>
        <member name="T:Unity.Burst.CompilerServices.IgnoreWarningAttribute">
            <summary>
            Can be used to specify that a warning produced by Burst for a given
            method should be ignored.
            </summary>
        </member>
        <member name="M:Unity.Burst.CompilerServices.IgnoreWarningAttribute.#ctor(System.Int32)">
            <summary>
            Ignore a single warning produced by Burst.
            </summary>
            <param name="warning">The warning to ignore.</param>
        </member>
        <member name="T:Unity.Burst.CompilerServices.Hint">
            <summary>
            Compile-time hint intrinsics.
            </summary>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Hint.Likely(System.Boolean)">
            <summary>
            Hints to the compiler that the condition is likely to be true.
            </summary>
            <param name="condition">The boolean condition that is likely to be true.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Hint.Unlikely(System.Boolean)">
            <summary>
            Hints to the compiler that the condition is unlikely to be true.
            </summary>
            <param name="condition">The boolean condition that is unlikely to be true.</param>
            <returns>The condition.</returns>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Hint.Assume(System.Boolean)">
            <summary>
            Hints to the compiler that the condition can be assumed to be true.
            </summary>
            <param name="condition">The boolean condition that can be assumed to be true.</param>
        </member>
        <member name="T:Unity.Burst.CompilerServices.AssumeRangeAttribute">
             <summary>
             Can be used to specify that a parameter or return has a range assumption.
             Assumptions feed directly into the optimizer and allow better codegen.
            
             Only usable on values of type scalar integer.
            
             The range is a closed interval [min..max] - EG. the attributed value
             is greater-than-or-equal-to min and less-than-or-equal-to max.
             </summary>
        </member>
        <member name="M:Unity.Burst.CompilerServices.AssumeRangeAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Assume that an integer is in the signed closed interval [min..max].
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The inclusive maximum value.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.AssumeRangeAttribute.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Assume that an integer is in the unsigned closed interval [min..max].
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The inclusive maximum value.</param>
        </member>
        <member name="T:Unity.Burst.CompilerServices.Constant">
            <summary>
            Compile-time queries intrinsics.
            </summary>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Constant.IsConstantExpression``1(``0)">
            <summary>
            Performs a compile-time check on whether the provided argument is known to be constant by Burst.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The value to check whether it is constant.</param>
            <returns>True if Burst knows at compile-time that it is a constant, false otherwise.</returns>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Constant.IsConstantExpression(System.Void*)">
            <summary>
            Performs a compile-time check on whether the provided argument is known to be constant by Burst.
            </summary>
            <param name="t">The value to check whether it is constant.</param>
            <returns>True if Burst knows at compile-time that it is a constant, false otherwise.</returns>
        </member>
        <member name="T:Unity.Burst.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Skip zero-initialization of local variables.
            </summary>
        </member>
        <member name="T:Unity.Burst.CompilerServices.Aliasing">
            <summary>
            Compile-time aliasing intrinsics.
            </summary>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectAliased(System.Void*,System.Void*)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b do not alias.
            </summary>
            <param name="a">A pointer to do aliasing checks on.</param>
            <param name="b">A pointer to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectAliased``2(``0@,``1@)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b do not alias.
            </summary>
            <typeparam name="A">The type of a.</typeparam>
            <typeparam name="B">The type of b.</typeparam>
            <param name="a">A reference to do aliasing checks on.</param>
            <param name="b">A reference to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectAliased``1(System.Void*,``0@)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b do not alias.
            </summary>
            <typeparam name="B">The type of b.</typeparam>
            <param name="a">A pointer to do aliasing checks on.</param>
            <param name="b">A reference to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectAliased``1(``0@,System.Void*)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b do not alias.
            </summary>
            <typeparam name="A">The type of a.</typeparam>
            <param name="a">A reference to do aliasing checks on.</param>
            <param name="b">A pointer to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectNotAliased(System.Void*,System.Void*)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b can alias.
            </summary>
            <param name="a">A pointer to do aliasing checks on.</param>
            <param name="b">A pointer to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectNotAliased``2(``0@,``1@)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b can alias.
            </summary>
            <typeparam name="A">The type of a.</typeparam>
            <typeparam name="B">The type of b.</typeparam>
            <param name="a">A reference to do aliasing checks on.</param>
            <param name="b">A reference to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectNotAliased``1(System.Void*,``0@)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b can alias.
            </summary>
            <typeparam name="B">The type of b.</typeparam>
            <param name="a">A pointer to do aliasing checks on.</param>
            <param name="b">A reference to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.CompilerServices.Aliasing.ExpectNotAliased``1(``0@,System.Void*)">
            <summary>
            Will cause a compiler error in Burst-compiled code if a and b can alias.
            </summary>
            <typeparam name="A">The type of a.</typeparam>
            <param name="a">A reference to do aliasing checks on.</param>
            <param name="b">A pointer to do aliasing checks on.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.CopyFixedString(System.Byte*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Copies a Burst managed UTF8 string prefixed by a ushort length to a FixedString with the specified maximum length.
            </summary>
            <param name="dest">Pointer to the fixed string.</param>
            <param name="destLength">Maximum number of UTF8 the fixed string supports without including the zero character.</param>
            <param name="src">The UTF8 Burst managed string prefixed by a ushort length and zero terminated.
            <param name="srcLength">Number of UTF8 the fixed string supports without including the zero character.</param>
            </param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Byte*,System.Int32,System.Int32)">
            <summary>
            Format a UTF-8 string (with a specified source length) to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="src">The source buffer of the string to copy from.</param>
            <param name="srcLength">The length of the string from the source buffer.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Single,System.Int32)">
            <summary>
            Format a float value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Double,System.Int32)">
            <summary>
            Format a double value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Format a bool value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Char,System.Int32)">
            <summary>
            Format a char value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Byte,System.Int32)">
            <summary>
            Format a byte value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.UInt16,System.Int32)">
            <summary>
            Format an ushort value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Format an uint value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.UInt64,System.Int32)">
            <summary>
            Format a ulong value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.SByte,System.Int32)">
            <summary>
            Format a sbyte value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Int16,System.Int32)">
            <summary>
            Format a short value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Format an int value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.Format(System.Byte*,System.Int32@,System.Int32,System.Int64,System.Int32)">
            <summary>
            Format a long value to a destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The value to format.</param>
            <param name="formatOptionsRaw">Formatting options encoded in raw format.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.ParseFormatToFormatOptions(System.String)">
            <summary>
            Parse a format string as specified .NET string.Format https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=netframework-4.8
            - Supports only Left/Right Padding (e.g {0,-20} {0, 8})
            - 'G' 'g' General formatting for numbers with precision specifier (e.g G4 or g4)
            - 'D' 'd' General formatting for numbers with precision specifier (e.g D5 or d5)
            - 'X' 'x' General formatting for integers with precision specifier (e.g X8 or x8)
            </summary>
            <param name="fullFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Unity.Burst.BurstString.NumberBuffer">
            <summary>
            Information about a number: pointer to digit buffer, scale and if negative.
            </summary>
        </member>
        <member name="T:Unity.Burst.BurstString.NumberFormatKind">
            <summary>
            Type of formatting
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstString.NumberFormatKind.General">
            <summary>
            General 'G' or 'g' formatting.
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstString.NumberFormatKind.Decimal">
            <summary>
            Decimal 'D' or 'd' formatting.
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstString.NumberFormatKind.DecimalForceSigned">
            <summary>
            Internal use only. Decimal 'D' or 'd' formatting with a `+` positive in front of the decimal if positive
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstString.NumberFormatKind.Hexadecimal">
            <summary>
            Hexadecimal 'X' or 'x' formatting.
            </summary>
        </member>
        <member name="T:Unity.Burst.BurstString.FormatOptions">
            <summary>
            Formatting options. Must be sizeof(int)
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstString.FormatOptions.EncodeToRaw">
            <summary>
            Encode this options to a single integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unity.Burst.BurstString.FormatOptions.GetBase">
            <summary>
            Get the base used for formatting this number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unity.Burst.BurstString.ConvertFloatToString(System.Byte*,System.Int32@,System.Int32,System.Single,Unity.Burst.BurstString.FormatOptions)">
            <summary>
            Format a float 32-bit to a general format to the specified destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The float 32 value to format.</param>
            <param name="formatOptions">Formatting options.</param>
        </member>
        <member name="M:Unity.Burst.BurstString.ConvertDoubleToString(System.Byte*,System.Int32@,System.Int32,System.Double,Unity.Burst.BurstString.FormatOptions)">
            <summary>
            Format a float 64-bit to a general format to the specified destination buffer.
            </summary>
            <param name="dest">Destination buffer.</param>
            <param name="destIndex">Current index in destination buffer.</param>
            <param name="destLength">Maximum length of destination buffer.</param>
            <param name="value">The float 64 value to format.</param>
            <param name="formatOptions">Formatting options.</param>
        </member>
        <member name="T:Unity.Burst.BurstCompilerOptions">
            <summary>
            Options available at Editor time and partially at runtime to control the behavior of the compilation and to enable/disable burst jobs.
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.IsGlobal">
            <summary>
            <c>true</c> if this option is the global options that affects menus
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.IsEnabled">
            <summary>
            Gets a boolean indicating whether burst is enabled.
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.EnableBurstCompilation">
            <summary>
            Gets or sets a boolean to enable or disable compilation of burst jobs.
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.EnableBurstCompileSynchronously">
            <summary>
            Gets or sets a boolean to force the compilation of all burst jobs synchronously.
            </summary>
            <remarks>
            This is only available at Editor time. Does not have an impact on player mode.
            </remarks>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.EnableBurstSafetyChecks">
            <summary>
            Gets or sets a boolean to enable or disable safety checks.
            </summary>
            <remarks>
            This is only available at Editor time. Does not have an impact on player mode.
            </remarks>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.ForceEnableBurstSafetyChecks">
            <summary>
            Gets or sets a boolean to force enable safety checks, irrespective of what
            <c>EnableBurstSafetyChecks</c> is set to, or whether the job or function
            has <c>DisableSafetyChecks</c> set.
            </summary>
            <remarks>
            This is only available at Editor time. Does not have an impact on player mode.
            </remarks>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.EnableBurstDebug">
            <summary>
            Enable debugging mode
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.DisableOptimizations">
            <summary>
            This property is no longer used and will be removed in a future major release.
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompilerOptions.EnableFastMath">
            <summary>
            This property is no longer used and will be removed in a future major release. Use the [BurstCompile(FloatMode = FloatMode.Fast)] on the method directly to enable this feature
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompilerOptions.MergeAttributes(Unity.Burst.BurstCompileAttribute@,Unity.Burst.BurstCompileAttribute@)">
            <summary>
            Merges the attributes from the assembly into the member attribute, such that if any field of the member attribute
            was not specifically set by the user (or is a default), the assembly level setting is used for the Burst compilation.
            </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompilerOptions.TryGetOptions(System.Reflection.MemberInfo,System.Boolean,System.String@,System.Boolean)">
            <summary>
            Gets the options for the specified member. Returns <c>false</c> if the `[BurstCompile]` attribute was not found.
            </summary>
            <returns><c>false</c> if the `[BurstCompile]` attribute was not found; otherwise <c>true</c></returns>
        </member>
        <member name="M:Unity.Burst.BurstCompilerOptions.MaybePreventChangingOption">
             <summary>
             This method should be called before changing any option that requires
             an Editor restart in versions older than 2019.3.
            
             This is because Editors older than 2019.3 don't support recompilation
             of already-compiled jobs.
             </summary>
        </member>
        <member name="M:Unity.Burst.BurstCompilerOptions.#cctor">
            <summary>
            Static initializer based on command line arguments
            </summary>
        </member>
        <member name="T:Unity.Burst.NativeDumpFlags">
            <summary>
            Flags used by <see cref="!:NativeCompiler.CompileMethod"/> to dump intermediate compiler results.
            Note please ensure MonoDebuggerHandling/Constants.h is updated if you change this enum
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.None">
            <summary>
            Nothing is selected.
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.IL">
            <summary>
            Dumps the IL of the method being compiled
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.Unused">
            <summary>
            Unused dump state.
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.IR">
            <summary>
            Dumps the generated module without optimizations
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.IROptimized">
            <summary>
            Dumps the generated backend code after optimizations (if enabled)
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.Asm">
            <summary>
            Dumps the generated ASM code
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.Function">
            <summary>
            Generate the native code
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.Analysis">
            <summary>
            Dumps the result of analysis
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.IRPassAnalysis">
            <summary>
            Dumps the diagnostics from optimisation
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.ILPre">
            <summary>
            Dumps the IL before all transformation of the method being compiled
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.IRPerEntryPoint">
            <summary>
            Dumps the per-entry-point module
            </summary>
        </member>
        <member name="F:Unity.Burst.NativeDumpFlags.All">
            <summary>
            Dumps all normal output.
            </summary>
        </member>
        <member name="T:Unity.Burst.RequiresRestartUtility">
            <summary>
            Some options cannot be applied until after an Editor restart, in Editor versions prior to 2019.3.
            This class assists with allowing the relevant settings to be changed via the menu,
            followed by displaying a message to the user to say a restart is necessary.
            </summary>
        </member>
        <member name="T:Unity.Burst.BurstExecutionEnvironment">
            <summary>
            Represents the types of compiled code that are run on the current thread.
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstExecutionEnvironment.Default">
            <summary>
            Use the default (aka FloatMode specified via Compile Attribute - <see cref="T:Unity.Burst.FloatMode"/>
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstExecutionEnvironment.NonDeterministic">
            <summary>
            Override the specified float mode and run the non deterministic version
            </summary>
        </member>
        <member name="F:Unity.Burst.BurstExecutionEnvironment.Deterministic">
            <summary>
            Override the specified float mode and run the deterministic version
            </summary>
        </member>
        <member name="T:Unity.Burst.OptimizeFor">
            <summary>
            How the code should be optimized.
            </summary>
        </member>
        <member name="F:Unity.Burst.OptimizeFor.Default">
            <summary>
            The default optimization mode - uses <see cref="F:Unity.Burst.OptimizeFor.Balanced"/>.
            </summary>
        </member>
        <member name="F:Unity.Burst.OptimizeFor.Performance">
            <summary>
            Optimize for performance - the compiler should make the most optimal binary possible.
            </summary>
        </member>
        <member name="F:Unity.Burst.OptimizeFor.Size">
            <summary>
            Optimize for size - the compiler should make the smallest binary possible.
            </summary>
        </member>
        <member name="F:Unity.Burst.OptimizeFor.FastCompilation">
            <summary>
            Optimize for fast compilation - the compiler should perform some optimization, but take as little time as possible to do it.
            </summary>
        </member>
        <member name="F:Unity.Burst.OptimizeFor.Balanced">
            <summary>
            Optimize for balanced compilation - ensuring that good performance is obtained while keeping compile time as low as possible.
            </summary>
        </member>
        <member name="T:Unity.Burst.FloatMode">
            <summary>
            Represents the floating point optimization mode for compilation.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatMode.Default">
            <summary>
            Use the default target floating point mode - <see cref="F:Unity.Burst.FloatMode.Strict"/>.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatMode.Strict">
            <summary>
            No floating point optimizations are performed.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatMode.Deterministic">
            <summary>
            Reserved for future.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatMode.Fast">
            <summary>
            Allows algebraically equivalent optimizations (which can alter the results of calculations), it implies :
            <para/> optimizations can assume results and arguments contain no NaNs or +/- Infinity and treat sign of zero as insignificant.
            <para/> optimizations can use reciprocals - 1/x * y  , instead of  y/x.
            <para/> optimizations can use fused instructions, e.g. madd.
            </summary>
        </member>
        <member name="T:Unity.Burst.FloatPrecision">
            <summary>
            Represents the floating point precision used for certain builtin operations e.g. sin/cos.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatPrecision.Standard">
            <summary>
            Use the default target floating point precision - <see cref="F:Unity.Burst.FloatPrecision.Medium"/>.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatPrecision.High">
            <summary>
            Compute with an accuracy of 1 ULP - highly accurate, but increased runtime as a result, should not be required for most purposes.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatPrecision.Medium">
            <summary>
            Compute with an accuracy of 3.5 ULP - considered acceptable accuracy for most tasks.
            </summary>
        </member>
        <member name="F:Unity.Burst.FloatPrecision.Low">
            <summary>
            Compute with an accuracy lower than or equal to <see cref="F:Unity.Burst.FloatPrecision.Medium"/>, with some range restrictions (defined per function).
            </summary>
        </member>
        <member name="T:Unity.Burst.BurstCompileAttribute">
            <summary>
            This attribute is used to tag jobs or function-pointers as being Burst compiled, and optionally set compilation parameters.
            </summary>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.FloatMode">
            <summary>
            Gets or sets the float mode of operation for this Burst compilation.
            </summary>
            <value>
            The default is <see cref="F:Unity.Burst.FloatMode.Default"/>.
            </value>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.FloatPrecision">
            <summary>
            Gets or sets the floating point precision to use for this Burst compilation.
            Allows you to trade accuracy for speed of computation, useful when you don't require much precision.
            </summary>
            <value>
            The default is <see cref="F:Unity.Burst.FloatPrecision.Standard"/>.
            </value>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.CompileSynchronously">
            <summary>
            Gets or sets whether or not to Burst compile the code immediately on first use, or in the background over time.
            </summary>
            <value>The default is <c>false</c>, <c>true</c> will force this code to be compiled synchronously on first invocation.</value>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.Debug">
            <summary>
            Gets or sets whether to compile the code in a way that allows it to be debugged.
            If this is set to <c>true</c>, the current implementation disables optimisations on this method
            allowing it to be debugged using a Native debugger.
            </summary>
            <value>
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.DisableSafetyChecks">
            <summary>
            Gets or sets whether to disable safety checks for the current job or function pointer.
            If this is set to <c>true</c>, the current job or function pointer will be compiled
            with safety checks disabled unless the global 'Safety Checks/Force On' option is active.
            </summary>
            <value>
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.DisableDirectCall">
            <summary>
            Gets or sets a boolean to disable the translation of a static method call as direct call to
            the generated native method. By default, when compiling static methods with Burst and calling
            them from C#, they will be translated to a direct call to the Burst generated method.
            code.
            </summary>
            <value>
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Unity.Burst.BurstCompileAttribute.OptimizeFor">
            <summary>
            How should this entry-point be optimized.
            </summary>
            <value>
            The default is <see cref="F:Unity.Burst.OptimizeFor.Default"/>.
            </value>
        </member>
        <member name="M:Unity.Burst.BurstCompileAttribute.#ctor">
             <summary>
             Tags a struct/method/class as being Burst compiled, with the default <see cref="P:Unity.Burst.BurstCompileAttribute.FloatPrecision"/>, <see cref="P:Unity.Burst.BurstCompileAttribute.FloatMode"/> and <see cref="P:Unity.Burst.BurstCompileAttribute.CompileSynchronously"/>.
             </summary>
             <example>
             <code>
             [BurstCompile]
             struct MyMethodsAreCompiledByBurstUsingTheDefaultSettings
             {
                 //....
             }
            </code>
             </example>
        </member>
        <member name="M:Unity.Burst.BurstCompileAttribute.#ctor(Unity.Burst.FloatPrecision,Unity.Burst.FloatMode)">
             <summary>
             Tags a struct/method/class as being Burst compiled, with the specified <see cref="P:Unity.Burst.BurstCompileAttribute.FloatPrecision"/> and <see cref="P:Unity.Burst.BurstCompileAttribute.FloatMode"/>.
             </summary>
             <example>
             <code>
             [BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
             struct MyMethodsAreCompiledByBurstWithLowPrecisionAndFastFloatingPointMode
             {
                 //....
             }
            </code>
            </example>
             <param name="floatPrecision">Specify the required floating point precision.</param>
             <param name="floatMode">Specify the required floating point mode.</param>
        </member>
        <member name="T:Unity.Burst.DiagnosticId">
            <summary>
            Specifies the possible diagnostic IDs.
            </summary>
        </member>
        <member name="T:Unity.Burst.NoAliasAttribute">
            <summary>
            Can be used to specify that a parameter to a function, a field of a struct, a struct, or a function return will not alias. (Advanced - see User Manual for a description of Aliasing).
            </summary>
        </member>
        <member name="T:Unity.Burst.SharedStatic`1">
            <summary>
            A structure that allows to share mutable static data between C# and HPC#.
            </summary>
            <typeparam name="T">Type of the data to share (must not contain any reference types)</typeparam>
        </member>
        <member name="P:Unity.Burst.SharedStatic`1.Data">
            <summary>
            Get a writable reference to the shared data.
            </summary>
        </member>
        <member name="P:Unity.Burst.SharedStatic`1.UnsafeDataPointer">
            <summary>
            Get a direct unsafe pointer to the shared data.
            </summary>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreate``1(System.UInt32)">
            <summary>
            Creates a shared static data for the specified context (usable from both C# and HPC#)
            </summary>
            <typeparam name="TContext">A type class that uniquely identifies the this shared data.</typeparam>
            <param name="alignment">Optional alignment</param>
            <returns>A shared static for the specified context</returns>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreate``2(System.UInt32)">
            <summary>
            Creates a shared static data for the specified context and sub-context (usable from both C# and HPC#)
            </summary>
            <typeparam name="TContext">A type class that uniquely identifies the this shared data.</typeparam>
            <typeparam name="TSubContext">A type class that uniquely identifies this shared data within a sub-context of the primary context</typeparam>
            <param name="alignment">Optional alignment</param>
            <returns>A shared static for the specified context</returns>
        </member>
        <member name="F:Unity.Burst.SharedStatic`1.DefaultAlignment">
            <summary>
            The default alignment is a user specified one is not provided.
            </summary>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreateUnsafe(System.UInt32,System.Int64,System.Int64)">
            <summary>
            Creates a shared static data unsafely for the specified context and sub-context (usable from both C# and HPC#).
            </summary>
            <param name="alignment">The alignment (specified in bytes).</param>
            <param name="hashCode">The 64-bit hashcode for the shared-static.</param>
            <param name="subHashCode">The 64-bit sub-hashcode for the shared-static.</param>
            <returns>A newly created or previously cached shared-static for the hashcodes provided.</returns>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreatePartiallyUnsafeWithHashCode``1(System.UInt32,System.Int64)">
            <summary>
            Creates a shared static data unsafely for the specified context and sub-context (usable from both C# and HPC#).
            </summary>
            <typeparam name="TSubContext">A type class that uniquely identifies this shared data within a sub-context of the primary context</typeparam>
            <param name="alignment">The alignment (specified in bytes).</param>
            <param name="hashCode">The 64-bit hashcode for the shared-static.</param>
            <returns>A newly created or previously cached shared-static for the hashcodes provided.</returns>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreatePartiallyUnsafeWithSubHashCode``1(System.UInt32,System.Int64)">
            <summary>
            Creates a shared static data unsafely for the specified context and sub-context (usable from both C# and HPC#).
            </summary>
            <typeparam name="TContext">A type class that uniquely identifies the this shared data.</typeparam>
            <param name="alignment">The alignment (specified in bytes).</param>
            <param name="subHashCode">The 64-bit sub-hashcode for the shared-static.</param>
            <returns>A newly created or previously cached shared-static for the hashcodes provided.</returns>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreate(System.Type,System.UInt32)">
            <summary>
            Creates a shared static data for the specified context (reflection based, only usable from C#, but not from HPC#)
            </summary>
            <param name="contextType">A type class that uniquely identifies the this shared data</param>
            <param name="alignment">Optional alignment</param>
            <returns>A shared static for the specified context</returns>
        </member>
        <member name="M:Unity.Burst.SharedStatic`1.GetOrCreate(System.Type,System.Type,System.UInt32)">
            <summary>
            Creates a shared static data for the specified context and sub-context (usable from both C# and HPC#)
            </summary>
            <param name="contextType">A type class that uniquely identifies the this shared data</param>
            <param name="subContextType">A type class that uniquely identifies this shared data within a sub-context of the primary context</param>
            <param name="alignment">Optional alignment</param>
            <returns>A shared static for the specified context</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Burst.SharedStatic.GetOrCreateSharedStaticInternal(System.Int64,System.Int64,System.UInt32,System.UInt32)" -->
    </members>
</doc>
