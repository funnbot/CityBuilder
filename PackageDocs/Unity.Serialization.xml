<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Serialization</name>
    </assembly>
    <members>
        <member name="T:Unity.Serialization.Json.JsonWriterOptions">
            <summary>
            Structure used to define custom behavior when writing JSON using the <see cref="T:Unity.Serialization.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonWriterOptions.Minified">
            <summary>
            Gets or sets the value indicating whether the <see cref="T:Unity.Serialization.Json.JsonWriter"/> should skip formatting the output. This skips indentation, newlines and whitespace.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonWriterOptions.Simplified">
            <summary>
            Gets or sets the value indicating whether the <see cref="T:Unity.Serialization.Json.JsonWriter"/> should use JSON formatting. This skips optional quotes and commas.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonWriterOptions.Indent">
            <summary>
            The indent value to use for the writer.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter">
            <summary>
            The <see cref="T:Unity.Serialization.Json.JsonWriter"/> provides forward only writing of encoded JSON text.
            </summary>
            <remarks>
            A method that attempts to write invalid JSON throws an <see cref="T:System.InvalidOperationException"/> with a context-specific error message.
            </remarks>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter.Unsafe">
            <summary>
            This object can be used to build a JSON string in an unsafe or bursted context.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter.Unsafe.StateType">
            <summary>
            Helper enum to keep track of the current state.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter.Unsafe.State">
            <summary>
            Structure used to keep track of the current state. This is only used for validation.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter.Unsafe.Data">
            <summary>
            Structure used to keep track of member variables. This is stored in unmanaged memory.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonWriter.Unsafe.m_Label">
            <summary>
            The allocator used when initializing this object. Used when disposing memory.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonWriter.Unsafe.m_Data">
            <summary>
            Pointer to member variables. To ensure we share the same data when passed by value.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonWriter.Unsafe.m_Buffer">
            <summary>
            Buffer used to store characters.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonWriter.Unsafe.m_Stack">
            <summary>
            Stack used to track object and collection scopes. This is only used for validation.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonWriter.Unsafe.m_Options">
            <summary>
            Custom behaviour options.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonWriter.Unsafe.Length">
            <summary>
            The current number of characters in the buffer.
            </summary>
            <value>The character count.</value>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.GetUnsafeReadOnlyPtr">
            <summary>
            Gets a pointer to the memory buffer containing the characters.
            </summary>
            <returns>A pointer to the memory buffer.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Serialization.Json.JsonWriterOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Json.JsonWriter.Unsafe"/>.
            </summary>
            <param name="initialCapacity">The initial capacity to use for the internal buffer.</param>
            <param name="label">The allocator label to use.</param>
            <param name="options">Options to define custom behaviour.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.Clear">
            <summary>
            Clears the writer for re-use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteBeginObject(System.Char*,System.Int32)">
            <summary>
            Writes a keyed begin object token '"key": {' and starts an object scope.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteBeginObject">
            <summary>
            Writes the begin object token '{' and starts an object scope.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteEndObject">
            <summary>
            Writes the end object token '}' and closes an object scope.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteBeginArray(System.Char*,System.Int32)">
            <summary>
            Writes a keyed begin array token '"key": [' and starts an array scope.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteBeginArray">
            <summary>
            Writes the begin array token '[' and starts an array scope.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteEndArray">
            <summary>
            Writes the end array token ']' and closes the array scope.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKey(System.Char*,System.Int32)">
            <summary>
            Writes the specified key to the buffer with the correct formatting.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Int32)">
            <summary>
            Writes the specified 32-bit signed integer value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Int64)">
            <summary>
            Writes the specified 64-bit signed integer value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Single)">
            <summary>
            Writes the specified 32-bit floating-point value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Boolean)">
            <summary>
            Writes the specified boolean value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteNull">
            <summary>
            Writes the literal value 'null' to the buffer with the correct formatting.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WritePositiveInfinity">
            <summary>
            Writes the literal value 'infinity' to the buffer with the correct formatting.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteNegativeInfinity">
            <summary>
            Writes the literal value '-infinity' to the buffer with the correct formatting.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Char)">
            <summary>
            Writes the specified char value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Char*,System.Int32)">
            <summary>
            Writes the specified string value to the buffer as an encoded JSON string.
            </summary>
            <param name="ptr">The pointer to the string value.</param>
            <param name="length">The length of the string value.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(Unity.Collections.FixedString128Bytes)">
            <summary>
            Writes the specified fixed string to the buffer as a literal.
            </summary>
            <param name="value">The string value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValueLiteral(System.Char)">
            <summary>
            Writes the specified char to the buffer as a literal.
            </summary>
            <remarks>
            If you need to write out a string value with quotes <seealso cref="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Char)"/>.
            </remarks>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValueLiteral(System.Char*,System.Int32)">
            <summary>
            Writes the specified string to the buffer as a literal.
            </summary>
            <remarks>
            If you need to write out a string value with quotes <seealso cref="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteValue(System.Char*,System.Int32)"/>.
            </remarks>
            <param name="ptr">The pointer to the string value.</param>
            <param name="length">The length of the string value.</param>
            <exception cref="T:System.InvalidOperationException">Validation is enabled, and the operation would result in writing invalid JSON.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValue(System.Char*,System.Int32,System.Int32)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValue(System.Char*,System.Int32,System.UInt32)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValue(System.Char*,System.Int32,System.Int64)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValue(System.Char*,System.Int32,System.UInt64)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValue(System.Char*,System.Int32,System.Single)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="ptr">The pointer to the key.</param>
            <param name="length">The length of the key.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValue(System.Char*,System.Int32,System.Char*,System.Int32)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="keyPtr">The pointer to the key.</param>
            <param name="keyLength">The length of the key.</param>
            <param name="valuePtr">The pointer to the value.</param>
            <param name="valueLength">The length of the value.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Unsafe.WriteKeyValueLiteral(System.Char*,System.Int32,System.Char*,System.Int32)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="keyPtr">The pointer to the key.</param>
            <param name="keyLength">The length of the key.</param>
            <param name="valuePtr">The pointer to the value.</param>
            <param name="valueLength">The length of the value.</param>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter.ObjectScope">
            <summary>
            Disposable struct to manage opening and closing object scopes.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.ObjectScope.#ctor(Unity.Serialization.Json.JsonWriter,System.String)">
            <summary>
            Creates a new object scope for the given <see cref="T:Unity.Serialization.Json.JsonWriter"/>
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="key">The key to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.ObjectScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Serialization.Json.JsonWriter.ArrayScope">
            <summary>
            Disposable struct to manage opening and closing array scopes.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.ArrayScope.#ctor(Unity.Serialization.Json.JsonWriter,System.String)">
            <summary>
            Creates a new array scope for the given <see cref="T:Unity.Serialization.Json.JsonWriter"/>
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="key">The key to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.ArrayScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.#ctor(Unity.Collections.Allocator,Unity.Serialization.Json.JsonWriterOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Json.JsonWriter"/>.
            </summary>
            <param name="label">The allocator label to use.</param>
            <param name="options">Options to define custom behaviour.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Serialization.Json.JsonWriterOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Json.JsonWriter"/>.
            </summary>
            <param name="initialCapacity">The initial capacity to use for the internal buffer.</param>
            <param name="label">The allocator label to use.</param>
            <param name="options">Options to define custom behaviour.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.AsUnsafe">
            <summary>
            Returns the unsafe writer which can be used in bursted jobs.
            </summary>
            <returns>The unsafe writer.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.Clear">
            <summary>
            Clears the writer for re-use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteObjectScope(System.String)">
            <summary>
            Creates an object scope which writes the beginning '"key": {' and ending '}' tokens.
            </summary>
            <param name="key">The key to write.</param>
            <returns>A disposable object scope.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteArrayScope(System.String)">
            <summary>
            Creates a collection scope which writes the beginning '"key": [' and ending ']' tokens.
            </summary>
            <param name="key">The key to write.</param>
            <returns>A disposable collection scope.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteBeginObject(System.String)">
            <summary>
            Writes a keyed object token '"key": [' and opens an object scope.
            </summary>
            <param name="key">The key to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end object token '}' and closes the object scope.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteBeginArray(System.String)">
            <summary>
            Writes a keyed array token '"key": [' and opens an array scope.
            </summary>
            <param name="key">The key to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end array token ']' and closes the array scope.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKey(System.String)">
            <summary>
            Writes the specified key to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes the specified 32-bit signed integer value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes the specified 64-bit signed integer value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes the specified 32-bit floating-point value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes the specified boolean value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes the specified 32-bit unsigned integer value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes the specified 64-bit unsigned integer value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes the specified 64-bit floating-point value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteNull">
            <summary>
            Writes the literal value 'null' to the buffer with the correct formatting.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes the specified char value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes the specified string value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValueLiteral(System.Char)">
            <summary>
            Writes the specified char value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteValueLiteral(System.String)">
            <summary>
            Writes the specified string value to the buffer with the correct formatting.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.Int32)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.Int64)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.Single)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.Boolean)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.UInt32)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.UInt64)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.Double)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValue(System.String,System.String)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonWriter.WriteKeyValueLiteral(System.String,System.String)">
            <summary>
            Writes the specified key-value pair with to the buffer with the correct formatting.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:Unity.Serialization.Json.JsonMigrationContext">
            <summary>
            A migration context used to deserialize and migrate types.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonMigrationContext.SerializedVersion">
            <summary>
            The deserialized version of the type.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonMigrationContext.SerializedObject">
            <summary>
            The in-memory representation of the value being deserialized.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonMigrationContext.SerializedType">
            <summary>
            The serialized type as reported by the underlying stream. This can be used in contravariant migrations. 
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonMigrationContext.UserData">
            <summary>
            The user data provided in deserialization parameters.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonMigrationContext.m_Visitor">
            <summary>
            The internal visitor, used to re-enter in to normal deserialization.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.#ctor(System.Int32,Unity.Serialization.Json.SerializedObjectView,System.Type,System.Object,Unity.Serialization.Json.JsonPropertyReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.JsonMigrationContext"/> structure. This is an internal method.
            </summary>
            <param name="serializedVersion">The serialized version read from the stream.</param>
            <param name="serializedObject">The view over the serialized data.</param>
            <param name="serializedType">The serialized type from the stream.</param>
            <param name="visitor">The current deserialization visitor, used for re-entry into normal deserialization.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.TryRead``1(``0@)">
            <summary>
            Reads the root object as the specified <typeparamref name="TValue"/> type.
            </summary>
            <param name="value">When this method returns, contains the deserialized value, if successful. otherwise the default value for the <typeparamref name="TValue"/>.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns><see langword="true"/> if the value was read successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.Read``1">
            <summary>
            Reads the root object as the specified <typeparamref name="TValue"/> type.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>A new instance of <typeparamref name="TValue"/> initialized with data from the root object.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.TryRead``1(System.String,``0@)">
            <summary>
            Reads a top level member as the specified <typeparamref name="TValue"/> type.
            </summary>
            <param name="name">The top level member name.</param>
            <param name="value">When this method returns, contains the deserialized value, if successful. otherwise the default value for the <typeparamref name="TValue"/>.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns><see langword="true"/> if the value was read successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.Read``1(System.String)">
            <summary>
            Reads a top level member as the specified <typeparamref name="TValue"/> type.
            </summary>
            <param name="name">The top level member name.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>A new instance of <typeparamref name="TValue"/> initialized with data from the view.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.TryRead``1(Unity.Serialization.Json.SerializedObjectView,``0@)">
            <summary>
            Reads the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/> as the specified <typeparamref name="TValue"/> type.
            </summary>
            <param name="view">The view to read.</param>
            <param name="value">When this method returns, contains the deserialized value, if successful. otherwise the default value for the <typeparamref name="TValue"/>.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns><see langword="true"/> if the value was read successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.Read``1(Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Reads the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/> as the specified <typeparamref name="TValue"/> type.
            </summary>
            <param name="view">The serialized object.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>A new instance of <typeparamref name="TValue"/> initialized with data from the view.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonMigrationContext.Read``1(``0@,Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Reads the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/> in to the given reference.
            </summary>
            <param name="value">The existing reference to read in to.</param>
            <param name="view">The serialized value.</param>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="T:Unity.Serialization.Json.JsonSerialization">
            <summary>
            High level API for serializing or deserializing json data from string, file or stream.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.ToJson``1(System.IO.FileInfo,``0,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Serializes the given object to a json file at the specified path.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="container">The object to serialize.</param>
            <param name="parameters">The parameters to use when writing.</param>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.ToJson``1(``0,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Writes a property container to a json string.
            </summary>
            <param name="value">The container to write.</param>
            <param name="parameters">The parameters to use when writing.</param>
            <typeparam name="T">The type to serialize.</typeparam>
            <returns>A json string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.ToJson``1(Unity.Serialization.Json.JsonWriter,``0,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Writes a property container the specified buffer.
            </summary>
            <param name="writer">The buffer to write the object to.</param>
            <param name="value">The container to write.</param>
            <param name="parameters">The parameters to use when writing.</param>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.AddGlobalAdapter(Unity.Serialization.Json.IJsonAdapter)">
            <summary>
            Adds the specified <see cref="T:Unity.Serialization.Json.IJsonAdapter"/> to the set of global adapters. This is be included by default in all JsonSerialization calls.
            </summary>
            <param name="adapter">The adapter to add.</param>
            <exception cref="T:System.ArgumentException">The given adapter is already registered.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.RemoveGlobalAdapter(Unity.Serialization.Json.IJsonAdapter)">
            <summary>
            Removes the specified <see cref="T:Unity.Serialization.Json.IJsonAdapter"/> from the set of global adapters. 
            </summary>
            <param name="adapter">The adapter to remove.</param>
            <exception cref="T:System.ArgumentException">The given adapter has not been registered.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.AddGlobalMigration(Unity.Serialization.Json.IJsonMigration)">
            <summary>
            Adds the specified <see cref="T:Unity.Serialization.Json.IJsonMigration"/> to the set of global adapters. This is be included by default in all JsonSerialization calls.
            </summary>
            <param name="migration">The migration to add.</param>
            <exception cref="T:System.ArgumentException">The given migration is already registered.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.RemoveGlobalMigration(Unity.Serialization.Json.IJsonMigration)">
            <summary>
            Removes the specified <see cref="T:Unity.Serialization.Json.IJsonAdapter"/> from the set of global adapters. 
            </summary>
            <param name="migration">The migration to remove.</param>
            <exception cref="T:System.ArgumentException">The given migration has not been registered.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.GetGlobalAdapters">
            <summary>
            Returns the currently registered set of global adapters.
            </summary>
            <returns>The internal list of global adapters.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.GetGlobalMigrations">
            <summary>
            Returns the currently registered set of global migration.
            </summary>
            <returns>The internal list of global migration.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJson``1(System.String,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified json string and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="json">The json string to read from.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> constructed from the serialized data.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJson``1(System.String,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified json string and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="json">The json string to read from.</param>
            <param name="container">When this method returns, contains the deserialized value.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJsonOverride``1(System.String,``0@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified json string in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="json">The json string to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJsonOverride``1(System.String,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified json string in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="json">The json string to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJson``1(System.IO.FileInfo,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified path and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="file">The file to read from.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> constructed from the serialized data.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJson``1(System.IO.FileInfo,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified path and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="file">The file to read from.</param>
            <param name="container">When this method returns, contains the deserialized value.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJsonOverride``1(System.IO.FileInfo,``0@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified path in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="file">The file to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJsonOverride``1(System.IO.FileInfo,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified path in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="file">The file to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="parameters">The reader parameters to use.</param>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJson``1(System.IO.Stream,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified stream and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="parameters">The reader parameters to use.</param>
            <returns>A new instance of <typeparamref name="T"/> constructed from the serialized data.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJson``1(System.IO.Stream,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified stream and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="container">When this method returns, contains the deserialized value.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJsonOverride``1(System.IO.Stream,``0@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified stream in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJsonOverride``1(System.IO.Stream,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified stream in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJson``1(Unity.Serialization.Json.SerializedValueView,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified SerializedValueView and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="view">The view to read from.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="parameters">The reader parameters to use.</param>
            <returns>A new instance of <typeparamref name="T"/> constructed from the serialized data.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.FromJsonOverride``1(Unity.Serialization.Json.SerializedValueView,``0@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/> in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="view">The view to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJson``1(Unity.Serialization.Json.SerializedValueView,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/> and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="view">The view to read from.</param>
            <param name="container">When this method returns, contains the deserialized value.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerialization.TryFromJsonOverride``1(Unity.Serialization.Json.SerializedValueView,``0@,Unity.Serialization.Json.DeserializationResult@,Unity.Serialization.Json.JsonSerializationParameters)">
            <summary>
            Deserializes from the specified SerializedValueView in to an existing instance of <typeparamref name="T"/>.
            </summary>
            <param name="view">The view to read from.</param>
            <param name="container">The reference to be overwritten.</param>
            <param name="result">The results structure containing any errors or exceptions.</param>
            <param name="parameters">The reader parameters to use.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>True if the deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedArrayViewPropertyBag.Property.Index">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedArrayViewPropertyBag.Property.Name">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedArrayViewPropertyBag.Property.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Serialization.Json.ManagedCharBuffer">
            <summary>
            Helper struct to store a managed array of chars.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.AsyncBlockReader">
             <summary>
             An asynchronous block reader that tries to read one block ahead in the stream.
            
             * The first call to `GetNextBlock` reads synchronously and queues the second block.
             * Subsequent calls wait on the running task and start the next task before returning.
            
             </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SyncBlockReader">
            <summary>
            A synchronous block reader. This is a simple wrapper over `StreamReader.ReadBlock`.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonCommentType">
            <summary>
            Internal struct used to track the type of comment being parsed.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonCommentType.Unknown">
            <summary>
            The comment type is not yet known. E.g. we have only encountered the first `/`.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonCommentType.SingleLine">
            <summary>
            Single line comment prefixed with `//` and ending in `\n`.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonCommentType.MultiLine">
            <summary>
            Multi line comment prefixed with `/*` and ending with `*/`.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeJsonTokenizer.Write(Unity.Serialization.Json.UnsafeJsonTokenStream*,System.UInt16*,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes <see cref="T:Unity.Serialization.Token" /> objects to the internal buffer.
            </summary>s
            <param name="stream">The output stream to write to.</param>
            <param name="charBuffer">A character array containing the input json data to tokenize.</param>
            <param name="charBufferStart">The index of ptr at which to begin reading.</param>
            <param name="charBufferLength">The maximum number of characters to read.</param>
            <param name="end">A value indicating if this is the final block of characters from a stream. This will trigger an error for any unclosed scopes.</param>
            <returns>The number of characters that have been read.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.JsonTokenizer">
             <summary>
             The tokenizer is the lowest level API for json deserialization.
            
             It's only job is to parse characters into an array of <see cref="T:Unity.Serialization.Json.Token"/> simple structs.
            
             e.g. {"foo": 10} becomes
            
              [0] Type=[JsonType.Object]    Range=[0..11] Parent=[-1]
              [1] Type=[JsonType.String]    Range=[2..5]  Parent=[0]
              [2] Type=[JsonType.Primitive] Range=[8..10] Parent=[1]
            
             @NOTE No conversion or copying of data takes place here.
            
             Implementation based off of https://github.com/zserge/jsmn
             </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonTokenizer.ResultSuccess">
            <summary>
            All input characters were consumed and all tokens were generated.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonTokenizer.ResultInvalidInput">
            <summary>
            The input data was invalid in some way.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonTokenizer.ResultEndOfStream">
            <summary>
            All input characters were consumed and the writer is expecting more
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonTokenizer.ResultCode">
            <summary>
            Returns the result code from the last tokenize call.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonTokenizer.Reset">
            <summary>
            Initializes the tokenizer for re-use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonTokenizer.Write(Unity.Serialization.Json.JsonTokenStream,Unity.Serialization.UnsafeBuffer{System.Char},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes <see cref="T:Unity.Serialization.Token" /> objects to the internal buffer.
            </summary>
            <param name="stream">The output stream to write to.</param>
            <param name="buffer">A character array containing the input json data to tokenize.</param>
            <param name="start">The index of ptr at which to begin reading.</param>
            <param name="count">The maximum number of characters to read.</param>
            <param name="isFinalBlock">A value indicating if this is the final block of characters from a stream. This will trigger an error for any unclosed scopes.</param>
            <returns>The number of characters that have been read.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.JsonPropertyWriter">
            <summary>
            A visitor that traverses a property container and outputs a JSON string.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonPropertyWriter.SerializedContainerMetadata.Exists">
            <summary>
            Returns true if there is any metadata to write out.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyWriter.s_SerializedIdProperty">
            <summary>
            Shared property used to write the serialized type metadata.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyWriter.s_SerializedTypeProperty">
            <summary>
            Shared property used to write the serialized type metadata.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyWriter.s_SerializedVersionProperty">
            <summary>
            Shared property used to write the serialized version metadata.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.Unsafe.UnsafeValueView.Type">
            <summary>
            The <see cref="T:Unity.Serialization.Json.TokenType"/> for this view.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeValueView.AsStringView">
            <summary>
            Reinterprets the value as an string.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.SerializedStringView"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The value could not be reinterpreted.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeValueView.AsArrayView">
            <summary>
            Reinterprets the value as an array.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.Unsafe.UnsafeArrayView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeValueView.AsObjectView">
            <summary>
            Reinterprets the value as an object.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.Unsafe.UnsafeObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeValueView.AsPrimitiveView">
            <summary>
            Reinterprets the value as a primitive.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeValueView.AsInt32">
            <summary>
            Reinterprets the value as a int.
            </summary>
            <returns>The value as a int.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeValueView.AsInt64">
            <summary>
            Reinterprets the value as a long.
            </summary>
            <returns>The value as a long.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.Unsafe.UnsafeStringView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents a string.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeStringView.Length">
            <summary>
            Gets the number of characters in the <see cref="T:Unity.Serialization.Json.SerializedStringView"/>.
            </summary>
            <returns>The number of characters in the string.</returns>
        </member>
        <member name="P:Unity.Serialization.Json.Unsafe.UnsafeStringView.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char"/> at a specified position in the current <see cref="T:Unity.Serialization.Json.SerializedStringView"/>.
            </summary>
            <param name="index">A position in the current string.</param>
            <exception cref="T:System.IndexOutOfRangeException"><see cref="!:index"/> is greater than or equal to the length of this object or less than zero.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeStringView.Equals(System.String)">
            <summary>
            Determines whether this view and another specified <see cref="T:System.String"/> object have the same value.
            </summary>
            <param name="other">The string to compare to this view.</param>
            <returns>true if the value of the value parameter is the same as the value of this view; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeStringView.ToString">
            <summary>
            Allocates and returns a new string instance based on the view.
            </summary>
            <returns>A new <see cref="T:System.String"/> instance.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsStringView">
            <summary>
            Returns a string view over the primitive.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedStringView"/> over this primitive.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsInfinity">
            <summary>
            Returns true if the primitive represents infinity.
            </summary>
            <returns>True if this primitive is infinity; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsNaN">
            <summary>
            Returns true if the primitive represents a value that is not a number.
            </summary>
            <returns>True if this primitive is nan; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsNull">
            <summary>
            Returns true if the primitive represents a value that is null.
            </summary>
            <returns>True if this primitive is null; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsIntegral">
            <summary>
            Returns true if the primitive is an integral type.
            </summary>
            <returns>True if this primitive is an integral type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsDecimal">
            <summary>
            Returns true if the primitive is a decimal type.
            </summary>
            <returns>True if this primitive is an decimal type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsSigned">
            <summary>
            Returns true if the primitive is a signed type.
            </summary>
            <returns>True if this primitive is an signed type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.IsBoolean">
            <summary>
            Returns true if the primitive is a boolean type.
            </summary>
            <returns>True if this primitive is an boolean type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsInt64">
            <summary>
            Reinterprets the primitive as a long.
            </summary>
            <returns>The primitive as a long.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsUInt64">
            <summary>
            Reinterprets the primitive as a ulong.
            </summary>
            <returns>The primitive as a ulong.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsFloat">
            <summary>
            Reinterprets the primitive as a float.
            </summary>
            <returns>The primitive as a float.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsDouble">
            <summary>
            Reinterprets the primitive as a double.
            </summary>
            <remarks>
            This method relies on a string allocation for <see cref="M:System.Double.Parse(System.String)"/>.
            </remarks>
            <returns>The primitive as a double.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsBoolean">
            <summary>
            Reinterprets the primitive as a bool.
            </summary>
            <returns>The primitive as a bool.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafePrimitiveView.AsString">
            <summary>
            Allocates and returns a new <see cref="T:System.String"/> for the primitive.
            </summary>
            <returns>A <see cref="T:System.String"/> copy of the primitive.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeMemberView.Key">
            <summary>
            Returns a <see cref="T:Unity.Serialization.Json.Unsafe.UnsafeValueView"/> over the key of this member.
            </summary>
            <returns>A view over the key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeMemberView.Value">
            <summary>
            Returns a <see cref="T:Unity.Serialization.Json.Unsafe.UnsafeValueView"/> over the value of this member.
            </summary>
            <returns>A view over the value.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.Unsafe.UnsafeObjectView.Enumerator">
            <summary>
            Enumerates the elements of <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeObjectView.TryGetMember(System.String,Unity.Serialization.Json.Unsafe.UnsafeMemberView@)">
            <summary>
            Gets the member associated with the specified key.
            </summary>
            <param name="name">The key of the member to get.</param>
            <param name="member">When this method returns, contains the member associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeObjectView.TryGetValue(System.String,Unity.Serialization.Json.Unsafe.UnsafeValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeObjectView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeObjectView.System#Collections#Generic#IEnumerable{Unity#Serialization#Json#Unsafe#UnsafeMemberView}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Unsafe.UnsafeObjectView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.Convert.StrToFloat32(System.Char*,System.Int32,System.Single@)">
             <summary>
             Ripped from Unity.Entities.Words.
            
             This assembly can't depend on `Unity.Entities` yet. Waiting for baselib.
             </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonObject">
            <summary>
            The default object output by <see cref="T:Unity.Serialization.Json.JsonSerialization"/> if an object type can not be resolved.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonArray">
            <summary>
            The default object output by <see cref="T:Unity.Serialization.Json.JsonSerialization"/> if an array type can not be resolved.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedMemberViewCollection">
            <summary>
            A structure to hold a collection of <see cref="T:Unity.Serialization.Json.SerializedMemberView"/>.
            </summary>
            <remarks>
            This structure is not a view itself but rather a container for views.
            </remarks>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator">
            <summary>
            Enumerates the elements of <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator.Current">
            <summary>
            The element in the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/> at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator" />.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.#ctor(Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/> using the given allocator.
            </summary>
            <param name="label">The memory allocator label.</param>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedMemberViewCollection.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedMemberViewCollection.Item(Unity.Collections.FixedString32Bytes)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedMemberViewCollection.Item(Unity.Collections.FixedString64Bytes)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedMemberViewCollection.Item(Unity.Collections.FixedString128Bytes)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.GetValue(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.TryGetValue(System.String,Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.GetValue``1(``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>Returns the value associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.TryGetValue``1(``0,Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.Add(Unity.Serialization.Json.SerializedMemberView)">
            <summary>
            Adds the specified <see cref="T:Unity.Serialization.Json.SerializedMemberView"/> to the collection.
            </summary>
            <param name="view">The value of to add.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.System#Collections#Generic#IEnumerable{Unity#Serialization#Json#SerializedMemberView}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberViewCollection.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection" />.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.InvalidJsonException">
            <summary>
            The exception that is thrown when json input is invalid.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.InvalidJsonException.Line">
            <summary>
            The line the validator stopped at.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.InvalidJsonException.Character">
            <summary>
            The character the validator stopped at.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.InvalidJsonException.#ctor(Unity.Serialization.Json.JsonValidationResult)">
            <summary>
            Initialized a new instance of the <see cref="T:Unity.Serialization.Json.InvalidJsonException"/> class with a specified validation result.
            </summary>
            <param name="result">The result that describes the error.</param>
        </member>
        <member name="M:Unity.Serialization.Json.InvalidJsonException.#ctor(System.String)">
            <summary>
            Initialized a new instance of the <see cref="T:Unity.Serialization.Json.InvalidJsonException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Unity.Serialization.Json.InvalidJsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.InvalidJsonException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception reference.</param>
        </member>
        <member name="M:Unity.Serialization.Json.InvalidJsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.InvalidJsonException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Unity.Serialization.Json.InvalidJsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference</exception>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedStringView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents a string.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.Length">
            <summary>
            Gets the number of characters in the <see cref="T:Unity.Serialization.Json.SerializedStringView"/>.
            </summary>
            <returns>The number of characters in the string.</returns>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedStringView.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Char"/> at a specified position in the current <see cref="T:Unity.Serialization.Json.SerializedStringView"/>.
            </summary>
            <param name="index">A position in the current string.</param>
            <exception cref="T:System.IndexOutOfRangeException"><see cref="!:index"/> is greater than or equal to the length of this object or less than zero.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.Equals(System.String)">
            <summary>
            Determines whether this view and another specified <see cref="T:System.String"/> object have the same value.
            </summary>
            <param name="other">The string to compare to this view.</param>
            <returns>true if the value of the value parameter is the same as the value of this view; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.Equals``1(``0)">
            <summary>
            Determines whether this view and another specified <see cref="T:System.String"/> object have the same value.
            </summary>
            <param name="other">The string to compare to this view.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>true if the value of the value parameter is the same as the value of this view; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.ToString">
            <summary>
            Allocates and returns a new string instance based on the view.
            </summary>
            <returns>A new <see cref="T:System.String"/> instance.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.AsFixedString``1">
            <summary>
            Allocates and returns a new FixedString instance based on the view.
            </summary>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>A new <see cref="T:Unity.Collections.FixedString"/> instance.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.AsNativeText(Unity.Collections.Allocator)">
            <summary>
            Allocates and returns a new <see cref="T:Unity.Collections.NativeText"/> instance based on the view.
            </summary>
            <param name="allocator">The allocator to use for the text.</param>
            <returns>A new <see cref="T:Unity.Collections.NativeText"/> instance.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedStringView.AsUnsafeText(Unity.Collections.Allocator)">
            <summary>
            Allocates and returns a new <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeText"/> instance based on the view.
            </summary>
            <param name="allocator">The allocator to use for the text.</param>
            <returns>A new <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeText"/> instance.</returns>
        </member>
        <member name="P:Unity.Serialization.Json.UnsafeSerializedObjectReader.RequiresExplicitExceptionHandling">
            <summary>
            If this flag is true. No exceptions are thrown unless <see cref="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.CheckAndThrowInvalidJsonException"/> is called.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.DiscardCompleted">
            <summary>
            Discards completed data from the buffers.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.Step(Unity.Serialization.Json.NodeType)">
            <summary>
            Advances the reader to the given node type, ignoring depth/scope.
            </summary>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.Step(Unity.Serialization.Json.SerializedValueView@,Unity.Serialization.Json.NodeType)">
            <summary>
            Advances the reader to the given node type, ignoring depth/scope.
            </summary>
            <param name="view">The view at the returned node type.</param>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.Read">
            <summary>
            Reads the next node in the stream.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> that was read.</returns>
            <exception cref="T:System.InvalidOperationException">The reader state is invalid.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.Read(Unity.Serialization.Json.NodeType)">
            <summary>
            Reads the next node in the stream, respecting depth/scope.
            </summary>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.Read(Unity.Serialization.Json.SerializedValueView@,Unity.Serialization.Json.NodeType)">
            <summary>
            Reads the next node in the stream, respecting depth/scope.
            </summary>
            <param name="view">The view at the returned node type.</param>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.ReadObject">
            <summary>
            Reads the next node as a <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> that was read.</returns>
            <exception cref="T:System.InvalidOperationException">The reader state is invalid.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.ReadMember(Unity.Serialization.Json.SerializedMemberViewCollection)">
            <summary>
            Reads the next node as a member, respecting depth/scope and adds it to the given <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
            <param name="collection">The collection to add the member to.</param>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.ReadArrayElement(Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Reads the next node as an array element.
            </summary>
            <param name="view">The view of the array element.</param>
            <returns>True if the element was successfully read, false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeSerializedObjectReader.ReadArrayElementBatch(Unity.Serialization.Json.SerializedValueView*,System.Int32)">
            <summary>
            Reads the next <see cref="!:count"/> elements of an array and writes views to the given buffer.
            </summary>
            <param name="views">The buffer to write the views to.</param>
            <param name="count">The number of elements to read.</param>
            <returns>The number of elements read.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedArrayView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents an array of values.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedArrayView.Enumerator">
            <summary>
            Enumerates the elements of <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedArrayView.Enumerator.Current">
            <summary>
            The element in the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/> at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Unity.Serialization.Json.SerializedArrayView.Enumerator" />.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedArrayView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#IEnumerable{Unity#Serialization#Json#SerializedValueView}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedArrayView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedArrayView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#ICollection{Unity#Serialization#Json#SerializedValueView}#Contains(Unity.Serialization.Json.SerializedValueView)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#ICollection{Unity#Serialization#Json#SerializedValueView}#CopyTo(Unity.Serialization.Json.SerializedValueView[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#IList{Unity#Serialization#Json#SerializedValueView}#IndexOf(Unity.Serialization.Json.SerializedValueView)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#ICollection{Unity#Serialization#Json#SerializedValueView}#Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#IList{Unity#Serialization#Json#SerializedValueView}#Insert(System.Int32,Unity.Serialization.Json.SerializedValueView)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#ICollection{Unity#Serialization#Json#SerializedValueView}#Add(Unity.Serialization.Json.SerializedValueView)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#ICollection{Unity#Serialization#Json#SerializedValueView}#Remove(Unity.Serialization.Json.SerializedValueView)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedArrayView.System#Collections#Generic#IList{Unity#Serialization#Json#SerializedValueView}#RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="T:Unity.Serialization.Json.IJsonAdapter">
            <summary>
            Base interface for json adapters.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.IJsonAdapter`1">
            <summary>
            Implement this interface to override serialization and deserialization behaviour for a given type.
            </summary>
            <typeparam name="TValue">The type to override serialization for.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonAdapter`1.Serialize(Unity.Serialization.Json.JsonSerializationContext{`0}@,`0)">
            <summary>
            Invoked during serialization to handle writing out the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The current serialization context.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonAdapter`1.Deserialize(Unity.Serialization.Json.JsonDeserializationContext{`0}@)">
            <summary>
            Invoked during deserialization to handle reading the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The current de-serialization context.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.IContravariantJsonAdapter`1">
            <summary>
            Implement this interface to override serialization and deserialization behaviour for a given type.
            </summary>
            <typeparam name="TValue">The type to override serialization for.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.IContravariantJsonAdapter`1.Serialize(Unity.Serialization.Json.IJsonSerializationContext,`0)">
            <summary>
            Invoked during serialization to handle writing out the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The current serialization context.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Json.IContravariantJsonAdapter`1.Deserialize(Unity.Serialization.Json.IJsonDeserializationContext)">
            <summary>
            Invoked during deserialization to handle reading the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The current de-serialization context.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.IJsonSerializationContext">
            <summary>
            The <see cref="T:Unity.Serialization.Json.IJsonSerializationContext"/> provides an untyped context for contravariant serialization adapters.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.IJsonSerializationContext.Writer">
            <summary>
            Gets the underlying <see cref="T:Unity.Serialization.Json.JsonWriter"/> which can be used to output formatted data.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonSerializationContext.ContinueVisitation">
            <summary>
            Continues serialization for the current value. This will run the next adapter in the sequence, or the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonSerializationContext.ContinueVisitationWithoutAdapters">
            <summary>
            Continues serialization for the current type without running any more adapters. This will perform the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonSerializationContext.SerializeValue``1(``0)">
            <summary>
            Writes the given <paramref name="value"/> to the output using all adapters.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The value type to write.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonSerializationContext.SerializeValue``1(System.String,``0)">
            <summary>
            Writes the given <paramref name="key"/>-<paramref name="value"/> pair to the output. This will run all adapters.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
            <typeparam name="T">The value type to write.</typeparam>
        </member>
        <member name="T:Unity.Serialization.Json.JsonSerializationContext`1">
            <summary>
            The <see cref="T:Unity.Serialization.Json.JsonSerializationContext`1"/> is available from adapters. It provides access to the current adapter enumerator and allows for control of serialization for a given type. 
            </summary>
            <typeparam name="TValue">The value type being serialized.</typeparam>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationContext`1.Writer">
            <summary>
            Gets the underlying <see cref="T:Unity.Serialization.Json.JsonWriter"/> which can be used to output formatted data.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationContext`1.ContinueVisitation">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationContext`1.ContinueVisitationWithoutAdapters">
            <summary>
            Continues visitation for the current type without running any more adapters. This will perform the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationContext`1.SerializeValue``1(``0)">
            <summary>
            Writes the given <paramref name="value"/> to the output. This will run all adapters.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The value type to write.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationContext`1.SerializeValue``1(System.String,``0)">
            <summary>
            Writes the given <paramref name="key"/>-<paramref name="value"/> pair to the output. This will run all adapters.
            </summary>
            <param name="key">The key to write.</param>
            <param name="value">The value to write.</param>
            <typeparam name="T">The value type to write.</typeparam>
        </member>
        <member name="T:Unity.Serialization.Json.IJsonDeserializationContext">
            <summary>
            The <see cref="T:Unity.Serialization.Json.IJsonDeserializationContext"/> provides an untyped context for contravariant serialization adapters.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.IJsonDeserializationContext.SerializedValue">
            <summary>
            Gets the serialized view for value being deserialized. 
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonDeserializationContext.GetInstance">
            <summary>
            Gets the existing instance if overwriting; otherwise default.
            </summary>
            <returns>The existing instance being deserialized in to, or default.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonDeserializationContext.ContinueVisitation">
            <summary>
            Continues de-serialization for the current value. This will run the next adapter in the sequence, or the default behaviour.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonDeserializationContext.ContinueVisitationWithoutAdapters">
            <summary>
            Continues de-serialization for the current type without running any more adapters. This will perform the default behaviour.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonDeserializationContext.DeserializeValue``1(Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Reads the given value type from the stream.
            </summary>
            <param name="view">The view containing the serialized data.</param>
            <typeparam name="T">The value type to deserialize.</typeparam>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.JsonDeserializationContext`1">
            <summary>
            The <see cref="T:Unity.Serialization.Json.JsonDeserializationContext`1"/> is available from adapters. It provides access to the current adapter enumerator and allows for control of deserialization for a given type. 
            </summary>
            <typeparam name="TValue">The value type being deserialized.</typeparam>
        </member>
        <member name="P:Unity.Serialization.Json.JsonDeserializationContext`1.SerializedValue">
            <summary>
            The in-memory representation of the value being deserialized.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.Unity#Serialization#Json#IJsonDeserializationContext#GetInstance">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.GetInstance">
            <summary>
            Gets the existing instance if overwriting; otherwise default.
            </summary>
            <returns>The existing instance of <see cref="!:TValue"/> or default.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitation">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitation(Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Continues visitation for the current type using the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/>. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <param name="view">A view on the serialized data.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitation(`0@)">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <param name="value">The value being deserialized.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitation(`0@,Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Continues visitation for the current type using the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/>. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <param name="value">The value being deserialized.</param>
            <param name="view">A view on the serialized data.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitationWithoutAdapters">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitationWithoutAdapters(Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Continues visitation for the current type using the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/>. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <param name="view">A view on the serialized data.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitationWithoutAdapters(`0@)">
            <summary>
            Continues visitation for the current type. This will invoke the default behaviour and return the deserialized value.
            </summary>
            <param name="value">The value being deserialized.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.ContinueVisitationWithoutAdapters(`0@,Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Continues visitation for the current type using the specified <see cref="T:Unity.Serialization.Json.SerializedValueView"/>. This will invoke the default behaviour and return the deserialized value..
            </summary>
            <param name="value">The value being deserialized.</param>
            <param name="view">A view on the serialized data.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.Unity#Serialization#Json#IJsonDeserializationContext#ContinueVisitation">
            <inheritdoc cref="M:Unity.Serialization.Json.IJsonDeserializationContext.ContinueVisitation"/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.Unity#Serialization#Json#IJsonDeserializationContext#ContinueVisitationWithoutAdapters">
            <inheritdoc cref="M:Unity.Serialization.Json.IJsonDeserializationContext.ContinueVisitationWithoutAdapters"/>
        </member>
        <member name="M:Unity.Serialization.Json.JsonDeserializationContext`1.DeserializeValue``1(Unity.Serialization.Json.SerializedValueView)">
            <summary>
            Reads the given <see cref="P:Unity.Serialization.Json.JsonDeserializationContext`1.SerializedValue"/> as <typeparamref name="T"/> and returns it. This will run all adapters.
            </summary>
            <param name="view">A view on the serialized data.</param>
            <typeparam name="T">The type of the value being deserialized.</typeparam>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.TokenType">
            <summary>
            The <see cref="T:Unity.Serialization.Json.TokenType"/> is used to describe the high level structure of a data tree.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.TokenType.Undefined">
            <summary>
            Unknown token type. Usually this means the token is not initialized.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.TokenType.Object">
            <summary>
            The token holds a reference to all characters between object characters '{'..'}'.
            </summary>
            <remarks>
            This includes the "begin" and "end" object characters.
            </remarks>
        </member>
        <member name="F:Unity.Serialization.Json.TokenType.Array">
             <summary>
             The token holds a reference to all characters between array characters '['..']'.
            
             @NOTE This includes the "begin" and "end" array characters.
             </summary>
        </member>
        <member name="F:Unity.Serialization.Json.TokenType.String">
            <summary>
            The token holds a reference to all characters between string characters '"'..'"'.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.TokenType.Primitive">
            <summary>
            Holds a reference to characters that represent any value that does not fit into the above categories.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.TokenType.Comment">
            <summary>
            The token holds a reference to all characters of a comment block.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyVisitor.k_SerializedId">
            <summary>
            The key used as an id when a given object has references to it.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyVisitor.k_SerializedReferenceKey">
            <summary>
            The key used when an object is a serialized reference. This member will refers to the <see cref="F:Unity.Serialization.Json.JsonPropertyVisitor.k_SerializedId"/> of another object.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyVisitor.k_SerializedTypeKey">
            <summary>
            The key used when writing out custom type information.
            This can be consumed during deserialization to reconstruct the concrete type.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyVisitor.k_SerializedVersionKey">
            <summary>
            The key used when writing out serialized version information.
            This can be consumed during deserialization to handle migration.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonPropertyVisitor.k_SerializedElementsKey">
            <summary>
            The key used to hold collection elements when extra mata-data is present.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonPropertyVisitor.LockScope">
            <summary>
            Scope used to lock the current visitor as being in use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonPropertyVisitor.LockScope.#ctor(Unity.Serialization.Json.JsonPropertyVisitor)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Json.JsonPropertyVisitor.LockScope"/>.
            </summary>
            <param name="visitor">The current visitor.</param>
        </member>
        <member name="M:Unity.Serialization.Json.JsonPropertyVisitor.LockScope.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Unity.Serialization.Json.JsonPropertyVisitor.IsLocked">
            <summary>
            Returns true if the reader is currently in use.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonPropertyVisitor.Property">
            <summary>
            Returns the property for the currently visited container.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonPropertyVisitor.CreatePropertyScope(Unity.Properties.IProperty)">
            <summary>
            Creates a container property scope for the visitation.
            </summary>
            <param name="property">The current container property being visited.</param>
            <returns>A disposable scope.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonPropertyVisitor.Lock">
            <summary>
            Creates a lock scope for the visitation.
            </summary>
            <returns>A disposable scope.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.IJsonMigration">
            <summary>
            Base interface used to hold a reference to a typed <see cref="T:Unity.Serialization.Json.IJsonMigration`1"/>.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.IJsonMigration`1">
            <summary>
            Interface used to describe how a specified type should be migrated from one version to another.
            </summary>
            <typeparam name="TValue">The type this interface defines migration for.</typeparam>
        </member>
        <member name="P:Unity.Serialization.Json.IJsonMigration`1.Version">
            <summary>
            The current serialized version for the type.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IJsonMigration`1.Migrate(Unity.Serialization.Json.JsonMigrationContext@)">
            <summary>
            Implement this method to manage migration for <typeparamref name="TValue"/>.
            </summary>
            <param name="context">A context object used to unpack and transfer the data.</param>
            <returns>The deserialized and migrated value.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.IContravariantJsonMigration`1">
            <summary>
            Interface used to describe how a specified type should be migrated from one version to another.
            </summary>
            <typeparam name="TValue">The type this interface defines migration for.</typeparam>
        </member>
        <member name="P:Unity.Serialization.Json.IContravariantJsonMigration`1.Version">
            <summary>
            The current serialized version for the type.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IContravariantJsonMigration`1.Migrate(Unity.Serialization.Json.JsonMigrationContext@)">
            <summary>
            Implement this method to manage migration for <typeparamref name="TValue"/>.
            </summary>
            <param name="context">A context object used to unpack and transfer the data.</param>
            <returns>The deserialized and migrated value.</returns>
        </member>
        <member name="F:Unity.Serialization.Json.UnsafePackedBinaryStream.ResultSuccess">
            <summary>
            All input characters were consumes and all tokens were generated.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.UnsafePackedBinaryStream.ResultStackOverflow">
            <summary>
            The maximum depth limit has been exceeded.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.PackedBinaryStream">
            <summary>
            Output stream for deserialization. This stream is used to retain relevant data parsed during deserialization.
            </summary>
            <remarks>
            The contents of the stream are not actualized and instead remain as a string of characters.
            </remarks>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.#ctor(Unity.Collections.Allocator)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> using default capacities.
            </summary>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.#ctor(System.Int32,System.Int32,Unity.Collections.Allocator)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> using the given capacities.
            </summary>
            <param name="initialTokensCapacity">Initial number of tokens to allocate.</param>
            <param name="initialBufferCapacity">Initial buffer size to allocate.</param>
            <param name="label">Allocator to use for internal buffers.</param>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Unity.Serialization.Json.PackedBinaryStream" />.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.Clear">
            <summary>
            Clears all token and buffer data.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.DiscardCompleted">
            <summary>
            Discards completed data from the buffers.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.Equals(Unity.Serialization.Json.PackedBinaryStream)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryStream.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedObjectView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents a set of key-values.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedObjectView.Enumerator">
            <summary>
            Enumerates the elements of <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectView.Enumerator.Current">
            <summary>
            The element in the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator" />.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectView.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectView.Item(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectView.Item(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectView.Item(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.GetMember(System.String)">
            <summary>
            Gets the member associated with the specified key.
            </summary>
            <param name="name">The key of the member to get.</param>
            <returns>Returns the member associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetMember(System.String,Unity.Serialization.Json.SerializedMemberView@)">
            <summary>
            Gets the member associated with the specified key.
            </summary>
            <param name="name">The key of the member to get.</param>
            <param name="member">When this method returns, contains the member associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.GetValue(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <returns>Returns the value associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValue(System.String,Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValueAsString(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key as a <see cref="T:System.String"/>.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key and type, if the key is found and the type matches; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key and type; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValueAsInt64(System.String,System.Int64@)">
            <summary>
            Gets the value associated with the specified key as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key and type, if the key is found and the type matches; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key and type; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValueAsUInt64(System.String,System.UInt64@)">
            <summary>
            Gets the value associated with the specified key as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key and type, if the key is found and the type matches; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key and type; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValueAsFloat(System.String,System.Single@)">
            <summary>
            Gets the value associated with the specified key as a <see cref="T:System.Single"/>.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key and type, if the key is found and the type matches; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key and type; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValueAsDouble(System.String,System.Double@)">
            <summary>
            Gets the value associated with the specified key as a <see cref="T:System.Double"/>.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key and type, if the key is found and the type matches; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key and type; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValueAsBoolean(System.String,System.Boolean@)">
            <summary>
            Gets the value associated with the specified key as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key and type, if the key is found and the type matches; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key and type; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.GetValue``1(``0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>Returns the value associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetValue``1(``0@,Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.GetMember``1(``0@)">
            <summary>
            Gets the member associated with the specified key.
            </summary>
            <param name="name">The key of the member to get.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>Returns the member associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.TryGetMember``1(``0@,Unity.Serialization.Json.SerializedMemberView@)">
            <summary>
            Gets the member associated with the specified key.
            </summary>
            <param name="name">The key of the member to get.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <param name="member">When this method returns, contains the member associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.System#Collections#Generic#IEnumerable{Unity#Serialization#Json#SerializedMemberView}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedObjectView.Enumerator"/> for the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectView.op_Implicit(Unity.Serialization.Json.SerializedObjectView)~Unity.Serialization.Json.SerializedValueView">
            <summary>
            Re-interprets the specified object view to an untyped value view.
            </summary>
            <param name="view">The object view to re-interpret.</param>
            <returns>The untyped value view for the given object.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.JsonValidationType">
            <summary>
            The validation type to use.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationType.None">
            <summary>
            No validation is performed.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationType.Standard">
            <summary>
            Validation is performed against the standard json spec.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationType.Simple">
            <summary>
            Only structural validation is performed.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeNodeParser.Step">
            <summary>
            Reads the next node from the input stream and advances the position by one.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeNodeParser.Step(Unity.Serialization.Json.NodeType,System.Int32)">
            <summary>
            Reads until the given node type and advances the position.
            <param name="type">The node type to break at.</param>
            <param name="parent">The minimum parent to break at.</param>
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeNodeParser.StepBatch(System.Int32,Unity.Serialization.Json.NodeType,System.Int32)">
            <summary>
            Reads until the given number of matching nodes have been read.
            </summary>
            <param name="count">The maximum number of elements of the given type/parent to read.</param>
            <param name="type">The node type to break at.</param>
            <param name="parent">The minimum parent to break at.</param>
            <returns>The number of batch elements that have been read.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafeNodeParser.Evaluate(Unity.Serialization.Json.NodeType,System.Int32)">
             <summary>
             Evaluate user instruction to determine if we should break the parsing.
            
             @TODO Cleanup; far too many checks happening here
             </summary>
        </member>
        <member name="M:Unity.Serialization.Json.NodeParser.Seek(System.Int32,System.Int32)">
            <summary>
            Seeks the parser to the given token/parent combination.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.NodeParser.Step">
            <summary>
            Reads the next node from the input stream and advances the position by one.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.NodeParser.Step(Unity.Serialization.Json.NodeType,System.Int32)">
            <summary>
            Reads until the given node type and advances the position.
            <param name="type">The node type to break at.</param>
            <param name="parent">The minimum parent to break at.</param>
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.NodeParser.StepBatch(System.Int32,Unity.Serialization.Json.NodeType,System.Int32)">
            <summary>
            Reads until the given number of matching nodes have been read.
            </summary>
            <param name="count">The maximum number of elements of the given type/parent to read.</param>
            <param name="type">The node type to break at.</param>
            <param name="parent">The minimum parent to break at.</param>
            <returns>The number of batch elements that have been read.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.JsonAdapterCollection.Enumerator">
            <summary>
            Enumerates a set of adapters in a pre-defined order. This will iterate user, global and finally internal.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.NodeType">
             <summary>
             Step instructions for the high-level reader API.
            
             This is used as input to control the parser.
             </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.None">
            <summary>
            Continue reading until there are no more characters.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.BeginObject">
            <summary>
            Start of an object.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.ObjectKey">
            <summary>
            Start of a new member.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.EndObject">
            <summary>
            End of an object.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.BeginArray">
            <summary>
            Start of an array/collection.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.EndArray">
            <summary>
            End of an array/collection.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.String">
            <summary>
            End of a string.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.Primitive">
            <summary>
            End of a primitive (number, boolean, nan, etc.).
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.Comment">
            <summary>
            End of a comment.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.NodeType.Any">
            <summary>
            Any node type.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectViewPropertyBag.Property.Name">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectViewPropertyBag.Property.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectViewPropertyBag.Property.GetValue(Unity.Serialization.Json.SerializedObjectView@)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectViewPropertyBag.Property.SetValue(Unity.Serialization.Json.SerializedObjectView@,Unity.Serialization.Json.SerializedValueView)">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Serialization.Json.JsonSerializationState">
            <summary>
            This class is used to store state between multiple serialization calls.
            By passing this to <see cref="T:Unity.Serialization.Json.JsonSerializationParameters"/> will allow visitors and serialized references to be re-used.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationState.IsLocked">
            <summary>
            Returns true if the given state is in use by either serialization or de-serialization.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.GetJsonPropertyWriter">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.Json.JsonPropertyWriter"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Json.JsonPropertyWriter"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.GetJsonPropertyReader">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.Json.JsonPropertyReader"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Json.JsonPropertyReader"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.GetSerializedReferences">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.SerializedReferences"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.SerializedReferences"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.GetSerializedReferenceVisitor">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.SerializedReferenceVisitor"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.SerializedReferenceVisitor"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.GetDeserializationEvents">
            <summary>
            Gets the shared <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.ClearSerializedReferences">
            <summary>
            Clears the serialized references state.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.JsonSerializationState.ClearDeserializationEvents">
            <summary>
            Clears the deserialization events state.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.JsonSerializationParameters">
            <summary>
            Custom parameters to use for json serialization or deserialization.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.SerializedType">
            <summary>
            By default, a polymorphic root type will have it's assembly qualified type name written to the output in the "$type" field.
            Use this parameter to provide a known root type at both serialize and deserialize time to avoid writing this information OR
            if this information is missing from the json string.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.DisableRootAdapters">
            <summary>
            By default, adapters are evaluated for root objects. Use this to change the default behaviour.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.UserDefinedAdapters">
            <summary>
            Provide a custom set of adapters for the serialization. These adapters will be evaluated first before any global or built in adapters.
            </summary>
            <remarks>
            To register a global adapter see <see cref="M:Unity.Serialization.Json.JsonSerialization.AddGlobalAdapter(Unity.Serialization.Json.IJsonAdapter)"/>.
            </remarks>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.UserDefinedMigrations">
            <summary>
            Provide a custom set of migration adapters for the serialization. These adapters will be evaluated first before any global or built in adapters.
            </summary>
            <remarks>
            To register a global migration see <see cref="M:Unity.Serialization.Json.JsonSerialization.AddGlobalMigration(Unity.Serialization.Json.IJsonMigration)"/>.
            </remarks>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.UserData">
            <summary>
            Stores user data which is passed to the migration adapter context.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.InitialCapacity">
            <summary>
            The initial capacity (in characters) to use for the internal writer if none is provided. The default value is 32.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.RequiresThreadSafety">
            <summary>
            This parameter indicates if the serialization should be thread safe. The default value is false.
            </summary>
            <remarks>
            Setting this to true will cause managed allocations for the internal visitor.
            </remarks>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.DisableSerializedReferences">
            <summary>
            By default, references between objects are serialized. Use this to always write a copy of the object to the output.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.Minified">
            <summary>
            Use this parameter to write minified json.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.Simplified">
            <summary>
            Use this parameter to write simplified json.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.DisableValidation">
            <summary>
            Use this parameter to disable the validation step. This can increase performance.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.Indent">
            <summary>
            The indent value to use when writing.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.JsonSerializationParameters.State">
            <summary>
            Sets the state object for serialization. This can be used to share resources across multiple calls to serialize and deserialize.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.EventType">
            <summary>
            The type of the event encountered during deserialization.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.EventType.Error">
            <summary>
            <see cref="T:Unity.Serialization.Json.EventType"/> used for errors.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.EventType.Assert">
            <summary>
            <see cref="T:Unity.Serialization.Json.EventType"/> used for assertions.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.EventType.Warning">
            <summary>
            <see cref="T:Unity.Serialization.Json.EventType"/> used for warnings.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.EventType.Log">
            <summary>
            <see cref="T:Unity.Serialization.Json.EventType"/> used for logs.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.EventType.Exception">
            <summary>
            <see cref="T:Unity.Serialization.Json.EventType"/> used for exceptions.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.DeserializationEvent">
            <summary>
            Structure to events that occur during deserialization.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.DeserializationEvent.Type">
            <summary>
            The type of event.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.DeserializationEvent.Payload">
            <summary>
            The payload for the event.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.DeserializationEvent.#ctor(Unity.Serialization.Json.EventType,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Json.DeserializationEvent"/> with the specified parameters.
            </summary>
            <param name="type">The type of event that occured.</param>
            <param name="payload">The payload or message for the event.</param>
        </member>
        <member name="M:Unity.Serialization.Json.DeserializationEvent.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Serialization.Json.DeserializationResult">
            <summary>
            Object containing the results of a deserialization. Use this to capture any errors or events.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.DeserializationResult.Events">
            <summary>
            Returns all <see cref="T:Unity.Serialization.Json.DeserializationEvent"/> that occured during deserialization.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.DeserializationResult.Logs">
            <summary>
            Returns any events with <see cref="F:Unity.Serialization.Json.EventType.Log"/> that occured during deserialization.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.DeserializationResult.Errors">
            <summary>
            Returns any events with <see cref="F:Unity.Serialization.Json.EventType.Error"/> that occured during deserialization.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.DeserializationResult.Warnings">
            <summary>
            Returns any events with <see cref="F:Unity.Serialization.Json.EventType.Warning"/> that occured during deserialization.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.DeserializationResult.Exceptions">
            <summary>
            Returns any events with <see cref="F:Unity.Serialization.Json.EventType.Exception"/> that occured during deserialization.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.DeserializationResult.Throw">
            <summary>
            Rethrows any errors encountered during deserialization. 
            </summary>
            <remarks>
            If a single exception was encountered the exception is re-thrown. If multiple exceptions were encountered a <see cref="T:System.AggregateException"/> is thrown.
            </remarks>
        </member>
        <member name="M:Unity.Serialization.Json.DeserializationResult.DidSucceed">
            <summary>
            Gets the status of the deserialization.
            </summary>
            <returns><see langword="true"/> if deserialization succeeded; otherwise, false.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedValueView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents any value.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedValueView.Type">
            <summary>
            The <see cref="T:Unity.Serialization.Json.TokenType"/> for this view. Use this to check which conversions are valid.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedValueView.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.InvalidOperationException">The view does not represent an object type.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedValueView.Item(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.InvalidOperationException">The view does not represent an object type.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedValueView.Item(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.InvalidOperationException">The view does not represent an object type.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedValueView.Item(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <exception cref="T:System.InvalidOperationException">The view does not represent an object type.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key does not exist in the collection.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.GetValue(System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <returns>Returns the value associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.TryGetValue(System.String@,Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.GetValue``1(``0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>Returns the value associated with the specified key.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.TryGetValue``1(``0@,Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value.</param>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>true if the <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.IsMember">
            <summary>
            Returns true if the value represents a member.
            </summary>
            <returns>True if the value is a member.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.IsNull">
            <summary>
            Returns true if the value represents a null value token.
            </summary>
            <returns><see langword="true"/> if the value represents a null value token.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsArrayView">
            <summary>
            Reinterprets the value as an array.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.SerializedArrayView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsObjectView">
            <summary>
            Reinterprets the value as an object.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsStringView">
            <summary>
            Reinterprets the value as an string.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.SerializedStringView"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The value could not be reinterpreted.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsMemberView">
            <summary>
            Reinterprets the value as a member.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.SerializedMemberView"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The value could not be reinterpreted.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsPrimitiveView">
            <summary>
            Reinterprets the value as a primitive.
            </summary>
            <returns>The value as a <see cref="T:Unity.Serialization.Json.SerializedPrimitiveView"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsInt64">
            <summary>
            Reinterprets the value as a long.
            </summary>
            <returns>The value as a long.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsInt32">
            <summary>
            Reinterprets the value as a int.
            </summary>
            <returns>The value as an int.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsUInt64">
            <summary>
            Reinterprets the value as a ulong.
            </summary>
            <returns>The value as a ulong.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsFloat">
            <summary>
            Reinterprets the value as a float.
            </summary>
            <returns>The value as a float.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsDouble">
            <summary>
            Reinterprets the value as a double.
            </summary>
            <returns>The value as a double.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsBoolean">
            <summary>
            Reinterprets the value as a bool.
            </summary>
            <returns>The value as a bool.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.ToString">
            <summary>
            Returns the value as a string.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsFixedString``1">
            <summary>
            Returns the value as a string.
            </summary>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsNativeText(Unity.Collections.Allocator)">
            <summary>
            Returns the value as a string.
            </summary>
            <param name="allocator">The allocator to use for the text.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedValueView.AsUnsafeText(Unity.Collections.Allocator)">
            <summary>
            Returns the value as a string.
            </summary>
            <param name="allocator">The allocator to use for the text.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.UnsafePackedBinaryWriter.IsObjectKey(Unity.Serialization.Json.Token*,System.Int32)">
            <summary>
            Returns true if the given token is an object key.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryWriter.Seek(System.Int32,System.Int32)">
            <summary>
            Seeks the writer to the given token/parent combination.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.PackedBinaryWriter.Write(Unity.Serialization.UnsafeBuffer{System.Char},System.Int32)">
            <summary>
            Writes tokens and characters to the internal binary stream.
            </summary>
            <param name="buffer">A character array containing the input data that was tokenized.</param>
            <param name="count">The number of tokens to write.</param>
            <returns>The number of tokens written.</returns>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationResult.ValidationType">
            <summary>
            The validation type that was used.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationResult.ExpectedType">
            <summary>
            The type that was expected by the validator.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationResult.ActualType">
            <summary>
            The type that the validator stopped at.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationResult.Char">
            <summary>
            The character that the validator stopped at.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationResult.LineCount">
            <summary>
            The line the validator stopped at.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.JsonValidationResult.CharCount">
            <summary>
            The char (on the line) the validator stopped at.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.Token.Type">
            <summary>
            The token type.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.Token.Parent">
            <summary>
            The parent token. This can be an object, array, member, or part of a split token.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.Token.Start">
            <summary>
            The start position in the original input data.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.Token.End">
             <summary>
             The end position in the original input data.
            
             This points to the character after the data.
             </summary>
        </member>
        <member name="F:Unity.Serialization.Json.UnsafeJsonTokenStream.PartialTokenStart">
            <summary>
            Special start value to signify this is a partial token continuation.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.UnsafeJsonTokenStream.PartialTokenEnd">
            <summary>
            Special end value to signify there is another part to follow.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.UnsafeJsonTokenStream.DefaultDiscardDepthLimit">
            <summary>
            The default depth limit for discarding completed tokens.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedPrimitiveView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents any unquoted value.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsInfinity">
            <summary>
            Returns true if the primitive represents infinity.
            </summary>
            <returns>True if this primitive is infinity; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsNaN">
            <summary>
            Returns true if the primitive represents a value that is not a number.
            </summary>
            <returns>True if this primitive is nan; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsNull">
            <summary>
            Returns true if the primitive represents a value that is null.
            </summary>
            <returns>True if this primitive is null; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsIntegral">
            <summary>
            Returns true if the primitive is an integral type.
            </summary>
            <returns>True if this primitive is an integral type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsDecimal">
            <summary>
            Returns true if the primitive is a decimal type.
            </summary>
            <returns>True if this primitive is an decimal type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsSigned">
            <summary>
            Returns true if the primitive is a signed type.
            </summary>
            <returns>True if this primitive is an signed type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.IsBoolean">
            <summary>
            Returns true if the primitive is a boolean type.
            </summary>
            <returns>True if this primitive is an boolean type; false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsStringView">
            <summary>
            Returns a string view over the primitive.
            </summary>
            <returns>A <see cref="T:Unity.Serialization.Json.SerializedStringView"/> over this primitive.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsString">
            <summary>
            Allocates and returns a new <see cref="T:System.String"/> for the primitive.
            </summary>
            <returns>A <see cref="T:System.String"/> copy of the primitive.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsInt64">
            <summary>
            Reinterprets the primitive as a long.
            </summary>
            <returns>The primitive as a long.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsUInt64">
            <summary>
            Reinterprets the primitive as a ulong.
            </summary>
            <returns>The primitive as a ulong.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsFloat">
            <summary>
            Reinterprets the primitive as a float.
            </summary>
            <returns>The primitive as a float.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsDouble">
            <summary>
            Reinterprets the primitive as a double.
            </summary>
            <remarks>
            This method relies on a string allocation for <see cref="M:System.Double.Parse(System.String)"/>. 
            </remarks>
            <returns>The primitive as a double.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsBoolean">
            <summary>
            Reinterprets the primitive as a bool.
            </summary>
            <returns>The primitive as a bool.</returns>
            <exception cref="T:Unity.Serialization.ParseErrorException">The parser failed to convert the characters.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.ToString">
            <summary>
            Returns the value as a string.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsFixedString``1">
            <summary>
            Returns the value as a string.
            </summary>
            <typeparam name="T">The fixed string type.</typeparam>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsNativeText(Unity.Collections.Allocator)">
            <summary>
            Returns the value as a string.
            </summary>
            <param name="allocator">The allocator to use for the text.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedPrimitiveView.AsUnsafeText(Unity.Collections.Allocator)">
            <summary>
            Returns the value as a string.
            </summary>
            <param name="allocator">The allocator to use for the text.</param>
            <returns>The value as a string.</returns>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedMemberView">
            <summary>
            A view on top of the <see cref="T:Unity.Serialization.Json.PackedBinaryStream"/> that represents a key-value pair.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberView.Name">
            <summary>
            Returns a <see cref="T:Unity.Serialization.Json.SerializedStringView"/> over the name of this member.
            </summary>
            <returns>A view over the name.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedMemberView.Value">
            <summary>
            Returns a <see cref="T:Unity.Serialization.Json.SerializedValueView"/> over the value of this member.
            </summary>
            <returns>A view over the value.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.IUnsafeStreamBlockReader.Reset">
            <summary>
            Resets the reader for re-use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.IUnsafeStreamBlockReader.GetNextBlock">
            <summary>
            Returns the next block in the stream.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedObjectReaderConfiguration">
            <summary>
            Parameters used to configure the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/>.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.UseReadAsync">
            <summary>
            If true, the input stream is read asynchronously. The default is true.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.BlockBufferSize">
            <summary>
            The buffer size, in bytes, of the blocks/chunks read from the input stream. The default size is 4096.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.TokenBufferSize">
            <summary>
            The internal token buffer size, in tokens. This should be big enough to contain all tokens generated from a block. The default size is 1024.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.OutputBufferSize">
            <summary>
            The packed binary output buffer size, in bytes. This should be big enough to contain all string and primitive data for the needed scope. The default size is 4096.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.NodeBufferSize">
            <summary>
            The size of the Node buffer for internal reads. For optimal performance, this should be equal to the maximum batch size. The default size is 128.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.ValidationType">
            <summary>
            JSON validation type to use. The default is <see cref="F:Unity.Serialization.Json.JsonValidationType.Standard"/>.
            </summary>
        </member>
        <member name="F:Unity.Serialization.Json.SerializedObjectReaderConfiguration.Default">
            <summary>
            The default parameters used by the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/>.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Json.SerializedObjectReader">
            <summary>
            The <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> is the high level API used to deserialize a stream of data.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Json.SerializedObjectReader.RequiresExplicitExceptionHandling">
            <summary>
            If this flag is true. No exceptions are thrown unless <see cref="M:Unity.Serialization.Json.SerializedObjectReader.CheckAndThrowInvalidJsonException"/> is called.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified configuration.
            </summary>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(Unity.Serialization.Json.PackedBinaryStream,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified configuration.
            </summary>
            <param name="output">The output stream.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.String,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class with the specified path.
            </summary>
            <param name="path">A relative or absolute file path.</param>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.String,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class with the specified path and configuration.
            </summary>
            <param name="path">A relative or absolute file path.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.String,Unity.Serialization.Json.PackedBinaryStream,Unity.Collections.Allocator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class with the specified path and output stream.
            </summary>
            <param name="path">A relative or absolute file path.</param>
            <param name="output">The output stream.</param>
            <param name="label">The memory allocator label to use.</param>
            <param name="leaveOutputOpen">True to leave the stream open after the reader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.String,Unity.Serialization.Json.PackedBinaryStream,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class with the specified path, output stream and configuration.
            </summary>
            <param name="path">A relative or absolute file path.</param>
            <param name="output">The output stream.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
            <param name="leaveOutputOpen">True to leave the output stream open after the reader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.IO.Stream,Unity.Collections.Allocator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified input stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="label">The memory allocator label to use.</param>
            <param name="leaveInputOpen">True to leave the input stream open after the reader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.IO.Stream,Unity.Serialization.Json.PackedBinaryStream,Unity.Collections.Allocator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified input stream and output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="label">The memory allocator label to use.</param>
            <param name="leaveInputOpen">True to leave the input stream open after the reader object is disposed; otherwise, false.</param>
            <param name="leaveOutputOpen">True to leave the output stream open after the reader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.IO.Stream,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified input stream and configuration.
            </summary>
            <param name="input">The input stream.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
            <param name="leaveInputOpen">True to leave the input stream open after the reader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.IO.Stream,Unity.Serialization.Json.PackedBinaryStream,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified input stream, output stream and configuration.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
            <param name="leaveInputOpen">True to leave the input stream open after the reader object is disposed; otherwise, false.</param>
            <param name="leaveOutputOpen">True to leave the output stream open after the reader object is disposed; otherwise, false.</param>
            <exception cref="T:System.ArgumentException">The configuration is invalid.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.Char*,System.Int32,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified input buffer and configuration.
            </summary>
            <param name="buffer">The pointer to the input buffer.</param>
            <param name="length">The input buffer length.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.#ctor(System.Char*,System.Int32,Unity.Serialization.Json.PackedBinaryStream,Unity.Serialization.Json.SerializedObjectReaderConfiguration,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.Json.SerializedObjectReader"/> class based on the specified input buffer, output stream and configuration.
            </summary>
            <param name="buffer">The pointer to the input buffer.</param>
            <param name="length">The input buffer length.</param>
            <param name="output">The output stream.</param>
            <param name="configuration">The configuration parameters to use for the reader.</param>
            <param name="label">The memory allocator label to use.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Unity.Serialization.Json.SerializedObjectReader" />.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Reset">
            <summary>
            Resets the reader for re-use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.SetSource(System.Char*,System.Int32)">
            <summary>
            Sets the data source for the reader.
            </summary>
            <remarks>
            This will invalidate any generated views from this reader.
            </remarks>
            <param name="ptr">The char buffer.</param>
            <param name="length">The char buffer length.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Step(Unity.Serialization.Json.NodeType)">
            <summary>
            Advances the reader to the given node type, ignoring depth/scope.
            </summary>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Step(Unity.Serialization.Json.SerializedValueView@,Unity.Serialization.Json.NodeType)">
            <summary>
            Advances the reader to the given node type, ignoring depth/scope.
            </summary>
            <param name="view">The view at the returned node type.</param>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Read(System.Char*,System.Int32)">
            <summary>
            Reads the specified data and returns a new <see cref="T:Unity.Serialization.Json.SerializedValueView"/>.
            </summary>
            <remarks>
            This will invalidate any generated views from this reader.
            </remarks>
            <param name="ptr">The char buffer.</param>
            <param name="length">The char buffer length.</param>
            <returns>The view for the first node in the stream.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Read(Unity.Serialization.Json.NodeType)">
            <summary>
            Reads the next node in the stream, respecting depth/scope.
            </summary>
            <param name="node">The node type to stop at.</param>
            <returns>The node type that was read.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.Read(Unity.Serialization.Json.SerializedValueView@,Unity.Serialization.Json.NodeType)">
            <summary>
            Reads the next node in the stream, respecting depth/scope.
            </summary>
            <param name="view">The view at the returned node type.</param>
            <param name="node">The node type to stop at.</param>
            <returns>The node type the parser stopped at.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.ReadObject">
            <summary>
            Reads the next node as a <see cref="T:Unity.Serialization.Json.SerializedObjectView"/>
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Json.SerializedObjectView"/> that was read.</returns>
            <exception cref="T:System.InvalidOperationException">The reader state is invalid.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.ReadMember">
            <summary>
            Reads the next node as a <see cref="T:Unity.Serialization.Json.SerializedMemberView"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The reader state is invalid.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.ReadMember(Unity.Serialization.Json.SerializedMemberViewCollection)">
            <summary>
            Reads the next node as a member, respecting depth/scope and adds it to the given <see cref="T:Unity.Serialization.Json.SerializedMemberViewCollection"/>.
            </summary>
            <param name="collection">The collection to add the member to.</param>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.ReadArrayElement(Unity.Serialization.Json.SerializedValueView@)">
            <summary>
            Reads the next node as an array element.
            </summary>
            <param name="view">The view of the array element.</param>
            <returns>True if the element was successfully read, false otherwise.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.ReadArrayElementBatch(Unity.Collections.NativeArray{Unity.Serialization.Json.SerializedValueView},System.Int32)">
            <summary>
            Reads the next <see cref="!:count"/> elements of an array and writes views to the given buffer.
            </summary>
            <param name="views">The array to write the views to.</param>
            <param name="count">The number of elements to read.</param>
            <returns>The number of elements read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The count exceeded the array of views.</exception>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.ReadArrayElementBatch(Unity.Serialization.Json.SerializedValueView*,System.Int32)">
            <summary>
            Reads the next <see cref="!:count"/> elements of an array and writes views to the given buffer.
            </summary>
            <param name="views">The buffer to write the views to.</param>
            <param name="count">The number of elements to read.</param>
            <returns>The number of elements read.</returns>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.DiscardCompleted">
            <summary>
            Discards completed data from the buffers.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Json.SerializedObjectReader.CheckAndThrowInvalidJsonException">
            <summary>
            Throws any invalid json exceptions generated from within a burst context.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Binary.BinaryPropertyVisitor.LockScope">
            <summary>
            Scope used to lock the current visitor as being in use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryPropertyVisitor.LockScope.#ctor(Unity.Serialization.Binary.BinaryPropertyVisitor)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.Binary.BinaryPropertyVisitor.LockScope"/>.
            </summary>
            <param name="visitor">The current visitor.</param>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryPropertyVisitor.LockScope.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Unity.Serialization.Binary.BinaryPropertyVisitor.IsLocked">
            <summary>
            Returns true if the reader is currently in use.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryPropertyVisitor.Lock">
            <summary>
            Creates a lock scope for the visitation.
            </summary>
            <returns>A disposable scope.</returns>
        </member>
        <member name="T:Unity.Serialization.Binary.BinarySerialization">
            <summary>
            High level API for serializing or deserializing json data from string, file or stream.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerialization.ToBinary``1(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer*,``0,Unity.Serialization.Binary.BinarySerializationParameters)">
            <summary>
            Serializes the given object to the given stream as binary.
            </summary>
            <param name="stream">The stream to write the object to.</param>
            <param name="value">The object to serialize.</param>
            <param name="parameters">Parameters to use when writing.</param>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerialization.FromBinary``1(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader*,Unity.Serialization.Binary.BinarySerializationParameters)">
            <summary>
            Deserializes from the specified stream and returns a new instance of <typeparamref name="T"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="parameters">The parameters to use when reading.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> constructed from the serialized data.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerialization.AddGlobalAdapter(Unity.Serialization.Binary.IBinaryAdapter)">
            <summary>
            Adds the specified <see cref="T:Unity.Serialization.Binary.IBinaryAdapter"/> to the set of global adapters. This is be included by default in all BinarySerialization calls.
            </summary>
            <param name="adapter">The adapter to add.</param>
            <exception cref="T:System.ArgumentException">The given adapter is already registered.</exception>
        </member>
        <member name="T:Unity.Serialization.Binary.BinaryAdapterCollection.Enumerator">
            <summary>
            Enumerates a set of adapters in a pre-defined order. This will iterate user, global and finally internal.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Binary.IBinarySerializationContext">
            <summary>
            The <see cref="T:Unity.Serialization.Binary.IBinarySerializationContext"/> provides an untyped context for contravariant serialization adapters.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.IBinarySerializationContext.Writer">
            <summary>
            Gets the underlying <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer"/> which can be used to output data.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinarySerializationContext.ContinueVisitation">
            <summary>
            Continues serialization for the current value. This will run the next adapter in the sequence, or the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinarySerializationContext.ContinueVisitationWithoutAdapters">
            <summary>
            Continues serialization for the current type without running any more adapters. This will perform the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinarySerializationContext.SerializeValue``1(``0)">
            <summary>
            Writes the given <paramref name="value"/> to the stream. This will run all adapters.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The value type to write.</typeparam>
        </member>
        <member name="T:Unity.Serialization.Binary.BinarySerializationContext`1">
            <summary>
            The <see cref="T:Unity.Serialization.Binary.BinarySerializationContext`1"/> is available from adapters. It provides access to the current adapter enumerator and allows for control of serialization for a given type. 
            </summary>
            <typeparam name="TValue">The value type being serialized.</typeparam>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationContext`1.Writer">
            <summary>
            Gets the underlying <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer"/> which can be used to output data.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationContext`1.ContinueVisitation">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationContext`1.ContinueVisitationWithoutAdapters">
            <summary>
            Continues visitation for the current type without running any more adapters. This will perform the default behaviour.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationContext`1.SerializeValue``1(``0)">
            <summary>
            Writes the given <paramref name="value"/> to the stream. This will run all adapters.
            </summary>
            <param name="value">The value to write.</param>
            <typeparam name="T">The value type to write.</typeparam>
        </member>
        <member name="T:Unity.Serialization.Binary.IBinaryDeserializationContext">
            <summary>
            The <see cref="T:Unity.Serialization.Binary.IBinaryDeserializationContext"/> provides an untyped context for contravariant serialization adapters.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.IBinaryDeserializationContext.Reader">
            <summary>
            Gets the serialized view for value being deserialized. 
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinaryDeserializationContext.ContinueVisitation">
            <summary>
            Continues de-serialization for the current value. This will run the next adapter in the sequence, or the default behaviour.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinaryDeserializationContext.ContinueVisitationWithoutAdapters">
            <summary>
            Continues de-serialization for the current type without running any more adapters. This will perform the default behaviour.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinaryDeserializationContext.DeserializeValue``1">
            <summary>
            Reads the next value in the stream as <typeparamref name="T"/> and returns it. This will run all adapters.
            </summary>
            <typeparam name="T">The type of the value being deserialized.</typeparam>
            <returns>The instance of type <see cref="!:T"/> deserialized.</returns>
        </member>
        <member name="T:Unity.Serialization.Binary.BinaryDeserializationContext`1">
            <summary>
            The <see cref="T:Unity.Serialization.Binary.BinaryDeserializationContext`1"/> is available from adapters. It provides access to the current adapter enumerator and allows for control of deserialization for a given type. 
            </summary>
            <typeparam name="TValue">The value type being deserialized.</typeparam>
        </member>
        <member name="P:Unity.Serialization.Binary.BinaryDeserializationContext`1.Reader">
            <summary>
            The in-memory representation of the value being deserialized.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.ContinueVisitation">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.ContinueVisitation(`0@)">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <param name="value">The value being deserialized.</param>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.ContinueVisitationWithoutAdapters">
            <summary>
            Continues visitation for the current type. This will run the next adapter in the sequence, or the default behaviour and return the deserialized value.
            </summary>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.ContinueVisitationWithoutAdapters(`0@)">
            <summary>
            Continues visitation for the current type. This will invoke the default behaviour and return the deserialized value.
            </summary>
            <param name="value">The value being deserialized.</param>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.Unity#Serialization#Binary#IBinaryDeserializationContext#ContinueVisitation">
            <inheritdoc cref="M:Unity.Serialization.Binary.IBinaryDeserializationContext.ContinueVisitation"/>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.Unity#Serialization#Binary#IBinaryDeserializationContext#ContinueVisitationWithoutAdapters">
            <inheritdoc cref="M:Unity.Serialization.Binary.IBinaryDeserializationContext.ContinueVisitationWithoutAdapters"/>
        </member>
        <member name="M:Unity.Serialization.Binary.BinaryDeserializationContext`1.DeserializeValue``1">
            <summary>
            Reads the next value in the stream as <typeparamref name="T"/> and returns it. This will run all adapters.
            </summary>
            <typeparam name="T">The type of the value being deserialized.</typeparam>
            <returns>The instance of type <see cref="!:T"/> deserialized.</returns>
        </member>
        <member name="T:Unity.Serialization.Binary.IBinaryAdapter">
            <summary>
            Base interface for binary adapters.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Binary.IBinaryAdapter`1">
            <summary>
            Implement this interface to override serialization and deserialization behaviour for a given type.
            </summary>
            <typeparam name="TValue">The type to override serialization for.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinaryAdapter`1.Serialize(Unity.Serialization.Binary.BinarySerializationContext{`0}@,`0)">
            <summary>
            Invoked during serialization to handle writing out the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Binary.IBinaryAdapter`1.Deserialize(Unity.Serialization.Binary.BinaryDeserializationContext{`0}@)">
            <summary>
            Invoked during deserialization to handle reading the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The deserialization context.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Unity.Serialization.Binary.IContravariantBinaryAdapter`1">
            <summary>
            Implement this interface to override serialization and deserialization behaviour for a given type.
            </summary>
            <typeparam name="TValue">The type to override serialization for.</typeparam>
        </member>
        <member name="M:Unity.Serialization.Binary.IContravariantBinaryAdapter`1.Serialize(Unity.Serialization.Binary.IBinarySerializationContext,`0)">
            <summary>
            Invoked during serialization to handle writing out the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Serialization.Binary.IContravariantBinaryAdapter`1.Deserialize(Unity.Serialization.Binary.IBinaryDeserializationContext)">
            <summary>
            Invoked during deserialization to handle reading the specified <typeparamref name="TValue"/>.
            </summary>
            <param name="context">The deserialization context.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="T:Unity.Serialization.Binary.BinarySerializationState">
            <summary>
            This class is used to store state between multiple serialization calls.
            By passing this to <see cref="T:Unity.Serialization.Binary.BinarySerializationParameters"/> will allow visitors and serialized references to be re-used.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationState.IsLocked">
            <summary>
            Returns true if the given state is in use by either serialization or de-serialization.
            </summary>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationState.GetBinaryPropertyWriter">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.Binary.BinaryPropertyWriter"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Binary.BinaryPropertyWriter"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationState.GetBinaryPropertyReader">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.Binary.BinaryPropertyReader"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.Binary.BinaryPropertyReader"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationState.GetSerializedReferences">
            <summary>
            Gets the shared <see cref="T:Unity.Serialization.SerializedReferences"/>.
            </summary>
            <returns>The <see cref="T:Unity.Serialization.SerializedReferences"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.Binary.BinarySerializationState.ClearSerializedReferences">
            <summary>
            Clears the serialized references state.
            </summary>
        </member>
        <member name="T:Unity.Serialization.Binary.BinarySerializationParameters">
            <summary>
            Custom parameters to use for binary serialization or deserialization.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationParameters.SerializedType">
            <summary>
            By default, a polymorphic root type will have it's assembly qualified type name written to the stream. Use this
            parameter to provide a known root type at both serialize and deserialize time to avoid writing this information.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationParameters.DisableRootAdapters">
            <summary>
            By default, adapters are evaluated for root objects. Use this to change the default behaviour.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationParameters.UserDefinedAdapters">
            <summary>
            Provide a custom set of adapters for the serialization and deserialization.
            </summary>
            <remarks>
            These adapters will be evaluated first before any global or built in adapters.
            </remarks>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationParameters.RequiresThreadSafety">
            <summary>
            This parameter indicates if the serializer should be thread safe. The default value is false.
            </summary>
            <remarks>
            Setting this to true will cause managed allocations for the internal visitor.
            </remarks>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationParameters.DisableSerializedReferences">
            <summary>
            By default, references between objects are serialized. Use this to always write a copy of the object to the output.
            </summary>
        </member>
        <member name="P:Unity.Serialization.Binary.BinarySerializationParameters.State">
            <summary>
            Sets the state object for serialization. This can be used to share resources across multiple calls to serialize and deserialize.
            </summary>
        </member>
        <member name="T:Unity.Serialization.ISerializedTypeProvider">
            <summary>
            Interface to allow the serialization backend to provide type information to the type construction system.
            </summary>
        </member>
        <member name="M:Unity.Serialization.ISerializedTypeProvider.GetSerializedType">
            <summary>
            Returns the <see cref="T:System.Type"/> resolved by the serialization backend.
            </summary>
            <returns>The <see cref="T:System.Type"/> which was serialized.</returns>
        </member>
        <member name="M:Unity.Serialization.ISerializedTypeProvider.GetArrayLength">
            <summary>
            Returns the array length. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unity.Serialization.SerializedReferences">
            <summary>
            The <see cref="T:Unity.Serialization.SerializedReferences"/> class can be used to gather, serialize and deserialize object references within a stream.
            </summary>
            <remarks>
            An instance of this class can be shared between top level calls to manage references between multiple serialization calls.
            </remarks>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.AddSerializedReference(System.Object)">
            <summary>
            Creates a new serialized reference to the specified object. This is an internal method.
            </summary>
            <param name="value">The object to reference.</param>
            <returns>The serialized index of the specified object.</returns>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.TryGetSerializedReference(System.Object,System.Int32@)">
            <summary>
            Gets the serialized reference for the specified object. This is an internal method.
            </summary>
            <param name="value">The object to get a reference to.</param>
            <param name="id">When this method returns, contains the id if successful, otherwise default.</param>
            <returns>The serialized index of the specified object.</returns>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.AddDeserializedReference``1(System.Int32,``0)">
            <summary>
            Adds a reference to a deserialized object. This is an internal method.
            </summary>
            <param name="id">The id of the object.</param>
            <param name="value">The deserialized value.</param>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.AddDeserializedReference``1(``0)">
            <summary>
            Adds a reference to a deserialized object. This is an internal method.
            </summary>
            <param name="value">The deserialized value.</param>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.GetDeserializedReference(System.Int32)">
            <summary>
            Gets the deserialized value for the specified id. This is an internal method.
            </summary>
            <param name="id">The id of the deserialized value.</param>
            <returns>The deserialized object for the specified id.</returns>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.SetVisited(System.Object)">
            <summary>
            Flags the specified object as being gathered during the serialized reference pre-pass. This is an internal method.
            </summary>
            <param name="value">The object being visited.</param>
            <returns><see langword="true"/> if this is the first time encountering this object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.SetSerialized(System.Object)">
            <summary>
            Flags the specified object as being serialized during the main serialization pass. This is an internal method.
            </summary>
            <param name="value">The object being serialized.</param>
            <returns><see langword="true"/> if this is the first time encountering this object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.SerializedReferences.Clear">
            <summary>
            Clears this object for re-use. This is an internal method.
            </summary>
        </member>
        <member name="T:Unity.Serialization.SerializedReferenceVisitor">
            <summary>
            This visitor is used as a pre-pass to serialization to gather references between objects. This is an internal class.
            </summary>
        </member>
        <member name="T:Unity.Serialization.PropertyChecks">
            <summary>
            Helper class to validate properties during serialization and deserialization.
            </summary>
        </member>
        <member name="M:Unity.Serialization.PropertyChecks.CheckReadOnlyPropertyForDeserialization``2(Unity.Properties.Property{``0,``1},``0@,``1@,System.String@)">
            <summary>
            Validates a readonly property was correctly deserialized. This can be used this to catch any errors which could fail silently.
            </summary>
            <param name="property">The property being deserialized.</param>
            <param name="container">The container being deserialized.</param>
            <param name="value">The deserialized value from the stream.</param>
            <param name="error">When this method returns, contains the error message. If any.</param>
            <typeparam name="TContainer">The container type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <returns><see langword="true"/> if the value was deserialized correctly despite being readonly; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Unity.Serialization.PropertyChecks.IsPropertyExcludedFromSerialization(Unity.Properties.IProperty)">
            <summary>
            Returns <see langword="true"/> if the property should be skipped during serialization and deserialization.
            </summary>
            <param name="property">The property to check.</param>
            <returns><see langword="true"/> if the property should be skipped; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Unity.Serialization.SerializationException">
            <summary>
            The exception thrown when an error occurs during serialization or deserialization.
            </summary>
        </member>
        <member name="M:Unity.Serialization.SerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.SerializationException"/> class with a specified message.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="T:Unity.Serialization.FormerNameAttribute">
            <summary>
            Use this attribute to rename a struct, class, field or property without losing its serialized value.
            </summary>
        </member>
        <member name="P:Unity.Serialization.FormerNameAttribute.OldName">
            <summary>
            The previous name of the member or type.
            </summary>
        </member>
        <member name="M:Unity.Serialization.FormerNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Serialization.FormerNameAttribute"/> with the specified name.
            </summary>
            <param name="oldName">The previous name of the member or type.</param>
        </member>
        <member name="M:Unity.Serialization.FormerNameAttribute.TryGetCurrentTypeName(System.String,System.String@)">
            <summary>
            Gets the current name based on the previous name.
            </summary>
            <param name="oldName">The previous name of the member or type.</param>
            <param name="currentName">When this method returns, contains the current type name, if the name exists; otherwise default string.</param>
            <returns>True if the given name exists in the remap table.</returns>
        </member>
        <member name="T:Unity.Serialization.DontSerializeAttribute">
            <summary>
            Use this attribute to flag a field or property to be ignored during serialization. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Unity.Serialization.ParseErrorException">
            <summary>
            The exception that is thrown when trying to parse a value as an actual type.
            </summary>
        </member>
        <member name="M:Unity.Serialization.ParseErrorException.#ctor(System.String)">
            <summary>
            Initialized a new instance of the <see cref="T:Unity.Serialization.ParseErrorException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Unity.Serialization.ParseErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.ParseErrorException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception reference.</param>
        </member>
        <member name="M:Unity.Serialization.ParseErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Serialization.ParseErrorException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
    </members>
</doc>
