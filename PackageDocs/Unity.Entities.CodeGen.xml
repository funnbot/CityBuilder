<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Entities.CodeGen</name>
    </assembly>
    <members>
        <member name="M:Unity.Entities.CodeGen.MethodReferenceExtensions.MakeGenericInstanceMethod(Mono.Cecil.MethodReference,Mono.Cecil.TypeReference[])">
             <summary>
             Generates a closed/specialized MethodReference for the given method and types[]
             e.g.
             <![CDATA[struct Foo { T Bar<T>(T val) { return default(T); }]]>
            
             In this case, if one would like a reference to `Foo::int Bar(int val)` this method will construct such a method
             reference when provided the open `T Bar(T val)` method reference and the TypeReferences to the types you'd like
             specified as generic arguments (in this case a TypeReference to "int" would be passed in).
             </summary>
             <param name="method"></param>
             <param name="types"></param>
             <returns></returns>
        </member>
        <member name="M:Unity.Entities.CodeGen.MethodReferenceExtensions.MakeGenericHostMethod(Mono.Cecil.MethodReference,Mono.Cecil.TypeReference)">
             <summary>
             Allows one to generate reference to a method contained in a generic type which has been closed/specialized.
             e.g.
             <![CDATA[struct Foo<T> { T Bar(T val) { return default(T); }]]>
            
             In this case, if one would like a reference to <code><![CDATA[Foo<int>::int Bar(int val)]]></code> this method will construct such a method
             reference when provided the open `T Bar(T val)` method reference and the closed declaring TypeReference, Foo&lt;int&gt;.
             </summary>
             <param name="self"></param>
             <param name="closedDeclaringType">See summary above for example. Typically construct this type using `MakeGenericInstanceMethod`</param>
             <returns></returns>
        </member>
    </members>
</doc>
