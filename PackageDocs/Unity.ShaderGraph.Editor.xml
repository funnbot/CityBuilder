<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.ShaderGraph.Editor</name>
    </assembly>
    <members>
        <member name="T:UnityEditor.ShaderGraph.Drawing.IShaderInputObserver">
            <summary>
            This interface is implemented by any entity that wants to be made aware of updates to a shader input
            </summary>
        </member>
        <member name="P:UnityEditor.ShaderGraph.Internal.KeywordDependentCollection`7.baseInstance">
            <summary>
            All permutation will inherit from base's active fields
            </summary>
        </member>
        <member name="M:UnityEditor.ShaderGraph.GraphUtil.SanitizeName(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
            <summary>
            Sanitizes a supplied string such that it does not collide
            with any other name in a collection.
            </summary>
            <param name="existingNames">
            A collection of names that the new name should not collide with.
            </param>
            <param name="duplicateFormat">
            The format applied to the name if a duplicate exists.
            This must be a format string that contains `{0}` and `{1}`
            once each. An example could be `{0} ({1})`, which will append ` (n)`
            to the name for the n`th duplicate.
            </param>
            <param name="name">
            The name to be sanitized.
            </param>
            <returns>
            A name that is distinct form any name in `existingNames`.
            </returns>
        </member>
        <member name="T:UnityEditor.ShaderGraph.MinimalGraphData">
            <summary>
            Minimal version of <see cref="T:UnityEditor.ShaderGraph.GraphData"/> used for gathering dependencies. This allows us to not deserialize
            all the nodes, ports, edges, groups etc., which is important as we cannot share data between
            <see cref="M:UnityEditor.ShaderGraph.ShaderSubGraphImporter.GatherDependenciesFromSourceFile(System.String)"/> and
            <see cref="M:UnityEditor.ShaderGraph.ShaderSubGraphImporter.OnImportAsset(UnityEditor.AssetImporters.AssetImportContext)"/>. The latter must always import fully, but for the former we
            want to avoid the extra GC pressure.
            </summary>
        </member>
        <member name="T:UnityEditor.ShaderGraph.SlotDependencyInfo">
            Cached run-time information for slot dependency tracking within a sub-graph
        </member>
        <member name="M:UnityEditor.ShaderGraph.BlackboardInputInfo.#ctor(System.Single,System.String)">
            <summary>
            Provide additional information to provide the blackboard for order and name of the ShaderInput item.
            </summary>
            <param name="priority">Priority of the item, higher values will result in lower positions in the menu.</param>
            <param name="name">Name of the item. If null, the class name of the item will be used instead.</param>
        </member>
        <member name="M:UnityEditor.ShaderGraph.ShaderStageExtensions.TryGetShaderStage(UnityEditor.ShaderGraph.ShaderStageCapability,UnityEditor.ShaderGraph.ShaderStage@)">
            <summary>
            Tries to convert a ShaderStageCapability into a ShaderStage. The conversion is only successful if the given ShaderStageCapability <paramref name="capability"/> refers to exactly 1 shader stage.
            </summary>
            <param name="capability">The ShaderStageCapability to convert.</param>
            <param name="stage">If <paramref name="capability"/> refers to exactly 1 shader stage, this parameter will contain the equivalent ShaderStage of that. Otherwise the value is undefined.</param>
            <returns>True is <paramref name="capability"/> holds exactly 1 shader stage.</returns>
        </member>
        <member name="P:UnityEditor.Graphing.GraphObject.materialArtifact">
            <summary>
            The Material artifact generated by the import process.
            Every modification to this material will be lost when the graph is saved.
            for.
            </summary>
        </member>
    </members>
</doc>
