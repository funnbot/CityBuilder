<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.InputSystem.TestFramework</name>
    </assembly>
    <members>
        <member name="T:WinUserInput">
            <summary>
            Used to send fake input events to Windows via user32.dll.
            </summary>
        </member>
        <member name="M:WinUserInput.SendRDPMouseMoveEvent(System.Int32,System.Int32)">
            <summary>
            Emulate an event sent over RDP.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:WinUserInput.SendMouseMoveEvent(System.Int32,System.Int32)">
            <summary>
            Emulate a normal mouse move event with relative coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:UnityEngine.InputSystem.InputTestRuntime">
             <summary>
             An implementation of <see cref="T:UnityEngine.InputSystem.LowLevel.IInputRuntime"/> for use during tests.
             </summary>
             <remarks>
             This class is only available in the editor and in development players.
            
             The test runtime replaces the services usually supplied by <see cref="T:UnityEngineInternal.Input.NativeInputSystem"/>.
             </remarks>
             <seealso cref="P:UnityEngine.InputSystem.InputTestFixture.runtime"/>
        </member>
        <member name="T:UnityEngine.InputSystem.InputTestFixture">
             <summary>
             A test fixture for writing tests that use the input system. Can be derived from
             or simply instantiated from another test fixture.
             </summary>
             <remarks>
             The fixture will put the input system into a known state where it has only the
             built-in set of basic layouts and no devices. The state of the system before
             starting a test is recorded and restored when the test finishes.
            
             <example>
             <code>
             public class MyInputTests : InputTestFixture
             {
                 public override void Setup()
                 {
                     base.Setup();
            
                     InputSystem.RegisterLayout&lt;MyDevice&gt;();
                 }
            
                 [Test]
                 public void CanCreateMyDevice()
                 {
                     InputSystem.AddDevice&lt;MyDevice&gt;();
                     Assert.That(InputSystem.devices, Has.Exactly(1).TypeOf&lt;MyDevice&gt;());
                 }
             }
             </code>
             </example>
            
             The test fixture will also sever the tie of the input system to the Unity runtime.
             This means that while the test fixture is active, the input system will not receive
             input and device discovery or removal notifications from platform code. This ensures
             that while the test is running, input that may be generated on the machine running
             the test will not infer with it.
             </remarks>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.Setup">
            <summary>
            Put <see cref="T:UnityEngine.InputSystem.InputSystem"/> into a known state where it only has a basic set of
            layouts and does not have any input devices.
            </summary>
            <remarks>
            If you derive your own test fixture directly from InputTestFixture, this
            method will automatically be called. If you embed InputTestFixture into
            your fixture, you have to explicitly call this method yourself.
            </remarks>
            <seealso cref="M:UnityEngine.InputSystem.InputTestFixture.TearDown"/>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.TearDown">
            <summary>
            Restore the state of the input system it had when the test was started.
            </summary>
            <seealso cref="M:UnityEngine.InputSystem.InputTestFixture.Setup"/>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.SetKeyboardLayout(System.String,UnityEngine.InputSystem.Keyboard)">
            <summary>
            Set <see cref="P:UnityEngine.InputSystem.Keyboard.keyboardLayout"/> of the given keyboard.
            </summary>
            <param name="name">Name of the keyboard layout to switch to.</param>
            <param name="keyboard">Keyboard to switch layout on. If <c>null</c>, <see cref="P:UnityEngine.InputSystem.Keyboard.current"/> is used.</param>
            <exception cref="T:System.ArgumentException"><paramref name="keyboard"/> and <see cref="P:UnityEngine.InputSystem.Keyboard.current"/> are both <c>null</c>.</exception>
            <remarks>
            Also queues and immediately processes an <see cref="T:UnityEngine.InputSystem.LowLevel.DeviceConfigurationEvent"/> for the keyboard.
            </remarks>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.SetKeyInfo(UnityEngine.InputSystem.Key,System.String,System.Int32)">
            <summary>
            Set the <see cref="P:UnityEngine.InputSystem.InputControl.displayName"/> of <paramref name="key"/> on the current
            <see cref="T:UnityEngine.InputSystem.Keyboard"/> to be <paramref name="displayName"/>.
            </summary>
            <param name="key">Key to set the display name for.</param>
            <param name="displayName">Display name for the key.</param>
            <param name="scanCode">Optional <see cref="P:UnityEngine.InputSystem.Controls.KeyControl.scanCode"/> to report for the key.</param>
            <remarks>
            Automatically adds a <see cref="T:UnityEngine.InputSystem.Keyboard"/> if none has been added yet.
            </remarks>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.SetCanRunInBackground(UnityEngine.InputSystem.InputDevice,System.Boolean)">
            <summary>
            Add support for <see cref="T:UnityEngine.InputSystem.LowLevel.QueryCanRunInBackground"/> to <paramref name="device"/> and return
            <paramref name="value"/> as <see cref="F:UnityEngine.InputSystem.LowLevel.QueryCanRunInBackground.canRunInBackground"/>.
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.Set``1(UnityEngine.InputSystem.InputDevice,System.String,``0,System.Double,System.Double,System.Boolean)">
             <summary>
             Set the control with the given <paramref name="path"/> on <paramref name="device"/> to the given <paramref name="state"/>
             by sending a state event with the value to the device.
             </summary>
             <param name="device">Device on which to find a control.</param>
             <param name="path">Path of the control on the device.</param>
             <param name="state">New state for the control.</param>
             <param name="time">Timestamp to use for the state event. If -1 (default), current time is used (see <see cref="P:UnityEngine.InputSystem.InputTestFixture.currentTime"/>).</param>
             <param name="timeOffset">Offset to apply to the current time. This is an alternative to <paramref name="time"/>. By default, no offset is applied.</param>
             <param name="queueEventOnly">If true, no <see cref="M:UnityEngine.InputSystem.InputSystem.Update"/> will be performed after queueing the event. This will only put
             the state event on the event queue and not do anything else. The default is to call <see cref="M:UnityEngine.InputSystem.InputSystem.Update"/> after queuing the event.
             Note that not issuing an update means the state of the device will not change yet. This may affect subsequent Set/Press/Release/etc calls
             as they will not yet see the state change.
            
             Note that this parameter will be ignored if the test is a <c>[UnityTest]</c>. Multi-frame
             playmode tests will automatically process input as part of the Unity player loop.</param>
             <typeparam name="TValue">Value type of the control.</typeparam>
             <example>
             <code>
             var device = InputSystem.AddDevice("TestDevice");
             Set&lt;ButtonControl&gt;(device, "button", 1);
             Set&lt;AxisControl&gt;(device, "{Primary2DMotion}/x", 123.456f);
             </code>
             </example>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.Set``1(UnityEngine.InputSystem.InputControl{``0},``0,System.Double,System.Double,System.Boolean)">
             <summary>
             Set the control to the given value by sending a state event with the value to the
             control's device.
             </summary>
             <param name="control">An input control on a device that has been added to the system.</param>
             <param name="state">New value for the input control.</param>
             <param name="time">Timestamp to use for the state event. If -1 (default), current time is used (see <see cref="P:UnityEngine.InputSystem.InputTestFixture.currentTime"/>).</param>
             <param name="timeOffset">Offset to apply to the current time. This is an alternative to <paramref name="time"/>. By default, no offset is applied.</param>
             <param name="queueEventOnly">If true, no <see cref="M:UnityEngine.InputSystem.InputSystem.Update"/> will be performed after queueing the event. This will only put
             the state event on the event queue and not do anything else. The default is to call <see cref="M:UnityEngine.InputSystem.InputSystem.Update"/> after queuing the event.
             Note that not issuing an update means the state of the device will not change yet. This may affect subsequent Set/Press/Release/etc calls
             as they will not yet see the state change.
            
             Note that this parameter will be ignored if the test is a <c>[UnityTest]</c>. Multi-frame
             playmode tests will automatically process input as part of the Unity player loop.</param>
             <typeparam name="TValue">Value type of the given control.</typeparam>
             <example>
             <code>
             var gamepad = InputSystem.AddDevice&lt;Gamepad&gt;();
             Set(gamepad.leftButton, 1);
             </code>
             </example>
        </member>
        <member name="M:UnityEngine.InputSystem.InputTestFixture.Trigger(UnityEngine.InputSystem.InputAction)">
             <summary>
             Perform the input action without having to know what it is bound to.
             </summary>
             <param name="action">An input action that is currently enabled and has controls it is bound to.</param>
             <remarks>
             Blindly triggering an action requires making a few assumptions. Actions are not built to be able to trigger
             without any input. This means that this method has to generate input on a control that the action is bound to.
            
             Note that this method has no understanding of the interactions that may be present on the action and thus
             does not know how they may affect the triggering of the action.
             </remarks>
        </member>
        <member name="P:UnityEngine.InputSystem.InputTestFixture.runtime">
            <summary>
            The input runtime used during testing.
            </summary>
        </member>
        <member name="P:UnityEngine.InputSystem.InputTestFixture.currentTime">
            <summary>
            Get or set the current time used by the input system.
            </summary>
            <value>Current time used by the input system.</value>
        </member>
    </members>
</doc>
