<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Splines</name>
    </assembly>
    <members>
        <member name="T:UnityEngine.Splines.SplineAnimate">
            <summary>
            A component to animate an object along a spline.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineAnimate.Method">
            <summary>
            Describes the different methods that can be used to animated an object along a spline.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.Method.Time">
            <summary> Spline will be traversed in the given amount of seconds. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.Method.Speed">
            <summary> Spline will be traversed at a given maximum speed. </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineAnimate.LoopMode">
            <summary>
            Describes the different ways the object's animation along the Spline can be looped.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.LoopMode.Once">
            <summary> Traverse the spline once and stop at the end. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.LoopMode.Loop">
            <summary> Traverse the spline continuously without stopping. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.LoopMode.LoopEaseInOnce">
            <summary> Traverse the spline continuously without stopping. If <see cref="P:UnityEngine.Splines.SplineAnimate.Easing"/> is set to <see cref="F:UnityEngine.Splines.SplineAnimate.EasingMode.EaseIn"/> or
            <see cref="F:UnityEngine.Splines.SplineAnimate.EasingMode.EaseInOut"/> then easing is only applied to the first loop of the animation. Otherwise, no easing is applied with this loop mode.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.LoopMode.PingPong">
            <summary> Traverse the spline and then reverse direction at the end of the spline. The animation plays repeatedly. </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineAnimate.EasingMode">
            <summary>
            Describes the different ways the object's animation along the spline can be eased.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.EasingMode.None">
            <summary> Apply no easing. The animation speed is linear.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.EasingMode.EaseIn">
            <summary> Apply easing to the beginning of animation. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.EasingMode.EaseOut">
            <summary> Apply easing to the end of animation. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.EasingMode.EaseInOut">
            <summary> Apply easing to the beginning and end of animation. </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineAnimate.AlignmentMode">
            <summary>
            Describes the ways the object can be aligned when animating along the spline.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.AlignmentMode.None">
            <summary> No aligment is done and object's rotation is unaffected. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.AlignmentMode.SplineElement">
            <summary> The object's forward and up axes align to the spline's tangent and up vectors. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.AlignmentMode.SplineObject">
            <summary> The object's forward and up axes align to the spline tranform's z-axis and y-axis. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineAnimate.AlignmentMode.World">
            <summary> The object's forward and up axes align to to the world's z-axis and y-axis. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.splineContainer">
            <summary>The target container of the splines to follow.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.Container">
            <summary>The target container of the splines to follow.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.playOnAwake">
            <summary>If true, transform will automatically start following the target Spline on awake.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.PlayOnAwake">
            <summary>If true, transform will automatically start following the target Spline on awake.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.loopMode">
            <summary>The way the Spline should be looped. See <see cref="T:UnityEngine.Splines.SplineAnimate.LoopMode"/> for details.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.Loop">
            <summary>The way the Spline should be looped. See <see cref="T:UnityEngine.Splines.SplineAnimate.LoopMode"/> for details.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.method">
            <summary> The method used to traverse the Spline. See <see cref="T:UnityEngine.Splines.SplineAnimate.Method"/> for details. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.AnimationMethod">
            <summary> The method used to traverse the Spline. See <see cref="T:UnityEngine.Splines.SplineAnimate.Method"/> for details. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.duration">
            <summary> The time (in seconds) it takes to traverse the Spline once. </summary>
            <remarks>
            When animation method is set to <see cref="F:UnityEngine.Splines.SplineAnimate.Method.Time"/> this setter will set the <see cref="P:UnityEngine.Splines.SplineAnimate.Duration"/> value and automatically recalculate <see cref="P:UnityEngine.Splines.SplineAnimate.MaxSpeed"/>,
            otherwise, it will have no effect.
            </remarks>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.Duration">
            <summary> The time (in seconds) it takes to traverse the Spline once. </summary>
            <remarks>
            When animation method is set to <see cref="F:UnityEngine.Splines.SplineAnimate.Method.Time"/> this setter will set the <see cref="P:UnityEngine.Splines.SplineAnimate.Duration"/> value and automatically recalculate <see cref="P:UnityEngine.Splines.SplineAnimate.MaxSpeed"/>,
            otherwise, it will have no effect.
            </remarks>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.maxSpeed">
            <summary> The maxSpeed speed (in Unity units/second) that the Spline traversal will advance in. </summary>
            <remarks>
            If <see cref="T:UnityEngine.Splines.SplineAnimate.EasingMode"/> is to <see cref="F:UnityEngine.Splines.SplineAnimate.EasingMode.None"/> then the Spline will be traversed at MaxSpeed throughout its length.
            Otherwise, the traversal speed will range from 0 to MaxSpeed throughout the Spline's length depending on the easing mode set.
            When animation method is set to <see cref="F:UnityEngine.Splines.SplineAnimate.Method.Speed"/> this setter will set the <see cref="P:UnityEngine.Splines.SplineAnimate.MaxSpeed"/> value and automatically recalculate <see cref="P:UnityEngine.Splines.SplineAnimate.Duration"/>,
            otherwise, it will have no effect.
            </remarks>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.MaxSpeed">
            <summary> The maxSpeed speed (in Unity units/second) that the Spline traversal will advance in. </summary>
            <remarks>
            If <see cref="T:UnityEngine.Splines.SplineAnimate.EasingMode"/> is to <see cref="F:UnityEngine.Splines.SplineAnimate.EasingMode.None"/> then the Spline will be traversed at MaxSpeed throughout its length.
            Otherwise, the traversal speed will range from 0 to MaxSpeed throughout the Spline's length depending on the easing mode set.
            When animation method is set to <see cref="F:UnityEngine.Splines.SplineAnimate.Method.Speed"/> this setter will set the <see cref="P:UnityEngine.Splines.SplineAnimate.MaxSpeed"/> value and automatically recalculate <see cref="P:UnityEngine.Splines.SplineAnimate.Duration"/>,
            otherwise, it will have no effect.
            </remarks>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.easingMode">
            <summary> Easing mode used when animating the object along the Spline. See <see cref="T:UnityEngine.Splines.SplineAnimate.EasingMode"/> for details. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.Easing">
            <summary> Easing mode used when animating the object along the Spline. See <see cref="T:UnityEngine.Splines.SplineAnimate.EasingMode"/> for details. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.alignmentMode">
            <summary> The way the object should align when animating along the Spline. See <see cref="T:UnityEngine.Splines.SplineAnimate.AlignmentMode"/> for details. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.Alignment">
            <summary> The way the object should align when animating along the Spline. See <see cref="T:UnityEngine.Splines.SplineAnimate.AlignmentMode"/> for details. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.objectForwardAxis">
            <summary> Object space axis that should be considered as the object's forward vector. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.ObjectForwardAxis">
            <summary> Object space axis that should be considered as the object's forward vector. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.objectUpAxis">
            <summary> Object space axis that should be considered as the object's up vector. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.ObjectUpAxis">
            <summary> Object space axis that should be considered as the object's up vector. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.normalizedTime">
            <summary>
            Normalized time of the Spline's traversal. The integer part is the number of times the Spline has been traversed.
            The fractional part is the % (0-1) of progress in the current loop.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.NormalizedTime">
            <summary>
            Normalized time of the Spline's traversal. The integer part is the number of times the Spline has been traversed.
            The fractional part is the % (0-1) of progress in the current loop.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.elapsedTime">
            <summary> Total time (in seconds) since the start of Spline's traversal. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.ElapsedTime">
            <summary> Total time (in seconds) since the start of Spline's traversal. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.StartOffset">
            <summary> Normalized distance [0;1] offset along the spline at which the object should be placed when the animation begins. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.isPlaying">
            <summary> Returns true if object is currently animating along the Spline. </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineAnimate.IsPlaying">
            <summary> Returns true if object is currently animating along the Spline. </summary>
        </member>
        <member name="E:UnityEngine.Splines.SplineAnimate.onUpdated">
            <summary> Invoked each time object's animation along the Spline is updated.</summary>
        </member>
        <member name="E:UnityEngine.Splines.SplineAnimate.Updated">
            <summary> Invoked each time object's animation along the Spline is updated.</summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineAnimate.Play">
            <summary> Begin animating object along the Spline. </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineAnimate.Pause">
            <summary> Pause object's animation along the Spline. </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineAnimate.Restart(System.Boolean)">
            <summary> Stop the animation and place the object at the beginning of the Spline. </summary>
            <param name="autoplay"> If true, the animation along the Spline will start over again. </param>
        </member>
        <member name="M:UnityEngine.Splines.SplineAnimate.Update">
            <summary>
            Evaluates the animation along the Spline based on deltaTime.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineInstantiate">
            <summary>
            SplineInstantiate is used to automatically instantiate prefabs or objects along a spline.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineInstantiate.OffsetSpace">
            <summary>
            The space in which to interpret the offset, this can be different from the orientation space used to instantiate objects.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.OffsetSpace.Spline">
            <summary> Use the spline space to orient instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.OffsetSpace.Local">
            <summary> Use the spline GameObject space to orient instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.OffsetSpace.World">
            <summary> Use world space to orient instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.OffsetSpace.Object">
            <summary> Use the original object space to orient instances.</summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineInstantiate.InstantiableItem">
            <summary>
            Describe the item prefab to instantiate and associate it with a probability
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.InstantiableItem.prefab">
            <summary> The prefab to instantiate.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.InstantiableItem.Prefab">
            <summary> The prefab to instantiate.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.InstantiableItem.probability">
            <summary> Probability for this prefab. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.InstantiableItem.Probability">
            <summary> Probability for this prefab. </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineInstantiate.Method">
            <summary>
            Describe the possible methods to instantiate instances along the spline.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.Method.InstanceCount">
            <summary> Use exact number of instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.Method.SpacingDistance">
            <summary> Use distance along the spline between 2 instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.Method.LinearDistance">
            <summary> Use distance in straight line between 2 instances.</summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineInstantiate.Space">
            <summary>
            Describes the coordinate space that is used to orient the instantiated object.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.Space.Spline">
            <summary> Use the spline space to orient instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.Space.Local">
            <summary> Use the spline GameObject space to orient instances.</summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineInstantiate.Space.World">
            <summary> Use world space to orient instances.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.container">
            <summary>
            The SplineContainer containing the targeted spline.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.Container">
            <summary>
            The SplineContainer containing the targeted spline.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.itemsToInstantiate">
            <summary>
            The items to use in the instantiation.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.method">
            <summary>
            The instantiation method to use.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.InstantiateMethod">
            <summary>
            The instantiation method to use.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.space">
            <summary>
            The coordinate space in which to orient the instanced object.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.CoordinateSpace">
            <summary>
            The coordinate space in which to orient the instanced object.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MinSpacing">
            <summary>
            Minimum spacing between 2 generated instances,
            if equal to the maxSpacing, then all instances will have the exact same spacing.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MaxSpacing">
            <summary>
            Maximum spacing between 2 generated instances,
            if equal to the minSpacing, then all instances will have the exact same spacing
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.upAxis">
            <summary>
            Up axis of the object, by default set to the y-axis.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.UpAxis">
            <summary>
            Up axis of the object, by default set to the y-axis.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.forwardAxis">
            <summary>
            Forward axis of the object, by default set to the Z Axis
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.ForwardAxis">
            <summary>
            Forward axis of the object, by default set to the Z Axis
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.minPositionOffset">
            <summary>
            Minimum (X,Y,Z) position offset to randomize instanced objects positions.
            (X,Y and Z) values have to be lower to the ones of maxPositionOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MinPositionOffset">
            <summary>
            Minimum (X,Y,Z) position offset to randomize instanced objects positions.
            (X,Y and Z) values have to be lower to the ones of maxPositionOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.maxPositionOffset">
            <summary>
            Maximum (X,Y,Z) position offset to randomize instanced objects positions.
            (X,Y and Z) values have to be higher to the ones of minPositionOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MaxPositionOffset">
            <summary>
            Maximum (X,Y,Z) position offset to randomize instanced objects positions.
            (X,Y and Z) values have to be higher to the ones of minPositionOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.positionSpace">
            <summary>
            Coordinate space to use to offset positions of the instances.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.PositionSpace">
            <summary>
            Coordinate space to use to offset positions of the instances.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.minRotationOffset">
            <summary>
            Minimum (X,Y,Z) euler rotation offset to randomize instanced objects rotations.
            (X,Y and Z) values have to be lower to the ones of maxRotationOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MinRotationOffset">
            <summary>
            Minimum (X,Y,Z) euler rotation offset to randomize instanced objects rotations.
            (X,Y and Z) values have to be lower to the ones of maxRotationOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.maxRotationOffset">
            <summary>
            Maximum (X,Y,Z) euler rotation offset to randomize instanced objects rotations.
            (X,Y and Z) values have to be higher to the ones of minRotationOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MaxRotationOffset">
            <summary>
            Maximum (X,Y,Z) euler rotation offset to randomize instanced objects rotations.
            (X,Y and Z) values have to be higher to the ones of minRotationOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.rotationSpace">
            <summary>
            Coordinate space to use to offset rotations of the instances.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.RotationSpace">
            <summary>
            Coordinate space to use to offset rotations of the instances.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.minScaleOffset">
            <summary>
            Minimum (X,Y,Z) scale offset to randomize instanced objects scales.
            (X,Y and Z) values have to be lower to the ones of maxScaleOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MinScaleOffset">
            <summary>
            Minimum (X,Y,Z) scale offset to randomize instanced objects scales.
            (X,Y and Z) values have to be lower to the ones of maxScaleOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.maxScaleOffset">
            <summary>
            Maximum (X,Y,Z) scale offset to randomize instanced objects scales.
            (X,Y and Z) values have to be higher to the ones of minScaleOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.MaxScaleOffset">
            <summary>
            Maximum (X,Y,Z) scale offset to randomize instanced objects scales.
            (X,Y and Z) values have to be higher to the ones of minScaleOffset.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.scaleSpace">
            <summary>
            Coordinate space to use to offset rotations of the instances (usually OffsetSpace.Object).
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineInstantiate.ScaleSpace">
            <summary>
            Coordinate space to use to offset rotations of the instances (usually OffsetSpace.Object).
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineInstantiate.ValidateAxis">
            <summary>
            This method prevents Up and Forward axis to be aligned.
            Up axis will always be kept as the prioritized one.
            If Forward axis is in the same direction than the Up (or -Up) it'll be changed to the next axis.  
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineInstantiate.Clear">
            <summary>
            Clear all the created instances along the spline
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineInstantiate.SetDirty">
            <summary>
            Set the created instances dirty to erase them next time instances will be generated
            (otherwise the next generation will reuse cached instances)
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineInstantiate.Randomize">
            <summary>
            Change the Random seed to obtain a new generation along the Spline
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineInstantiate.UpdateInstances">
            <summary>
            Create and update all instances along the spline based on the list of available prefabs/objects.  
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.LerpFloat">
            <summary>
            Linearly interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.LerpFloat.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.LerpFloat2">
            <summary>
            Linearly interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.LerpFloat2.Interpolate(Unity.Mathematics.float2,Unity.Mathematics.float2,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.LerpFloat3">
            <summary>
            Linearly interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.LerpFloat3.Interpolate(Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.LerpFloat4">
            <summary>
            Linearly interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.LerpFloat4.Interpolate(Unity.Mathematics.float4,Unity.Mathematics.float4,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SlerpFloat2">
            <summary>
            Spherically interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SlerpFloat2.Interpolate(Unity.Mathematics.float2,Unity.Mathematics.float2,System.Single)">
            <summary>
            Spherically interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The spherically interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SlerpFloat3">
            <summary>
            Spherically interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SlerpFloat3.Interpolate(Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single)">
            <summary>
            Spherically interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The spherically interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.LerpQuaternion">
            <summary>
            Linearly interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.LerpQuaternion.Interpolate(Unity.Mathematics.quaternion,Unity.Mathematics.quaternion,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.LerpColor">
            <summary>
            Linearly interpolate between two values a and b by ratio t. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.LerpColor.Interpolate(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Linearly interpolates between a and b by t.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SmoothStepFloat">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SmoothStepFloat.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between a and b by ratio t with smoothing at the limits.
            This function interpolates between min and max in a similar way to Lerp. However, the interpolation will
            gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking
            animation, fading and other transitions.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SmoothStepFloat2">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SmoothStepFloat2.Interpolate(Unity.Mathematics.float2,Unity.Mathematics.float2,System.Single)">
            <summary>
            Interpolates between a and b by ratio t with smoothing at the limits.
            This function interpolates between min and max in a similar way to Lerp. However, the interpolation will
            gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking
            animation, fading and other transitions.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SmoothStepFloat3">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SmoothStepFloat3.Interpolate(Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single)">
            <summary>
            Interpolates between a and b by ratio t with smoothing at the limits.
            This function interpolates between min and max in a similar way to Lerp. However, the interpolation will
            gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking
            animation, fading and other transitions.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SmoothStepFloat4">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SmoothStepFloat4.Interpolate(Unity.Mathematics.float4,Unity.Mathematics.float4,System.Single)">
            <summary>
            Interpolates between a and b by ratio t with smoothing at the limits.
            This function interpolates between min and max in a similar way to Lerp. However, the interpolation will
            gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking
            animation, fading and other transitions.
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns> The interpolated result between the two values.</returns>
        </member>
        <member name="T:UnityEngine.Splines.Interpolators.SlerpQuaternion">
            <summary>
            Spherically interpolates between quaternions a and b by ratio t. The parameter t is clamped b the range [0, 1]. 
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Interpolators.SlerpQuaternion.Interpolate(Unity.Mathematics.quaternion,Unity.Mathematics.quaternion,System.Single)">
            <summary>
            Spherically interpolates between quaternions a and b by ratio t. The parameter t is clamped b the range [0, 1].
            </summary>
            <param name="a">Start value, returned when t = 0.</param>
            <param name="b">End value, returned when t = 1.</param>
            <param name="t">Interpolation ratio.</param>
            <returns>A quaternion spherically interpolated between quaternions a and b.</returns>
        </member>
        <member name="T:UnityEngine.Splines.GetPosition">
            <summary>
            Provides methods to calculate, in parallel, the positions along <see cref="T:UnityEngine.Splines.NativeSpline"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.GetPosition.Spline">
            <summary>
            The <see cref="T:UnityEngine.Splines.NativeSpline"/> to be evaluated.
            </summary>
            <remarks>
            Must be allocated with a Allocator.Persistent or Allocator.TempJob.
            </remarks>
        </member>
        <member name="F:UnityEngine.Splines.GetPosition.Positions">
            <summary>
            A NativeArray of float3 to be written. The size of this array determines how many positions are
            evaluated.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.GetPosition.Execute(System.Int32)">
            <summary>
            Called by the job system to evaluate a position at an index. The interpolation value is calculated as
            `index / positions.Length - 1`.
            </summary>
            <param name="index">The index of the positions array to evaluate.</param>
        </member>
        <member name="T:UnityEngine.Splines.GetPositionTangentNormal">
            <summary>
            A job struct for calculating in parallel the position, tangent, and normal (up) vectors along a
            <see cref="T:UnityEngine.Splines.NativeSpline"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.GetPositionTangentNormal.Spline">
            <summary>
            The <see cref="T:UnityEngine.Splines.NativeSpline"/> to be evaluated.
            </summary>
            <remarks>
            Must be allocated with a Allocator.Persistent or Allocator.TempJob.
            </remarks>
        </member>
        <member name="F:UnityEngine.Splines.GetPositionTangentNormal.Positions">
            <summary>
            A NativeArray of float3 to be written. The size of this array determines how many positions are
            evaluated.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.GetPositionTangentNormal.Tangents">
            <summary>
            A NativeArray of float3 to be written. The size of this array must match the length of <see cref="F:UnityEngine.Splines.GetPositionTangentNormal.Positions"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.GetPositionTangentNormal.Normals">
            <summary>
            A NativeArray of float3 to be written. The size of this array must match the length of <see cref="F:UnityEngine.Splines.GetPositionTangentNormal.Positions"/>.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.GetPositionTangentNormal.Execute(System.Int32)">
            <summary>
            Called by the job system to evaluate position, tangent, and normal at an index. The interpolation value is
            calculated as `index / positions.Length - 1`.
            </summary>
            <param name="index">The index of the positions array to evaluate.</param>
        </member>
        <member name="T:UnityEngine.Splines.SplineJobs">
            <summary>
            The SplineJobs class contains utility methods for evaluating spline data using the Jobs system.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineJobs.EvaluatePosition``1(``0,Unity.Collections.NativeArray{Unity.Mathematics.float3})">
            <summary>
            Populate a preallocated NativeArray with position data from a spline.
            </summary>
            <param name="spline">The spline to evaluate. If you pass a NativeSpline, it must be allocated
            with the Persistent or TempJob allocator. Temp is invalid for use with the Jobs system.</param>
            <param name="positions">A preallocated array of float3 to be populated with evenly interpolated positions
            from a spline.</param>
            <typeparam name="T">The type of ISpline.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineJobs.EvaluatePosition(UnityEngine.Splines.NativeSpline,Unity.Collections.NativeArray{Unity.Mathematics.float3})">
            <summary>
            Populate a preallocated NativeArray with position data from a spline.
            </summary>
            <param name="spline">The spline to evaluate. The NativeSpline must be allocated with a Persistent
            or TempJob allocator. Temp is invalid for use in the Jobs system.</param>
            <param name="positions">A preallocated array of float3 to be populated with evenly interpolated positions
            from a spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineJobs.EvaluatePositionTangentNormal``1(``0,Unity.Collections.NativeArray{Unity.Mathematics.float3},Unity.Collections.NativeArray{Unity.Mathematics.float3},Unity.Collections.NativeArray{Unity.Mathematics.float3})">
             <summary>
             Populate a set of pre-allocated NativeArray with position, tangent, and normal data from a spline.
             </summary>
             <remarks>
             To apply a transform to the results of this method, pass a new NativeSpline constructed with the desired
             transformation matrix.
            
             This method creates a temporary NativeSpline copy of the spline to be evaluated. In some cases, this can
             be more resource intensive than iterating and evaluating a spline on a single thread. For the best performance,
             pass an existing NativeSpline instance to the <paramref name="spline"/>
             parameter.
             </remarks>
             <param name="spline">The spline to evaluate. If you pass a NativeSpline, it must be allocated
             with the Persistent or TempJob allocator. Temp is invalid for use with the Jobs system.</param>
             <param name="positions">A preallocated array of float3 to be populated with evenly interpolated positions
             from a spline.</param>
             <param name="tangents">A preallocated array of float3 to be populated with evenly interpolated tangents
             from a spline. Must be the same size as the positions array.</param>
             <param name="normals">A preallocated array of float3 to be populated with evenly interpolated normals
             from a spline. Must be the same size as the positions array.</param>
             <typeparam name="T">The type of ISpline.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineJobs.EvaluatePositionTangentNormal(UnityEngine.Splines.NativeSpline,Unity.Collections.NativeArray{Unity.Mathematics.float3},Unity.Collections.NativeArray{Unity.Mathematics.float3},Unity.Collections.NativeArray{Unity.Mathematics.float3})">
            <summary>
            Populate a set of preallocated NativeArray with position, tangent, and normal data from a spline.
            </summary>
            <remarks>
            To apply a transform to the results of this method, pass a new NativeSpline constructed with the desired
            transformation matrix.
            </remarks>
            <param name="spline">The spline to evaluate. The NativeSpline must be allocated with a Persistent
            or TempJob allocator. Temp is invalid for use in the Jobs system.</param>
            <param name="positions">A preallocated array of float3 to be populated with evenly interpolated positions
            from a spline.</param>
            <param name="tangents">A preallocated array of float3 to be populated with evenly interpolated tangents
            from a spline. Must be the same size as the positions array.</param>
            <param name="normals">A preallocated array of float3 to be populated with evenly interpolated normals
            from a spline. Must be the same size as the positions array.</param>
        </member>
        <member name="T:UnityEngine.Splines.SplineMesh">
            <summary>
            Utility methods for creating and working with meshes.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineMesh.ISplineVertexData">
            <summary>
            Interface for Spline mesh vertex data. Implement this interface if you are extruding custom mesh data and
            do not want to use the vertex layout provided by <see cref="T:UnityEngine.Splines.SplineMesh"/>."/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineMesh.ISplineVertexData.position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineMesh.ISplineVertexData.normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineMesh.ISplineVertexData.texture">
            <summary>
            Vertex texture, corresponds to UV0.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineMesh.GetVertexAndIndexCount(System.Int32,System.Int32,System.Boolean,System.Boolean,UnityEngine.Vector2,System.Int32@,System.Int32@)">
            <summary>
            Calculate the vertex and index count required for an extruded mesh.
            Use this method to allocate attribute and index buffers for use with Extrude.
            </summary>
            <param name="vertexCount">The number of vertices required for an extruded mesh using the provided settings.</param>
            <param name="indexCount">The number of indices required for an extruded mesh using the provided settings.</param>
            <param name="sides">How many sides make up the radius of the mesh.</param>
            <param name="segments">How many sections compose the length of the mesh.</param>
            <param name="range">
            The section of the Spline to extrude. This value expects a normalized interpolation start and end.
            I.e., [0,1] is the entire Spline, whereas [.5, 1] is the last half of the Spline.
            </param>
            <param name="capped">Whether the start and end of the mesh is filled. This setting is ignored when spline is closed.</param>
            <param name="closed">Whether the extruded mesh is closed or open. This can be separate from the Spline.Closed value.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineMesh.Extrude``1(``0,UnityEngine.Mesh,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Extrude a mesh along a spline in a tube-like shape.
            </summary>
            <param name="spline">The spline to extrude.</param>
            <param name="mesh">A mesh that will be cleared and filled with vertex data for the shape.</param>
            <param name="radius">The radius of the extruded mesh.</param>
            <param name="sides">How many sides make up the radius of the mesh.</param>
            <param name="segments">How many sections compose the length of the mesh.</param>
            <param name="capped">Whether the start and end of the mesh is filled. This setting is ignored when spline is closed.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineMesh.Extrude``1(``0,UnityEngine.Mesh,System.Single,System.Int32,System.Int32,System.Boolean,Unity.Mathematics.float2)">
            <summary>
            Extrude a mesh along a spline in a tube-like shape.
            </summary>
            <param name="spline">The spline to extrude.</param>
            <param name="mesh">A mesh that will be cleared and filled with vertex data for the shape.</param>
            <param name="radius">The radius of the extruded mesh.</param>
            <param name="sides">How many sides make up the radius of the mesh.</param>
            <param name="segments">How many sections compose the length of the mesh.</param>
            <param name="capped">Whether the start and end of the mesh is filled. This setting is ignored when spline is closed.</param>
            <param name="range">
            The section of the Spline to extrude. This value expects a normalized interpolation start and end.
            I.e., [0,1] is the entire Spline, whereas [.5, 1] is the last half of the Spline.
            </param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineMesh.Extrude``1(System.Collections.Generic.IReadOnlyList{``0},UnityEngine.Mesh,System.Single,System.Int32,System.Single,System.Boolean,Unity.Mathematics.float2)">
            <summary>
            Extrude a mesh along a list of splines in a tube-like shape.
            </summary>
            <param name="splines">The splines to extrude.</param>
            <param name="mesh">A mesh that will be cleared and filled with vertex data for the shape.</param>
            <param name="radius">The radius of the extruded mesh.</param>
            <param name="sides">How many sides make up the radius of the mesh.</param>
            <param name="segmentsPerUnit">The number of edge loops that comprise the length of one unit of the mesh.</param>
            <param name="capped">Whether the start and end of the mesh is filled. This setting is ignored when spline is closed.</param>
            <param name="range">
            The section of the Spline to extrude. This value expects a normalized interpolation start and end.
            I.e., [0,1] is the entire Spline, whereas [.5, 1] is the last half of the Spline.
            </param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineMesh.Extrude``3(``0,Unity.Collections.NativeArray{``1},Unity.Collections.NativeArray{``2},System.Single,System.Int32,System.Int32,System.Boolean,Unity.Mathematics.float2)">
            <summary>
            Extrude a mesh along a spline in a tube-like shape.
            </summary>
            <param name="spline">The spline to extrude.</param>
            <param name="vertices">A pre-allocated buffer of vertex data.</param>
            <param name="indices">A pre-allocated index buffer. Must be of type UInt16 or UInt32.</param>
            <param name="radius">The radius of the extruded mesh.</param>
            <param name="sides">How many sides make up the radius of the mesh.</param>
            <param name="segments">How many sections compose the length of the mesh.</param>
            <param name="capped">Whether the start and end of the mesh is filled. This setting is ignored when spline
            is closed.</param>
            <param name="range">
            The section of the Spline to extrude. This value expects a normalized interpolation start and end.
            I.e., [0,1] is the entire Spline, whereas [.5, 1] is the last half of the Spline.
            </param>
            <typeparam name="TSplineType">A type implementing ISpline.</typeparam>
            <typeparam name="TVertexType">A type implementing ISplineVertexData.</typeparam>
            <typeparam name="TIndexType">The mesh index format. Must be UInt16 or UInt32.</typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException">An out of range exception is thrown if the vertex or index
            buffer lengths do not match the expected size. Use <see cref="M:UnityEngine.Splines.SplineMesh.GetVertexAndIndexCount(System.Int32,System.Int32,System.Boolean,System.Boolean,UnityEngine.Vector2,System.Int32@,System.Int32@)"/> to calculate the
            expected buffer sizes.
            </exception>
            <exception cref="T:System.ArgumentException">
            An argument exception is thrown if {TIndexType} is not UInt16 or UInt32.
            </exception>
        </member>
        <member name="T:UnityEngine.Splines.SplineDataHandleAttribute">
            <summary>
            SplineDataHandleAttribute can be use to add custom handles to <see cref="T:UnityEngine.Splines.SplineData`1"/>.
            The custom drawer class must inherit from SplineDataHandle and override one of the Draw static method.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineKnotIndex">
            <summary>
            Provides a tuple to define a couple (Spline index, Knot index) that identifies a particular knot on a spline.
            This tuple is used by <see cref="T:UnityEngine.Splines.KnotLinkCollection"/> to maintain links between knots.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineKnotIndex.Spline">
            <summary>
            The index of the spline in the <see cref="P:UnityEngine.Splines.SplineContainer.Splines"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineKnotIndex.Knot">
            <summary>
            The index of the knot in the spline.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new SplineKnotIndex to reference a knot.
            </summary>
            <param name="spline">The spline index.</param>
            <param name="knot">The knot index.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.op_Equality(UnityEngine.Splines.SplineKnotIndex,UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Checks if two indices are equal.
            </summary>
            <param name="indexA">The first index.</param>
            <param name="indexB">The second index.</param>
            <returns>Returns true if the indices reference the same knot on the same spline, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.op_Inequality(UnityEngine.Splines.SplineKnotIndex,UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Checks if two indices are not equal.
            </summary>
            <param name="indexA">The first index.</param>
            <param name="indexB">The second index.</param>
            <returns>Returns false if the indices reference the same knot on the same spline, true otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.Equals(UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Checks if two indices are equal.
            </summary>
            <param name="otherIndex">The index to compare against.</param>
            <returns>Returns true if the indices reference the same knot on the same spline, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.Equals(System.Object)">
            <summary>
            Checks if two indices are equal.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>Returns true if the object is a SplineKnotIndex and the indices reference the same knot on the same spline, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.GetHashCode">
            <summary>
            Gets a hash code for this SplineKnotIndex.
            </summary>
            <returns> A hash code for the SplineKnotIndex. </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineKnotIndex.ToString">
            <summary>
            Gets a string representation of a SplineKnotIndex.
            </summary>
            <returns> A string representation of this SplineKnotIndex. </returns>
        </member>
        <member name="T:UnityEngine.Splines.BezierKnot">
            <summary>
            This struct contains position and tangent data for a knot. The position is a scalar point and the tangents are vectors.
            The <see cref="T:UnityEngine.Splines.Spline"/> class stores a collection of BezierKnot that form a series of connected
            <see cref="T:UnityEngine.Splines.BezierCurve"/>. Each knot contains a Position, Tangent In, and Tangent Out. When a Spline is not
            closed, the first and last knots will contain an extraneous tangent (in and out, respectively).
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierKnot.Position">
            <summary>
            The position of the knot. On a cubic bezier curve, this is equivalent to <see cref="F:UnityEngine.Splines.BezierCurve.P0"/> or
            <see cref="F:UnityEngine.Splines.BezierCurve.P3"/>, depending on whether this knot is forming the first or second control point
            of the curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierKnot.TangentIn">
            <summary>
            The tangent vector that leads into this knot. On a cubic Bezier curve, this value is used to calculate
            <see cref="F:UnityEngine.Splines.BezierCurve.P2"/> when used as the second knot in a curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierKnot.TangentOut">
            <summary>
            The tangent vector that follows this knot. On a cubic Bezier curve, this value is used to calculate
            <see cref="F:UnityEngine.Splines.BezierCurve.P1"/> when used as the first knot in a curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierKnot.Rotation">
            <summary>
            Rotation of the knot.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.#ctor(Unity.Mathematics.float3)">
            <summary>
            Create a new BezierKnot struct.
            </summary>
            <param name="position">The position of the knot relative to the spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.#ctor(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Splines.BezierKnot"/> struct.
            </summary>
            <param name="position">The position of the knot relative to the spline.</param>
            <param name="tangentIn">The leading tangent to this knot.</param>
            <param name="tangentOut">The following tangent to this knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.#ctor(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.quaternion)">
            <summary>
            Create a new BezierKnot struct.
            </summary>
            <param name="position">The position of the knot relative to the spline.</param>
            <param name="tangentIn">The leading tangent to this knot.</param>
            <param name="tangentOut">The following tangent to this knot.</param>
            <param name="rotation">The rotation of the knot relative to the spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.Transform(Unity.Mathematics.float4x4)">
            <summary>
            Multiply the position and tangents by a matrix.
            </summary>
            <param name="matrix">The matrix to multiply.</param>
            <returns>A new BezierKnot multiplied by matrix.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.op_Addition(UnityEngine.Splines.BezierKnot,Unity.Mathematics.float3)">
            <summary>
            Knot position addition. This operation only applies to the position, tangents and rotation are unmodified.
            </summary>
            <param name="knot">The target knot.</param>
            <param name="rhs">The value to add.</param>
            <returns>A new BezierKnot where position is the sum of knot.position and rhs.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.op_Subtraction(UnityEngine.Splines.BezierKnot,Unity.Mathematics.float3)">
            <summary>
            Knot position subtraction. This operation only applies to the position, tangents and rotation are unmodified.
            </summary>
            <param name="knot">The target knot.</param>
            <param name="rhs">The value to subtract.</param>
            <returns>A new BezierKnot where position is the sum of knot.position minus rhs.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.OnBeforeSerialize">
            <summary>
            See ISerializationCallbackReceiver.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.OnAfterDeserialize">
            <summary>
            See ISerializationCallbackReceiver.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.ToString">
            <summary>
            Create a string with the values of this knot.
            </summary>
            <returns>A summary of the values contained by this knot.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.Equals(UnityEngine.Splines.BezierKnot)">
            <summary>
            Compare two knots for equality.
            </summary>
            <param name="other">The knot to compare against.</param>
            <returns>Returns true when the position, tangents, and rotation of each knot are identical.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.Equals(System.Object)">
            <summary>
            Compare against an object for equality.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>
            Returns true when <paramref name="obj"/> is a <see cref="T:UnityEngine.Splines.BezierKnot"/> and the values of each knot are
            identical.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierKnot.GetHashCode">
            <summary>
            Calculate a hash code for this knot.
            </summary>
            <returns>
            A hash code for the knot.
            </returns>
        </member>
        <member name="T:UnityEngine.Splines.NativeSpline">
            <summary>
            A read-only representation of <see cref="T:UnityEngine.Splines.Spline"/> that is optimized for efficient access and queries.
            NativeSpline can be constructed with a Spline and Transform. If a transform is applied, all values will be
            relative to the transformed knot positions.
            </summary>
            <remarks>
            NativeSpline is compatible with the job system.
            </remarks>
        </member>
        <member name="P:UnityEngine.Splines.NativeSpline.Knots">
            <summary>
            A NativeArray of <see cref="T:UnityEngine.Splines.BezierKnot"/> that form this Spline.
            </summary>
            <returns>
            Returns a reference to the knots array.
            </returns>
        </member>
        <member name="P:UnityEngine.Splines.NativeSpline.Curves">
            <summary>
            A NativeArray of <see cref="T:UnityEngine.Splines.BezierCurve"/> that form this Spline.
            </summary>
            <returns>
            Returns a reference to the curves array.
            </returns>
        </member>
        <member name="P:UnityEngine.Splines.NativeSpline.Closed">
            <summary>
            Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.NativeSpline.Count">
            <summary>
            Return the number of knots.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.GetLength">
            <summary>
            Return the sum of all curve lengths, accounting for <see cref="P:UnityEngine.Splines.NativeSpline.Closed"/> state.
            Note that this value is affected by the transform used to create this NativeSpline.
            </summary>
            <returns>
            Returns the sum length of all curves composing this spline, accounting for closed state.
            </returns>
        </member>
        <member name="P:UnityEngine.Splines.NativeSpline.Item(System.Int32)">
            <summary>
            Get the knot at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.GetEnumerator">
            <summary>
            Get an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.#ctor(UnityEngine.Splines.ISpline,Unity.Collections.Allocator)">
            <summary>
            Create a new NativeSpline from a set of <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
            <param name="spline">The <see cref="T:UnityEngine.Splines.ISpline"/> object to convert to a <see cref="T:UnityEngine.Splines.NativeSpline"/>.</param>
            <param name="allocator">The memory allocation method to use when reserving space for native arrays.</param>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.#ctor(UnityEngine.Splines.ISpline,Unity.Mathematics.float4x4,Unity.Collections.Allocator)">
            <summary>
            Create a new NativeSpline from a set of <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
            <param name="spline">The <see cref="T:UnityEngine.Splines.ISpline"/> object to convert to a <see cref="T:UnityEngine.Splines.NativeSpline"/>.</param>
            <param name="transform">A transform matrix to be applied to the spline knots and tangents.</param>
            <param name="allocator">The memory allocation method to use when reserving space for native arrays.</param>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.#ctor(System.Collections.Generic.IReadOnlyList{UnityEngine.Splines.BezierKnot},System.Boolean,Unity.Mathematics.float4x4,Unity.Collections.Allocator)">
            <summary>
            Create a new NativeSpline from a set of <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
            <param name="knots">A collection of sequential <see cref="T:UnityEngine.Splines.BezierKnot"/> forming the spline path.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
            <param name="transform">Apply a transformation matrix to the control <see cref="P:UnityEngine.Splines.NativeSpline.Knots"/>.</param>
            <param name="allocator">The memory allocation method to use when reserving space for native arrays.</param>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.#ctor(System.Collections.Generic.IReadOnlyList{UnityEngine.Splines.BezierKnot},System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean,Unity.Mathematics.float4x4,Unity.Collections.Allocator)">
            <summary>
            Create a new NativeSpline from a set of <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
            <param name="knots">A collection of sequential <see cref="T:UnityEngine.Splines.BezierKnot"/> forming the spline path.</param>
            <param name="splits">A collection of knot indices that should be considered degenerate curves for the
            purpose of creating a non-interpolated gap between curves.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
            <param name="transform">Apply a transformation matrix to the control <see cref="P:UnityEngine.Splines.NativeSpline.Knots"/>.</param>
            <param name="allocator">The memory allocation method to use when reserving space for native arrays.</param>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.GetCurve(System.Int32)">
            <summary>
            Get a <see cref="T:UnityEngine.Splines.BezierCurve"/> from a knot index.
            </summary>
            <param name="index">The knot index that serves as the first control point for this curve.</param>
            <returns>
            A <see cref="T:UnityEngine.Splines.BezierCurve"/> formed by the knot at index and the next knot.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.GetCurveLength(System.Int32)">
            <summary>
            Get the length of a <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
            <param name="curveIndex">The 0 based index of the curve to find length for.</param>
            <returns>The length of the bezier curve at index.</returns>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.NativeSpline.GetCurveInterpolation(System.Int32,System.Single)">
            <summary>
            Return the normalized interpolation (t) corresponding to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
            <param name="curveIndex"> The zero-based index of the curve.</param>
            <param name="curveDistance">The curve-relative distance to convert to an interpolation ratio (also referred to as 't').</param>
            <returns>  The normalized interpolation ratio associated to distance on the designated curve.</returns>
        </member>
        <member name="T:UnityEngine.Splines.SplineComputeBufferScope`1">
            <summary>
            SplineComputeBufferScope is a convenient way to extract from a spline the information necessary to evaluate
            spline values in a ComputeShader.
            To access Spline evaluation methods in a shader, include the "Splines.cginc" file:
            <code>#include "Packages/com.unity.splines/Shader/Spline.cginc"</code>
            </summary>
            <typeparam name="T">The type of spline.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineComputeBufferScope`1.#ctor(`0)">
            <summary>
            Create a new SplineComputeBufferScope.
            </summary>
            <param name="spline">The spline to create GPU data for.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineComputeBufferScope`1.Bind(UnityEngine.ComputeShader,System.Int32,System.String,System.String,System.String)">
            <summary>
            Set up a shader with all of the necessary ComputeBuffer and Spline metadata for working with functions found
            in Spline.cginc.
            </summary>
            <param name="shader">The compute shader to bind.</param>
            <param name="kernel">The kernel to target.</param>
            <param name="info">The float4 (typedef to SplineData in Spline.cginc) Spline info.</param>
            <param name="curves">A StructuredBuffer{BezierCurve} or RWStructuredBuffer{BezierCurve}.</param>
            <param name="lengths">A StructuredBuffer{float} or RWStructuredBuffer{float}.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any of the expected properties are invalid.</exception>
        </member>
        <member name="M:UnityEngine.Splines.SplineComputeBufferScope`1.Dispose">
            <summary>
            Free resources allocated by this object.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineComputeBufferScope`1.Upload">
            <summary>
            Copy Spline curve, info, and length caches to their GPU buffers.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineComputeBufferScope`1.Info">
            <summary>
            Returns a SplineInfo Vector4.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineComputeBufferScope`1.Curves">
            <summary>
            A ComputeBuffer containing <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineComputeBufferScope`1.CurveLengths">
            <summary>
            A ComputeBuffer containing the cached length of all spline curves.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineContainer">
            <summary>
            A Component that holds a <see cref="P:UnityEngine.Splines.SplineContainer.Spline"/> object.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineContainer.Splines">
            <summary>
            The list of all splines attached to that container.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineContainer.KnotLinkCollection">
            <summary>
            A collection of all linked knots. Linked knots can be on different splines. However, knots can
            only link to other knots within the same container. This collection is used to maintain
            the validity of the links when operations such as knot insertions or removals are performed on the splines.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineContainer.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="P:UnityEngine.Splines.SplineContainer.Spline"/> at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:UnityEngine.Splines.SplineContainer.Spline">
            <summary>
            The main <see cref="P:UnityEngine.Splines.SplineContainer.Spline"/> attached to this component.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.Evaluate(System.Single,Unity.Mathematics.float3@,Unity.Mathematics.float3@,Unity.Mathematics.float3@)">
            <summary>
            Computes interpolated position, direction and upDirection at ratio t. Calling this method to get the
            3 vectors is faster than calling independently EvaluateSplinePosition, EvaluateSplineTangent and EvaluateSplineUpVector
            for the same time t as it reduces some redundant computation.
            </summary>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <param name="position">The output variable for the float3 position at t.</param>
            <param name="tangent">The output variable for the float3 tangent at t.</param>
            <param name="upVector">The output variable for the float3 up direction at t.</param>
            <returns>Boolean value, true if a valid set of output variables as been computed.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.Evaluate(System.Int32,System.Single,Unity.Mathematics.float3@,Unity.Mathematics.float3@,Unity.Mathematics.float3@)">
            <summary>
            Computes the interpolated position, direction and upDirection at ratio t for the spline at index `splineIndex`. Calling this method to get the
            3 vectors is faster than calling independently EvaluateSplinePosition, EvaluateSplineTangent and EvaluateSplineUpVector
            for the same time t as it reduces some redundant computation.
            </summary>
            <param name="splineIndex">The index of the spline to evaluate.</param>
            <param name="t">A value between 0 and 1 that represents the ratio along the curve.</param>
            <param name="position">The output variable for the float3 position at t.</param>
            <param name="tangent">The output variable for the float3 tangent at t.</param>
            <param name="upVector">The output variable for the float3 up direction at t.</param>
            <returns>True if a valid set of output variables is computed and false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.Evaluate``1(``0,System.Single,Unity.Mathematics.float3@,Unity.Mathematics.float3@,Unity.Mathematics.float3@)">
            <summary>
            Gets the interpolated position, direction, and upDirection at ratio t for a spline.  This method gets the three  
            vectors faster than EvaluateSplinePosition, EvaluateSplineTangent and EvaluateSplineUpVector for the same 
            time t, because it reduces some redundant computation. 
            </summary>
            <param name="spline">The spline to evaluate.</param>
            <param name="t">A value between 0 and 1 that represents the ratio along the curve.</param>
            <param name="position">The output variable for the float3 position at t.</param>
            <param name="tangent">The output variable for the float3 tangent at t.</param>
            <param name="upVector">The output variable for the float3 up direction at t.</param>
            <returns>True if a valid set of output variables is computed and false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluatePosition(System.Single)">
            <summary>
            valuates the position of a point, t, on a spline in world space.
            </summary>
            <param name="t">A value between 0 and 1 representing a percentage of the curve.</param>
            <returns>A tangent vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluatePosition(System.Int32,System.Single)">
            <summary>
            Evaluates the position of a point, t, on a spline at an index, `splineIndex`, in world space.
            </summary>
            <param name="splineIndex">The index of the spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of the curve.</param>
            <returns>A world position along the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluatePosition``1(``0,System.Single)">
            <summary>
            Evaluates the position of a point, t, on a given spline, in world space.
            </summary>
            <param name="spline">The spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of the curve.</param>
            <returns>A world position along the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateTangent(System.Single)">
            <summary>
            Evaluates the tangent vector of a point, t, on a spline in world space.
            </summary>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed tangent vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateTangent(System.Int32,System.Single)">
            <summary>
            Evaluates the tangent vector of a point, t, on a spline at an index, `splineIndex`, in world space.
            </summary>
            <param name="splineIndex">The index of the spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed tangent vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateTangent``1(``0,System.Single)">
            <summary>
            Evaluates the tangent vector of a point, t, on a given spline, in world space.
            </summary>
            <param name="spline">The spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed tangent vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateUpVector(System.Single)">
            <summary>
            Evaluates the up vector of a point, t, on a spline in world space.
            </summary>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed up direction.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateUpVector(System.Int32,System.Single)">
            <summary>
            Evaluates the up vector of a point, t, on a spline at an index, `splineIndex`, in world space.
            </summary>
            <param name="splineIndex">The index of the Spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed up direction.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateUpVector``1(``0,System.Single)">
            <summary>
            Evaluates the up vector of a point, t, on a given spline, in world space.
            </summary>
            <param name="spline">The Spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed up direction.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateAcceleration(System.Single)">
            <summary>
            Evaluates the acceleration vector of a point, t, on a spline in world space.
            </summary>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed acceleration vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateAcceleration(System.Int32,System.Single)">
            <summary>
            Evaluates the acceleration vector of a point, t, on a spline at an index, `splineIndex,  in world space.
            </summary>
            <param name="splineIndex">The index of the spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed acceleration vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.EvaluateAcceleration``1(``0,System.Single)">
            <summary>
            Evaluates the acceleration vector of a point, t, on a given Spline,  in world space.
            </summary>
            <param name="spline">The Spline to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of entire spline.</param>
            <returns>The computed acceleration vector.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.CalculateLength">
            <summary>
            Calculate the length of <see cref="P:UnityEngine.Splines.SplineContainer.Spline"/> in world space.
            </summary>
            <returns>The length of <see cref="P:UnityEngine.Splines.SplineContainer.Spline"/> in world space</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.CalculateLength(System.Int32)">
            <summary>
            Calculates the length of `Splines[splineIndex]` in world space.
            </summary>
            <param name="splineIndex">The index of the spline to evaluate.</param>
            <returns>The length of `Splines[splineIndex]` in world space</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.OnBeforeSerialize">
            <summary>
            See ISerializationCallbackReceiver.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineContainer.OnAfterDeserialize">
            <summary>
            See ISerializationCallbackReceiver.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineModification">
            <summary>
            Describes the different types of changes that can occur to a spline.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineModification.Default">
            <summary>
            The default modification type. This is used when no other SplineModification types apply, or when the Spline is modified in the Inspector.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineModification.ClosedModified">
            <summary>
            The spline's <see cref="P:UnityEngine.Splines.Spline.Closed"/> property was modified.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineModification.KnotModified">
            <summary>
            A knot was modified.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineModification.KnotInserted">
            <summary>
            A knot was inserted.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineModification.KnotRemoved">
            <summary>
            A knot was removed.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.Spline">
            <summary>
            The Spline class is a collection of <see cref="T:UnityEngine.Splines.BezierKnot"/>, the closed/open state, and editing representation.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.Spline.Count">
            <summary>
            Return the number of knots.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.Spline.IsReadOnly">
            <summary>
            Returns true if this Spline is read-only, false if it is mutable.
            </summary>
        </member>
        <member name="E:UnityEngine.Splines.Spline.changed">
            <summary>
            Invoked in the editor any time a spline property is modified.
            </summary>
            <remarks>
            In the editor this can be invoked many times per-frame.
            Prefer to use <see cref="!:UnityEditor.Splines.EditorSplineUtility.AfterSplineWasModified"/> when
            working with splines in the editor.
            </remarks>
        </member>
        <member name="E:UnityEngine.Splines.Spline.Changed">
             <summary>
             Invoked any time a spline is modified.
             </summary>
             <remarks>
             First parameter is the target Spline that the event is raised for, second parameter is
             the knot index and the third parameter represents the type of change that occured.
             If the event does not target a specific knot, the second parameter will have the value of -1.
            
             In the editor this callback can be invoked many times per-frame.
             Prefer to use <see cref="!:UnityEditor.Splines.EditorSplineUtility.AfterSplineWasModified"/> when
             working with splines in the editor.
             </remarks>
             <seealso cref="T:UnityEngine.Splines.SplineModification"/>
        </member>
        <member name="M:UnityEngine.Splines.Spline.OnSplineChanged">
            <summary>
            Invoked any time a spline property is modified.
            </summary>
            <remarks>
            In the editor this can be invoked many times per-frame.
            Prefer to use <see cref="!:UnityEditor.Splines.EditorSplineUtility.afterSplineWasModified"/> when working
            with splines in the editor.
            </remarks>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetTangentMode(System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.Splines.TangentMode"/> for a knot index.
            </summary>
            <param name="index">The index to retrieve <see cref="T:UnityEngine.Splines.TangentMode"/> data for.</param>
            <returns>A <see cref="T:UnityEngine.Splines.TangentMode"/> for the knot at index.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetTangentMode(UnityEngine.Splines.TangentMode)">
            <summary>
            Sets the <see cref="T:UnityEngine.Splines.TangentMode"/> for all knots on this spline.
            </summary>
            <param name="mode">The <see cref="T:UnityEngine.Splines.TangentMode"/> to apply to each knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetTangentMode(System.Int32,UnityEngine.Splines.TangentMode,UnityEngine.Splines.BezierTangent)">
            <summary>
            Sets the <see cref="T:UnityEngine.Splines.TangentMode"/> for a knot, and ensures that the rotation and tangent values match the
            behavior of the tangent mode.
            This function can modify the contents of the <see cref="T:UnityEngine.Splines.BezierKnot"/> at the specified index.
            </summary>
            <param name="index">The index of the knot to set.</param>
            <param name="mode">The mode to set.</param>
            <param name="main">The tangent direction to align both the In and Out tangent when assigning Continuous
            or Mirrored tangent mode.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetTangentMode(UnityEngine.Splines.SplineRange,UnityEngine.Splines.TangentMode,UnityEngine.Splines.BezierTangent)">
            <summary>
            Sets the <see cref="T:UnityEngine.Splines.TangentMode"/> for a series of knots, and ensures that the rotation and tangent values
            match the behavior of the tangent mode.
            This function can modify the contents of the <see cref="T:UnityEngine.Splines.BezierKnot"/> at the specified indices.
            </summary>
            <param name="range">The range of knot indices to set.</param>
            <param name="mode">The mode to set.</param>
            <param name="main">The tangent direction to align both the In and Out tangent with when Continuous or
            Mirrored tangent mode is assigned .</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetTangentModeNoNotify(System.Int32,UnityEngine.Splines.TangentMode,UnityEngine.Splines.BezierTangent)">
            <summary>
            Sets the <see cref="T:UnityEngine.Splines.TangentMode"/> for a knot, and ensures that the rotation and tangent values match the
            behavior of the tangent mode. No changed callbacks will be invoked.
            This function can modify the contents of the <see cref="T:UnityEngine.Splines.BezierKnot"/> at the specified index.
            </summary>
            <param name="index">The index of the knot to set.</param>
            <param name="mode">The mode to set.</param>
            <param name="main">The tangent direction to align both the In and Out tangent when assigning Continuous
            or Mirrored tangent mode.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.ApplyTangentModeNoNotify(System.Int32,UnityEngine.Splines.BezierTangent)">
            <summary>
            Ensures that the tangents at an index conform to the tangent mode.
            </summary>
            <remarks>
            This function updates the tangents, but does not set the tangent mode.
            </remarks>
            <param name="index">The index of the knot to set tangent values for.</param>
            <param name="main">The tangent direction to align the In and Out tangent to when assigning Continuous
            or Mirrored tangent mode.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetAutoSmoothTension(System.Int32)">
            <summary>
            Gets the tension value for the requested index.
            </summary>
            <param name="index">The knot index to get a tension value for.</param>
            <returns>Returns the tension value for the requested index.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetAutoSmoothTension(System.Int32,System.Single)">
            <summary>
            Sets the tension that is used to calculate the magnitude of tangents when the <see cref="T:UnityEngine.Splines.TangentMode"/> is
            <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>. Valid values are between 0 and 1.
            A lower value results in sharper curves, whereas higher values appear more rounded.
            </summary>
            <param name="index">The knot index to set a tension value for.</param>
            <param name="tension">Set the length of the tangent vectors.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetAutoSmoothTension(UnityEngine.Splines.SplineRange,System.Single)">
            <summary>
            Sets the tension that is used to calculate the magnitude of tangents when the <see cref="T:UnityEngine.Splines.TangentMode"/> is
            <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>. Valid values are between 0 and 1.
            A lower value results in sharper curves, whereas higher values appear more rounded.
            </summary>
            <param name="range">The range of knot indices to set a tension value for.</param>
            <param name="tension">Set the length of the tangent vectors.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetAutoSmoothTensionNoNotify(System.Int32,System.Single)">
            <summary>
            Sets the tension that is used to calculate the magnitude of tangents when the <see cref="T:UnityEngine.Splines.TangentMode"/> is
            <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>. Valid values are between 0 and 1.
            A lower value results in sharper curves, whereas higher values appear more rounded.
            No changed callbacks will be invoked.
            </summary>
            <param name="index">The knot index to set a tension value for.</param>
            <param name="tension">Set the length of the tangent vectors for a knot set to <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetAutoSmoothTensionNoNotify(UnityEngine.Splines.SplineRange,System.Single)">
            <summary>
            Set the tension that is used to calculate the magnitude of tangents when the <see cref="T:UnityEngine.Splines.TangentMode"/> is
            <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>. Valid values are between 0 and 1.
            A lower value results in sharper curves, whereas higher values appear more rounded.
            No changed callbacks will be invoked.
            </summary>
            <param name="range">The range of knot indices to set a tension value for.</param>
            <param name="tension">Set the length of the tangent vectors for a knot set to <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>.</param>
        </member>
        <member name="P:UnityEngine.Splines.Spline.EditType">
            <summary>
            The SplineType that this spline should be presented as to the user.
            </summary>
            <remarks>
            Internally all splines are stored as a collection of bezier knots, and when editing converted or displayed
            with the handles appropriate to the editable type.
            </remarks>
        </member>
        <member name="P:UnityEngine.Splines.Spline.Knots">
            <summary>
            A collection of <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.Spline.Closed">
            <summary>
            Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Spline.IndexOf(UnityEngine.Splines.BezierKnot)">
            <summary>
            Return the first index of an element matching item.
            </summary>
            <param name="item">The knot to locate.</param>
            <returns>The zero-based index of the knot, or -1 if not found.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Insert(System.Int32,UnityEngine.Splines.BezierKnot)">
            <summary>
            Insert a <see cref="T:UnityEngine.Splines.BezierKnot"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index to insert the new element.</param>
            <param name="knot">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to insert.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Insert(System.Int32,UnityEngine.Splines.BezierKnot,UnityEngine.Splines.TangentMode)">
            <summary>
            Inserts a <see cref="T:UnityEngine.Splines.BezierKnot"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index to insert the new element.</param>
            <param name="knot">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to insert.</param>
            <param name="mode">The <see cref="T:UnityEngine.Splines.TangentMode"/> to apply to this knot. Tangent modes are enforced
            when a knot value is set.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Insert(System.Int32,UnityEngine.Splines.BezierKnot,UnityEngine.Splines.TangentMode,System.Single)">
            <summary>
            Adds a <see cref="T:UnityEngine.Splines.BezierKnot"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index to insert the new element.</param>
            <param name="knot">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to insert.</param>
            <param name="mode">The <see cref="T:UnityEngine.Splines.TangentMode"/> to apply to this knot. Tangent modes are enforced
            when a knot value is set.</param>
            <param name="tension">The modifier value that is used to calculate the magnitude of tangents when the
            <see cref="T:UnityEngine.Splines.TangentMode"/> is <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>. Valid values are between 0 and 1.
            A lower value results in sharper curves, whereas higher values appear more rounded.
            </param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.RemoveAt(System.Int32)">
            <summary>
            Removes the knot at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:UnityEngine.Splines.Spline.Item(System.Int32)">
            <summary>
            Get or set the knot at <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetKnot(System.Int32,UnityEngine.Splines.BezierKnot,UnityEngine.Splines.BezierTangent)">
            <summary>
            Sets the value of a knot at index.
            </summary>
            <param name="index">The index of the <see cref="T:UnityEngine.Splines.BezierKnot"/> to set.</param>
            <param name="value">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to set.</param>
            <param name="main">The tangent to prioritize if the tangents are modified to conform with the
            <see cref="T:UnityEngine.Splines.TangentMode"/> set for this knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.SetKnotNoNotify(System.Int32,UnityEngine.Splines.BezierKnot,UnityEngine.Splines.BezierTangent)">
            <summary>
            Sets the value of a knot index without invoking any change callbacks.
            </summary>
            <param name="index">The index of the <see cref="T:UnityEngine.Splines.BezierKnot"/> to set.</param>
            <param name="value">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to set.</param>
            <param name="main">The tangent to prioritize if the tangents are modified to conform with the
            <see cref="T:UnityEngine.Splines.TangentMode"/> set for this knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.#ctor">
            <summary>
            Default constructor creates a spline with no knots, not closed.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Spline.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a spline with a pre-allocated knot capacity.
            </summary>
            <param name="knotCapacity">The capacity of the knot collection.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.#ctor(System.Collections.Generic.IEnumerable{UnityEngine.Splines.BezierKnot},System.Boolean)">
            <summary>
            Create a spline from a collection of <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
            <param name="knots">A collection of <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetCurve(System.Int32)">
            <summary>
            Get a <see cref="T:UnityEngine.Splines.BezierCurve"/> from a knot index.
            </summary>
            <param name="index">The knot index that serves as the first control point for this curve.</param>
            <returns>
            A <see cref="T:UnityEngine.Splines.BezierCurve"/> formed by the knot at index and the next knot.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetCurveLength(System.Int32)">
            <summary>
            Return the length of a curve.
            </summary>
            <param name="index"></param>
            <seealso cref="M:UnityEngine.Splines.Spline.Warmup"/>
            <seealso cref="M:UnityEngine.Splines.Spline.GetLength"/>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetLength">
            <summary>
            Return the sum of all curve lengths, accounting for <see cref="P:UnityEngine.Splines.Spline.Closed"/> state.
            Note that this value is not accounting for transform hierarchy. If you require length in world space use
            </summary>
            <remarks>
            This value is cached. It is recommended to call this once in a non-performance critical path to ensure that
            the cache is valid.
            </remarks>
            <seealso cref="M:UnityEngine.Splines.Spline.Warmup"/>
            <seealso cref="M:UnityEngine.Splines.Spline.GetCurveLength(System.Int32)"/>
            <returns>
            Returns the sum length of all curves composing this spline, accounting for closed state.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetCurveInterpolation(System.Int32,System.Single)">
            <summary>
            Return the normalized interpolation (t) corresponding to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
            <param name="curveIndex"> The zero-based index of the curve.</param>
            <param name="curveDistance">The curve-relative distance to convert to an interpolation ratio (also referred to as 't').</param>
            <returns>  The normalized interpolation ratio associated to distance on the designated curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Warmup">
            <summary>
            Ensure that all caches contain valid data. Call this to avoid unexpected performance costs when accessing
            spline data. Caches remain valid until any part of the spline state is modified.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Resize(System.Int32)">
            <summary>
            Change the size of the <see cref="T:UnityEngine.Splines.BezierKnot"/> list.
            </summary>
            <param name="newSize">The new size of the knots collection.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.ToArray">
            <summary>
            Create an array of spline knots.
            </summary>
            <returns>Return a new array copy of the knots collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Copy(UnityEngine.Splines.Spline)">
            <summary>
            Copy the values from <paramref name="copyFrom"/> to this spline.
            </summary>
            <param name="copyFrom">The spline to copy property data from.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.GetEnumerator">
            <summary>
            Get an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Add(UnityEngine.Splines.BezierKnot)">
            <summary>
            Adds a knot to the spline.
            </summary>
            <param name="item">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to add.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Add(UnityEngine.Splines.BezierKnot,UnityEngine.Splines.TangentMode)">
            <summary>
            Adds a knot to the spline.
            </summary>
            <param name="item">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to add.</param>
            <param name="mode">The tangent mode for this knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Add(UnityEngine.Splines.BezierKnot,UnityEngine.Splines.TangentMode,System.Single)">
            <summary>
            Adds a knot to the spline.
            </summary>
            <param name="item">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to add.</param>
            <param name="mode">The tangent mode for this knot.</param>
            <param name="tension">The modifier value that is used to calculate the magnitude of tangents when the
            <see cref="T:UnityEngine.Splines.TangentMode"/> is <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/>. Valid values are between 0 and 1.
            A lower value results in sharper curves, whereas higher values appear more rounded.
            </param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Clear">
            <summary>
            Remove all knots from the spline.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Contains(UnityEngine.Splines.BezierKnot)">
            <summary>
            Return true if a knot is present in the spline.
            </summary>
            <param name="item">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to locate.</param>
            <returns>Returns true if the knot is found, false if it is not present.</returns>
        </member>
        <member name="M:UnityEngine.Splines.Spline.CopyTo(UnityEngine.Splines.BezierKnot[],System.Int32)">
            <summary>
            Copies the contents of the knot list to an array starting at an index.
            </summary>
            <param name="array">The destination array to place the copied item in.</param>
            <param name="arrayIndex">The zero-based index to copy.</param>
        </member>
        <member name="M:UnityEngine.Splines.Spline.Remove(UnityEngine.Splines.BezierKnot)">
            <summary>
            Removes the first matching knot.
            </summary>
            <param name="item">The <see cref="T:UnityEngine.Splines.BezierKnot"/> to locate and remove.</param>
            <returns>Returns true if a matching item was found and removed, false if no match was discovered.</returns>
        </member>
        <member name="T:UnityEngine.Splines.IDataPoint">
            <summary>
            Defines an interpolation ratio 't' for a Data Point.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.IDataPoint.Index">
            <summary>
            The interpolation ratio. How this value is interpreted depends on the <see cref="T:UnityEngine.Splines.PathIndexUnit"/> specified
            by <see cref="T:UnityEngine.Splines.SplineData`1"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.DataPoint`1">
            <summary>
            A pair containing an interpolation ratio and {TDataType} value.
            </summary>
            <typeparam name="TDataType">The type of data this data point stores.</typeparam>
        </member>
        <member name="P:UnityEngine.Splines.DataPoint`1.Index">
            <summary>
            The interpolation ratio relative to a spline. How this value is interpolated depends on the <see cref="T:UnityEngine.Splines.PathIndexUnit"/>
            specified by <see cref="T:UnityEngine.Splines.SplineData`1"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.DataPoint`1.Value">
            <summary>
            A value to store with this Data Point.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.DataPoint`1.#ctor(System.Single,`0)">
            <summary>
            Create a new Data Point with interpolation ratio and value.
            </summary>
            <param name="index">Interpolation ratio.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:UnityEngine.Splines.DataPoint`1.CompareTo(UnityEngine.Splines.DataPoint{`0})">
            <summary>
            Compare DataPoint <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/> values.
            </summary>
            <param name="other">The DataPoint to compare against.</param>
            <returns>An integer less than 0 if other.Key is greater than <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/>, 0 if key values are equal, and greater
            than 0 when other.Key is less than <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/>.</returns>
        </member>
        <member name="M:UnityEngine.Splines.DataPoint`1.CompareTo(System.Single)">
            <summary>
            Compare DataPoint <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/> values.
            </summary>
            <param name="other">An interpolation ratio to compare against.</param>
            <returns>An integer less than 0 if other.Key is greater than <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/>, 0 if key values are equal, and greater
            than 0 when other.Key is less than <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/>.</returns>
        </member>
        <member name="M:UnityEngine.Splines.DataPoint`1.ToString">
            <summary>
            A summary of the DataPoint time and value.
            </summary>
            <returns>A summary of the DataPoint key and value.</returns>
        </member>
        <member name="T:UnityEngine.Splines.SplineMath">
            <summary>
            Assorted utility functions for math equations commonly used when working with Splines.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineMath.RayLineParameter(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Returns the parameterization of a ray line projection. The parameter will be negative if the nearest point
            between the ray/line is negative to 'lineOrigin', and greater than 1 if nearest intersection is past the end
            off the line segment (lineOrigin + lineDir).
            </summary>
            <param name="ro">The ray origin point.</param>
            <param name="rd">The ray direction (normalized vector).</param>
            <param name="lineOrigin">Line segment first point.</param>
            <param name="lineDir">Line segment direction (with magnitude).</param>
            <returns>The parameter of a ray line projection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineMath.RayLineDistance(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Returns the shortest distance between a ray and line segment as a direction and magnitude.
            </summary>
            <param name="ro">The ray origin point.</param>
            <param name="rd">The ray direction (normalized vector).</param>
            <param name="a">The line start point.</param>
            <param name="b">The line end point.</param>
            <returns>Returns the shortest distance between a ray and line segment as a direction and magnitude.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineMath.RayLineNearestPoint(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Returns the nearest points between a ray and line segment.
            </summary>
            <param name="ro">The ray origin point.</param>
            <param name="rd">The ray direction (normalized vector).</param>
            <param name="a">The line start point.</param>
            <param name="b">The line end point.</param>
            <returns>Returns the nearest points between a ray and line segment.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineMath.RayLineNearestPoint(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single@,System.Single@)">
            <summary>
            Returns the nearest points on a ray and a line segment to one another.
            </summary>
            <param name="ro">The ray origin point.</param>
            <param name="rd">The ray direction (normalized vector).</param>
            <param name="a">The line start point.</param>
            <param name="b">The line end point.</param>
            <param name="rayParam">The parameter of the projection of the nearest point on the line segment to the ray.
            This is a value between 0 and 1 that represents the ratio along the ray starting from origin at which the
            nearest point is found.</param>
            <param name="lineParam">The parameter for the projection of the nearest point on a ray onto the line
            segment. This is a value between 0 and 1 that represents the ratio along the line segment at which the
            nearest point is found.</param>
            <returns>Returns the nearest points on a ray and a line segment to one another.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineMath.PointLineNearestPoint(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single@)">
            <summary>
            Returns the nearest point on a finite line segment to a point.
            </summary>
            <param name="p">The point to compare to.</param>
            <param name="a">The line start point.</param>
            <param name="b">The line end point.</param>
            <param name="lineParam">The parameter for the projection of a point onto the line segment. This is a value
            between 0 and 1 that represents the ratio along the line segment at which the nearest point is found.</param>
            <returns>The nearest point on a line segment to another point.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineMath.DistancePointLine(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Gets the distance from a point to a line segment.
            </summary>
            <param name="p">The point to compare against.</param>
            <param name="a">The start point of the line segment.</param>
            <param name="b">The end point of the line segment.</param>
            <returns>Returns the distance of the closest line from a point to a line segment.</returns>
        </member>
        <member name="T:UnityEngine.Splines.SplinePathRef.SliceRef">
            <summary>
            SliceRef represents a partial or complete range of curves from another <see cref="T:UnityEngine.Splines.Spline"/>. This is a
            serializable type, intended to be used with <see cref="T:UnityEngine.Splines.SplinePathRef"/>. To create an evaluable
            <see cref="T:UnityEngine.Splines.ISpline"/> from a <see cref="T:UnityEngine.Splines.Spline"/> and <see cref="T:UnityEngine.Splines.SplineRange"/>, use <see cref="T:UnityEngine.Splines.SplineSlice`1"/>.
            A <see cref="T:UnityEngine.Splines.SplinePathRef.SliceRef"/> by itself does not store any <see cref="T:UnityEngine.Splines.BezierKnot"/>s. It stores a reference to
            a separate <see cref="T:UnityEngine.Splines.Spline"/> index within a <see cref="T:UnityEngine.Splines.SplineContainer"/>, then retrieves knots by iterating
            the <see cref="T:UnityEngine.Splines.SplineRange"/>.
            Use <see cref="T:UnityEngine.Splines.SplinePathRef.SliceRef"/> in conjunction with <see cref="T:UnityEngine.Splines.SplinePathRef"/> to create seamless paths from
            discrete <see cref="T:UnityEngine.Splines.Spline"/> segments.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplinePathRef.SliceRef.Index">
            <summary>
            The index in the <see cref="!:SplineContainer.Branches"/> array of the referenced <see cref="T:UnityEngine.Splines.Spline"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplinePathRef.SliceRef.Range">
            <summary>
            An inclusive start index, number of indices, and direction to iterate.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplinePathRef.SliceRef.#ctor(System.Int32,UnityEngine.Splines.SplineRange)">
            <summary>
            Constructor for a new <see cref="T:UnityEngine.Splines.SplinePathRef.SliceRef"/>.
            </summary>
            <param name="splineIndex">The index in the <see cref="!:SplineContainer.Branches"/> array of the referenced <see cref="T:UnityEngine.Splines.Spline"/>.</param>
            <param name="range">An inclusive start index, number of indices, and direction to iterate.</param>
        </member>
        <member name="T:UnityEngine.Splines.SplinePath">
            <summary>
            The SplinePath type is an implementation of <see cref="T:UnityEngine.Splines.ISpline"/> that is composed of multiple sections of
            other splines (see <see cref="T:UnityEngine.Splines.SplineSlice`1"/>). This is useful when you want to evaluate a path that follows
            multiple splines, typically in the case where splines share linked knots.
            </summary>
            <seealso cref="T:UnityEngine.Splines.SplineRange"/>
            <seealso cref="T:UnityEngine.Splines.KnotLinkCollection"/>
            <seealso cref="T:UnityEngine.Splines.SplineKnotIndex"/>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath.#ctor(System.Collections.Generic.IEnumerable{UnityEngine.Splines.SplineSlice{UnityEngine.Splines.Spline}})">
            <summary>
            Creates a new <see cref="T:UnityEngine.Splines.SplinePath"/> from a collection of <see cref="T:UnityEngine.Splines.SplineSlice`1"/>.
            </summary>
            <param name="slices">The splines to create this path with.</param>
        </member>
        <member name="T:UnityEngine.Splines.SplinePath`1">
            <summary>
            The SplinePath type is an implementation of <see cref="T:UnityEngine.Splines.ISpline"/> that is composed of multiple sections of
            other splines (see <see cref="T:UnityEngine.Splines.SplineSlice`1"/>). This is useful when you want to evaluate a path that follows
            multiple splines, typically in the case where splines share linked knots.
            </summary>
            <seealso cref="T:UnityEngine.Splines.SplineRange"/>
            <seealso cref="T:UnityEngine.Splines.KnotLinkCollection"/>
            <seealso cref="T:UnityEngine.Splines.SplineKnotIndex"/>
            <typeparam name="T">The type of spline to create a path with.</typeparam>
        </member>
        <member name="P:UnityEngine.Splines.SplinePath`1.Slices">
            <summary>
            The <see cref="T:UnityEngine.Splines.ISpline"/> splines that make up this path.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new <see cref="T:UnityEngine.Splines.SplinePath`1"/> from a collection of <see cref="T:UnityEngine.Splines.ISpline"/>.
            </summary>
            <param name="slices">A collection of <see cref="T:UnityEngine.Splines.ISpline"/>.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="P:UnityEngine.Splines.SplinePath`1.Count">
            <summary>
            Returns the number of knots.
            Note that there are duplicate knots where two <see cref="T:UnityEngine.Splines.ISpline"/> meet.
            In addition, each closed <see cref="T:UnityEngine.Splines.ISpline"/> have their first knot duplicated.
            Use <see cref="M:UnityEngine.Splines.SplinePath`1.GetCurve(System.Int32)"/> to access curves rather than construct the curve yourself.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplinePath`1.Item(System.Int32)">
            <summary>
            Gets the knot at <paramref name="index"/>. If the <see cref="T:UnityEngine.Splines.ISpline"/> section that contains this
            knot has a <see cref="T:UnityEngine.Splines.SplineRange"/> with <see cref="F:UnityEngine.Splines.SliceDirection.Backward"/>, the in and out tangents
            are reversed.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="P:UnityEngine.Splines.SplinePath`1.Item(UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Gets the knot at <paramref name="index"/>. If the <see cref="T:UnityEngine.Splines.ISpline"/> segment that contains this
            knot has a <see cref="T:UnityEngine.Splines.SplineRange"/> with <see cref="F:UnityEngine.Splines.SliceDirection.Backward"/>, the in and out tangents
            are reversed.
            </summary>
            <param name="index">The zero-based index of the slice and knot to get.</param>
        </member>
        <member name="P:UnityEngine.Splines.SplinePath`1.Closed">
            <summary>
            <see cref="T:UnityEngine.Splines.SplinePathRef"/> does not support Closed splines.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.GetLength">
            <summary>
            Return the sum of all curve lengths, accounting for <see cref="P:UnityEngine.Splines.SplinePath`1.Closed"/> state.
            </summary>
            <returns>
            Returns the sum length of all curves composing this spline, accounting for closed state.
            </returns>
        </member>
        <member name="P:UnityEngine.Splines.SplinePath`1.EmptyCurves">
            <summary>
            A collection of knot indices that should be considered degenerate curves for the purpose of creating a
            non-interpolated gap between curves.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.GetCurve(System.Int32)">
            <summary>
            Gets a <see cref="T:UnityEngine.Splines.BezierCurve"/> from a knot index. This function returns
            degenerate (0 length) curves at the overlap points between each <see cref="T:UnityEngine.Splines.ISpline"/>.
            </summary>
            <param name="knot">The knot index that is the first control point for this curve.</param>
            <returns>
            A <see cref="T:UnityEngine.Splines.BezierCurve"/> formed by the knot at index and the next knot.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.GetCurveLength(System.Int32)">
            <summary>
            Returns the length of a curve. This function returns 0 length for knot indices where
            <see cref="T:UnityEngine.Splines.ISpline"/> segments overlap.
            </summary>
            <param name="index">The index of the curve that the length is retrieved from.</param>
            <seealso cref="M:UnityEngine.Splines.SplinePath`1.GetLength"/>
            <returns>
            Returns the length of the curve of index 'index' in the spline.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplinePath`1.GetCurveInterpolation(System.Int32,System.Single)">
            <summary>
            Returns the interpolation ratio (0 to 1) that corresponds to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>. The
            distance is relative to the curve.
            </summary>
            <param name="curveIndex"> The zero-based index of the curve.</param>
            <param name="curveDistance"> The distance measured from the knot at curveIndex to convert to a normalized interpolation ratio.</param>
            <returns>The normalized interpolation ratio that matches the distance on the designated curve. </returns>
        </member>
        <member name="T:UnityEngine.Splines.SplineComponent">
            <summary>
            Base class for SplineInstantiate and SplineExtrude, contains common elements to both of these Components
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineComponent.AlignAxis">
            <summary>
            Describes the different types of object alignment axes.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineComponent.AlignAxis.XAxis">
            <summary> Object space X axis. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineComponent.AlignAxis.YAxis">
            <summary> Object space Y axis. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineComponent.AlignAxis.ZAxis">
            <summary> Object space Z axis. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineComponent.AlignAxis.NegativeXAxis">
            <summary> Object space negative X axis. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineComponent.AlignAxis.NegativeYAxis">
            <summary> Object space negative Y axis. </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineComponent.AlignAxis.NegativeZAxis">
            <summary> Object space negative Z axis. </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineComponent.GetAxis(UnityEngine.Splines.SplineComponent.AlignAxis)">
            <summary>
            Transform a AlignAxis to the associated float3 direction. 
            </summary>
            <param name="axis">The AlignAxis to transform</param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Splines.BezierTangent">
            <summary>
            Describes the direction of a <see cref="T:UnityEngine.Splines.BezierKnot"/> tangent. A spline is composed of a list of
            <see cref="T:UnityEngine.Splines.BezierKnot"/>, where every knot can be either the start or end of a <see cref="T:UnityEngine.Splines.BezierCurve"/>. The
            <see cref="T:UnityEngine.Splines.BezierTangent"/> enum indicates which tangent should be used to construct a curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierTangent.In">
            <summary>
            The "In" tangent is the second tangent in a curve composed of two knots.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierTangent.Out">
            <summary>
            The "Out" tangent is the first tangent in a curve composed of two knots.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineFactory">
            <summary>
            Methods to create spline shapes.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateLinear(System.Collections.Generic.IList{Unity.Mathematics.float3},System.Boolean)">
            <summary>
            Create a <see cref="T:UnityEngine.Splines.Spline"/> from a list of positions.
            </summary>
            <param name="positions">A collection of knot positions.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateLinear(System.Collections.Generic.IList{Unity.Mathematics.float3},System.Collections.Generic.IList{Unity.Mathematics.quaternion},System.Boolean)">
            <summary>
            Create a <see cref="T:UnityEngine.Splines.Spline"/> from a list of positions.
            </summary>
            <param name="positions">A collection of knot positions.</param>
            <param name="rotations">A collection of knot rotations. Must be equal in length to the positions array.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateCatmullRom(System.Collections.Generic.IList{Unity.Mathematics.float3},System.Boolean)">
            <summary>
            Create a <see cref="T:UnityEngine.Splines.Spline"/> from a list of positions and place tangents to create Catmull Rom curves.
            </summary>
            <param name="positions">A collection of knot positions.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateCatmullRom(System.Collections.Generic.IList{Unity.Mathematics.float3},System.Collections.Generic.IList{Unity.Mathematics.quaternion},System.Boolean)">
            <summary>
            Create a <see cref="T:UnityEngine.Splines.Spline"/> from a list of positions and place tangents to create Catmull Rom curves.
            </summary>
            <param name="positions">A collection of knot positions.</param>
            <param name="rotations">A collection of knot rotations. Must be equal in length to the positions array.</param>
            <param name="closed">Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateRoundedSquare(System.Single,System.Single)">
            <summary>
            Create a <see cref="T:UnityEngine.Splines.Spline"/> in a square shape with rounding at the edges.
            </summary>
            <param name="radius">The distance from center to outermost edge.</param>
            <param name="rounding">The amount of rounding to apply to corners.</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateHelix(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a <see cref="T:UnityEngine.Splines.Spline"/> in the shape of a helix with a single revolution.
            </summary>
            <param name="radius">The distance from the center to the helix's curve.</param>
            <param name="height">The height of the helix shape.</param>
            <param name="revolutions">The number of revolutions the helix should have.</param> 
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateRoundedCornerSquare(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:UnityEngine.Splines.Spline"/> in the shape of a square with circular arcs at its corners.
            </summary>
            <param name="size">The size of the square's edges.</param>
            <param name="cornerRadius">The radius of the circular arcs at the corners of the shape.
            A value of 0 creates a square with no rounding. A value that is half of <paramref name="size"/> creates a circle.</param>
            <remarks>The range for <paramref name="cornerRadius"/> is 0 and half of <paramref name="size"/>.</remarks>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateSquare(System.Single)">
            <summary>
            Creates a <see cref="T:UnityEngine.Splines.Spline"/> in the shape of a square with sharp corners. 
            </summary>
            <param name="size">The size of the square's edges.</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateCircle(System.Single)">
            <summary>
            Creates a <see cref="T:UnityEngine.Splines.Spline"/> in the shape of a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreatePolygon(System.Single,System.Int32)">
            <summary>
            Creates a <see cref="T:UnityEngine.Splines.Spline"/> in the shape of a polygon with a specific number of sides.
            </summary>
            <param name="edgeSize">The size of the polygon's edges.</param>
            <param name="sides">The amount of sides the polygon has.</param>
            <returns>A new Spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineFactory.CreateStarPolygon(System.Single,System.Int32,System.Single)">
            <summary>
            Creates a <see cref="T:UnityEngine.Splines.Spline"/> in in the shape of a star with a specified number of corners.
            </summary>
            <param name="edgeSize">The distance between the corners of the star.</param>
            <param name="corners">The amount of corners the star has.</param>
            <param name="concavity">The sharpness of the corners. The range is 0 through 1. </param>
            <returns>A new Spline.</returns>
        </member>
        <member name="T:UnityEngine.Splines.IInterpolator`1">
            <summary>
            To calculate a value at some distance along a spline, interpolation is required. The IInterpolator interface
            allows you to define how data is interpreted given a start value, end value, and normalized interpolation value
            (commonly referred to as 't').
            </summary>
            <typeparam name="T">
            The data type to interpolate.
            </typeparam>
        </member>
        <member name="M:UnityEngine.Splines.IInterpolator`1.Interpolate(`0,`0,System.Single)">
            <summary>
            Calculate a value between from and to at time interval.
            </summary>
            <param name="from">The starting value. At t = 0 this method should return an unmodified 'from' value.</param>
            <param name="to">The ending value. At t = 1 this method should return an unmodified 'to' value.</param>
            <param name="t">A percentage between 'from' and 'to'. Must be between 0 and 1.</param>
            <returns>A value between 'from' and 'to'.</returns>
        </member>
        <member name="T:UnityEngine.Splines.PathIndexUnit">
            <summary>
            Describes the unit of measurement used by <see cref="T:UnityEngine.Splines.DataPoint`1"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.PathIndexUnit.Distance">
            <summary>
            The 't' value used when interpolating is measured in game units. Values range from 0 (start of Spline) to
            <see cref="M:UnityEngine.Splines.Spline.GetLength"/> (end of Spline).
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.PathIndexUnit.Normalized">
            <summary>
            The 't' value used when interpolating is normalized. Values range from 0 (start of Spline) to 1 (end of Spline).
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.PathIndexUnit.Knot">
            <summary>
            The 't' value used when interpolating is defined by knot indices and a fractional value representing the
            normalized interpolation between the specific knot index and the next knot.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineData`1">
            <summary>
            The SplineData{T} class is used to store information relative to a <see cref="T:UnityEngine.Splines.Spline"/> without coupling data
            directly to the Spline class. SplineData can store any type of data, and provides options for how to index
            DataPoints.
            </summary>
            <typeparam name="T"> The type of data to store. </typeparam>
        </member>
        <member name="P:UnityEngine.Splines.SplineData`1.Item(System.Int32)">
            <summary>
            Access a <see cref="T:UnityEngine.Splines.DataPoint`1"/> by index. DataPoints are sorted in ascending order by the
            <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/> value.
            </summary>
            <param name="index">
            The index of the DataPoint to access.
            </param>
        </member>
        <member name="P:UnityEngine.Splines.SplineData`1.PathIndexUnit">
            <summary>
            PathIndexUnit defines how SplineData will interpret 't' values when interpolating data.
            </summary>
            <seealso cref="P:UnityEngine.Splines.SplineData`1.PathIndexUnit"/>
        </member>
        <member name="P:UnityEngine.Splines.SplineData`1.DefaultValue">
            <summary>
            Default value to use when a new DataPoint is automatically added.
            </summary>
            <seealso cref="P:UnityEngine.Splines.SplineData`1.PathIndexUnit"/>
        </member>
        <member name="P:UnityEngine.Splines.SplineData`1.Count">
            <summary>
            How many data points the SplineData collection contains.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineData`1.Indexes">
            <summary>
            The DataPoint Indexes of the current SplineData.
            </summary>
        </member>
        <member name="E:UnityEngine.Splines.SplineData`1.changed">
            <summary>
            Invoked any time a SplineData is modified.
            </summary>
            <remarks>
            In the editor this can be invoked many times per-frame.
            Prefer to use <see cref="!:UnityEditor.Splines.EditorSplineUtility.RegisterSplineDataChanged"/> when working with
            splines in the editor.
            </remarks>
        </member>
        <member name="E:UnityEngine.Splines.SplineData`1.Changed">
            <summary>
            Invoked any time a SplineData is modified.
            </summary>
            <remarks>
            In the editor this can be invoked many times per-frame.
            Prefer to use <see cref="!:UnityEditor.Splines.EditorSplineUtility.RegisterSplineDataChanged"/> when working with
            splines in the editor.
            </remarks>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.#ctor">
            <summary>
            Create a new SplineData instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.#ctor(`0)">
            <summary>
            Create a new SplineData instance with a single value in it.
            </summary>
            <param name="init">
            A single value to add to the spline data at t = 0.`
            </param>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.#ctor(System.Collections.Generic.IEnumerable{UnityEngine.Splines.DataPoint{`0}})">
            <summary>
            Create a new SplineData instance and initialize it with a collection of data points. DataPoints will be sorted and stored
            in ascending order by <see cref="P:UnityEngine.Splines.DataPoint`1.Index"/>.
            </summary>
            <param name="dataPoints">
            A collection of DataPoints to initialize SplineData.`
            </param>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.Add(System.Single,`0)">
            <summary>
            Append a <see cref="T:UnityEngine.Splines.DataPoint`1"/> to this collection.
            </summary>
            <param name="t">
            The interpolant relative to Spline. How this value is interpreted is dependent on <see cref="M:UnityEngine.Splines.SplineData`1.get_PathIndexUnit"/>.
            </param>
            <param name="data">
            The data to store in the created data point.
            </param>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.Add(UnityEngine.Splines.DataPoint{`0})">
            <summary>
            Append a <see cref="T:UnityEngine.Splines.DataPoint`1"/> to this collection.
            </summary>
            <param name="dataPoint">
            The data point to append to the SplineData collection.
            </param>
            <returns>
            The index of the inserted dataPoint.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.AddDataPointWithDefaultValue(System.Single,System.Boolean)">
            <summary>
            Append a <see cref="T:UnityEngine.Splines.DataPoint`1"/> with default value to this collection.
            </summary>
            <param name="t">
            The interpolant relative to Spline. How this value is interpreted is dependent on <see cref="M:UnityEngine.Splines.SplineData`1.get_PathIndexUnit"/>.
            </param>
            <param name="useDefaultValue">
            If true will use <see cref="F:UnityEngine.Splines.SplineData`1.m_DefaultValue"/> to set the value, otherwise will interpolate the value regarding the closest DataPoints.
            </param>
            <returns>
            The index of the inserted dataPoint.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.RemoveAt(System.Int32)">
            <summary>
            Remove a <see cref="T:UnityEngine.Splines.DataPoint`1"/> at index.
            </summary>
            <param name="index">The index to remove.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.RemoveDataPoint(System.Single)">
            <summary>
            Remove a <see cref="T:UnityEngine.Splines.DataPoint`1"/> from this collection, if one exists.
            </summary>
            <param name="t">
            The interpolant relative to Spline. How this value is interpreted is dependent on <see cref="M:UnityEngine.Splines.SplineData`1.get_PathIndexUnit"/>.
            </param>
            <returns>
            True is deleted, false otherwise.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.MoveDataPoint(System.Int32,System.Single)">
            <summary>
            Move a <see cref="T:UnityEngine.Splines.DataPoint`1"/> (if it exists) from this collection, from one index to the another.
            </summary>
            <param name="index">The index of the  <see cref="T:UnityEngine.Splines.DataPoint`1"/> to move.</param>
            <param name="newIndex">The new index for this  <see cref="T:UnityEngine.Splines.DataPoint`1"/>.</param>
            <returns>The index of the modified <see cref="T:UnityEngine.Splines.DataPoint`1"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.Clear">
            <summary>
            Remove all data points.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.Evaluate``2(``0,System.Single,UnityEngine.Splines.PathIndexUnit,``1)">
            <summary>
            Calculate an interpolated value at a given 't' along a spline.
            </summary>
            <param name="spline">The Spline to interpolate.</param>
            <param name="t">The interpolator value. How this is interpreted is defined by <see cref="P:UnityEngine.Splines.SplineData`1.PathIndexUnit"/>.</param>
            <param name="indexUnit">The <see cref="P:UnityEngine.Splines.SplineData`1.PathIndexUnit"/> that <paramref name="t"/> is represented as.</param>
            <param name="interpolator">The <see cref="T:UnityEngine.Splines.IInterpolator`1"/> to use. A collection of commonly used
            interpolators are available in the <see cref="N:UnityEngine.Splines.Interpolators"/> namespace.</param>
            <typeparam name="TInterpolator">The IInterpolator type.</typeparam>
            <typeparam name="TSpline">The Spline type.</typeparam>
            <returns>An interpolated value.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.Evaluate``2(``0,System.Single,``1)">
            <summary>
            Calculate an interpolated value at a given 't' along a spline.
            </summary>
            <param name="spline">The Spline to interpolate.</param>
            <param name="t">The interpolator value. How this is interpreted is defined by <see cref="P:UnityEngine.Splines.SplineData`1.PathIndexUnit"/>.</param>
            <param name="interpolator">The <see cref="T:UnityEngine.Splines.IInterpolator`1"/> to use. A collection of commonly used
            interpolators are available in the <see cref="N:UnityEngine.Splines.Interpolators"/> namespace.</param>
            <typeparam name="TInterpolator">The IInterpolator type.</typeparam>
            <typeparam name="TSpline">The Spline type.</typeparam>
            <returns>An interpolated value.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.SetDataPoint(System.Int32,UnityEngine.Splines.DataPoint{`0})">
            <summary>
            Set the data for a <see cref="T:UnityEngine.Splines.DataPoint`1"/> at an index.
            </summary>
            <param name="index">The DataPoint index.</param>
            <param name="value">The value to set.</param>
            <remarks>
            Using this method will search the DataPoint list and invoke the <see cref="E:UnityEngine.Splines.SplineData`1.Changed"/>
            callback every time. This may be inconvenient when setting multiple DataPoints during the same frame.
            In this case, consider calling <see cref="M:UnityEngine.Splines.SplineData`1.SetDataPointNoSort(System.Int32,UnityEngine.Splines.DataPoint{`0})"/> for each DataPoint, followed by
            a single call to <see cref="M:UnityEngine.Splines.SplineData`1.SortIfNecessary"/>. Note that the call to <see cref="M:UnityEngine.Splines.SplineData`1.SortIfNecessary"/> is
            optional and can be omitted if DataPoint sorting is not required and the <see cref="E:UnityEngine.Splines.SplineData`1.Changed"/> callback
            should not be invoked.
            </remarks>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.SetDataPointNoSort(System.Int32,UnityEngine.Splines.DataPoint{`0})">
            <summary>
            Set the data for a <see cref="T:UnityEngine.Splines.DataPoint`1"/> at an index.
            </summary>
            <param name="index">The DataPoint index.</param>
            <param name="value">The value to set.</param>
            <remarks>
            Use this method as an altenative to <see cref="M:UnityEngine.Splines.SplineData`1.SetDataPoint(System.Int32,UnityEngine.Splines.DataPoint{`0})"/> when manual control
            over DataPoint sorting and the <see cref="E:UnityEngine.Splines.SplineData`1.Changed"/> callback is required.
            See also <see cref="M:UnityEngine.Splines.SplineData`1.SortIfNecessary"/>.
            </remarks>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.SortIfNecessary">
            <summary>
            Triggers sorting of the <see cref="T:UnityEngine.Splines.DataPoint`1"/> list if the data is dirty.
            </summary>
            <remarks>
            Call this after a single or series of calls to <see cref="M:UnityEngine.Splines.SplineData`1.SetDataPointNoSort(System.Int32,UnityEngine.Splines.DataPoint{`0})"/>.
            This will trigger DataPoint sort and invoke the <see cref="E:UnityEngine.Splines.SplineData`1.Changed"/> callback.
            This method has two main use cases: to prevent frequent <see cref="E:UnityEngine.Splines.SplineData`1.Changed"/> callback
            calls within the same frame and to reduce multiple DataPoints list searches
            to a single sort in performance critical paths.
            </remarks>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.ConvertPathUnit``1(``0,UnityEngine.Splines.PathIndexUnit)">
            <summary>
            Given a spline and a target PathIndex Unit, convert the SplineData to a new PathIndexUnit without changing the final positions on the Spline.
            </summary>
            <typeparam name="TSplineType">The Spline type.</typeparam>
            <param name="spline">The Spline to use for the conversion, this is necessary to compute most of PathIndexUnits.</param>
            <param name="toUnit">The unit to convert SplineData to.</param>>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.GetNormalizedInterpolation``1(``0,System.Single)">
            <summary>
            Given a time value using a certain PathIndexUnit type, calculate the normalized time value regarding a specific spline.
            </summary>
            <param name="spline">The Spline to use for the conversion, this is necessary to compute Normalized and Distance PathIndexUnits.</param>
            <param name="t">The time to normalize in the original PathIndexUnit.</param>>
            <typeparam name="TSplineType">The Spline type.</typeparam>
            <returns>The normalized time.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the DataPoints collection.
            </summary>
            <returns>
            An IEnumerator{DataPoint{T}} for this collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineData`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the DataPoints collection.
            </summary>
            <returns>
            An IEnumerator{DataPoint{T}} for this collection.</returns>
        </member>
        <member name="T:UnityEngine.Splines.DistanceToInterpolation">
            <summary>
            A key-value pair associating a distance to interpolation ratio ('t') value. This is used when evaluating Spline
            attributes to ensure uniform distribution of sampling points.
            </summary>
            <seealso cref="M:UnityEngine.Splines.CurveUtility.CalculateCurveLengths(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.DistanceToInterpolation[])"/>
        </member>
        <member name="F:UnityEngine.Splines.DistanceToInterpolation.Distance">
            <summary>
            Distance in Unity units.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.DistanceToInterpolation.T">
            <summary>
            A normalized interpolation ratio ('t').
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.IHasEmptyCurves">
            <summary>
            This interface defines a collection of knot indices that should be considered disconnected from the following
            knot indices when creating a <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.IHasEmptyCurves.EmptyCurves">
            <summary>
            A collection of knot indices that should be considered degenerate curves for the purpose of creating a
            non-interpolated gap between curves.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.ISpline">
            <summary>
            ISpline defines the interface from which Spline types inherit.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.ISpline.Closed">
            <summary>
            Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.ISpline.GetLength">
            <summary>
            Return the sum of all curve lengths, accounting for <see cref="P:UnityEngine.Splines.ISpline.Closed"/> state.
            </summary>
            <returns>
            Returns the sum length of all curves composing this spline, accounting for closed state.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.ISpline.GetCurve(System.Int32)">
            <summary>
            Get a <see cref="T:UnityEngine.Splines.BezierCurve"/> from a knot index.
            </summary>
            <param name="index">The knot index that serves as the first control point for this curve.</param>
            <returns>
            A <see cref="T:UnityEngine.Splines.BezierCurve"/> formed by the knot at index and the next knot.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.ISpline.GetCurveLength(System.Int32)">
            <summary>
            Return the length of a curve.
            </summary>
            <param name="index">The index of the curve for which the length needs to be retrieved.</param>
            <seealso cref="M:UnityEngine.Splines.ISpline.GetLength"/>
            <returns>
            Returns the length of the curve of index 'index' in the spline.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.ISpline.GetCurveInterpolation(System.Int32,System.Single)">
            <summary>
            Return the interpolation ratio (0 to 1) corresponding to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>. Distance
            is relative to the curve.
            </summary>
            <param name="curveIndex"> The zero-based index of the curve.</param>
            <param name="curveDistance"> The distance (measuring from the knot at curveIndex) to convert to a normalized interpolation ratio.</param>
            <returns>The normalized interpolation ratio matching distance on the designated curve. </returns>
        </member>
        <member name="T:UnityEngine.Splines.SplineSlice`1">
            <summary>
            SplineSlice represents a partial or complete range of curves from another <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/>.
            A <see cref="T:UnityEngine.Splines.SplineSlice`1"/> by itself does not store any <see cref="T:UnityEngine.Splines.BezierKnot"/>s. It stores a reference to
            a separate <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/>, then retrieves knots by iterating the <see cref="T:UnityEngine.Splines.SplineRange"/>.
            Use <see cref="T:UnityEngine.Splines.SplineSlice`1"/> in conjunction with <see cref="T:UnityEngine.Splines.SplinePath"/> to create seamless paths from
            discrete <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> segments.
            </summary>
            <remarks>
            Iterating a <see cref="T:UnityEngine.Splines.SplineSlice`1"/> is not as efficient as iterating a <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> or
            <see cref="T:UnityEngine.Splines.NativeSpline"/> because it does not cache any information. Where performance is a concern, create
            a new <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> or <see cref="T:UnityEngine.Splines.NativeSpline"/> from the <see cref="T:UnityEngine.Splines.SplineSlice`1"/>.
            </remarks>
            <typeparam name="T">The type of spline that this slice represents.</typeparam>
        </member>
        <member name="F:UnityEngine.Splines.SplineSlice`1.Spline">
            <summary>
            The <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> that this Slice will read <see cref="T:UnityEngine.Splines.BezierKnot"/> and <see cref="T:UnityEngine.Splines.BezierCurve"/>
            data from.
            A <see cref="T:UnityEngine.Splines.SplineSlice`1"/> by itself does not store any <see cref="T:UnityEngine.Splines.BezierKnot"/>s. Instead, it references
            a partial or complete range of existing <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/>s.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineSlice`1.Range">
            <summary>
            An inclusive start index, number of indices, and direction to iterate.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineSlice`1.Transform">
            <summary>
            A transform matrix to be applied to the spline knots and tangents.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineSlice`1.Count">
            <summary>
            Return the number of knots in this branch. This function clamps the <see cref="F:UnityEngine.Splines.SplineSlice`1.Range"/> to the Count of the
            the referenced <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineSlice`1.Closed">
            <summary>
            Whether the spline is open (has a start and end point) or closed (forms an unbroken loop).
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineSlice`1.Item(System.Int32)">
            <summary>
            Get a <see cref="T:UnityEngine.Splines.BezierKnot"/> at the zero-based index of this <see cref="T:UnityEngine.Splines.SplineSlice`1"/>.
            </summary>
            <param name="index">The index to get.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.GetEnumerator">
            <summary>
            Get an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection. Note that this will either
            increment or decrement indices depending on the value of the <see cref="P:UnityEngine.Splines.SplineRange.Direction"/>.
            </summary>
            <returns>An IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection. It either
            increments or decrements indices depending on the value of the <see cref="P:UnityEngine.Splines.SplineRange.Direction"/>.
            </summary>
            <returns>Returns an IEnumerator that is used to iterate the <see cref="T:UnityEngine.Splines.BezierKnot"/> collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.#ctor(`0,UnityEngine.Splines.SplineRange)">
            <summary>
            Constructor for a new SplineSlice.
            </summary>
            <param name="spline">
            The <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> that this Slice will read <see cref="T:UnityEngine.Splines.BezierKnot"/> and <see cref="T:UnityEngine.Splines.BezierCurve"/>
            data from.
            </param>
            <param name="range">The start index and count of knot indices that compose this slice.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.#ctor(`0,UnityEngine.Splines.SplineRange,Unity.Mathematics.float4x4)">
            <summary>
            Constructor for a new SplineSlice.
            </summary>
            <param name="spline">
            The <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> that this Slice will read <see cref="T:UnityEngine.Splines.BezierKnot"/> and <see cref="T:UnityEngine.Splines.BezierCurve"/>
            data from.
            </param>
            <param name="range">The start index and count of knot indices that compose this slice.</param>
            <param name="transform">A transform matrix to be applied to the spline knots and tangents.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.GetLength">
            <summary>
            Return the sum of all curve lengths.
            </summary>
            <remarks>
            It is inefficient to call this method frequently, as it will calculate the length of all curves every time
            it is invoked. In cases where performance is critical, create a new <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> or
            <see cref="T:UnityEngine.Splines.NativeSpline"/> instead. Note that you may pass a <see cref="T:UnityEngine.Splines.SplineSlice`1"/> to constructors
            for both <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> and <see cref="T:UnityEngine.Splines.NativeSpline"/>.
            </remarks>
            <seealso cref="M:UnityEngine.Splines.SplineSlice`1.GetCurveLength(System.Int32)"/>
            <returns>
            Returns the sum length of all curves composing this spline.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.GetCurve(System.Int32)">
            <summary>
            Get a <see cref="T:UnityEngine.Splines.BezierCurve"/> from a knot index.
            </summary>
            <param name="index">The knot index that serves as the first control point for this curve.</param>
            <returns>
            A <see cref="T:UnityEngine.Splines.BezierCurve"/> formed by the knot at index and the next knot.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.GetCurveLength(System.Int32)">
            <summary>
            Return the length of a curve.
            </summary>
            <param name="index">The index of the curve for which the length needs to be retrieved.</param>
            <seealso cref="M:UnityEngine.Splines.SplineSlice`1.GetLength"/>
            <remarks>
            It is inefficient to call this method frequently, as it will calculate the length of the curve every time
            it is invoked. In cases where performance is critical, create a new <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> or
            <see cref="T:UnityEngine.Splines.NativeSpline"/> instead. Note that you may pass a <see cref="T:UnityEngine.Splines.SplineSlice`1"/> to constructors
            for both <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> and <see cref="T:UnityEngine.Splines.NativeSpline"/>.
            </remarks>
            <returns>
            Returns the length of the curve of index 'index' in the spline.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineSlice`1.GetCurveInterpolation(System.Int32,System.Single)">
            <summary>
            Return the normalized interpolation (t) corresponding to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
            <remarks>
            It is inefficient to call this method frequently, as it will calculate the interpolation lookup table every
            time it is invoked. In cases where performance is critical, create a new <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> or
            <see cref="T:UnityEngine.Splines.NativeSpline"/> instead. Note that you may pass a <see cref="T:UnityEngine.Splines.SplineSlice`1"/> to constructors
            for both <see cref="F:UnityEngine.Splines.SplineSlice`1.Spline"/> and <see cref="T:UnityEngine.Splines.NativeSpline"/>.
            </remarks>
            <param name="curveIndex"> The zero-based index of the curve.</param>
            <param name="curveDistance">The curve-relative distance to convert to an interpolation ratio (also referred to as 't').</param>
            <returns>  The normalized interpolation ratio associated to distance on the designated curve.</returns>
        </member>
        <member name="T:UnityEngine.Splines.BezierCurve">
             <summary>
             Control points for a cubic bezier curve.
            
             Points P0 through P3 are in sequential order, describing the starting point, second, third, and ending controls
             for a cubic bezier curve.
             </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierCurve.P0">
            <summary>
            First control point.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierCurve.P1">
            <summary>
            Second control point.
            Subtract <see cref="F:UnityEngine.Splines.BezierCurve.P0"/> from <see cref="F:UnityEngine.Splines.BezierCurve.P1"/> to derive the first tangent for a curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierCurve.P2">
            <summary>
            Third control point.
            Subtract <see cref="F:UnityEngine.Splines.BezierCurve.P3"/> from <see cref="F:UnityEngine.Splines.BezierCurve.P2"/> to derive the second tangent for a curve.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.BezierCurve.P3">
            <summary>
            Fourth control point.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.BezierCurve.Tangent0">
            <summary>
            The direction and magnitude of the first tangent in a cubic curve.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.BezierCurve.Tangent1">
            <summary>
            The direction and magnitude of the second tangent in a cubic curve.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.#ctor(Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Construct a cubic bezier curve from a linear curve. A linear curve is simply a straight line.
            </summary>
            <param name="p0">The first control point. This is the start point of the curve.</param>
            <param name="p1">The second control point. This is the end point of the curve.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.#ctor(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Construct a cubic bezier curve by elevating a quadratic curve.
            </summary>
            <param name="p0">The first control point. This is the start point of the curve.</param>
            <param name="p1">The second control point.</param>
            <param name="p2">The third control point. This is the end point of the curve.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.#ctor(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Construct a cubic bezier curve from a series of control points.
            </summary>
            <param name="p0">The first control point. This is the start point of the curve.</param>
            <param name="p1">The second control point.</param>
            <param name="p2">The third control point.</param>
            <param name="p3">The fourth control point. This is the end point of the curve.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.#ctor(UnityEngine.Splines.BezierKnot,UnityEngine.Splines.BezierKnot)">
            <summary>
            Construct a cubic bezier curve from a start and end <see cref="T:UnityEngine.Splines.BezierKnot"/>.
            </summary>
            <param name="a">The knot to use as the first and second control points. The first control point is equal
            to <see cref="F:UnityEngine.Splines.BezierKnot.Position"/>, and the second control point is equal to
            (<see cref="F:UnityEngine.Splines.BezierKnot.Position"/> + <see cref="F:UnityEngine.Splines.BezierKnot.TangentOut"/> that's rotated by <see cref="F:UnityEngine.Splines.BezierKnot.Rotation"/>).</param>
            <param name="b">The knot to use as the third and fourth control points. The third control point is equal
            to (<see cref="F:UnityEngine.Splines.BezierKnot.Position"/> + <see cref="F:UnityEngine.Splines.BezierKnot.TangentIn"/> that's rotated by <see cref="F:UnityEngine.Splines.BezierKnot.Rotation"/>), and the fourth control point is
            equal to <see cref="F:UnityEngine.Splines.BezierKnot.Position"/>.</param>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.Transform(Unity.Mathematics.float4x4)">
            <summary>
            Multiply the curve positions by a matrix.
            </summary>
            <param name="matrix">The matrix to multiply.</param>
            <returns>A new BezierCurve multiplied by matrix.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.FromTangent(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Create a BezierCurve from a start and end point plus tangent directions.
            </summary>
            <param name="pointA">Starting position of the curve.</param>
            <param name="tangentOutA">The direction and magnitude to the second control point.</param>
            <param name="pointB">Ending position of the curve.</param>
            <param name="tangentInB">The direction and magnitude to the third control point.</param>
            <returns>A new BezierCurve from the derived control points.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.GetInvertedCurve">
            <summary>
            Gets the same BezierCurve but in the opposite direction.
            </summary>
            <returns>Returns the BezierCurve struct in the inverse direction.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.Equals(UnityEngine.Splines.BezierCurve)">
            <summary>
            Compare two curves for equality.
            </summary>
            <param name="other">The curve to compare against.</param>
            <returns>Returns true when the control points of each curve are identical.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.Equals(System.Object)">
            <summary>
            Compare against an object for equality.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>
            Returns true when <paramref name="obj"/> is a <see cref="T:UnityEngine.Splines.BezierCurve"/> and the control points of each
            curve are identical.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.GetHashCode">
            <summary>
            Calculate a hash code for this curve.
            </summary>
            <returns>
            A hash code for the curve.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.op_Equality(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.BezierCurve)">
            <summary>
            Compare two curves for equality.
            </summary>
            <param name="left">The first curve.</param>
            <param name="right">The second curve.</param>
            <returns>Returns true when the control points of each curve are identical.</returns>
        </member>
        <member name="M:UnityEngine.Splines.BezierCurve.op_Inequality(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.BezierCurve)">
            <summary>
            Compare two curves for inequality.
            </summary>
            <param name="left">The first curve.</param>
            <param name="right">The second curve.</param>
            <returns>Returns false when the control points of each curve are identical.</returns>
        </member>
        <member name="T:UnityEngine.Splines.TangentMode">
            <summary>
            Describes the different ways a tool might interact with a tangent handle.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.TangentMode.AutoSmooth">
            <summary>
            Tangents are calculated using the previous and next knot positions.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.TangentMode.Linear">
            <summary>
            Tangents are not used. A linear spline is a series of knots connected by a path with no curvature.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.TangentMode.Mirrored">
            <summary>
            Tangents are kept parallel and with matching lengths. Modifying one tangent updates the opposite
            tangent to the inverse direction and equivalent length.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.TangentMode.Continuous">
            <summary>
            Tangents are kept parallel. Modifying one tangent changes the direction of the opposite tangent,
            but does not affect the opposite tangent's length.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.TangentMode.Broken">
            <summary>
            The length and direction of the tangents are independent of each other. Modifying one tangent on a knot does not affect the other.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.KnotLinkCollection">
            <summary>
            A collection of KnotLinks to track how spline knots are linked and the utilities to
            update these links when splines are modified.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.KnotLinkCollection.Count">
            <summary>
            How many KnotLinks the collection contains.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.TryGetKnotLinks(UnityEngine.Splines.SplineKnotIndex,System.Collections.Generic.IReadOnlyList{UnityEngine.Splines.SplineKnotIndex}@)">
            <summary>
            Gets the knots linked to a specific knot.
            </summary>
            <param name="knotIndex">The <see cref="T:UnityEngine.Splines.SplineKnotIndex"/> of the knot.</param>
            <param name="linkedKnots">The output list of the knots linked to the specified knot if they exist or null if they do not exist.</param>
            <returns>Returns true if linked knots are found, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.GetKnotLinks(UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Gets the knots linked to a specific knot.
            </summary>
            <param name="knotIndex">The <see cref="T:UnityEngine.Splines.SplineKnotIndex"/> of the knot.</param>
            <returns>Returns a list of knots linked to the specified knot. The specified knot is also in the list. </returns>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.Clear">
            <summary>
            Clears all the links in the collection.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.Link(UnityEngine.Splines.SplineKnotIndex,UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Links two knots positions to each other. If you link knots that are already linked to other knots, then all of the knots link to each other.
            </summary>
            <param name="knotA">The first knot to link.</param>
            <param name="knotB">The first knot to link.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.Unlink(UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Unlinks a knot from the knots it is linked to. This method unlinks the knot specified, but does not unlink the other knots from each other.
            </summary>
            <param name="knot">The knot to unlink.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.SplineRemoved(System.Int32)">
            <summary>
            Updates the KnotLinkCollection after a spline is removed.
            </summary>
            <param name="splineIndex">The index of the removed spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.SplineIndexChanged(System.Int32,System.Int32)">
            <summary>
            Updates the KnotLinkCollection indices after a spline index changes.
            </summary>
            <param name="previousIndex">The previous index of that spline in the SplineContainer.</param>
            <param name="newIndex">The new index of that spline in the SplineContainer.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.KnotIndexChanged(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the KnotLinkCollection indices after a knot index changes.
            </summary>
            <param name="splineIndex">The index of the spline.</param>
            <param name="previousKnotIndex">The previous index of the knot in the spline.</param>
            <param name="newKnotIndex">The new index of the knot in the spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.KnotIndexChanged(UnityEngine.Splines.SplineKnotIndex,UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Updates the KnotLinkCollection indices after a knot index changes.
            </summary>
            <param name="previousIndex">The previous SplineKnotIndex of the knot.</param>
            <param name="newIndex">The new SplineKnotIndex of the knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.KnotRemoved(System.Int32,System.Int32)">
            <summary>
            Updates the KnotLinkCollection indices after a knot has been removed.
            </summary>
            <param name="splineIndex">The index of the spline.</param>
            <param name="knotIndex">The index of the removed knot in the spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.KnotRemoved(UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Updates the KnotLinkCollection indices after a knot has been removed.
            </summary>
            <param name="index">The SplineKnotIndex of the removed knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.KnotInserted(System.Int32,System.Int32)">
            <summary>
            Updates the KnotLinkCollection indices after a knot has been inserted.
            </summary>
            <param name="splineIndex">The index of the spline.</param>
            <param name="knotIndex">The index of the inserted knot in the spline.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.KnotInserted(UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Updates the KnotLinkCollection indices after a knot has been inserted.
            </summary>
            <param name="index">The SplineKnotIndex of the inserted knot.</param>
        </member>
        <member name="M:UnityEngine.Splines.KnotLinkCollection.ShiftKnotIndices(UnityEngine.Splines.SplineKnotIndex,System.Int32)">
            <summary>
            Changes the indices of the KnotLinkCollection to ensure they are valid. This is mainly used when splines or
            knots are inserted or removed from a <see cref="T:UnityEngine.Splines.SplineContainer"/>.
            </summary>
            <param name="index">The SplineKnotIndex of the knot.</param>
            <param name="offset">The offset to apply on other knots.</param>
        </member>
        <member name="T:UnityEngine.Splines.InterpolatorUtility">
            <summary>
            InterpolatorUtility provides easy access to all the different IInterpolator implementations.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.LerpFloat">
            <summary>
            Linearly interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.LerpFloat2">
            <summary>
            Linearly interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.LerpFloat3">
            <summary>
            Linearly interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.LerpFloat4">
            <summary>
            Linearly interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SlerpFloat2">
            <summary>
            Spherically interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SlerpFloat3">
            <summary>
            Spherically interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.LerpQuaternion">
            <summary>
            Linearly interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.LerpColor">
            <summary>
            Linearly interpolate between two values a and b by ratio t.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SmoothStepFloat">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SmoothStepFloat2">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SmoothStepFloat3">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SmoothStepFloat4">
            <summary>
            Interpolate between two values a and b by ratio t with smoothing at the start and end.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.InterpolatorUtility.SlerpQuaternion">
            <summary>
            Spherically interpolates between quaternions a and b by ratio t. The parameter t is clamped b the range [0, 1].
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineExtrude">
            <summary>
            A component for creating a tube mesh from a Spline at runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.container">
            <summary>The SplineContainer of the <see cref="P:UnityEngine.Splines.SplineExtrude.Spline"/> to extrude.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Container">
            <summary>The SplineContainer of the <see cref="P:UnityEngine.Splines.SplineExtrude.Spline"/> to extrude.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.rebuildOnSplineChange">
            <summary>
            Enable to regenerate the extruded mesh when the target Spline is modified. Disable this option if the Spline
            will not be modified at runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.RebuildOnSplineChange">
            <summary>
            Enable to regenerate the extruded mesh when the target Spline is modified. Disable this option if the Spline
            will not be modified at runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.rebuildFrequency">
            <summary>The maximum number of times per-second that the mesh will be rebuilt.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.RebuildFrequency">
            <summary>The maximum number of times per-second that the mesh will be rebuilt.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.sides">
            <summary>How many sides make up the radius of the mesh.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Sides">
            <summary>How many sides make up the radius of the mesh.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.segmentsPerUnit">
            <summary>How many edge loops comprise the one unit length of the mesh.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.SegmentsPerUnit">
            <summary>How many edge loops comprise the one unit length of the mesh.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.capped">
            <summary>Whether the start and end of the mesh is filled. This setting is ignored when spline is closed.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Capped">
            <summary>Whether the start and end of the mesh is filled. This setting is ignored when spline is closed.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.radius">
            <summary>The radius of the extruded mesh.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Radius">
            <summary>The radius of the extruded mesh.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.range">
            <summary>
            The section of the Spline to extrude.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Range">
            <summary>
            The section of the Spline to extrude.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.spline">
            <summary>The main Spline to extrude.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Spline">
            <summary>The main Spline to extrude.</summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineExtrude.Splines">
            <summary>The Splines to extrude.</summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineExtrude.Rebuild">
            <summary>
            Triggers the rebuild of a Spline's extrusion mesh and collider.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.ISplineContainer">
            <summary>
            An interface that represents ISplineContainer on a MonoBehaviour to enable Spline tools in the Editor.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.ISplineContainer.Splines">
            <summary>
            A collection of splines contained in this MonoBehaviour.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.ISplineContainer.KnotLinkCollection">
            <summary>
            A collection of KnotLinks to maintain valid links between knots.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineUtility">
            <summary>
            A collection of methods for extracting information about <see cref="T:UnityEngine.Splines.Spline"/> types.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineUtility.DefaultTension">
            <summary>
            The default tension value used for <see cref="F:UnityEngine.Splines.TangentMode.AutoSmooth"/> knots.
            Use with <see cref="M:UnityEngine.Splines.Spline.SetTangentMode(UnityEngine.Splines.TangentMode)"/> and
            <see cref="M:UnityEngine.Splines.Spline.SetAutoSmoothTension(System.Int32,System.Single)"/> to control the curvature of the spline at control
            points.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineUtility.CatmullRomTension">
            <summary>
            The tension value for a Catmull-Rom type spline.
            Use with <see cref="M:UnityEngine.Splines.Spline.SetTangentMode(UnityEngine.Splines.TangentMode)"/> and
            <see cref="M:UnityEngine.Splines.Spline.SetAutoSmoothTension(System.Int32,System.Single)"/> to control the curvature of the spline at control
            points.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineUtility.PickResolutionMin">
             <summary>
             The minimum resolution allowable when unrolling a curve to hit test while picking (selecting a spline with a cursor).
            
             Pick resolution is used when determining how many segments are required to unroll a curve. Unrolling is the
             process of calculating a series of line segments to approximate a curve. Some functions in SplineUtility
             allow you to specify a resolution. Lower resolution means fewer segments, while higher resolutions result
             in more segments. Use lower resolutions where performance is critical and accuracy is not paramount. Use
             higher resolution where a fine degree of accuracy is necessary and performance is less important.
             </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineUtility.PickResolutionDefault">
             <summary>
             The default resolution used when unrolling a curve to hit test while picking (selecting a spline with a cursor).
            
             Pick resolution is used when determining how many segments are required to unroll a curve. Unrolling is the
             process of calculating a series of line segments to approximate a curve. Some functions in SplineUtility
             allow you to specify a resolution. Lower resolution means fewer segments, while higher resolutions result
             in more segments. Use lower resolutions where performance is critical and accuracy is not paramount. Use
             higher resolution where a fine degree of accuracy is necessary and performance is less important.
             </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineUtility.PickResolutionMax">
             <summary>
             The maximum resolution allowed when unrolling a curve to hit test while picking (selecting a spline with a cursor).
            
             Pick resolution is used when determining how many segments are required to unroll a curve. Unrolling is the
             process of calculating a series of line segments to approximate a curve. Some functions in SplineUtility
             allow you to specify a resolution. Lower resolution means fewer segments, while higher resolutions result
             in more segments. Use lower resolutions where performance is critical and accuracy is not paramount. Use
             higher resolution where a fine degree of accuracy is necessary and performance is less important.
             </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineUtility.DrawResolutionDefault">
             <summary>
             The default resolution used when unrolling a curve to draw a preview in the Scene View.
            
             Pick resolution is used when determining how many segments are required to unroll a curve. Unrolling is the
             process of calculating a series of line segments to approximate a curve. Some functions in SplineUtility
             allow you to specify a resolution. Lower resolution means fewer segments, while higher resolutions result
             in more segments. Use lower resolutions where performance is critical and accuracy is not paramount. Use
             higher resolution where a fine degree of accuracy is necessary and performance is less important.
             </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.Evaluate``1(``0,System.Single,Unity.Mathematics.float3@,Unity.Mathematics.float3@,Unity.Mathematics.float3@)">
            <summary>
            Compute interpolated position, direction and upDirection at ratio t. Calling this method to get the
            3 vectors is faster than calling independently EvaluatePosition, EvaluateDirection and EvaluateUpVector
            for the same time t as it reduces some redundant computation.
            </summary>
            <param name="spline">The spline to interpolate.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <param name="position">Output variable for the float3 position at t.</param>
            <param name="tangent">Output variable for the float3 tangent at t.</param>
            <param name="upVector">Output variable for the float3 up direction at t.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluateNurbs(System.Single,System.Collections.Generic.List{Unity.Mathematics.float3},System.Collections.Generic.List{System.Double},System.Int32,Unity.Mathematics.float3@)">
            <summary>
            Computes the interpolated position for NURBS defined by order, controlPoints, and knotVector at ratio t.
            </summary>
            <param name="t">The value between knotVector[0] and knotVector[-1] that represents the ratio along the curve.</param>
            <param name="controlPoints">The control points for the NURBS.</param>
            <param name="knotVector">The knot vector for the NURBS. There must be at least order + controlPoints.Length - 1 knots.</param>
            <param name="order">The order of the curve. For example, 4 for a cubic curve or 3 for quadratic.</param>
            <param name="position">The output variable for the float3 position at t.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluatePosition``1(``0,System.Single)">
            <summary>
            Return an interpolated position at ratio t.
            </summary>
            <param name="spline">The spline to interpolate.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>A position on the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluateTangent``1(``0,System.Single)">
            <summary>
            Return an interpolated direction at ratio t.
            </summary>
            <param name="spline">The spline to interpolate.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>A direction on the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluateUpVector``1(``0,System.Single)">
            <summary>
            Evaluate the normal (up) vector of a spline.
            </summary>
            <param name="spline">The <seealso cref="T:UnityEngine.Splines.NativeSpline"/> to evaluate.</param>
            <param name="t">A value between 0 and 1 representing a percentage of the curve.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>An up vector</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluateAcceleration``1(``0,System.Single)">
            <summary>
            Return an interpolated acceleration at ratio t.
            </summary>
            <param name="spline">The spline to interpolate.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>An acceleration on the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluateCurvature``1(``0,System.Single)">
            <summary>
            Return an interpolated curvature at ratio t.
            </summary>
            <param name="spline">The spline to interpolate.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>A curvature on the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.EvaluateCurvatureCenter``1(``0,System.Single)">
            <summary>
            Return the curvature center at ratio t. The curvature center represents the center of the circle
            that is tangent to the curve at t. This circle is in the plane defined by the curve velocity (tangent)
            and the curve acceleration at that point.
            </summary>
            <param name="spline">The spline to interpolate.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>A point representing the curvature center associated to the position at t on the spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.SplineToCurveT``1(``0,System.Single,System.Single@)">
            <summary>
            Given a normalized interpolation (t) for a spline, calculate the curve index and curve-relative
            normalized interpolation.
            </summary>
            <param name="spline">The target spline.</param>
            <param name="splineT">A normalized spline interpolation value to be converted into curve space.</param>
            <param name="curveT">A normalized curve interpolation value.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The curve index.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.CurveToSplineT``1(``0,System.Single)">
            <summary>
            Given an interpolation value for a curve, calculate the relative normalized spline interpolation.
            </summary>
            <param name="spline">The target spline.</param>
            <param name="curve">A curve index and normalized interpolation. The curve index is represented by the
            integer part of the float, and interpolation is the fractional part. This is the format used by
            <seealso cref="F:UnityEngine.Splines.PathIndexUnit.Knot"/>.
            </param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>An interpolation value relative to normalized Spline length (0 to 1).</returns>
            <seealso cref="M:UnityEngine.Splines.SplineUtility.SplineToCurveT``1(``0,System.Single,System.Single@)"/>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.CalculateLength``1(``0,Unity.Mathematics.float4x4)">
            <summary>
            Calculate the length of a spline when transformed by a matrix.
            </summary>
            <param name="spline"></param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetCurveCount``1(``0)">
            <summary>
            Calculates the number of curves in a spline.
            </summary>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="spline"></param>
            <returns>The number of curves in a spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetBounds``1(``0)">
            <summary>
            Calculate the bounding box of a Spline.
            </summary>
            <param name="spline">The spline for which to calculate bounds.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The bounds of a spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetBounds``1(``0,Unity.Mathematics.float4x4)">
            <summary>
            Creates a bounding box for a spline.
            </summary>
            <param name="spline">The spline to calculate bounds for.</param>
            <param name="transform">The matrix to transform the spline's elements with.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The bounds of a spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetSegmentCount(System.Single,System.Int32)">
            <summary>
            Gets the number of segments for a specified spline length and resolution.
            </summary>
            <param name="length">The length of the spline to consider.</param>
            <param name="resolution">The value used to calculate the number of segments for a length. This is calculated
            as max(MIN_SEGMENTS, min(MAX_SEGMENTS, sqrt(length) * resolution)).
            </param>
            <returns>
            The number of segments for a length and resolution.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetSubdivisionCount(System.Single,System.Int32)">
            <summary>
            Gets the number of subdivisions for a spline length and resolution.
            </summary>
            <param name="length">The length of the spline to consider.</param>
            <param name="resolution">The resolution to consider. Higher resolutions result in more
            precise representations. However, higher resolutions have higher performance requirements.
            </param>
            <returns>
            The number of subdivisions as calculated for given length and resolution.
            </returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetNearestPoint``1(``0,UnityEngine.Ray,Unity.Mathematics.float3@,System.Single@,System.Int32,System.Int32)">
            <summary>
            Calculate the point on a spline nearest to a ray.
            </summary>
            <param name="spline">The input spline to search for nearest point.</param>
            <param name="ray">The input ray to search against.</param>
            <param name="nearest">The point on a spline nearest to the input ray. The accuracy of this value is
            affected by the <paramref name="resolution"/>.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="t">The normalized time value to the nearest point.</param>
            <param name="resolution">Affects how many segments to split a spline into when calculating the nearest point.
            Higher values mean smaller and more segments, which increases accuracy at the cost of processing time.
            The minimum resolution is defined by <seealso cref="F:UnityEngine.Splines.SplineUtility.PickResolutionMin"/>, and the maximum is defined by
            <seealso cref="F:UnityEngine.Splines.SplineUtility.PickResolutionMax"/>.
            In most cases, the default resolution is appropriate. Use with <paramref name="iterations"/> to fine tune
            point accuracy.
            </param>
            <param name="iterations">
            The nearest point is calculated by finding the nearest point on the entire length
            of the spline using <paramref name="resolution"/> to divide into equally spaced line segments. Successive
            iterations will then subdivide further the nearest segment, producing more accurate results. In most cases,
            the default value is sufficient, but if extreme accuracy is required this value can be increased to a
            maximum of <see cref="F:UnityEngine.Splines.SplineUtility.PickResolutionMax"/>.
            </param>
            <returns>The distance from ray to nearest point.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetNearestPoint``1(``0,Unity.Mathematics.float3,Unity.Mathematics.float3@,System.Single@,System.Int32,System.Int32)">
            <summary>
            Calculate the point on a spline nearest to a point.
            </summary>
            <param name="spline">The input spline to search for nearest point.</param>
            <param name="point">The input point to compare.</param>
            <param name="nearest">The point on a spline nearest to the input point. The accuracy of this value is
            affected by the <paramref name="resolution"/>.</param>
            <param name="t">The normalized interpolation ratio corresponding to the nearest point.</param>
            <param name="resolution">Affects how many segments to split a spline into when calculating the nearest point.
            Higher values mean smaller and more segments, which increases accuracy at the cost of processing time.
            The minimum resolution is defined by <seealso cref="F:UnityEngine.Splines.SplineUtility.PickResolutionMin"/>, and the maximum is defined by
            <seealso cref="F:UnityEngine.Splines.SplineUtility.PickResolutionMax"/>.
            In most cases, the default resolution is appropriate. Use with <paramref name="iterations"/> to fine tune
            point accuracy.
            </param>
            <param name="iterations">
            The nearest point is calculated by finding the nearest point on the entire length
            of the spline using <paramref name="resolution"/> to divide into equally spaced line segments. Successive
            iterations will then subdivide further the nearest segment, producing more accurate results. In most cases,
            the default value is sufficient, but if extreme accuracy is required this value can be increased to a
            maximum of <see cref="F:UnityEngine.Splines.SplineUtility.PickResolutionMax"/>.
            </param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The distance from input point to nearest point on spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetPointAtLinearDistance``1(``0,System.Single,System.Single,System.Single@)">
            <summary>
            Given a Spline and interpolation ratio, calculate the 3d point at a linear distance from point at spline.EvaluatePosition(t).
            Returns the corresponding time associated to this 3d position on the Spline.
            </summary>
            <param name="spline">The Spline on which to compute the point.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <param name="fromT">The Spline interpolation ratio 't' (normalized) from which the next position need to be computed.</param>
            <param name="relativeDistance">
            The relative distance at which the new point should be placed. A negative value will compute a point at a
            'resultPointTime' previous to 'fromT' (backward search).
            </param>
            <param name="resultPointT">The normalized interpolation ratio of the resulting point.</param>
            <returns>The 3d point from the spline located at a linear distance from the point at t.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.ConvertIndexUnit``1(``0,System.Single,UnityEngine.Splines.PathIndexUnit)">
            <summary>
            Given a normalized interpolation ratio, calculate the associated interpolation value in another targetPathUnit regarding a specific spline.
            </summary>
            <param name="spline">The Spline to use for the conversion, this is necessary to compute Normalized and Distance PathIndexUnits.</param>
            <param name="t">Normalized interpolation ratio (0 to 1).</param>
            <param name="targetPathUnit">The PathIndexUnit to which 't' should be converted.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The interpolation value converted to targetPathUnit.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.ConvertIndexUnit``1(``0,System.Single,UnityEngine.Splines.PathIndexUnit,UnityEngine.Splines.PathIndexUnit)">
            <summary>
            Given an interpolation value using a certain PathIndexUnit type, calculate the associated interpolation value in another targetPathUnit regarding a specific spline.
            </summary>
            <param name="spline">The Spline to use for the conversion, this is necessary to compute Normalized and Distance PathIndexUnits.</param>
            <param name="t">Interpolation in the original PathIndexUnit.</param>
            <param name="fromPathUnit">The PathIndexUnit for the original interpolation value.</param>
            <param name="targetPathUnit">The PathIndexUnit to which 't' should be converted.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The interpolation value converted to targetPathUnit.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetNormalizedInterpolation``1(``0,System.Single,UnityEngine.Splines.PathIndexUnit)">
            <summary>
            Given an interpolation value in any PathIndexUnit type, calculate the normalized interpolation ratio value
            relative to a <see cref="T:UnityEngine.Splines.Spline"/>.
            </summary>
            <param name="spline">The Spline to use for the conversion, this is necessary to compute Normalized and Distance PathIndexUnits.</param>
            <param name="t">The 't' value to normalize in the original PathIndexUnit.</param>
            <param name="originalPathUnit">The PathIndexUnit from the original 't'.</param>
            <typeparam name="T">A type implementing ISpline.</typeparam>
            <returns>The normalized interpolation ratio (0 to 1).</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.PreviousIndex``1(``0,System.Int32)">
            <summary>
            Gets the index of a knot that precedes a spline index. This method uses the <see cref="P:UnityEngine.Splines.Spline.Count"/>
            and <see cref="P:UnityEngine.Splines.Spline.Closed"/> properties to ensure that it returns the correct index of the knot.
            </summary>
            <param name="spline">The spline to consider.</param>
            <param name="index">The current index to consider.</param>
            <typeparam name="T">A type that implements ISpline.</typeparam>
            <returns>Returns a knot index that precedes the `index` on the considered spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.NextIndex``1(``0,System.Int32)">
            <summary>
            Gets the index of a knot that follows a spline index. This method uses the <see cref="P:UnityEngine.Splines.Spline.Count"/> and
            <see cref="P:UnityEngine.Splines.Spline.Closed"/> properties to ensure that it returns the correct index of the knot.
            </summary>
            <param name="spline">The spline to consider.</param>
            <param name="index">The current index to consider.</param>
            <typeparam name="T">A type that implements ISpline.</typeparam>
            <returns>The knot index after `index` on the considered spline.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.Previous``1(``0,System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.Splines.BezierKnot"/> before spline[index]. This method uses the <see cref="P:UnityEngine.Splines.Spline.Count"/>
            and <see cref="P:UnityEngine.Splines.Spline.Closed"/> properties to ensure that it returns the correct knot.
            </summary>
            <param name="spline">The spline to consider.</param>
            <param name="index">The current index to consider.</param>
            <typeparam name="T">A type that implements ISpline.</typeparam>
            <returns>The knot before the knot at spline[index].</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.Next``1(``0,System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.Splines.BezierKnot"/> after spline[index]. This method uses the <see cref="P:UnityEngine.Splines.Spline.Count"/>
            and <see cref="P:UnityEngine.Splines.Spline.Closed"/> properties to ensure that it returns the correct knot.
            </summary>
            <param name="spline">The spline to consider.</param>
            <param name="index">The current index to consider.</param>
            <typeparam name="T">A type that implements ISpline.</typeparam>
            <returns>The knot after the knot at spline[index].</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetCatmullRomTangent(Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Calculates a tangent from the previous and next knot positions.
            </summary>
            <param name="previous">The position of the previous <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="next">The position of the next <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <returns>Returns a tangent calculated from the previous and next knot positions.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetAutoSmoothTangent(Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single)">
            <summary>
            Calculates a tangent from the previous and next knot positions.
            </summary>
            <param name="previous">The position of the previous <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="next">The position of the next <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="tension">Set the length of the tangent vectors.</param>
            <returns>Returns a tangent calculated from the previous and next knot positions.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetAutoSmoothTangent(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single)">
            <summary>
            Gets a tangent from the previous, current, and next knot positions.
            </summary>
            <param name="previous">The position of the previous <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="current">The position of the current <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="next">The position of the next <see cref="T:UnityEngine.Splines.BezierKnot"/>.</param>
            <param name="tension">The length of the tangent vectors.</param>
            <returns>Returns a tangent calculated from the previous, current, and next knot positions.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetAutoSmoothKnot(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Gets a <see cref="T:UnityEngine.Splines.BezierKnot"/> with its tangents and rotation calculated using the previous and next knot positions.
            </summary>
            <param name="position">The position of the knot.</param>
            <param name="previous">The knot that immediately precedes the requested knot.</param>
            <param name="next">The knot that immediately follows the requested knot.</param>
            <returns>A <see cref="T:UnityEngine.Splines.BezierKnot"/> with tangent and rotation values calculated from the previous and next knot positions.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetAutoSmoothKnot(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3)">
            <summary>
            Gets a <see cref="T:UnityEngine.Splines.BezierKnot"/> with its tangents and rotation calculated using the previous and next knot positions.
            </summary>
            <param name="position">The position of the knot.</param>
            <param name="previous">The knot that immediately precedes the requested knot.</param>
            <param name="next">The knot that immediately follows the requested knot.</param>
            <param name="normal">The normal vector of the knot.</param>
            <returns>A <see cref="T:UnityEngine.Splines.BezierKnot"/> with tangent and rotation values calculated from the previous and next knot positions.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.GetAutoSmoothKnot(Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single)">
            <summary>
            Gets a <see cref="T:UnityEngine.Splines.BezierKnot"/> with its tangents and rotation calculated using the previous and next knot positions.
            </summary>
            <param name="position">The position of the knot.</param>
            <param name="previous">The knot that immediately precedes the requested knot.</param>
            <param name="next">The knot that immediately follows the requested knot.</param>
            <param name="normal">The normal vector of the knot.</param>
            <param name="tension">Set the length of the tangent vectors.</param>
            <returns>A <see cref="T:UnityEngine.Splines.BezierKnot"/> with tangent and rotation values calculated from the previous and next knot positions.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.SetPivot(UnityEngine.Splines.SplineContainer,UnityEngine.Vector3)">
            <summary>
            Reset a transform position to a position while keeping knot positions in the same place. This modifies both
            knot positions and transform position.
            </summary>
            <param name="container">The target spline.</param>
            <param name="position">The point in world space to move the pivot to.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.FitSplineToPoints(System.Collections.Generic.List{Unity.Mathematics.float3},System.Single,System.Boolean,UnityEngine.Splines.Spline@)">
            <summary>
            Computes a <see cref="T:UnityEngine.Splines.Spline"/> to approximate the curve formed by the list of provided points
            within the given error threshold.
            </summary>
            <param name="points">The list of <see cref="T:Unity.Mathematics.float3"/> points that define the curve to approximate.</param>
            <param name="errorThreshold">The error threshold to use. Represents the largest distance between any of the
            provided points and the curve.</param>
            <param name="closed">Whether to close the <see cref="T:UnityEngine.Splines.Spline"/>.</param>
            <param name="spline">The output <see cref="T:UnityEngine.Splines.Spline"/> fitted to the points, or an empty spline if could not be fitted.</param>
            <returns>Whether a curve could be fitted according to the provided error threshold.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.AddSpline``1(``0)">
            <summary>
            Creates a new spline and adds it to the  <see cref="T:UnityEngine.Splines.ISplineContainer"/>.
            </summary>
            <param name="container">The target container.</param>
            <typeparam name="T">A type that implements <see cref="T:UnityEngine.Splines.ISplineContainer"/>.</typeparam>
            <returns>Returns the spline that was created and added to the container.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.RemoveSplineAt``1(``0,System.Int32)">
            <summary>
            Removes a spline from a <see cref="T:UnityEngine.Splines.ISplineContainer"/>.
            </summary>
            <param name="container">The target container.</param>
            <param name="splineIndex">The index of the spline to remove from the SplineContainer.</param>
            <typeparam name="T">A type that implements <see cref="T:UnityEngine.Splines.ISplineContainer"/>.</typeparam>
            <returns>Returns true if the spline was removed from the container.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.RemoveSpline``1(``0,UnityEngine.Splines.Spline)">
            <summary>
            Removes a spline from a <see cref="T:UnityEngine.Splines.ISplineContainer"/>.
            </summary>
            <param name="container">The target SplineContainer.</param>
            <param name="spline">The spline to remove from the SplineContainer.</param>
            <typeparam name="T">A type that implements <see cref="T:UnityEngine.Splines.ISplineContainer"/>.</typeparam>
            <returns>Returns true if the spline was removed from the container.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.SetLinkedKnotPosition``1(``0,UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Sets the position of all knots linked to the knot at `index` in an <see cref="T:UnityEngine.Splines.ISplineContainer"/> to the same position.
            </summary>
            <param name="container">The target container.</param>
            <param name="index">The `SplineKnotIndex` of the knot to use to synchronize the positions.</param>
            <typeparam name="T">A type that implements <see cref="T:UnityEngine.Splines.ISplineContainer"/>.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.LinkKnots``1(``0,UnityEngine.Splines.SplineKnotIndex,UnityEngine.Splines.SplineKnotIndex)">
            <summary>
            Links two knots in an <see cref="T:UnityEngine.Splines.ISplineContainer"/>. The two knots can be on different splines, but both must be in the referenced SplineContainer.
            If these knots are linked to other knots, all existing links are kept and updated.
            </summary>
            <param name="container">The target SplineContainer.</param>
            <param name="knotA">The first knot to link.</param>
            <typeparam name="T">A type that implements <see cref="T:UnityEngine.Splines.ISplineContainer"/>.</typeparam>
            <param name="knotB">The second knot to link.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.UnlinkKnots``1(``0,System.Collections.Generic.IReadOnlyList{UnityEngine.Splines.SplineKnotIndex})">
            <summary>
            Unlinks several knots from an <see cref="T:UnityEngine.Splines.ISplineContainer"/>. A knot in `knots` disconnects from other knots it was linked to.
            </summary>
            <param name="container">The target SplineContainer.</param>
            <param name="knots">The knot to unlink.</param>
            <typeparam name="T">A type implementing <see cref="T:UnityEngine.Splines.ISplineContainer"/>.</typeparam>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.ReducePoints``1(``0,System.Single)">
            <summary>
            Removes redundant points in a poly line to form a similar shape with fewer points.
            </summary>
            <param name="line">The poly line to act on.</param>
            <param name="epsilon">The maximum distance from the reduced poly line shape for a point to be discarded.</param>
            <typeparam name="T">The collection type. Usually this will be list or array of float3.</typeparam>
            <returns>Returns a new list with a poly line matching the shape of the original line with fewer points.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineUtility.ReducePoints``1(``0,System.Collections.Generic.List{Unity.Mathematics.float3},System.Single)">
            <summary>
            Removes redundant points in a poly line to form a similar shape with fewer points.
            </summary>
            <param name="line">The poly line to act on.</param>
            <param name="results">A pre-allocated list to be filled with the new reduced line points.</param>
            <param name="epsilon">The maximum distance from the reduced poly line shape for a point to be discarded.</param>
            <typeparam name="T">The collection type. Usually this will be list or array of float3.</typeparam>
        </member>
        <member name="T:UnityEngine.Splines.CurveUtility">
            <summary>
            A collection of methods for extracting information about <see cref="T:UnityEngine.Splines.BezierCurve"/> types.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.EvaluatePosition(UnityEngine.Splines.BezierCurve,System.Single)">
            <summary>
            Given a bezier curve, return an interpolated position at ratio t.
            </summary>
            <param name="curve">A cubic bezier curve.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>A position on the curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.EvaluateTangent(UnityEngine.Splines.BezierCurve,System.Single)">
            <summary>
            Given a bezier curve, return an interpolated tangent at ratio t.
            </summary>
            <param name="curve">A cubic bezier curve.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>A tangent on the curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.EvaluateAcceleration(UnityEngine.Splines.BezierCurve,System.Single)">
            <summary>
            Given a bezier curve, return an interpolated acceleration at ratio t.
            </summary>
            <param name="curve">A cubic bezier curve.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>An acceleration vector on the curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.EvaluateCurvature(UnityEngine.Splines.BezierCurve,System.Single)">
            <summary>
            Given a bezier curve, return an interpolated curvature at ratio t.
            </summary>
            <param name="curve">A cubic bezier curve.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>A curvature value on the curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.DeCasteljau(UnityEngine.Splines.BezierCurve,System.Single)">
            <summary>
            Given a bezier curve, return an interpolated position at ratio t.
            </summary>
            <param name="curve">A cubic bezier curve.</param>
            <param name="t">A value between 0 and 1 representing the ratio along the curve.</param>
            <returns>A position on the curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.Split(UnityEngine.Splines.BezierCurve,System.Single,UnityEngine.Splines.BezierCurve@,UnityEngine.Splines.BezierCurve@)">
            <summary>
            Decompose a curve into two smaller curves matching the source curve.
            </summary>
            <param name="curve">The source curve.</param>
            <param name="t">A mid-point on the source curve defining where the two smaller curves control points meet.</param>
            <param name="left">A curve from the source curve first control point to the mid-point, matching the curvature of the source curve.</param>
            <param name="right">A curve from the mid-point to the source curve fourth control point, matching the curvature of the source curve.</param>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.CalculateLength(UnityEngine.Splines.BezierCurve,System.Int32)">
            <summary>
            Calculate the length of a <see cref="T:UnityEngine.Splines.BezierCurve"/> by unrolling the curve into linear segments and summing
            the lengths of the lines. This is equivalent to accessing <see cref="M:UnityEngine.Splines.Spline.GetCurveLength(System.Int32)"/>.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.Splines.BezierCurve"/> to calculate length.</param>
            <param name="resolution">The number of linear segments used to calculate the curve length.</param>
            <returns>The sum length of a collection of linear segments fitting this curve.</returns>
            <seealso cref="M:UnityEngine.Splines.CurveUtility.ApproximateLength(UnityEngine.Splines.BezierCurve)"/>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.CalculateCurveLengths(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.DistanceToInterpolation[])">
            <summary>
            Populate a pre-allocated lookupTable array with distance to 't' values. The number of table entries is
            dependent on the size of the passed lookupTable.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.Splines.BezierCurve"/> to create a distance to 't' lookup table for.</param>
            <param name="lookupTable">A pre-allocated array to populate with distance to interpolation ratio data.</param>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.ApproximateLength(UnityEngine.Splines.BezierCurve)">
            <summary>
            Calculate the approximate length of a <see cref="T:UnityEngine.Splines.BezierCurve"/>. This is less accurate than
            <seealso cref="M:UnityEngine.Splines.CurveUtility.CalculateLength(UnityEngine.Splines.BezierCurve,System.Int32)"/>, but can be significantly faster. Use this when accuracy is
            not paramount and the curve control points are changing frequently.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.Splines.BezierCurve"/> to calculate length.</param>
            <returns>An estimate of the length of a curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.GetDistanceToInterpolation(UnityEngine.Splines.BezierCurve,System.Single)">
            <summary>
            Gets the normalized interpolation, (t), that corresponds to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>.
            </summary>
            <remarks>
            It is inefficient to call this method frequently. For better performance create a
            <see cref="T:UnityEngine.Splines.DistanceToInterpolation"/> cache with <see cref="M:UnityEngine.Splines.CurveUtility.CalculateCurveLengths(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.DistanceToInterpolation[])"/> and use the
            overload of this method which accepts a lookup table.
            </remarks>
            <param name="curve">The <see cref="T:UnityEngine.Splines.BezierCurve"/> to calculate the distance to interpolation ratio for.</param>
            <param name="distance">The curve-relative distance to convert to an interpolation ratio (also referred to as 't').</param>
            <returns> Returns the normalized interpolation ratio associated to distance on the designated curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.GetDistanceToInterpolation``1(``0,System.Single)">
            <summary>
            Return the normalized interpolation (t) corresponding to a distance on a <see cref="T:UnityEngine.Splines.BezierCurve"/>. This
            method accepts a look-up table (referred to in code with acronym "LUT") that may be constructed using
            <see cref="M:UnityEngine.Splines.CurveUtility.CalculateCurveLengths(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.DistanceToInterpolation[])"/>. The built-in Spline class implementations (<see cref="T:UnityEngine.Splines.Spline"/> and
            <see cref="T:UnityEngine.Splines.NativeSpline"/>) cache these look-up tables internally.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="lut">A look-up table of distance to 't' values. See <see cref="M:UnityEngine.Splines.CurveUtility.CalculateCurveLengths(UnityEngine.Splines.BezierCurve,UnityEngine.Splines.DistanceToInterpolation[])"/> for creating
            this collection.</param>
            <param name="distance">The curve-relative distance to convert to an interpolation ratio (also referred to as 't').</param>
            <returns>  The normalized interpolation ratio associated to distance on the designated curve.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.GetNearestPoint(UnityEngine.Splines.BezierCurve,UnityEngine.Ray,System.Int32)">
            <summary>
            Gets the point on a <see cref="T:UnityEngine.Splines.BezierCurve"/> nearest to a ray.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.Splines.BezierCurve"/> to compare.</param>
            <param name="ray">The input ray.</param>
            <param name="resolution">The number of line segments on this curve that are rasterized when testing
            for the nearest point. A higher value is more accurate, but slower to calculate.</param>
            <returns>Returns the nearest position on the curve to a ray.</returns>
        </member>
        <member name="M:UnityEngine.Splines.CurveUtility.GetNearestPoint(UnityEngine.Splines.BezierCurve,UnityEngine.Ray,Unity.Mathematics.float3@,System.Single@,System.Int32)">
            <summary>
            Gets the point on a <see cref="T:UnityEngine.Splines.BezierCurve"/> nearest to a ray.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.Splines.BezierCurve"/> to compare.</param>
            <param name="ray">The input ray.</param>
            <param name="position">The nearest position on the curve to a ray.</param>
            <param name="interpolation">The ratio from range 0 to 1 along the curve at which the nearest point is located.</param>
            <param name="resolution">The number of line segments that this curve will be rasterized to when testing
            for nearest point. A higher value will be more accurate, but slower to calculate.</param>
            <returns>The distance from ray to nearest point on a <see cref="T:UnityEngine.Splines.BezierCurve"/>.</returns>
        </member>
        <member name="T:UnityEngine.Splines.SplineType">
            <summary>
            Describes the different supported Spline representations.
            </summary>
            <remarks>
            Internally all <see cref="T:UnityEngine.Splines.Spline"/> objects are saved as series of cubic curves. In the editor Splines can be
            manipulated in a lower order form.
            </remarks>
        </member>
        <member name="F:UnityEngine.Splines.SplineType.CatmullRom">
            <summary>
            Catmull-Rom Spline is a type of Cubic Hermite Spline. Tangents are calculated from control points rather than
            discretely defined.
            See https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull%E2%80%93Rom_spline for more information.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineType.Bezier">
            <summary>
            A series of connected cubic bezier curves. This is the default Spline type.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SplineType.Linear">
            <summary>
            A series of connected straight line segments.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SliceDirection">
            <summary>
            Describes the direction that a <see cref="T:UnityEngine.Splines.SplineRange"/> interpolates. Use <see cref="T:UnityEngine.Splines.SplineSlice`1"/> and
            <see cref="T:UnityEngine.Splines.SplineRange"/> to create paths that interpolate along a <see cref="T:UnityEngine.Splines.Spline"/> in either a forward
            or backward direction.
            </summary>
            <seealso cref="T:UnityEngine.Splines.SplineSlice`1"/>
            <seealso cref="T:UnityEngine.Splines.SplineRange"/>
        </member>
        <member name="F:UnityEngine.Splines.SliceDirection.Forward">
            <summary>
            The <see cref="T:UnityEngine.Splines.SplineSlice`1"/> interpolates along the direction of the referenced spline.
            </summary>
        </member>
        <member name="F:UnityEngine.Splines.SliceDirection.Backward">
            <summary>
            The <see cref="T:UnityEngine.Splines.SplineSlice`1"/> interpolates in the reverse direction of the referenced spline.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.SplineRange">
            <summary>
            Describes a subset of knot indices in a <see cref="T:UnityEngine.Splines.Spline"/>. The range might iterate in either the
            forward or backward direction.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineRange.Start">
            <summary>
            The inclusive first index, starting at 0.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineRange.End">
            <summary>
            The inclusive end index of this range.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineRange.Count">
            <summary>
            Returns the number of indices.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineRange.Direction">
            <summary>
            The direction that this range interpolates. <see cref="F:UnityEngine.Splines.SliceDirection.Forward"/> increments
            the knot index when it iterates, whereas <see cref="F:UnityEngine.Splines.SliceDirection.Backward"/> decrements this index.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Splines.SplineRange"/> from a start index and count.
            </summary>
            <param name="start">The inclusive first index of a range.</param>
            <param name="count">The number of elements this range encompasses. This value might be negative,
            which is shorthand to call the constructor with an explicit <see cref="T:UnityEngine.Splines.SliceDirection"/> parameter.
            </param>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.#ctor(System.Int32,System.Int32,UnityEngine.Splines.SliceDirection)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Splines.SplineRange"/> from a start index and count.
            </summary>
            <param name="start">The inclusive first index of a range.</param>
            <param name="count">The number of elements this range encompasses.</param>
            <param name="direction">Whether when iterating this range it is incrementing from start to start + count, or
            decrementing from start to start - count.
            </param>
        </member>
        <member name="P:UnityEngine.Splines.SplineRange.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:UnityEngine.Splines.Spline"/> knot index at an index <paramref name="index"/>.
            This indexer allows you to write a for loop to iterate through a range without needing to know in which
            direction the range is iterating.
            <code>
            // Create a new range into an existing Spline starting at knot 5, and interpolating the span of 3 knots.
            // range[0,1,2] will map to { 6, 5, 4 } respectively.
            var range = new SplineRange(6, 3, SplineDirection.Backward);
            </code>
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.GetEnumerator">
            <summary>
            Get an enumerator that iterates through the index collection. Note that this will either increment or
            decrement indices depending on the value of the <see cref="P:UnityEngine.Splines.SplineRange.Direction"/> property.
            </summary>
            <returns>An IEnumerator that is used to iterate the collection.</returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the index collection. It either increments or
            decrements indices depending on the value of the <see cref="P:UnityEngine.Splines.SplineRange.Direction"/> property.
            </summary>
            <returns>Returns an IEnumerator that is used to iterate the collection.</returns>
        </member>
        <member name="T:UnityEngine.Splines.SplineRange.SplineRangeEnumerator">
            <summary>
            A struct for iterating a <see cref="T:UnityEngine.Splines.SplineRange"/>.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.SplineRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.SplineRangeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.SplineRange.SplineRangeEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.SplineRangeEnumerator.#ctor(UnityEngine.Splines.SplineRange)">
            <summary>
            Constructor for an IEnumerator of a <see cref="T:UnityEngine.Splines.SplineRange"/>.
            </summary>
            <param name="range">The <see cref="T:UnityEngine.Splines.SplineRange"/> to iterate.</param>
        </member>
        <member name="M:UnityEngine.Splines.SplineRange.SplineRangeEnumerator.Dispose">
            <summary>
            IDisposable implementation. SplineSliceEnumerator does not allocate any resources.
            </summary>
        </member>
        <member name="T:UnityEngine.Splines.ISplineProvider">
            <summary>
            Implement ISplineProvider on a MonoBehaviour to enable Spline tools in the Editor.
            </summary>
        </member>
        <member name="P:UnityEngine.Splines.ISplineProvider.Splines">
            <summary>
            A collection of Splines contained on this MonoBehaviour.
            </summary>
        </member>
    </members>
</doc>
