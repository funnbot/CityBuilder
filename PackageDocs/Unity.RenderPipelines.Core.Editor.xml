<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.RenderPipelines.Core.Editor</name>
    </assembly>
    <members>
        <member name="T:UnityEditor.Rendering.TimedScope">
            <summary>
            Allows time measurements
            </summary>
            <example>
            double duration = 0;
            using (TimedScope.FromPtr(&amp;duration))
            {
                // something to get the time
            }
            Debug.Log($"Duration: {duration}")
            </example>
        </member>
        <member name="M:UnityEditor.Rendering.TimedScope.System#IDisposable#Dispose">
            <summary>
            Dispose method to retrieve the time
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.TimedScope.FromPtr(System.Double*)">
             <summary>
             Obtains a <see cref="T:UnityEditor.Rendering.TimedScope"/>.
            
             Safety: <paramref name="durationMsPtr"/> must be a non-null pointer to a valid memory location for a double.
             </summary>
             <param name="durationMsPtr">The location to write the duration in milliseconds to.</param>
             <returns>A <see cref="T:UnityEditor.Rendering.TimedScope"/></returns>
        </member>
        <member name="M:UnityEditor.Rendering.TimedScope.FromRef(System.Double@)">
            <summary>
            Obtains a <see cref="T:UnityEditor.Rendering.TimedScope"/>
            </summary>
            <param name="durationMs">The location to write the duration in milliseconds to.</param>
            <returns>A <see cref="T:UnityEditor.Rendering.TimedScope"/></returns>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.Stage">
            <summary>
            Class handling object of the scene with isolation from other scene based on culling
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Stage.camera">
            <summary>Get access to the stage's camera</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Stage.sunLight">
            <summary>Get access to the stage's light</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Stage.scene">
            <summary>Get access to the stage's scene</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Stage.runtimeInterface">
            <summary>The runtime interface on stage</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.#ctor(System.String)">
            <summary>
            Construct a new stage to let your object live.
            A stage is a scene with visibility isolation.
            </summary>
            <param name="sceneName">Name of the scene used.</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.MoveIntoStage(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Move a GameObject into the stage's scene at origin.
            </summary>
            <param name="gameObject">The gameObject to move.</param>
            <param name="persistent">
            [OPTIONAL] If true, the object is not recreated with the scene update.
            Default value: false.
            </param>
            <seealso cref="M:UnityEditor.Rendering.LookDev.Stage.InstantiateIntoStage(UnityEngine.GameObject,System.Boolean)"/>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.MoveIntoStage(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Move a GameObject into the stage's scene at specific position and
            rotation.
            </summary>
            <param name="gameObject">The gameObject to move.</param>
            <param name="position">The new world position</param>
            <param name="rotation">The new world rotation</param>
            <param name="persistent">
            [OPTIONAL] If true, the object is not recreated with the scene update.
            Default value: false.
            </param>
            <seealso cref="M:UnityEditor.Rendering.LookDev.Stage.InstantiateIntoStage(UnityEngine.GameObject,System.Boolean)"/>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.InstantiateIntoStage(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Instantiate a scene GameObject or a prefab into the stage's scene.
            It is instantiated at origin.
            </summary>
            <param name="prefabOrSceneObject">The element to instantiate</param>
            <param name="persistent">
            [OPTIONAL] If true, the object is not recreated with the scene update.
            Default value: false.
            </param>
            <returns>The instance</returns>
            <seealso cref="M:UnityEditor.Rendering.LookDev.Stage.MoveIntoStage(UnityEngine.GameObject,System.Boolean)"/>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.InstantiateIntoStage(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Instantiate a scene GameObject or a prefab into the stage's scene
            at a specific position and rotation.
            </summary>
            <param name="prefabOrSceneObject">The element to instantiate</param>
            <param name="position">The new world position</param>
            <param name="rotation">The new world rotation</param>
            <param name="persistent">
            [OPTIONAL] If true, the object is not recreated with the scene update.
            Default value: false.
            </param>
            <returns>The instance</returns>
            <seealso cref="M:UnityEditor.Rendering.LookDev.Stage.MoveIntoStage(UnityEngine.GameObject,System.Boolean)"/>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.CreateGameObjectIntoStage(System.Boolean)">
            <summary>Create a GameObject into the stage.</summary>
            <param name="persistent">
            [OPTIONAL] If true, the object is not recreated with the scene update.
            Default value: false.
            </param>
            <returns>The created GameObject</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.Clear(System.Boolean)">
            <summary>Clear all scene object except camera.</summary>
            <param name="persistent">
            [OPTIONAL] If true, clears also persistent objects.
            Default value: false.
            </param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.SetGameObjectVisible(System.Boolean)">
            <summary>Changes stage scene's objects visibility.</summary>
            <param name="visible">
            True: make them visible.
            False: hide them.
            </param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Stage.Dispose">
            <summary>Clear and close the stage's scene.</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.RenderingData">
            <summary>Data container to be used with Renderer class</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.RenderingData.sizeMissmatched">
            <summary>
            Internally set to true when the given RenderTexture <see cref="F:UnityEditor.Rendering.LookDev.RenderingData.output"/> was not the good size regarding <see cref="F:UnityEditor.Rendering.LookDev.RenderingData.viewPort"/> and needed to be recreated
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.RenderingData.stage">
            <summary>The stage that possess every object in your view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.RenderingData.updater">
            <summary>Callback to update the Camera position. Only done in First phase.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.RenderingData.viewPort">
            <summary>Viewport size</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.RenderingData.output">
            <summary>Render texture handling captured image</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.RenderingData.Dispose">
            <summary>Dispose pattern</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.Renderer">
            <summary>Basic renderer to draw scene in texture</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Renderer.pixelPerfect">
            <summary>Use pixel perfect</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Renderer.#ctor(System.Boolean)">
            <summary>Constructor</summary>
            <param name="pixelPerfect">[Optional] Use pixel perfect</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Renderer.BeginRendering(UnityEditor.Rendering.LookDev.RenderingData,UnityEngine.Rendering.LookDev.IDataProvider)">
            <summary>Init for rendering</summary>
            <param name="data">The data to use</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Renderer.EndRendering(UnityEditor.Rendering.LookDev.RenderingData,UnityEngine.Rendering.LookDev.IDataProvider)">
            <summary>Finish to render</summary>
            <param name="data">The data to use</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnityEditor.Rendering.LookDev.Renderer.Acquire(UnityEditor.Rendering.LookDev.RenderingData)" -->
        <member name="T:UnityEditor.Rendering.LookDev.RectExtension">
            <summary>Rect extension</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.RectExtension.IsNullOrInverted(UnityEngine.Rect)">
            <summary>Return true if the <see cref="T:UnityEngine.Rect"/> is null sized or inverted.</summary>
            <param name="r">The rect</param>
            <returns>True: null or inverted area</returns>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.ComparisonGizmoState">
            <summary>state of the comparison gizmo of the LookDev</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ComparisonGizmoState.point1">
            <summary>Position of the first extremity</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ComparisonGizmoState.point2">
            <summary>Position of the second extremity</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ComparisonGizmoState.center">
            <summary>Position of the center</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ComparisonGizmoState.angle">
            <summary>Angle from vertical in radian</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ComparisonGizmoState.length">
            <summary>Length between extremity</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ComparisonGizmoState.blendFactor">
            <summary>
            The position of the blending slider.
            From value -1 on first extremity to value 1 on second extremity.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.ComparisonGizmoState.Update(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Update all fields while moving one extremity
            </summary>
            <param name="point1">The new first extremity position</param>
            <param name="point2">The new second extremity position</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.ComparisonGizmoState.Update(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Update all fields while moving the bar
            </summary>
            <param name="center">The new center position</param>
            <param name="length">Tne new length of this gizmo</param>
            <param name="angle">The new angle of this gizmo</param>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.ICameraUpdater">
            <summary>
            Interface to comunicate with simple <see cref="T:UnityEditor.Rendering.LookDev.Renderer"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.ICameraUpdater.UpdateCamera(UnityEngine.Camera)">
            <summary>Method called To update the LookDev camera position</summary>
            <param name="camera">The camera</param>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.CameraState">
            <summary>
            Class containing data regarding position, rotation and viewport size of a camera
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.pivot">
            <summary>The position of the camera pivot</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.rotation">
            <summary>The rotation of the camera arround the pivot</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.viewSize">
            <summary>The size of the view</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.distanceFromPivot">
            <summary>The distance from pivot</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.position">
            <summary>The position of the camera</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.fieldOfView">
            <summary>The field of view of the camera</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.farClip">
            <summary>The far clip distance from camera</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.nearClip">
            <summary>The near clip distance from camera</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.forward">
            <summary>The Forward vector in world space</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.up">
            <summary>The Up vector in world space</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.CameraState.right">
            <summary>The Right vector in world space</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.CameraState.UpdateCamera(UnityEngine.Camera)">
            <summary>
            Update a Camera component and its transform with this state values
            </summary>
            <param name="camera">The camera to update</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.CameraState.Reset">
            <summary>
            Reset the State to its default values
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.EnvironmentLibrary">
            <summary>
            Class containing a collection of Environment
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.EnvironmentLibrary.Count">
            <summary>
            Number of elements in the collection
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.EnvironmentLibrary.Item(System.Int32)">
            <summary>
            Indexer giving access to contained Environment
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.EnvironmentLibrary.Add">
            <summary>
            Create a new empty Environment at the end of the collection
            </summary>
            <returns>The created Environment</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.EnvironmentLibrary.Remove(System.Int32)">
            <summary>
            Remove Environment of the collection at given index
            </summary>
            <param name="index">Index where to remove Environment</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.EnvironmentLibrary.Duplicate(System.Int32)">
            <summary>
            Duplicate the Environment at given index and add it at the end of the Collection
            </summary>
            <param name="fromIndex">Index where to take data for duplication</param>
            <returns>The created Environment</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.EnvironmentLibrary.IndexOf(UnityEditor.Rendering.LookDev.Environment)">
            <summary>
            Compute position of given Environment in the collection
            </summary>
            <param name="environment">Environment to look at</param>
            <returns>Index of the searched environment. If not found, -1.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.Environment">
            <summary>
            Lighting environment used in LookDev
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Environment.rotation">
            <summary>
            Offset on the longitude. Affect both sky and sun position in Shadow part
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Environment.exposure">
            <summary>
            Exposure to use with this Sky
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Environment.shadowColor">
            <summary>
            The shading tint to used when computing shadow from sun
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Environment.cubemap">
            <summary>
            The cubemap used for this part of the lighting environment
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Environment.sunLatitude">
            <summary>
            The Latitude position of the sun casting shadows
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Environment.sunLongitude">
            <summary>
            The Longitude position of the sun casting shadows
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Environment.ResetToBrightestSpot">
            <summary>
            Compute sun position to be brightest spot of the sky
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Environment.sky">
            <summary>
            Implicit conversion operator to runtime version of sky datas
            </summary>
            <param name="sky">Editor version of the datas</param>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.ViewIndex">
            <summary>
            Different working views in LookDev
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.ViewIndex.First">
            <summary>First view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.ViewIndex.Second">
            <summary>Second view</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.ViewCompositionIndex">
            <summary>
            Same as <see cref="T:UnityEditor.Rendering.LookDev.ViewIndex"/> plus a compound value
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.ViewCompositionIndex.First">
            <summary>First view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.ViewCompositionIndex.Second">
            <summary>Second view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.ViewCompositionIndex.Composite">
            <summary>Composite view (Several view on screen)</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.Layout">
            <summary>
            Different layout supported in LookDev
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Layout.FullFirstView">
            <summary>First view display fully</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Layout.FullSecondView">
            <summary>Second view display fully</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Layout.HorizontalSplit">
            <summary>First and second views displayed splitted horizontally</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Layout.VerticalSplit">
            <summary>First and second views displayed splitted vertically</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.Layout.CustomSplit">
            <summary>First and second views displayed with stacking and orientation customizable  split</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.SidePanel">
            <summary>
            Status of the side panel of the LookDev window
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.SidePanel.None">
            <summary>No side panel</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.SidePanel.Environment">
            <summary>Environment side panel</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.SidePanel.Debug">
            <summary>Debug side panel</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.TargetDebugView">
            <summary>
            The target views of the debug panel
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.TargetDebugView.First">
            <summary>First Debug view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.TargetDebugView.Both">
            <summary>Both Debug view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.TargetDebugView.Second">
            <summary>Second Debug view</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.Context">
            <summary>
            Class containing all data used by the LookDev Window to render
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Context.environmentLibrary">
            <summary>The currently used Environment</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Context.layout">
            <summary>The currently used layout</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Context.cameraSynced">
            <summary>
            State if both views camera movement are synced or not
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.Context.ViewIterator">
            <summary>
            Helper class to iterate on views
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.ViewIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Helper function to enumerates on ViewContexts
            </summary>
            <returns>Enumerator on ViewContext</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.ViewIterator.System#Collections#Generic#IEnumerable{UnityEditor#Rendering#LookDev#ViewContext}#GetEnumerator">
            <summary>
            Helper function to enumerates on ViewContexts
            </summary>
            <returns>Enumerator on ViewContext</returns>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.Context.viewContexts">
            <summary>
            Helper function to get ViewIterator on ViewContexts
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.GetViewContent(UnityEditor.Rendering.LookDev.ViewIndex)">
            <summary>
            Get datas relative to a view
            </summary>
            <param name="index">The view index to look at</param>
            <returns>Datas for the selected view</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.UpdateEnvironmentLibrary(UnityEditor.Rendering.LookDev.EnvironmentLibrary)">
            <summary>Update the environment library used.</summary>
            <param name="library">The new EnvironmentLibrary</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.SynchronizeCameraStates(UnityEditor.Rendering.LookDev.ViewIndex)">
            <summary>
            Synchronize cameras from both view using data from the baseCameraState
            </summary>
            <param name="baseCameraState">The <see cref="T:UnityEditor.Rendering.LookDev.ViewIndex"/> to be used as reference</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.SetFocusedCamera(UnityEditor.Rendering.LookDev.ViewIndex)">
            <summary>
            Change focused view.
            Focused view is the base view to copy data when syncing views' cameras
            </summary>
            <param name="index">The index of the view</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.Context.System#IDisposable#Dispose">
            <summary>Disposable behaviour</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.LayoutContext">
            <summary>
            Data regarding the layout currently used in LookDev
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.LayoutContext.viewLayout">
            <summary>The layout used</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.LayoutContext.lastFocusedView">
            <summary>The last focused view</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.LayoutContext.showedSidePanel">
            <summary>The state of the side panel</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.LayoutContext.debugPanelSource">
            <summary>The view to change when manipulating the Debug side panel</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.ViewContext">
            <summary>
            Data container containing content of a view
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.camera">
            <summary>The position and rotation of the camera</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.debug">
            <summary>The currently viewed debugState</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.hasEnvironment">
            <summary>
            Check if an Environment is registered for this view.
            The result will be accurate even if the Environment have not been reloaded yet.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.environment">
            <summary>The currently used Environment</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.hasViewedObject">
            <summary>
            Check if an Environment is registered for this view.
            The result will be accurate even if the object have not been reloaded yet.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.viewedObjectReference">
            <summary>Reference to the object given for instantiation.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.ViewContext.viewedInstanceInPreview">
            <summary>
            The currently displayed instance of <see cref="P:UnityEditor.Rendering.LookDev.ViewContext.viewedObjectReference"/>.
            It will be instantiated when pushing changes to renderer.
            See <see cref="M:UnityEditor.Rendering.LookDev.LookDev.SaveContextChangeAndApply(UnityEditor.Rendering.LookDev.ViewIndex)"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.ViewContext.UpdateEnvironment(UnityEngine.Object)">
            <summary>Update the environment used.</summary>
            <param name="environmentOrCubemapAsset">
            The new <see cref="T:UnityEditor.Rendering.LookDev.Environment"/> to use.
            Or the <see cref="T:UnityEngine.Cubemap"/> to use to build a new one.
            Other types will raise an ArgumentException.
            </param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.ViewContext.UpdateViewedObject(UnityEngine.GameObject)">
            <summary>Update the object reference used for instantiation.</summary>
            <param name="viewedObject">The new reference.</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.ViewContext.ResetCameraState">
            <summary>Reset the camera state to default values</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.DebugContext">
            <summary>
            Class that will contain debug value used.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.DebugContext.shadow">
            <summary>Display shadows in view.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LookDev.DebugContext.viewMode">
            <summary>Debug mode displayed. -1 means none.</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.IEnvironmentDisplayer">
            <summary>Interface that must implement the EnvironmentLibrary view to communicate with the data management</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.IEnvironmentDisplayer.Repaint">
            <summary>Repaint the UI</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IEnvironmentDisplayer.OnChangingEnvironmentLibrary">
            <summary>Callback on Environment change in the Library</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.IViewDisplayer">
            <summary>Interface that must implement the viewer to communicate with the compositor and data management</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.IViewDisplayer.GetRect(UnityEditor.Rendering.LookDev.ViewCompositionIndex)">
            <summary>Get the displayed rect to use</summary>
            <param name="index">Index of this view</param>
            <returns>The Rect to draw</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.IViewDisplayer.SetTexture(UnityEditor.Rendering.LookDev.ViewCompositionIndex,UnityEngine.Texture)">
            <summary>Set the computed texture in the view</summary>
            <param name="index">Index of this view</param>
            <param name="texture">The texture used</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.IViewDisplayer.Repaint">
            <summary>Repaint the UI</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnLayoutChanged">
            <summary>Callback on layout changed</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnRenderDocAcquisitionTriggered">
            <summary>Callback on RenderDoc acquisition is triggered</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnMouseEventInView">
            <summary>Callback on ;ouse events in the view</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnChangingObjectInView">
            <summary>Callback on object changed in the view</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnChangingEnvironmentInView">
            <summary>Callback on environment changed in the view</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnClosed">
            <summary>Callback on closed</summary>
        </member>
        <member name="E:UnityEditor.Rendering.LookDev.IViewDisplayer.OnUpdateRequested">
            <summary>Callback on update requested</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LookDev.LookDev">
            <summary>
            Main entry point for scripting LookDev
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.LookDev.currentContext">
            <summary>
            Get all the data used in LookDev currently (views, layout, debug... )
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.LookDev.open">
            <summary>State of the LookDev window</summary>
        </member>
        <member name="P:UnityEditor.Rendering.LookDev.LookDev.supported">
            <summary>
            Does LookDev is supported with the current render pipeline?
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.LookDev.ResetConfig">
            <summary>
            Reset all LookDevs datas to the default configuration
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.LookDev.LoadConfig(System.String)">
            <summary>
            Load a different set of datas
            </summary>
            <param name="path">Path where to load</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.LookDev.SaveConfig(System.String)">
            <summary>
            Save the current set of datas
            </summary>
            <param name="path">[optional] Path to save. By default, saved in Library folder</param>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.LookDev.Open">
            <summary>Open the LookDev window</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.LookDev.Close">
            <summary>Close the LookDev window</summary>
        </member>
        <member name="M:UnityEditor.Rendering.LookDev.LookDev.SaveContextChangeAndApply(UnityEditor.Rendering.LookDev.ViewIndex)">
            <summary>Update the rendered element with element in the context</summary>
            <param name="index">The index of the stage to update</param>
        </member>
        <member name="T:UnityEditor.Rendering.FoldoutOption">
            <summary>display options added to the Foldout</summary>
        </member>
        <member name="F:UnityEditor.Rendering.FoldoutOption.None">
            <summary>No Option</summary>
        </member>
        <member name="F:UnityEditor.Rendering.FoldoutOption.Indent">
            <summary>Foldout will be indented</summary>
        </member>
        <member name="F:UnityEditor.Rendering.FoldoutOption.Boxed">
            <summary>Foldout will be boxed</summary>
        </member>
        <member name="F:UnityEditor.Rendering.FoldoutOption.SubFoldout">
            <summary>Foldout will be inside another foldout</summary>
        </member>
        <member name="F:UnityEditor.Rendering.FoldoutOption.NoSpaceAtEnd">
            <summary>Remove the space at end of the foldout</summary>
        </member>
        <member name="T:UnityEditor.Rendering.GroupOption">
            <summary>display options added to the Group</summary>
        </member>
        <member name="F:UnityEditor.Rendering.GroupOption.None">
            <summary>No Option</summary>
        </member>
        <member name="F:UnityEditor.Rendering.GroupOption.Indent">
            <summary>Group will be indented</summary>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawer`1">
            <summary>
            Utility class to draw inspectors
            </summary>
            <typeparam name="TData">Type of class containing data needed to draw inspector</typeparam>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawer`1.IDrawer">
            <summary> Abstraction that have the Draw hability </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.IDrawer.Draw(`0,UnityEditor.Editor)">
            <summary>
            The draw function
            </summary>
            <param name="serializedProperty">The SerializedProperty to draw</param>
            <param name="owner">The editor handling this draw call</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.IDrawer.Expand(System.Int32)">
            <summary>
            Expands all children that use a given mask
            </summary>
            <param name="mask">The mask to expand</param>
            <returns>If the drawer is expanded</returns>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawer`1.Enabler">
            <summary>Delegate that must say if this is enabled for drawing</summary>
            <param name="data">The data used</param>
            <param name="owner">The editor rendering</param>
            <returns>True if this should be drawn</returns>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawer`1.SwitchEnabler">
            <summary>Delegate is called when the foldout state is switched</summary>
            <param name="data">The data used</param>
            <param name="owner">The editor rendering</param>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawer`1.DataSelect`1">
            <summary>Delegate that must be used to select sub object for data for drawing</summary>
            <typeparam name="T2Data">The type of the sub object used for data</typeparam>
            <param name="data">The data used</param>
            <param name="owner">The editor rendering</param>
            <returns>Embeded object that will be used as data source for later draw in this Select</returns>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawer`1.ActionDrawer">
            <summary>Delegate type alternative to IDrawer</summary>
            <param name="data">The data used</param>
            <param name="owner">The editor rendering</param>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorDrawer`1.space">
            <summary> Equivalent to EditorGUILayout.Space that can be put in a drawer group </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorDrawer`1.noop">
            <summary> Use it when IDrawer required but no operation should be done </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Conditional(UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary>
            Conditioned drawer that will only be drawn if its enabler function is null or return true
            </summary>
            <param name="enabler">Enable the drawing if null or return true</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Conditional(UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary>
            Conditioned drawer that will only be drawn if its enabler function is null or return true
            </summary>
            <param name="enabler">Enable the drawing if null or return true</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.TernaryConditional(UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer)">
            <summary>
            Conditioned drawer that will draw something depending of the return of the switch
            </summary>
            <param name="switch">Chose witch drawing to use</param>
            <param name="drawIfTrue">This will be draw if the <see cref="!:switch"/> is true</param>
            <param name="drawIfFalse">This will be draw if the <see cref="!:switch"/> is false</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.TernaryConditional(UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer)">
            <summary>
            Conditioned drawer that will draw something depending of the return of the switch
            </summary>
            <param name="switch">Chose witch drawing to use</param>
            <param name="drawIfTrue">This will be draw if the <see cref="!:switch"/> is true</param>
            <param name="drawIfFalse">This will be draw if the <see cref="!:switch"/> is false</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary>
            Group of drawing function for inspector.
            They will be drawn one after the other.
            </summary>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary>
            Group of drawing function for inspector.
            They will be drawn one after the other.
            </summary>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(System.Single,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="labelWidth">Width used for all labels in the group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEngine.GUIContent,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="header">Adds a header on top <see cref="T:UnityEngine.GUIContent"/></param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(System.Single,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="labelWidth">Width used for all labels in the group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEngine.GUIContent,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="header">Adds a header on top <see cref="T:UnityEngine.GUIContent"/></param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEditor.Rendering.GroupOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary>
            Group of drawing function for inspector.
            They will be drawn one after the other.
            </summary>
            <param name="options">Allow to add indentation on this group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEditor.Rendering.GroupOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary>
            Group of drawing function for inspector.
            They will be drawn one after the other.
            </summary>
            <param name="options">Allow to add indentation on this group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(System.Single,UnityEditor.Rendering.GroupOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="labelWidth">Width used for all labels in the group</param>
            <param name="options">Allow to add indentation on this group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEngine.GUIContent,UnityEditor.Rendering.GroupOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="header">Adds a header on top <see cref="T:UnityEngine.GUIContent"/></param>
            <param name="options">Allow to add indentation on this group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(System.Single,UnityEditor.Rendering.GroupOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="labelWidth">Width used for all labels in the group</param>
            <param name="options">Allow to add indentation on this group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Group(UnityEngine.GUIContent,UnityEditor.Rendering.GroupOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary> Group of drawing function for inspector with a set width for labels </summary>
            <param name="header">Adds a header on top <see cref="T:UnityEngine.GUIContent"/></param>
            <param name="options">Allow to add indentation on this group</param>
            <param name="contentDrawers">The content of the group</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Select``1(UnityEditor.Rendering.CoreEditorDrawer{`0}.DataSelect{``0},UnityEditor.Rendering.CoreEditorDrawer{``0}.IDrawer[])">
            <summary> Create an IDrawer based on an other data container </summary>
            <typeparam name="T2Data">Type of selected object containing in the given data containing data needed to draw inspector</typeparam>
            <param name="dataSelect">The data new source for the inner drawers</param>
            <param name="otherDrawers">Inner drawers drawed with given data sources</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.Select``1(UnityEditor.Rendering.CoreEditorDrawer{`0}.DataSelect{``0},UnityEditor.Rendering.CoreEditorDrawer{``0}.ActionDrawer[])">
            <summary> Create an IDrawer based on an other data container </summary>
            <typeparam name="T2Data">Type of selected object containing in the given data containing data needed to draw inspector</typeparam>
            <param name="dataSelect">The data new source for the inner drawers</param>
            <param name="otherDrawers">Inner drawers drawed with given data sources</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(System.String,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary>
            Create an IDrawer foldout header using an ExpandedState.
            The default option is Indent in this version.
            </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(System.String,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary>
            Create an IDrawer foldout header using an ExpandedState.
            The default option is Indent in this version.
            </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(System.String,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.FoldoutOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary> Create an IDrawer foldout header using an ExpandedState </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="options">Drawing options</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(System.String,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.FoldoutOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary> Create an IDrawer foldout header using an ExpandedState </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="options">Drawing options</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary>
            Create an IDrawer foldout header using an ExpandedState.
            The default option is Indent in this version.
            </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary>
            Create an IDrawer foldout header using an ExpandedState.
            The default option is Indent in this version.
            </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.FoldoutOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer[])">
            <summary> Create an IDrawer foldout header using an ExpandedState </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="options">Drawing options</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.FoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.FoldoutOption,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer[])">
            <summary> Create an IDrawer foldout header using an ExpandedState </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="title">Title wanted for this foldout header</param>
            <param name="mask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="state">The ExpandedState describing the component</param>
            <param name="options">Drawing options</param>
            <param name="contentDrawers">The content of the foldout header</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdvancedFoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.SwitchEnabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary> Helper to draw a foldout with an advanced switch on it. </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="isAdvanced"> Delegate allowing to check if advanced mode is active. </param>
            <param name="switchAdvanced"> Delegate to know what to do when advance is switched. </param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="advancedContent"> The content of the foldout header only visible if advanced mode is active and if foldout is expended. </param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdvancedFoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.SwitchEnabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary> Helper to draw a foldout with an advanced switch on it. </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="isAdvanced"> Delegate allowing to check if advanced mode is active. </param>
            <param name="switchAdvanced"> Delegate to know what to do when advance is switched. </param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="advancedContent"> The content of the foldout header only visible if advanced mode is active and if foldout is expended. </param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdvancedFoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.SwitchEnabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary> Helper to draw a foldout with an advanced switch on it. </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="isAdvanced"> Delegate allowing to check if advanced mode is active. </param>
            <param name="switchAdvanced"> Delegate to know what to do when advance is switched. </param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="advancedContent"> The content of the foldout header only visible if advanced mode is active and if foldout is expended. </param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdvancedFoldoutGroup``2(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},UnityEditor.Rendering.CoreEditorDrawer{`0}.Enabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.SwitchEnabler,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary> Helper to draw a foldout with an advanced switch on it. </summary>
            <typeparam name="TEnum">Type of the mask used</typeparam>
            <typeparam name="TState">Type of the persistent state</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="isAdvanced"> Delegate allowing to check if advanced mode is active. </param>
            <param name="switchAdvanced"> Delegate to know what to do when advance is switched. </param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="advancedContent"> The content of the foldout header only visible if advanced mode is active and if foldout is expended. </param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdditionalPropertiesFoldoutGroup``4(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},``2,UnityEditor.Rendering.AdditionalPropertiesState{``2,``3},UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary>
            Helper to draw a foldout with additional properties.
            </summary>
            <typeparam name="TEnum">Type of the foldout mask used.</typeparam>
            <typeparam name="TState">Type of the persistent foldout state.</typeparam>
            <typeparam name="TAPEnum">Type of the additional properties mask used.</typeparam>
            <typeparam name="TAPState">Type of the persistent additional properties state.</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="additionalPropertiesMask">Bit mask (enum) used to define the boolean saving the state in AdditionalPropertiesState</param>
            <param name="additionalPropertiesState">The AdditionalPropertiesState describing the component</param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="additionalContent">The content of the foldout header only visible if additional properties are shown and if foldout is expanded.</param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdditionalPropertiesFoldoutGroup``4(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},``2,UnityEditor.Rendering.AdditionalPropertiesState{``2,``3},UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary>
            Helper to draw a foldout with additional properties.
            </summary>
            <typeparam name="TEnum">Type of the foldout mask used.</typeparam>
            <typeparam name="TState">Type of the persistent foldout state.</typeparam>
            <typeparam name="TAPEnum">Type of the additional properties mask used.</typeparam>
            <typeparam name="TAPState">Type of the persistent additional properties state.</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="additionalPropertiesMask">Bit mask (enum) used to define the boolean saving the state in AdditionalPropertiesState</param>
            <param name="additionalPropertiesState">The AdditionalPropertiesState describing the component</param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="additionalContent">The content of the foldout header only visible if additional properties are shown and if foldout is expanded.</param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdditionalPropertiesFoldoutGroup``4(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},``2,UnityEditor.Rendering.AdditionalPropertiesState{``2,``3},UnityEditor.Rendering.CoreEditorDrawer{`0}.IDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary>
            Helper to draw a foldout with additional properties.
            </summary>
            <typeparam name="TEnum">Type of the foldout mask used.</typeparam>
            <typeparam name="TState">Type of the persistent foldout state.</typeparam>
            <typeparam name="TAPEnum">Type of the additional properties mask used.</typeparam>
            <typeparam name="TAPState">Type of the persistent additional properties state.</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="additionalPropertiesMask">Bit mask (enum) used to define the boolean saving the state in AdditionalPropertiesState</param>
            <param name="additionalPropertiesState">The AdditionalPropertiesState describing the component</param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="additionalContent">The content of the foldout header only visible if additional properties are shown and if foldout is expanded.</param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawer`1.AdditionalPropertiesFoldoutGroup``4(UnityEngine.GUIContent,``0,UnityEditor.Rendering.ExpandedState{``0,``1},``2,UnityEditor.Rendering.AdditionalPropertiesState{``2,``3},UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.CoreEditorDrawer{`0}.ActionDrawer,UnityEditor.Rendering.FoldoutOption)">
            <summary>
            Helper to draw a foldout with additional properties.
            </summary>
            <typeparam name="TEnum">Type of the foldout mask used.</typeparam>
            <typeparam name="TState">Type of the persistent foldout state.</typeparam>
            <typeparam name="TAPEnum">Type of the additional properties mask used.</typeparam>
            <typeparam name="TAPState">Type of the persistent additional properties state.</typeparam>
            <param name="foldoutTitle">Title wanted for this foldout header</param>
            <param name="foldoutMask">Bit mask (enum) used to define the boolean saving the state in ExpandedState</param>
            <param name="foldoutState">The ExpandedState describing the component</param>
            <param name="additionalPropertiesMask">Bit mask (enum) used to define the boolean saving the state in AdditionalPropertiesState</param>
            <param name="additionalPropertiesState">The AdditionalPropertiesState describing the component</param>
            <param name="normalContent"> The content of the foldout header always visible if expended. </param>
            <param name="additionalContent">The content of the foldout header only visible if additional properties are shown and if foldout is expanded.</param>
            <param name="options">Drawing options</param>
            <returns>A IDrawer object</returns>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorDrawersExtensions">
            <summary>CoreEditorDrawer extensions</summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorDrawersExtensions.Draw``1(System.Collections.Generic.IEnumerable{UnityEditor.Rendering.CoreEditorDrawer{``0}.IDrawer},``0,UnityEditor.Editor)">
            <summary> Concatenate a collection of IDrawer as a unique IDrawer </summary>
            <typeparam name="TData">Type of class containing data needed to draw inspector</typeparam>
            <param name="drawers">A collection of IDrawers</param>
            <param name="data">The data source for the inner drawers</param>
            <param name="owner">The editor drawing</param>
        </member>
        <member name="T:UnityEditor.Rendering.ShadowCascadeGUI">
            <summary>
            Helper class for drawing shadow cascade with GUI.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShadowCascadeGUI.HandleState">
            <summary>
            Represents the state of the cascade handle.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.HandleState.Hidden">
            <summary>
            Handle will not be drawn.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.HandleState.Disabled">
            <summary>
            Handle will be disabled.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.HandleState.Enabled">
            <summary>
            Handle will be enabled.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShadowCascadeGUI.Cascade">
            <summary>
            Data of single cascade for drawing in GUI.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.Cascade.size">
            <summary>
            Cascade normalized size that ranges from 0 to 1.
            Sum of all cascade sizes can not exceed 1.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.Cascade.borderSize">
            <summary>
            Cascade border size that ranges from 0 to 1.
            Border represents the width of shadow blend.
            Where 0 value result in no blend and 1 will blend from cascade beginning.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.Cascade.cascadeHandleState">
            <summary>
            Current state of cascade handle that will be used for drawing it.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.ShadowCascadeGUI.Cascade.borderHandleState">
            <summary>
            Current state of border handle that will be used for drawing it.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.ShadowCascadeGUI.DrawCascades(UnityEditor.Rendering.ShadowCascadeGUI.Cascade[]@,System.Boolean,System.Single)">
            <summary>
            Draw cascades using editor GUI. This also includes handles
            </summary>
            <param name="cascades">Array of cascade data.</param>
            <param name="useMetric">True if numbers should be presented with metric system, otherwise procentage.</param>
            <param name="baseMetric">The base of the metric system. In most cases it is maximum shadow distance.</param>
        </member>
        <member name="T:UnityEditor.Rendering.Utilities.EditorMaterialQualityUtilities">
            <summary>
            Editor MaterialQuality utility class.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.Utilities.EditorMaterialQualityUtilities.GetMaterialQuality(UnityEngine.Rendering.ShaderKeywordSet)">
            <summary>
            Get the material quality levels enabled in a keyword set.
            </summary>
            <param name="keywordSet">Input keywords.</param>
            <returns>All available MaterialQuality levels in the keyword set.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.ContextualMenuDispatcher">
            <summary>
            Helper methods for overriding contextual menus
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.VolumesPreferences">
            <summary>
            Preferences for Volumes
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.VolumesPreferences.VolumeGizmoVisibility">
            <summary>
            Specifies how the gizmos for volumes are being drawn
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.VolumesPreferences.VolumeGizmoVisibility.Wireframe">
            <summary> Wireframe </summary>
        </member>
        <member name="F:UnityEditor.Rendering.VolumesPreferences.VolumeGizmoVisibility.Solid">
            <summary> Solid </summary>
        </member>
        <member name="F:UnityEditor.Rendering.VolumesPreferences.VolumeGizmoVisibility.Everything">
            <summary> Solid with Wireframe </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumesPreferences.volumeGizmosVisibilityOption">
            <summary>
            Returns the current <see cref="T:UnityEditor.Rendering.VolumesPreferences.VolumeGizmoVisibility"/>
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumesPreferences.drawWireFrame">
            <summary>
            Returns if the Volume Gizmos should render the wireframe edges
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumesPreferences.drawSolid">
            <summary>
            Returns if the Volume Gizmos should render the solid faces
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumesPreferences.volumeGizmoColor">
            <summary>
            Returns the user defined color for rendering volume gizmos
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumesPreferences.keywords">
            <summary>
            The list of keywords for user search
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumesPreferences.header">
            <summary>
            The header of the panel
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumesPreferences.PreferenceGUI">
            <summary>
            Renders the Preferences UI for this provider
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ISerializedRenderPipelineGlobalSettings">
            <summary>
            Public interface for handling a serialized object of <see cref="T:UnityEngine.Rendering.RenderPipelineGlobalSettings"/>
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedRenderPipelineGlobalSettings.serializedObject">
            <summary>
            The <see cref="T:UnityEditor.SerializedObject"/>
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedRenderPipelineGlobalSettings.shaderVariantLogLevel">
            <summary>
            The shader variant log level
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedRenderPipelineGlobalSettings.exportShaderVariants">
            <summary>
            If the shader variants needs to be exported
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.InspectorCurveEditor">
            <summary>
            A custom curve editor made to be embedded in the inspector instead of a separate window.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.InspectorCurveEditor.Settings">
            <summary>
            A structure holding settings used for the curve editor.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.bounds">
            <summary>
            The boundaries of the curve.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.padding">
            <summary>
            The visual padding used when rendering the curve in the inspector.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.selectionColor">
            <summary>
            The color to use when a curve is selected.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.curvePickingDistance">
            <summary>
            The distance in pixels to check for curve selection on mouse click.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.keyTimeClampingDistance">
            <summary>
            The distance to clamp keys at compared to the previous and next keys.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.InspectorCurveEditor.Settings.defaultSettings">
            <summary>
            Default settings.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.bounds"/> are set to (0, 0, 1, 1).
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.padding"/> is set to (0, 0, 0, 0).
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.selectionColor"/> is set to yellow.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.curvePickingDistance"/> is set to 6 pixels.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.Settings.keyTimeClampingDistance"/> is set to 1e-4.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.InspectorCurveEditor.CurveState">
            <summary>
            A structure holding the state of a single curve in the editor.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.visible">
            <summary>
            Is the curve visible?
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.editable">
            <summary>
            Is the curve editable?
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.minPointCount">
            <summary>
            The minimum allowed number of points on the curve.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.zeroKeyConstantValue">
            <summary>
            A constant value to use when the curve doesn't have any point.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.color">
            <summary>
            The color used to draw the curve.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.width">
            <summary>
            The visual thickness of the curve.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.handleWidth">
            <summary>
            The visual thickness of the curve handles.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.showNonEditableHandles">
            <summary>
            Should the handles be visible on non-editable curves?
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.onlyShowHandlesOnSelection">
            <summary>
            Should the handles only be visible when the curve is selected?
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.loopInBounds">
            <summary>
            Does this curve loop in the defined boudaries?
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.InspectorCurveEditor.CurveState.defaultState">
            <summary>
            Default curve state.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.visible"/> is set to true.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.editable"/> is set to true.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.minPointCount"/> is set to 2.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.zeroKeyConstantValue"/> is set to 0.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.color"/> is set to white.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.width"/> is set to 2.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.handleWidth"/> is set to 2.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.showNonEditableHandles"/> is set to true.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.onlyShowHandlesOnSelection"/> is set to false.
            - <see cref="F:UnityEditor.Rendering.InspectorCurveEditor.CurveState.loopInBounds"/> is set to false.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.InspectorCurveEditor.Selection">
            <summary>
            A structure holding the state of the current selection.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Selection.curve">
            <summary>
            A reference to the serialized <c>AnimationCurve</c>.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Selection.keyframeIndex">
            <summary>
            The currently selected key index, or -1 if none is selected.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.Selection.keyframe">
            <summary>
            The key itself, or <c>null</c> if none is selected.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.Selection.#ctor(UnityEditor.SerializedProperty,System.Int32,System.Nullable{UnityEngine.Keyframe})">
            <summary>
            Creates a new selection state.
            </summary>
            <param name="curve">A reference to the serialized curve.</param>
            <param name="keyframeIndex">The currently selected key index, or -1 if none is selected.</param>
            <param name="keyframe">The key itself, or <c>null</c> if none is selected.</param>
        </member>
        <member name="F:UnityEditor.Rendering.InspectorCurveEditor.settings">
            <summary>
            The current settings used for the curve editor.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.#ctor">
            <summary>
            Creates a curve editor with default settings.
            </summary>
            <seealso cref="P:UnityEditor.Rendering.InspectorCurveEditor.Settings.defaultSettings"/>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.#ctor(UnityEditor.Rendering.InspectorCurveEditor.Settings)">
            <summary>
            Creates a curve editor with the given settings.
            </summary>
            <param name="settings">The settings to use to create the curve editor.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.Add(UnityEditor.SerializedProperty[])">
            <summary>
            Adds an arbitrary number of serialized curves to the editor.
            </summary>
            <param name="curves">The curves to add.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.Add(UnityEditor.SerializedProperty)">
            <summary>
            Adds a serialized curve to the editor.
            </summary>
            <param name="curve">The curve to add.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.Add(UnityEditor.SerializedProperty,UnityEditor.Rendering.InspectorCurveEditor.CurveState)">
            <summary>
            Adds a serialized curve to the editor with a given state.
            </summary>
            <param name="curve">The curve to add.</param>
            <param name="state">The state to use for the curve.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.Remove(UnityEditor.SerializedProperty)">
            <summary>
            Removes a single curve from the editor.
            </summary>
            <param name="curve">The curve to remove.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.RemoveAll">
            <summary>
            Removes all the curve from the editor.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.GetCurveState(UnityEditor.SerializedProperty)">
            <summary>
            Grabs the state for a given curve.
            </summary>
            <param name="curve">The curve to grab the state from.</param>
            <returns>The state of the curve.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.SetCurveState(UnityEditor.SerializedProperty,UnityEditor.Rendering.InspectorCurveEditor.CurveState)">
            <summary>
            Sets the state for a given curve.
            </summary>
            <param name="curve">The curve to set the state of.</param>
            <param name="state">The state to set for the curve.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.GetSelection">
            <summary>
            Gets the current selection.
            </summary>
            <returns>The current selection.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.SetKeyframe(UnityEditor.SerializedProperty,System.Int32,UnityEngine.Keyframe)">
            <summary>
            Sets a key for a given curve.
            </summary>
            <param name="curve">The curve to modify.</param>
            <param name="keyframeIndex">The index of the key to set.</param>
            <param name="keyframe">The new keyframe to put at the index.</param>
        </member>
        <member name="M:UnityEditor.Rendering.InspectorCurveEditor.OnGUI(UnityEngine.Rect)">
            <summary>
            Draws the curve editor. This is meant to be called in your custom editors.
            </summary>
            <param name="rect">The rectangle to draw into.</param>
            <returns><c>true</c> if the user modified the curve, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.ShaderPreprocessor`2.TryStripShaderVariants(`0,`1,System.Collections.Generic.IList{UnityEditor.Rendering.ShaderCompilerData},System.Exception@)">
            <summary>
            Strips the given <see cref="!:TShader"/>
            </summary>
            <param name="shader">The <see cref="!:T" /> that might be stripped.</param>
            <param name="shaderVariant">The <see cref="!:TShaderVariant" /></param>
            <param name="compilerDataList">A list of <see cref="T:UnityEditor.Rendering.ShaderCompilerData" /></param>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeProfileFactory">
            <summary>
            A utility class to create Volume Profiles and components.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeProfileFactory.CreateVolumeProfileAtPath(System.String)">
            <summary>
            Creates a <see cref="T:UnityEngine.Rendering.VolumeProfile"/> Asset and saves it at the given path.
            </summary>
            <param name="path">The path to save the Asset to, relative to the Project folder.</param>
            <returns>The newly created <see cref="T:UnityEngine.Rendering.VolumeProfile"/>.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeProfileFactory.CreateVolumeProfile(UnityEngine.SceneManagement.Scene,System.String)">
            <summary>
            Creates a <see cref="T:UnityEngine.Rendering.VolumeProfile"/> Asset and saves it in a folder next to the Scene.
            </summary>
            <param name="scene">The Scene to save the Profile next to.</param>
            <param name="targetName">A name to use for the Asset filename.</param>
            <returns>The newly created <see cref="T:UnityEngine.Rendering.VolumeProfile"/>.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeProfileFactory.CreateVolumeComponent``1(UnityEngine.Rendering.VolumeProfile,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> in an existing <see cref="T:UnityEngine.Rendering.VolumeProfile"/>.
            </summary>
            <typeparam name="T">A type of <see cref="T:UnityEngine.Rendering.VolumeComponent"/>.</typeparam>
            <param name="profile">The profile to store the new component in.</param>
            <param name="overrides">specifies whether to override the parameters in the component or not.</param>
            <param name="saveAsset">Specifies whether to save the Profile Asset or not. This is useful when you need to
            create several components in a row and only want to save the Profile Asset after adding the last one,
            because saving Assets to disk can be slow.</param>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI">
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
            <summary> Camera UI Shared Properties among SRP</summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.PhysicalCamera">
            <summary>
            Physical camera related drawers
            </summary>
            <summary>
            Physical camera content content
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_CameraBody_Sensor(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Body Sensor related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_CameraBody_GateFit(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Gate fit related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_Lens_FocalLength(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Focal Length related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_Lens_Shift(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Lens Shift related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_FocusDistance(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Focus Distance related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_CameraBody_ISO(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws ISO related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_CameraBody_ShutterSpeed(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Shutter Speed related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_Lens_Aperture(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Lens Aperture related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.PhysicalCamera.Drawer_PhysicalCamera_ApertureShape(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Aperture Shape related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.cameraBody">
            <summary>
            Camera Body content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.sensorType">
            <summary>
            Sensor type content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.apertureFormatNames">
            <summary>
            Aperture format names
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.apertureFormatValues">
            <summary>
            Aperture format values
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.customPresetIndex">
            <summary>
            Custom preset index
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.sensorSize">
            <summary>
            Sensor size
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.gateFit">
            <summary>
            Gate Fit
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.lens">
            <summary>
            Lens content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.focalLength">
            <summary>
            Focal Length content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.shift">
            <summary>
            Shift content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.ISO">
            <summary>
            ISO content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.shutterSpeed">
            <summary>
            Shutter Speed content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.aperture">
            <summary>
            Aperture content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.focusDistance">
            <summary>
            Focus Distance content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.apertureShape">
            <summary>
            Aperture Shape content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.bladeCount">
            <summary>
            Blade Count content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.curvature">
            <summary>
            Curvature content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.barrelClipping">
            <summary>
            Barrel Clipping content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.PhysicalCamera.Styles.anamorphism">
            <summary>
            Anamorphism content
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.CameraUI.Styles.projectionSettingsHeaderContent">
            <summary>
            Projection section header
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.clippingPlaneMultiFieldTitle">
            <summary>
            Clipping planes content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.projectionContent">
            <summary>
            Projection Content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.sizeContent">
            <summary>
            Size content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.fieldOfViewContent">
            <summary>
            FOV content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.FOVAxisModeContent">
            <summary>
            FOV Axis content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.physicalCameraContent">
            <summary>
            Physical camera content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.nearPlaneContent">
            <summary>
            Near plane content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.farPlaneContent">
            <summary>
            Far plane content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Styles.unsupportedPresetPropertiesMessage">
            <summary>
            Message displayed about unsupported fields for Camera Presets
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Rendering">
            <summary>
            Rendering section
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Rendering.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.header">
            <summary>
            Header of the section
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.antialiasing">
            <summary>
            antialiasing content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.dithering">
            <summary>
            dithering content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.stopNaNs">
            <summary>
            stopNaNs content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.cullingMask">
            <summary>
            cullingMask content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.occlusionCulling">
            <summary>
            occlusionCulling content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.renderingPath">
            <summary>
            renderingPath content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Rendering.Styles.exposureTarget">
            <summary>
            exposureTarget content
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Rendering.Drawer_Rendering_StopNaNs(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Stop NaNs related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Rendering.Drawer_Rendering_Dithering(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Dithering related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Rendering.Drawer_Rendering_CullingMask(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Culling mask related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Rendering.Drawer_Rendering_OcclusionCulling(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws occlusion Culling related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.ProjectionType">
            <summary>Camera Projection type</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.ProjectionType.Perspective">
            <summary> Perspective</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.ProjectionType.Orthographic">
            <summary> Orthographic</summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.ProjectionMatrixMode">
            <summary>Camera Projection matrix mode</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.ProjectionMatrixMode.Explicit">
            <summary> Explicit</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.ProjectionMatrixMode.Implicit">
            <summary> Implicit</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.ProjectionMatrixMode.PhysicalPropertiesBased">
            <summary> PhysicalPropertiesBased</summary>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Drawer_Projection(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws projection related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Output">
            <summary>
            Output Section
            </summary>
            <summary>
            Output section
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Output.Drawer_Output_AllowDynamicResolution(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Allow Dynamic Resolution related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Output.Drawer_Output_NormalizedViewPort(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Normalized ViewPort related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Output.Drawer_Output_Depth(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Depth related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Output.Drawer_Output_RenderTarget(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws Render Target related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Output.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Output.Styles.header">
            <summary>
            Header of the section
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Output.Styles.targetDisplay">
            <summary>
            Target display content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Output.Styles.viewport">
            <summary>
            Viewport
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Output.Styles.allowDynamicResolution">
            <summary>
            Allow dynamic resolution content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Output.Styles.depth">
            <summary>
            Depth content
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Environment">
            <summary>
            Environment Section
            </summary>
            <summary>
            Environment section
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CameraUI.Environment.Drawer_Environment_VolumeLayerMask(UnityEditor.Rendering.ISerializedCamera,UnityEditor.Editor)">
            <summary>Draws layer mask planes related fields on the inspector</summary>
            <param name="p"><see cref="T:UnityEditor.Rendering.ISerializedCamera"/> The serialized camera</param>
            <param name="owner"><see cref="T:UnityEditor.Editor"/> The editor owner calling this drawer</param>
        </member>
        <member name="T:UnityEditor.Rendering.CameraUI.Environment.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Environment.Styles.header">
            <summary>
            Header of the section
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CameraUI.Environment.Styles.volumeLayerMask">
            <summary>
            Volume layer mask content
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ICoreRenderPipelinePreferencesProvider">
            <summary>
            Interface to extend to provide UI
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ICoreRenderPipelinePreferencesProvider.keywords">
            <summary>
            The list of keywords for user search
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ICoreRenderPipelinePreferencesProvider.header">
            <summary>
            The header of the panel
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.ICoreRenderPipelinePreferencesProvider.PreferenceGUI">
            <summary>
            Renders the Preferences UI for this provider
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderStrippingWatcher">
            <summary>
            Notifies when shader variants have been stripped
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderStrippingWatcher.OnShaderStrippedCallbackHandler`2">
            <summary>
            Callback when a shader has been stripped
            </summary>
            <param name="shader">The shader</param>
            <param name="shaderVariant">The variant</param>
            <param name="variantsOut">The output variants after the stripping process</param>
            <param name="stripTimeMs">The total amount of time to strip the variants</param>
            <typeparam name="TShader">The shader</typeparam>
            <typeparam name="TShaderVariant">The variant</typeparam>
        </member>
        <member name="E:UnityEditor.Rendering.ShaderStrippingWatcher.shaderProcessed">
            <summary>
            Callback for <see cref="T:UnityEngine.Shader"/>
            </summary>
        </member>
        <member name="E:UnityEditor.Rendering.ShaderStrippingWatcher.computeShaderProcessed">
            <summary>
            Callback for <see cref="T:UnityEngine.ComputeShader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.HierarchicalBox">
             <summary>
             Provide a gizmo/handle representing a box where all face can be moved independently.
             Also add a contained sub gizmo/handle box if contained is used at creation.
             </summary>
             <example>
             <code>
             class MyComponentEditor : Editor
             {
                 static HierarchicalBox box;
                 static HierarchicalBox containedBox;
            
                 static MyComponentEditor()
                 {
                     Color[] handleColors = new Color[]
                     {
                         Color.red,
                         Color.green,
                         Color.Blue,
                         new Color(0.5f, 0f, 0f, 1f),
                         new Color(0f, 0.5f, 0f, 1f),
                         new Color(0f, 0f, 0.5f, 1f)
                     };
                     box = new HierarchicalBox(new Color(1f, 1f, 1f, 0.25), handleColors);
                     containedBox = new HierarchicalBox(new Color(1f, 0f, 1f, 0.25), handleColors, container: box);
                 }
            
                 [DrawGizmo(GizmoType.Selected|GizmoType.Active)]
                 void DrawGizmo(MyComponent comp, GizmoType gizmoType)
                 {
                     box.center = comp.transform.position;
                     box.size = comp.transform.scale;
                     box.DrawHull(gizmoType == GizmoType.Selected);
            
                     containedBox.center = comp.innerposition;
                     containedBox.size = comp.innerScale;
                     containedBox.DrawHull(gizmoType == GizmoType.Selected);
                 }
            
                 void OnSceneGUI()
                 {
                     EditorGUI.BeginChangeCheck();
            
                     //container box must be also set for contained box for clamping
                     box.center = comp.transform.position;
                     box.size = comp.transform.scale;
                     box.DrawHandle();
            
                     containedBox.DrawHandle();
                     containedBox.center = comp.innerposition;
                     containedBox.size = comp.innerScale;
            
                     if(EditorGUI.EndChangeCheck())
                     {
                         comp.innerposition = containedBox.center;
                         comp.innersize = containedBox.size;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalBox.monoHandle">
            <summary>
            Allow to switch between the mode where all axis are controlled together or not
            Note that if there is several handles, they will use the polychrome colors.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalBox.center">
            <summary>The position of the center of the box in Handle.matrix space.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalBox.size">
            <summary>The size of the box in Handle.matrix space.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalBox.baseColor">
            <summary>The baseColor used to fill hull. All other colors are deduced from it except specific handle colors.</summary>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalBox.SetBaseColor(UnityEngine.Color)">
            <summary>
            Set the baseColor used to fill hull. All other colors are deduced from it except specific handle colors.
            Instead of <see cref="P:UnityEditor.Rendering.HierarchicalBox.baseColor">baseColor</see> set, this will not force the opacity and keep what is provided for the filled faces.
            </summary>
            <param name="color">The color to use</param>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalBox.#ctor(UnityEngine.Color,UnityEngine.Color[],UnityEditor.Rendering.HierarchicalBox)">
            <summary>Constructor. Used to setup colors and also the container if any.</summary>
            <param name="baseColor">The color of each face of the box. Other colors are deduced from it.</param>
            <param name="polychromeHandleColors">The color of handle when they are separated. When they are grouped, they use a variation of the faceColor instead.</param>
            <param name="parent">The HierarchicalBox containing this box. If null, the box will not be limited in size.</param>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalBox.DrawHull(System.Boolean)">
            <summary>Draw the hull which means the boxes without the handles</summary>
            <param name="filled">If true, also fill the faces of the hull</param>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalBox.DrawHandle">
            <summary>Draw the manipulable handles</summary>
        </member>
        <member name="T:UnityEditor.Rendering.ISerializedLight">
            <summary>
            Interface to be implemented by each pipeline to hold the <see cref="T:UnityEditor.SerializedObject"/> for a Light Editor
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedLight.settings">
            <summary>The base settings of the light</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedLight.serializedObject">
            <summary>The light serialized</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedLight.serializedAdditionalDataObject">
            <summary>The additinal light data serialized</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedLight.intensity">
            <summary>Light Intensity Property</summary>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedLight.Update">
            <summary>Method that updates the <see cref="T:UnityEditor.SerializedObject"/> of the Light and the Additional Light Data</summary>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedLight.Apply">
            <summary>Method that applies the modified properties the <see cref="T:UnityEditor.SerializedObject"/> of the Light and the Light Camera Data</summary>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialHeaderScopeItem">
            <summary>
            Item to store information used by <see cref="T:UnityEditor.Rendering.MaterialHeaderScopeList"></see>/>
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.MaterialHeaderScopeItem.headerTitle">
            <summary><see cref="T:UnityEngine.GUIContent"></see> that will be rendered on the <see cref="T:UnityEditor.Rendering.MaterialHeaderScope"></see></summary>
        </member>
        <member name="P:UnityEditor.Rendering.MaterialHeaderScopeItem.expandable">
            <summary>The bitmask for this scope</summary>
        </member>
        <member name="P:UnityEditor.Rendering.MaterialHeaderScopeItem.drawMaterialScope">
            <summary>The action that will draw the controls for this scope</summary>
        </member>
        <member name="P:UnityEditor.Rendering.MaterialHeaderScopeItem.url">
            <summary>The url of the scope</summary>
        </member>
        <member name="T:UnityEditor.Rendering.LightUnitSliderUIDescriptor">
            <summary>
            Descriptor for Light Unit
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSliderUIDescriptor.#ctor(UnityEditor.Rendering.LightUnitSliderUIRange[],System.Single[],System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="valueRanges">The ranges that the value can have</param>
            <param name="sliderDistribution">The distribution</param>
            <param name="cautionTooltip">Tooltip for caution</param>
            <param name="unitName">The name of the unit</param>
            <param name="hasMarkers">If has markers</param>
            <param name="clampValue">If the value will be clamped to the <see cref="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.valueRanges"></see></param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSliderUIDescriptor.#ctor(UnityEditor.Rendering.LightUnitSliderUIRange[],System.Single[],System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="valueRanges">The ranges that the value can have</param>
            <param name="sliderDistribution">The distribution</param>
            <param name="belowRangeTooltip">The tooltip if the value goes below the range</param>
            <param name="aboveRangeTooltip">The tooltip if the value goes above the range</param>
            <param name="unitName">The name of the unit</param>
            <param name="hasMarkers">If has markers</param>
            <param name="clampValue">If the value will be clamped to the <see cref="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.valueRanges"></see></param>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.sliderDistribution">
            <summary>
            The distribution
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.valueRanges">
            <summary>
            The ranges that the value can have
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.sliderRange">
            <summary>
            The ranges that the slider can have
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.belowRangeTooltip">
            <summary>
            The tooltip if the value goes below the range
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.aboveRangeTooltip">
            <summary>
            The tooltip if the value goes above the range
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.unitName">
            <summary>
            The name of the unit
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.hasMarkers">
            <summary>
            If has markers
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIDescriptor.clampValue">
            <summary>
            If the value needs to be clamp
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.LightUnitSliderUIRange">
            <summary>
            The UI range of the slider
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSliderUIRange.#ctor(UnityEngine.Texture2D,System.String,UnityEngine.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="icon">The icon</param>
            <param name="tooltip">The tooltip</param>
            <param name="value">The min and max values</param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSliderUIRange.#ctor(UnityEngine.Texture2D,System.String,UnityEngine.Vector2,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="icon">The icon</param>
            <param name="tooltip">The tooltip</param>
            <param name="value">The min and max values</param>
            <param name="presetValue">The value given by the preset</param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSliderUIRange.CautionRange(System.String,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="tooltip">The tooltip</param>
            <param name="value">The min and max values</param>
            <returns></returns>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIRange.content">
            <summary>
            The content
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIRange.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderUIRange.presetValue">
            <summary>
            The value of the preset
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.LightUnitSliderDescriptors">
            <summary>
            Bunch of slider predefined descriptors
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderDescriptors.LuxDescriptor">
            <summary>
            Lux
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderDescriptors.LumenDescriptor">
            <summary>
            Lumen
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderDescriptors.ExposureDescriptor">
            <summary>
            Exposure
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSliderDescriptors.TemperatureDescriptor">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeComponentEditor">
             <summary>
             A custom editor class that draws a <see cref="T:UnityEngine.Rendering.VolumeComponent"/> in the Inspector. If you do not
             provide a custom editor for a <see cref="T:UnityEngine.Rendering.VolumeComponent"/>, Unity uses the default one.
             You must use a <see cref="T:UnityEditor.CustomEditor"/> to let the editor know which
             component this drawer is for.
             </summary>
             <example>
             Below is an example of a custom <see cref="T:UnityEngine.Rendering.VolumeComponent"/>:
             <code>
             using UnityEngine.Rendering;
            
             [Serializable, VolumeComponentMenu("Custom/Example Component")]
             public class ExampleComponent : VolumeComponent
             {
                 public ClampedFloatParameter intensity = new ClampedFloatParameter(0f, 0f, 1f);
             }
             </code>
             And its associated editor:
             <code>
             using UnityEditor.Rendering;
            
             [CustomEditor(typeof(ExampleComponent))]
             class ExampleComponentEditor : VolumeComponentEditor
             {
                 SerializedDataParameter m_Intensity;
            
                 public override void OnEnable()
                 {
                     var o = new PropertyFetcher&lt;ExampleComponent&gt;(serializedObject);
                     m_Intensity = Unpack(o.Find(x => x.intensity));
                 }
            
                 public override void OnInspectorGUI()
                 {
                     PropertyField(m_Intensity);
                 }
             }
             </code>
             </example>
             <seealso cref="T:UnityEditor.CustomEditor"/>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.expanded">
            <summary>
            If the editor for this <see cref="T:UnityEngine.Rendering.VolumeComponent"/> is expanded or not in the inspector
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.volumeComponent">
            <summary>
            Specifies the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> this editor is drawing.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.baseProperty">
            <summary>
            The copy of the serialized property of the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> being
            inspected. Unity uses this to track whether the editor is collapsed in the Inspector or not.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.activeProperty">
            <summary>
            The serialized property of <see cref="F:UnityEngine.Rendering.VolumeComponent.active"/> for the component being
            inspected.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.hasAdditionalProperties">
            <summary>
            Override this property if your editor makes use of the "Additional Properties" feature.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.showAdditionalProperties">
            <summary>
            Set to true to show additional properties.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.BeginAdditionalPropertiesScope">
            <summary>
            Start a scope for additional properties.
            This will handle the highlight of the background when toggled on and off.
            </summary>
            <returns>True if the additional content should be drawn.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.EndAdditionalPropertiesScope">
            <summary>
            End a scope for additional properties.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.VolumeComponentEditor.m_Inspector">
            <summary>
            A reference to the parent editor in the Inspector.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.inspector">
            <summary>
            A reference to the parent editor in the Inspector.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.volume">
            <summary>
            Obtains the <see cref="T:UnityEngine.Rendering.Volume"/> that is being edited from this volume component
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.Repaint">
            <summary>
            Triggers an Inspector repaint event.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.OnEnable">
            <summary>
            Unity calls this method when the object loads.
            </summary>
            <remarks>
            You can safely override this method and not call <c>base.OnEnable()</c> unless you want
            Unity to display all the properties from the <see cref="T:UnityEngine.Rendering.VolumeComponent"/> automatically.
            </remarks>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.OnDisable">
            <summary>
            Unity calls this method when the object goes out of scope.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.OnInspectorGUI">
            <summary>
            Unity calls this method each time it re-draws the Inspector.
            </summary>
            <remarks>
            You can safely override this method and not call <c>base.OnInspectorGUI()</c> unless you
            want Unity to display all the properties from the <see cref="T:UnityEngine.Rendering.VolumeComponent"/>
            automatically.
            </remarks>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.GetDisplayTitle">
            <summary>
            Sets the label for the component header. Override this method to provide
            a custom label. If you don't, Unity automatically obtains one from the class name.
            </summary>
            <returns>A label to display in the component header.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.AreOverridesTo(System.Boolean)">
            <summary>
            Checks if all the visible parameters have the given state
            </summary>
            <param name="state">The state to check</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.SetOverridesTo(System.Boolean)">
            <summary>
            Sets the given state to all the visible parameters
            </summary>
            <param name="state">The state to check</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.Unpack(UnityEditor.SerializedProperty)">
            <summary>
            Generates and auto-populates a <see cref="T:UnityEditor.Rendering.SerializedDataParameter"/> from a serialized
            <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.
            </summary>
            <param name="property">A serialized property holding a <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.PropertyField(UnityEditor.Rendering.SerializedDataParameter)">
            <summary>
            Draws a given <see cref="T:UnityEditor.Rendering.SerializedDataParameter"/> in the editor.
            </summary>
            <param name="property">The property to draw in the editor</param>
            <returns>true if the property field has been rendered</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.DrawHeader(System.String)">
            <summary>
            Draws a header into the inspector with the given title
            </summary>
            <param name="header">The title for the header</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.HandleDecorators(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent)">
            <summary>
            Handles unity built-in decorators (Space, Header, Tooltips, ...) from <see cref="T:UnityEditor.Rendering.SerializedDataParameter"/> attributes
            </summary>
            <param name="property">The property to obtain the attributes and handle the decorators</param>
            <param name="title">A custom label and/or tooltip that might be updated by <see cref="T:UnityEngine.TooltipAttribute"/> and/or by <see cref="T:UnityEngine.InspectorNameAttribute"/></param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.HandleRelativeIndentation(UnityEditor.Rendering.SerializedDataParameter)">
            <summary>
            Get indentation from Indent attribute
            </summary>
            <param name="property">The property to obtain the attributes</param>
            <returns>The relative indent level change</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.PropertyField(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent)">
            <summary>
            Draws a given <see cref="T:UnityEditor.Rendering.SerializedDataParameter"/> in the editor using a custom label
            and tooltip.
            </summary>
            <param name="property">The property to draw in the editor.</param>
            <param name="title">A custom label and/or tooltip.</param>
            <returns>true if the property field has been rendered</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.DrawPropertyField(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent)">
            <summary>
            Draws a given <see cref="T:UnityEditor.Rendering.SerializedDataParameter"/> in the editor using a custom label
            and tooltip.
            </summary>
            <param name="property">The property to draw in the editor.</param>
            <param name="title">A custom label and/or tooltip.</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.DrawEmbeddedField(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent)">
            <summary>
            Draws a given <see cref="T:UnityEditor.Rendering.SerializedDataParameter"/> in the editor using a custom label
            and tooltip. This variant is only for embedded class / struct
            </summary>
            <param name="property">The property to draw in the editor.</param>
            <param name="title">A custom label and/or tooltip.</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.DrawOverrideCheckbox(UnityEditor.Rendering.SerializedDataParameter)">
            <summary>
            Draws the override checkbox used by a property in the editor.
            </summary>
            <param name="property">The property to draw the override checkbox for</param>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeComponentEditor.OverridablePropertyScope">
            <summary>
            Scope for property that handle:
            - Layout decorator (Space, Header)
            - Naming decorator (Tooltips, InspectorName)
            - Overridable checkbox if parameter IsAutoProperty
            - disabled GUI if Overridable checkbox (case above) is unchecked
            - additional property scope
            This is automatically used inside PropertyField method
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.OverridablePropertyScope.displayed">
            <summary>
            Either the content property will be displayed or not (can varry with additional property settings)
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentEditor.OverridablePropertyScope.label">
            <summary>
            The title modified regarding attribute used on the field
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.OverridablePropertyScope.#ctor(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent,UnityEditor.Rendering.VolumeComponentEditor)">
            <summary>
            Constructor
            </summary>
            <param name="property">The property that will be drawn</param>
            <param name="label">The label of this property</param>
            <param name="editor">The editor that will draw it</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.OverridablePropertyScope.#ctor(UnityEditor.Rendering.SerializedDataParameter,System.String,UnityEditor.Rendering.VolumeComponentEditor)">
            <summary>
            Constructor
            </summary>
            <param name="property">The property that will be drawn</param>
            <param name="label">The label of this property</param>
            <param name="editor">The editor that will draw it</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.OverridablePropertyScope.System#IDisposable#Dispose">
            <summary>
            Dispose of the class
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeComponentEditor.IndentLevelScope">
            <summary>
            Like EditorGUI.IndentLevelScope but this one will also indent the override checkboxes.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.IndentLevelScope.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="offset">[optional] Change the indentation offset</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditor.IndentLevelScope.CloseScope">
            <summary>
            Closes the scope
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.LightUnitSlider">
            <summary>
            Formats the provided descriptor into a linear slider with contextual slider markers, tooltips, and icons.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSlider.m_SerializedObject">
            <summary>
            The <see cref="T:UnityEditor.SerializedObject"/> that contains a <see cref="T:UnityEngine.Light"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.LightUnitSlider.SliderStyles">
            <summary>
            The styles to be used on sliders
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSlider.SliderStyles.k_IconButton">
            <summary> A <see cref="T:UnityEngine.GUIStyle"/> with "IconButton" </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSlider.SliderStyles.k_TemperatureBorder">
            <summary> A <see cref="T:UnityEngine.GUIStyle"/> with "ColorPickerSliderBackground" </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSlider.SliderStyles.k_TemperatureThumb">
            <summary> A <see cref="T:UnityEngine.GUIStyle"/> with "ColorPickerHorizThumb" </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUnitSlider.m_Descriptor">
            <summary>
            The <see cref="T:UnityEditor.Rendering.LightUnitSliderUIDescriptor"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.#ctor(UnityEditor.Rendering.LightUnitSliderUIDescriptor)">
            <summary>
            Constructor with a <see cref="T:UnityEditor.Rendering.LightUnitSliderUIDescriptor"/>
            </summary>
            <param name="descriptor">The <see cref="T:UnityEditor.Rendering.LightUnitSliderUIDescriptor"/></param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.SetSerializedObject(UnityEditor.SerializedObject)">
            <summary>
            Modifies the <see cref="T:UnityEditor.SerializedObject"/> for this Light slider
            </summary>
            <param name="serialized"></param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.Draw(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single@)">
            <summary>
            Draws the slider in a given <see cref="T:UnityEngine.Rect"/>
            </summary>
            <param name="rect">The <see cref="T:UnityEngine.Rect"/> to draw the slider into</param>
            <param name="value">The <see cref="T:UnityEditor.SerializedProperty"/> with the property serialized</param>
            <param name="floatValue">The float value modified by the slider GUI</param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.SetValueToPreset(UnityEditor.SerializedProperty,UnityEditor.Rendering.LightUnitSliderUIRange)">
            <summary>
            The serialized property for color temperature is stored in the build-in light editor, and we need to use this object to apply the update.
            </summary>
            <param name="value">The value to update</param>
            <param name="preset">The preset range</param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.GetLightUnitTooltip(System.String,System.Single,System.String)">
            <summary>
            Gets the tooltip
            </summary>
            <param name="baseTooltip">The base tooltip</param>
            <param name="value">The value</param>
            <param name="unit">The units</param>
            <returns>A well formed tooltip on a <see cref="T:UnityEngine.GUIContent"/></returns>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.DoSlider(UnityEngine.Rect,System.Single@,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Draws the slider
            </summary>
            <param name="rect">The <see cref="T:UnityEngine.Rect"/> to draw the slider.</param>
            <param name="value">The current value, and also returns the modified value.</param>
            <param name="sliderRange">The ranges of the slider.</param>
            <param name="_">Not used</param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.DoSlider(UnityEngine.Rect,System.Single@,UnityEngine.Vector2)">
            <summary>
            Draws a linear slider mapped to the min/max value range. Override this for different slider behavior (texture background, power).
            </summary>
            <param name="rect">The <see cref="T:UnityEngine.Rect"/> to draw the slider.</param>
            <param name="value">The current value, and also returns the modified value.</param>
            <param name="sliderRange">The ranges of the slider.</param>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.GetPositionOnSlider(System.Single,UnityEngine.Vector2)">
            <summary>
            Maps a light unit value onto the slider. Keeps in sync placement of markers and tooltips with the slider power.
            Override this in case of non-linear slider.
            </summary>
            <param name="value">The value to get the position at</param>
            <param name="valueRange">The ranges of the values</param>
            <returns>The position</returns>
        </member>
        <member name="M:UnityEditor.Rendering.LightUnitSlider.GetPositionOnSlider(System.Single)">
            <summary>
            Maps a light unit value onto the slider. Keeps in sync placement of markers and tooltips with the slider power.
            Override this in case of non-linear slider.
            </summary>
            <param name="value">The value to get the position</param>
            <returns>The position on the slider</returns>
        </member>
        <member name="T:UnityEditor.Rendering.BuildTargetExtensions">
            <summary>
            Extensions for <see cref="T:UnityEditor.BuildTarget"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.BuildTargetExtensions.TryGetRenderPipelineAssets``1(UnityEditor.BuildTarget,System.Collections.Generic.List{``0})">
            <summary>
            Obtains a list of the <see cref="T:UnityEngine.Rendering.RenderPipelineAsset"/> that are references into the settings either on <see cref="T:UnityEngine.QualitySettings"/> or in <see cref="T:UnityEngine.Rendering.GraphicsSettings"/>
            </summary>
            <typeparam name="T">The type of <see cref="T:UnityEngine.Rendering.RenderPipelineAsset"/></typeparam>
            <param name="buildTarget">The <see cref="T:UnityEditor.BuildTarget"/> to obtain the assets.</param>
            <param name="srpAssets">The output list of <see cref="T:UnityEngine.Rendering.RenderPipelineAsset"/> that are referenced by the platform.</param>
            <returns>false if there was an error fetching the <see cref="T:UnityEngine.Rendering.RenderPipelineAsset"/> for this <see cref="T:UnityEditor.BuildTarget"/></returns>
        </member>
        <member name="T:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI">
            <summary>
            UI for global settings
            </summary>
            <summary>
            UI for global settings
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI.DrawShaderStrippingSettings(UnityEditor.Rendering.ISerializedRenderPipelineGlobalSettings,UnityEditor.Editor,UnityEditor.Rendering.CoreEditorDrawer{UnityEditor.Rendering.ISerializedRenderPipelineGlobalSettings}.IDrawer)">
            <summary>
            Draws the shader stripping settinsg
            </summary>
            <param name="serialized">The serialized global settings</param>
            <param name="owner">The owner editor</param>
            <param name="additionalShaderStrippingSettings">Pass another drawer if you want to specify additional shader stripping settings</param>
        </member>
        <member name="T:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI.Styles">
            <summary>A collection of GUIContent for use in the inspector</summary>
        </member>
        <member name="F:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI.Styles.labelWidth">
            <summary>
            Global label width
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI.Styles.shaderStrippingSettingsLabel">
            <summary>
            Shader Stripping
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI.Styles.shaderVariantLogLevelLabel">
            <summary>
            Shader Variant Log Level
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.RenderPipelineGlobalSettingsUI.Styles.exportShaderVariantsLabel">
            <summary>
            Export Shader Variants
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.EditorWindowWithHelpButton">
            <summary>Editor window that adds a button to browse the help url, specify <see cref="T:UnityEngine.HelpURLAttribute"/> when defining your inherited class</summary>
        </member>
        <member name="M:UnityEditor.Rendering.EditorWindowWithHelpButton.ShowButton(UnityEngine.Rect)">
            <summary>Shows a button with help icon and opens the url defined by <see cref="T:UnityEngine.HelpURLAttribute"/></summary>
            <param name="r">The rect to show the button</param>
        </member>
        <member name="T:UnityEditor.Rendering.DialogText">
            <summary>
            Material Upgrader dialog text.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.DialogText.title">
            <summary>Material Upgrader title.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.DialogText.proceed">
            <summary>Material Upgrader proceed.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.DialogText.ok">
            <summary>Material Upgrader Ok.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.DialogText.cancel">
            <summary>Material Upgrader cancel.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.DialogText.noSelectionMessage">
            <summary>Material Upgrader no selection message.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.DialogText.projectBackMessage">
            <summary>Material Upgrader project backup message.</summary>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialUpgrader">
            <summary>
            Material Upgrader class.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialUpgrader.MaterialFinalizer">
            <summary>
            Material Upgrader finalizer delegate.
            </summary>
            <param name="mat">Material</param>
        </member>
        <member name="P:UnityEditor.Rendering.MaterialUpgrader.NewShaderPath">
            <summary>
            Retrieves path to new shader.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialUpgrader.MaterialPropertyType">
            <summary>
            Type of property to rename.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.MaterialPropertyType.Texture">
            <summary>Texture reference property.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.MaterialPropertyType.Float">
            <summary>Float property.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.MaterialPropertyType.Color">
            <summary>Color property.</summary>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.GetPropertyRenameMap(UnityEditor.Rendering.MaterialUpgrader.MaterialPropertyType)">
            <summary>
            Retrieves a collection of renamed parameters of a specific MaterialPropertyType.
            </summary>
            <param name="type">Material Property Type</param>
            <returns>Dictionary of property names to their renamed values.</returns>
            <exception cref="T:System.ArgumentException">type is not valid.</exception>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags">
            <summary>
            Upgrade Flags
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags.LogErrorOnNonExistingProperty">
            <summary>LogErrorOnNonExistingProperty.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags.CleanupNonUpgradedProperties">
            <summary>CleanupNonUpgradedProperties.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags.LogMessageWhenNoUpgraderFound">
            <summary>LogMessageWhenNoUpgraderFound.</summary>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.Upgrade(UnityEngine.Material,UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade method.
            </summary>
            <param name="material">Material to upgrade.</param>
            <param name="flags">Upgrade flag</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.Convert(UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Custom material conversion method.
            </summary>
            <param name="srcMaterial">Source material.</param>
            <param name="dstMaterial">Destination material.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.RenameShader(System.String,System.String,UnityEditor.Rendering.MaterialUpgrader.MaterialFinalizer)">
            <summary>
            Rename shader.
            </summary>
            <param name="oldName">Old name.</param>
            <param name="newName">New name.</param>
            <param name="finalizer">Finalizer delegate.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.RenameTexture(System.String,System.String)">
            <summary>
            Rename Texture Parameter.
            </summary>
            <param name="oldName">Old name.</param>
            <param name="newName">New name.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.RenameFloat(System.String,System.String)">
            <summary>
            Rename Float Parameter.
            </summary>
            <param name="oldName">Old name.</param>
            <param name="newName">New name.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.RenameColor(System.String,System.String)">
            <summary>
            Rename Color Parameter.
            </summary>
            <param name="oldName">Old name.</param>
            <param name="newName">New name.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.RemoveTexture(System.String)">
            <summary>
            Remove Texture Parameter.
            </summary>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.SetFloat(System.String,System.Single)">
            <summary>
            Set float property.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.SetColor(System.String,UnityEngine.Color)">
            <summary>
            Set color property.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.SetTexture(System.String,UnityEngine.Texture)">
            <summary>
            Set texture property.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.RenameKeywordToFloat(System.String,System.String,System.Single,System.Single)">
            <summary>
            Rename a keyword to float.
            </summary>
            <param name="oldName">Old name.</param>
            <param name="newName">New name.</param>
            <param name="setVal">Value when set.</param>
            <param name="unsetVal">Value when unset.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.IsMaterialPath(System.String)">
            <summary>
            Checking if the passed in value is a path to a Material.
            </summary>
            <param name="path">Path to test.</param>
            <return>Returns true if the passed in value is a path to a material.</return>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.ShouldUpgradeShader(UnityEngine.Material,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Checking if the passed in value is a path to a Material.
            </summary>
            <param name="material">Material to check.</param>
            <param name="shaderNamesToIgnore">HashSet of strings to ignore.</param>
            <return>Returns true if the passed in material's shader is not in the passed in ignore list.</return>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.UpgradeProjectFolder(System.Collections.Generic.List{UnityEditor.Rendering.MaterialUpgrader},System.String,UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade the project folder.
            </summary>
            <param name="upgraders">List of upgraders.</param>
            <param name="progressBarName">Name of the progress bar.</param>
            <param name="flags">Material Upgrader flags.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.UpgradeProjectFolder(System.Collections.Generic.List{UnityEditor.Rendering.MaterialUpgrader},System.Collections.Generic.HashSet{System.String},System.String,UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade the project folder.
            </summary>
            <param name="upgraders">List of upgraders.</param>
            <param name="shaderNamesToIgnore">Set of shader names to ignore.</param>
            <param name="progressBarName">Name of the progress bar.</param>
            <param name="flags">Material Upgrader flags.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.Upgrade(UnityEngine.Material,UnityEditor.Rendering.MaterialUpgrader,UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade a material.
            </summary>
            <param name="material">Material to upgrade.</param>
            <param name="upgrader">Material upgrader.</param>
            <param name="flags">Material Upgrader flags.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.Upgrade(UnityEngine.Material,System.Collections.Generic.List{UnityEditor.Rendering.MaterialUpgrader},UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade a material.
            </summary>
            <param name="material">Material to upgrade.</param>
            <param name="upgraders">List of Material upgraders.</param>
            <param name="flags">Material Upgrader flags.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.Upgrade(UnityEngine.Material,System.Collections.Generic.List{UnityEditor.Rendering.MaterialUpgrader},UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags,System.String@)">
            <summary>
            Upgrade a material.
            </summary>
            <param name="material">Material to upgrade.</param>
            <param name="upgraders">List of Material upgraders.</param>
            <param name="flags">Material upgrader flags.</param>
            <param name="message">Error message to be outputted when no material upgraders are suitable for given material if the flags <see cref="F:UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags.LogMessageWhenNoUpgraderFound"/> is used.</param>
            <returns>Returns true if the upgrader was found for the passed in material.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.UpgradeSelection(System.Collections.Generic.List{UnityEditor.Rendering.MaterialUpgrader},System.String,UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade the selection.
            </summary>
            <param name="upgraders">List of upgraders.</param>
            <param name="progressBarName">Name of the progress bar.</param>
            <param name="flags">Material Upgrader flags.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialUpgrader.UpgradeSelection(System.Collections.Generic.List{UnityEditor.Rendering.MaterialUpgrader},System.Collections.Generic.HashSet{System.String},System.String,UnityEditor.Rendering.MaterialUpgrader.UpgradeFlags)">
            <summary>
            Upgrade the selection.
            </summary>
            <param name="upgraders">List of upgraders.</param>
            <param name="shaderNamesToIgnore">Set of shader names to ignore.</param>
            <param name="progressBarName">Name of the progress bar.</param>
            <param name="flags">Material Upgrader flags.</param>
        </member>
        <member name="T:UnityEditor.Rendering.PropertyFetcher`1">
            <summary>
            Serialized property fetcher.
            </summary>
            <typeparam name="T">Serialized object type.</typeparam>
        </member>
        <member name="F:UnityEditor.Rendering.PropertyFetcher`1.obj">
            <summary>
            Serialized object associated with the fetcher.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.PropertyFetcher`1.#ctor(UnityEditor.SerializedObject)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Serialized object containing properties to fetch.</param>
        </member>
        <member name="M:UnityEditor.Rendering.PropertyFetcher`1.Find(System.String)">
            <summary>
            Find a property by name.
            </summary>
            <param name="str">Property name.</param>
            <returns>Required property if it exists, null otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.PropertyFetcher`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            To use with extreme caution. It not really get the property but try to find a field with similar name
            Hence inheritance override of property is not supported.
            Also variable rename will silently break the search.
            <summary>
            Find a property based on an expression.
            </summary>
            <typeparam name="TValue">Type of the serialized object.</typeparam>
            <param name="expr">Expression for the property.</param>
            <returns>Required property if it exists, null otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.PropertyFetcher`1.Dispose">
            <summary>
            Disposable pattern implementation.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.RelativePropertyFetcher`1">
            <summary>
            Relative property fetcher.
            </summary>
            <typeparam name="T">SerializedObject type.</typeparam>
        </member>
        <member name="F:UnityEditor.Rendering.RelativePropertyFetcher`1.obj">
            <summary>
            Serialized object associated with the fetcher.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.RelativePropertyFetcher`1.#ctor(UnityEditor.SerializedProperty)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Serialized object containing properties to fetch.</param>
        </member>
        <member name="M:UnityEditor.Rendering.RelativePropertyFetcher`1.Find(System.String)">
            <summary>
            Find a property by name.
            </summary>
            <param name="str">Property name.</param>
            <returns>Required property if it exists, null otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.RelativePropertyFetcher`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            To use with extreme caution. It not really get the property but try to find a field with similar name
            Hence inheritance override of property is not supported.
            Also variable rename will silently break the search.
            <summary>
            Find a property based on an expression.
            </summary>
            <typeparam name="TValue">Type of the serialized object.</typeparam>
            <param name="expr">Expression for the property.</param>
            <returns>Required property if it exists, null otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.RelativePropertyFetcher`1.Dispose">
            <summary>
            Disposable pattern implementation.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.PropertyFetcherExtensions">
            <summary>
            Property fetcher extension class.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.PropertyFetcherExtensions.Find``2(UnityEditor.SerializedObject,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>
            
             </summary>
             <typeparam name="TSource"></typeparam>
             <typeparam name="TValue"></typeparam>
             <param name="obj"></param>
             <param name="expr"></param>
             <returns></returns>
        </member>
        <member name="M:UnityEditor.Rendering.PropertyFetcherExtensions.Find``2(UnityEditor.SerializedProperty,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
             <summary>
            
             </summary>
             <typeparam name="TSource"></typeparam>
             <typeparam name="TValue"></typeparam>
             <param name="obj"></param>
             <param name="expr"></param>
             <returns></returns>
        </member>
        <member name="T:UnityEditor.Rendering.MenuManager">
            <summary>
            Contains a set of method to be able to manage Menu Items for the editor
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.MenuManager.AddMenuItem(System.String,System.String,System.Boolean,System.Int32,System.Action,System.Func{System.Boolean})">
            <summary>
            Adds a menu Item to the editor
            </summary>
            <param name="path">The path to the menu item</param>
            <param name="shortcut">The shortcut of the menu item</param>
            <param name="checked">If the item can have an state, pressed or not</param>
            <param name="priority">The priority of the menu item</param>
            <param name="execute">The action that will be called once the menu item is pressed</param>
            <param name="validate">The action that will be called to know if the menu itme is enabled</param>
        </member>
        <member name="M:UnityEditor.Rendering.MenuManager.RemoveMenuItem(System.String)">
            <summary>
            Removes a Menu item from the editor, if the path is not found it does nothing
            </summary>
            <param name="path">The path of the menu item to be removed</param>
        </member>
        <member name="T:UnityEditor.Rendering.IVolumeAdditionalGizmo">
            <summary>
            Interface to add additional gizmo renders for a <see cref="T:UnityEngine.Rendering.IVolume"/>
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.IVolumeAdditionalGizmo.type">
            <summary>
            The type that overrides this additional gizmo
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IVolumeAdditionalGizmo.OnBoxColliderDraw(UnityEngine.Rendering.IVolume,UnityEngine.BoxCollider)">
            <summary>
            Additional gizmo draw for <see cref="T:UnityEngine.BoxCollider"/>
            </summary>
            <param name="scr">The <see cref="T:UnityEngine.Rendering.IVolume"/></param>
            <param name="c">The <see cref="T:UnityEngine.BoxCollider"/></param>
        </member>
        <member name="M:UnityEditor.Rendering.IVolumeAdditionalGizmo.OnSphereColliderDraw(UnityEngine.Rendering.IVolume,UnityEngine.SphereCollider)">
            <summary>
            Additional gizmo draw for <see cref="T:UnityEngine.SphereCollider"/>
            </summary>
            <param name="scr">The <see cref="T:UnityEngine.Rendering.IVolume"/></param>
            <param name="c">The <see cref="T:UnityEngine.SphereCollider"/></param>
        </member>
        <member name="M:UnityEditor.Rendering.IVolumeAdditionalGizmo.OnMeshColliderDraw(UnityEngine.Rendering.IVolume,UnityEngine.MeshCollider)">
            <summary>
            Additional gizmo draw for <see cref="T:UnityEngine.MeshCollider"/>
            </summary>
            <param name="scr">The <see cref="T:UnityEngine.Rendering.IVolume"/></param>
            <param name="c">The <see cref="T:UnityEngine.MeshCollider"/></param>
        </member>
        <member name="T:UnityEditor.Rendering.CameraEditorUtils">
            <summary>
            Utility functions for cameras in the editor.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.CameraEditorUtils.GetPreviewCamera">
            <summary>Delegate that must give an initialized preview camera</summary>
            <param name="sourceCamera">The initial Camera we want a preview from</param>
            <param name="previewSize">The size of the preview</param>
            <returns>The Preview camera, initialized</returns>
        </member>
        <member name="P:UnityEditor.Rendering.CameraEditorUtils.GUITextureBlit2SRGBMaterial">
            <summary>
            The material used to display a texture into SRGB
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CameraEditorUtils.DrawCameraSceneViewOverlay(UnityEngine.Object,UnityEditor.SceneView,UnityEditor.Rendering.CameraEditorUtils.GetPreviewCamera)">
            <summary>
            Draw the overlay of a Camera
            </summary>
            <param name="target">The Camera that we want a preview</param>
            <param name="sceneView">The scene view where to draw it</param>
            <param name="previewCameraGetter">The way to get the preview camera corresponding to the target</param>
        </member>
        <member name="M:UnityEditor.Rendering.CameraEditorUtils.IsViewPortRectValidToRender(UnityEngine.Rect)">
            <summary>
            Check if the view port rect have a positive size
            </summary>
            <param name="normalizedViewPortRect">The rect to check</param>
            <returns>True: the rect have positive size</returns>
        </member>
        <member name="T:UnityEditor.Rendering.IESReader">
            <summary>
            Class to Parse IES File
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.IESReader.FileFormatVersion">
            <summary>
            Version of the IES File
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.IESReader.TotalLumens">
            <summary>
            Total light intensity (in Lumens) stored on the file, usage of it is optional (through the prefab subasset inside the IESObject)
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.IESReader.MaxCandelas">
            <summary>
            Maximum of Candela in the IES File
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.IESReader.PhotometricType">
            <summary>
            Type of Photometric light in the IES file, varying per IES-Type and version
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IESReader.ReadFile(System.String)">
            <summary>
            Main function to read the file
            </summary>
            <param name="iesFilePath">The path to the IES File on disk.</param>
            <returns>Return the error during the import otherwise null if no error</returns>
        </member>
        <member name="T:UnityEditor.Rendering.LensFlareComponentSRPEditor">
            <summary>
            Editor for LensFlareComponentSRP: Lens Flare Data-Driven which can be added on any GameObject
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LensFlareComponentSRPEditor.OnInspectorGUI">
            <summary>
            Implement this function to make a custom inspector
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerAttribute">
            <summary>
            Attribute specifying wich type of Debug Item should this drawer be used with.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerAttribute.#ctor(System.Type)">
            <summary>
            Constructor for DebugUIDraw Attribute
            </summary>
            <param name="type">Type of Debug Item this draw should be used with.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawer">
            <summary>
            Debug Item Drawer
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawer.Cast``1(System.Object)">
            <summary>
            Cast into the proper type.
            </summary>
            <typeparam name="T">Type of the drawer</typeparam>
            <param name="o">Object to be cast</param>
            <returns>Returns o cast to type T</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawer.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawer.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>Returns the state of the widget.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawer.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing after UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawer.Apply(UnityEngine.Rendering.DebugUI.IValueField,UnityEditor.Rendering.DebugState,System.Object)">
            <summary>
            Applies a value to the widget and the Debug State of the Debug Item.
            </summary>
            <param name="widget">Debug Item widget.</param>
            <param name="state">Debug State associated with the Debug Item</param>
            <param name="value">Input value.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawer.PrepareControlRect(System.Single,System.Boolean)">
            <summary>
            Prepares the rendering Rect of the Drawer.
            </summary>
            <param name="height">Height of the rect.</param>
            <param name="fullWidth">Whether to reserve full width for the element.</param>
            <returns>Appropriate Rect for drawing.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIFieldDrawer`3">
            <summary>
            Common class to help drawing fields
            </summary>
            <typeparam name="TValue">The internal value of the field</typeparam>
            <typeparam name="TField">The type of the field widget</typeparam>
            <typeparam name="TState">The state of the field</typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIFieldDrawer`3.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIFieldDrawer`3.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>Returns the state of the widget.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIFieldDrawer`3.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,`1,`2)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIFieldDrawer`3.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing after UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIWidgetDrawer`1">
            <summary>
            Common class to help drawing widgets
            </summary>
            <typeparam name="TWidget">The widget</typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIWidgetDrawer`1.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIWidgetDrawer`1.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>Returns the state of the widget.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIWidgetDrawer`1.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,`0)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="w">The widget</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIWidgetDrawer`1.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing after UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="T:UnityEditor.Rendering.HierarchicalSphere">
             <summary>
             Provide a gizmo/handle representing a box where all face can be moved independently.
             Also add a contained sub gizmo/handle box if contained is used at creation.
             </summary>
             <example>
             <code>
             class MyComponentEditor : Editor
             {
                 static HierarchicalSphere sphere;
                 static HierarchicalSphere containedSphere;
            
                 static MyComponentEditor()
                 {
                     Color[] handleColors = new Color[]
                     {
                         Color.red,
                         Color.green,
                         Color.Blue,
                         new Color(0.5f, 0f, 0f, 1f),
                         new Color(0f, 0.5f, 0f, 1f),
                         new Color(0f, 0f, 0.5f, 1f)
                     };
                     sphere = new HierarchicalSphere(new Color(1f, 1f, 1f, 0.25));
                     containedSphere = new HierarchicalSphere(new Color(1f, 0f, 1f, 0.25), container: sphere);
                 }
            
                 [DrawGizmo(GizmoType.Selected|GizmoType.Active)]
                 void DrawGizmo(MyComponent comp, GizmoType gizmoType)
                 {
                     sphere.center = comp.transform.position;
                     sphere.size = comp.transform.scale;
                     sphere.DrawHull(gizmoType == GizmoType.Selected);
            
                     containedSphere.center = comp.innerposition;
                     containedSphere.size = comp.innerScale;
                     containedSphere.DrawHull(gizmoType == GizmoType.Selected);
                 }
            
                 void OnSceneGUI()
                 {
                     EditorGUI.BeginChangeCheck();
            
                     //container sphere must be also set for contained sphere for clamping
                     sphere.center = comp.transform.position;
                     sphere.size = comp.transform.scale;
                     sphere.DrawHandle();
            
                     containedSphere.center = comp.innerposition;
                     containedSphere.size = comp.innerScale;
                     containedSphere.DrawHandle();
            
                     if(EditorGUI.EndChangeCheck())
                     {
                         comp.innerposition = containedSphere.center;
                         comp.innersize = containedSphere.size;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalSphere.center">
            <summary>The position of the center of the box in Handle.matrix space.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalSphere.radius">
            <summary>The size of the box in Handle.matrix space.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.HierarchicalSphere.baseColor">
            <summary>The baseColor used to fill hull. All other colors are deduced from it.</summary>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalSphere.#ctor(UnityEngine.Color,UnityEditor.Rendering.HierarchicalSphere)">
            <summary>Constructor. Used to setup colors and also the container if any.</summary>
            <param name="baseColor">The color of filling. All other colors are deduced from it.</param>
            <param name="parent">The HierarchicalSphere containing this sphere. If null, the sphere will not be limited in size.</param>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalSphere.DrawHull(System.Boolean)">
            <summary>Draw the hull which means the boxes without the handles</summary>
            <param name="filled">If true, also draw the surface of the hull's sphere</param>
        </member>
        <member name="M:UnityEditor.Rendering.HierarchicalSphere.DrawHandle">
            <summary>Draw the manipulable handles</summary>
        </member>
        <member name="T:UnityEditor.Rendering.EditorPrefBoolFlags`1">
            <summary>Bool flag saved in EditorPref</summary>
            <typeparam name="T">Underlying enum type</typeparam>
        </member>
        <member name="P:UnityEditor.Rendering.EditorPrefBoolFlags`1.value">
            <summary>The value as the underlying enum type used</summary>
        </member>
        <member name="P:UnityEditor.Rendering.EditorPrefBoolFlags`1.rawValue">
            <summary>The raw value</summary>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="key">Name of the Key in EditorPrefs to save the value</param>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.Equals(`0)">
            <summary>Test if saved value is equal to the one given</summary>
            <param name="other">Given value</param>
            <returns>True if value are the same</returns>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.Equals(UnityEditor.Rendering.EditorPrefBoolFlags{`0})">
            <summary>Test if this EditorPrefBoolFlags is the same than the given one</summary>
            <param name="other">Given EditorPrefBoolFlags</param>
            <returns>True if they use the same value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.HasFlag(`0)">
            <summary>Test if the given flags are set</summary>
            <param name="v">Given flags</param>
            <returns>True: all the given flags are set</returns>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.SetFlag(`0,System.Boolean)">
            <summary>Set or unset the flags</summary>
            <param name="f">Flags to edit</param>
            <param name="v">Boolean value to set to the given flags</param>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.op_Explicit(UnityEditor.Rendering.EditorPrefBoolFlags{`0})~`0">
            <summary>Explicit conversion operator to the underlying type</summary>
            <param name="v">The EditorPrefBoolFlags to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.op_BitwiseOr(UnityEditor.Rendering.EditorPrefBoolFlags{`0},`0)">
            <summary>Or operator between a EditorPrefBoolFlags and a value</summary>
            <param name="l">The EditorPrefBoolFlags</param>
            <param name="r">The value</param>
            <returns>A EditorPrefBoolFlags with OR operator performed</returns>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.op_BitwiseAnd(UnityEditor.Rendering.EditorPrefBoolFlags{`0},`0)">
            <summary>And operator between a EditorPrefBoolFlags and a value</summary>
            <param name="l">The EditorPrefBoolFlags</param>
            <param name="r">The value</param>
            <returns>A EditorPrefBoolFlags with AND operator performed</returns>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBoolFlags`1.op_ExclusiveOr(UnityEditor.Rendering.EditorPrefBoolFlags{`0},`0)">
            <summary>Xor operator between a EditorPrefBoolFlags and a value</summary>
            <param name="l">The EditorPrefBoolFlags</param>
            <param name="r">The value</param>
            <returns>A EditorPrefBoolFlags with XOR operator performed</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugState">
            <summary>
            Serialized state of a Debug Item.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.DebugState.m_QueryPath">
            <summary>
            Path of the Debug Item.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.DebugState.queryPath">
            <summary>
            Path of the Debug Item.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugState.GetValue">
            <summary>
            Returns the value of the Debug Item.
            </summary>
            <returns>Value of the Debug Item.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugState.SetValue(System.Object,UnityEngine.Rendering.DebugUI.IValueField)">
            <summary>
            Set the value of the Debug Item.
            </summary>
            <param name="value">Input value.</param>
            <param name="field">Debug Item field.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugState.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugState`1">
            <summary>
            Generic serialized state of a Debug Item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UnityEditor.Rendering.DebugState`1.m_Value">
            <summary>
            Value of the Debug Item.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.DebugState`1.value">
            <summary>
            Value of the Debug Item
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugState`1.GetValue">
            <summary>
            Returns the value of the Debug Item.
            </summary>
            <returns>Value of the Debug Item.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugState`1.SetValue(System.Object,UnityEngine.Rendering.DebugUI.IValueField)">
            <summary>
            Set the value of the Debug Item.
            </summary>
            <param name="value">Input value.</param>
            <param name="field">Debug Item field.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugState`1.GetHashCode">
            <summary>
            Returns the hash code of the Debug Item.
            </summary>
            <returns>Hash code of the Debug Item</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateAttribute">
            <summary>
            Attribute specifying which types should be save as this Debug State.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugStateAttribute.#ctor(System.Type[])">
            <summary>
            Debug State Attribute constructor
            </summary>
            <param name="types">List of types of the Debug State.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateBool">
            <summary>
            Boolean Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateEnum">
            <summary>
            Enums Debug State.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugStateEnum.SetValue(System.Object,UnityEngine.Rendering.DebugUI.IValueField)">
            <summary>
            Set the value of the Debug Item.
            </summary>
            <param name="value">Input value.</param>
            <param name="field">Debug Item field.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugStateEnum.OnEnable">
            <summary>
            On Enable method from <see cref="T:UnityEngine.ScriptableObject"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateInt">
            <summary>
            Integer Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateObject">
            <summary>
            Object Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateFlags">
            <summary>
            Flags Debug State.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.DebugStateFlags.value">
            <summary>
            Value of the Debug Item
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugStateFlags.SetValue(System.Object,UnityEngine.Rendering.DebugUI.IValueField)">
            <summary>
            Set the value of the Debug Item.
            </summary>
            <param name="value">Input value.</param>
            <param name="field">Debug Item field.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateUInt">
            <summary>
            Unsigned Integer Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateFloat">
            <summary>
            Float Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateColor">
            <summary>
            Color Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateVector2">
            <summary>
            Vector2 Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateVector3">
            <summary>
            Vector3 Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugStateVector4">
            <summary>
            Vector4 Debug State.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.SetAdditionalPropertiesVisibilityAttribute">
            <summary>
            Callback method that will be called when the Global Preferences for Additional Properties is changed
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.FilterWindow">
            <summary>
            An utility window used to list and filter a set of elements, as seen in the inspector when
            clicking on the "Add Component" button.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.FilterWindow.IProvider">
            <summary>
            The interface to implement to populate the list or tree and traverse its elements.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.FilterWindow.IProvider.position">
            <summary>
            The position of the window on screen.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.IProvider.CreateComponentTree(System.Collections.Generic.List{UnityEditor.Rendering.FilterWindow.Element})">
            <summary>
            Implement this method to populate the list or tree of elements.
            </summary>
            <param name="tree">The list to populate.</param>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.IProvider.GoToChild(UnityEditor.Rendering.FilterWindow.Element,System.Boolean)">
            <summary>
            Implement this method to define the behavior when an item is selected.
            </summary>
            <param name="element">The selected element.</param>
            <param name="addIfComponent"></param>
            <returns><c>true</c> if the window should close, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:UnityEditor.Rendering.FilterWindow.DefaultWidth">
            <summary>
            The default width for the window.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.FilterWindow.DefaultHeight">
            <summary>
            The default height for the window.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.FilterWindow.Element">
            <summary>
            An element from the filtered list or tree.
            </summary>
            <seealso cref="T:UnityEditor.Rendering.FilterWindow.GroupElement"/>
        </member>
        <member name="F:UnityEditor.Rendering.FilterWindow.Element.level">
            <summary>
            The current hierarchical level in the tree.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.FilterWindow.Element.content">
            <summary>
            The displayed content for the element.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.FilterWindow.Element.name">
            <summary>
            The name of the element as displayed in the UI.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.Element.CompareTo(System.Object)">
            <summary>
            Compares this element to another object.
            </summary>
            <param name="o">The object to compare to.</param>
            <returns><c>true</c> if both objects are the same, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.FilterWindow.GroupElement">
            <summary>
            A meta element used to group several elements in the list or tree.
            </summary>
            <seealso cref="T:UnityEditor.Rendering.FilterWindow.Element"/>
        </member>
        <member name="F:UnityEditor.Rendering.FilterWindow.GroupElement.scroll">
            <summary>
            The current scroll position in the UI.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.FilterWindow.GroupElement.selectedIndex">
            <summary>
            The current selected index in the group.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.FilterWindow.GroupElement.WantsFocus">
            <summary>
            Requests focus for the element.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.FilterWindow.GroupElement.ShouldDisable">
            <summary>
            Returns <c>true</c> if this group and its content should appear disabled in the UI.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.GroupElement.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new <see cref="T:UnityEditor.Rendering.FilterWindow.GroupElement"/>
            </summary>
            <param name="level">The group level.</param>
            <param name="name">The display name for the group.</param>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.GroupElement.HandleKeyboard(UnityEngine.Event,UnityEditor.Rendering.FilterWindow,System.Action)">
            <summary>
            Handles custom keyboard events on this group.
            </summary>
            <param name="evt">The event.</param>
            <param name="window">A reference to the parent <see cref="T:UnityEditor.Rendering.FilterWindow"/>.</param>
            <param name="goToParent">The action to execute if a "back" action is triggered in the UI.</param>
            <returns><c>true</c> if the builtin events should execute for this group, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.GroupElement.OnGUI(UnityEditor.Rendering.FilterWindow)">
            <summary>
            A custom drawing method for this group.
            </summary>
            <param name="sFilterWindow">A reference to the parent <see cref="T:UnityEditor.Rendering.FilterWindow"/>.</param>
            <returns><c>true</c> if the builtin drawing function should execute for this group,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.FilterWindow.Show(UnityEngine.Vector2,UnityEditor.Rendering.FilterWindow.IProvider)">
            <summary>
            Shows the filter window using the given provider.
            </summary>
            <param name="position">The position to show the filter window at.</param>
            <param name="provider">The provider of items for the filter window.</param>
            <returns>Returns true if the window is shown, false otherwise.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderStrippingReportScope">
            <summary>
            This class works as an scope of the <see cref="T:UnityEditor.Rendering.ShaderStrippingReport"/> hooking into the
            <see cref="T:UnityEditor.Build.IPreprocessBuildWithReport"/> that are being called at the begin of the build and
            to <see cref="T:UnityEditor.Build.IPostprocessBuildWithReport"/> that are the ones called after the build is finished
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderStrippingReportEmpty">
            <summary>
            This class is instantiated as the reporter if the logging and exporting is disabled
            this avoid tracking all the variants, allocating memory, and doing work that is not need
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderStrippingReportLogger">
            <summary>
            This class is instantiated as the reporter if the reporter is null because we are building asset bundles
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderStrippingReport">
            <summary>
            Class to gather all the information about stripping in SRP packages
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESLightType">
            <summary>
            Various possible type for IES, in HDRP for Rectangular light we use spot version
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESLightType.Point">
            <summary>
            Point for the IES
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESLightType.Spot">
            <summary>
            Spot for IES (compatible with Area Light)
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESResolution">
            <summary>
            Possible values for the IES Size.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution16">
            <summary>Size 16</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution32">
            <summary>Size 32</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution64">
            <summary>Size 64</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution128">
            <summary>Size 128</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution256">
            <summary>Size 256</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution512">
            <summary>Size 512</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution1024">
            <summary>Size 1024</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution2048">
            <summary>Size 2048</summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESResolution.IESResolution4096">
            <summary>Size 4096</summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESMetaData">
            <summary>
            Common class to store metadata of an IES file
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.FileFormatVersion">
            <summary>
            Version of the IES File
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.IESPhotometricType">
            <summary>
            Total light intensity (in Lumens) stored on the file, usage of it is optional (through the prefab subasset inside the IESObject)
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.IESMaximumIntensity">
            <summary>
            IES Max Intensity depends on the various information stored on the IES file
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.IESMaximumIntensityUnit">
            <summary>
            Unit used to measure the IESMaximumIntensity
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.Manufacturer">
            <summary>
            Manufacturer of the current IES file
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.LuminaireCatalogNumber">
            <summary>
            Luninaire Catalog Number
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.LuminaireDescription">
            <summary>
            Luminaire Description
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.LampCatalogNumber">
            <summary>
            Lamp Catalog Number
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.LampDescription">
            <summary>
            Lamp Description
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.PrefabLightType">
            <summary>
            Prefab Light Type (optional to generate the texture used by the renderer)
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.SpotAngle">
            <summary>
            Spot angle used for the Gnomonic projection of the IES. This parameter will be responsible of the pixel footprint in the 2D Texture
            https://en.wikipedia.org/wiki/Gnomonic_projection
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.iesSize">
            <summary>
            IES Size of the texture used (same parameter for Point and Spot)
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.ApplyLightAttenuation">
            <summary>
            Enable attenuation used for Spot recommanded to be true, particulary with large angle of "SpotAngle" (cf. Gnomonic Projection)
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.UseIESMaximumIntensity">
            <summary>
            Enable max intensity for the texture generation
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.CookieCompression">
            <summary>
            Compression used to generate the texture (CompressedHQ by default (BC7))
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESMetaData.LightAimAxisRotation">
            <summary>
            Internally we use 2D projection, we have to choose one axis to project the IES propertly
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IESMetaData.GetHashCode">
            <summary>
            Get Hash describing an unique IES
            </summary>
            <returns>The Hash of the IES Object</returns>
        </member>
        <member name="T:UnityEditor.Rendering.IESObject">
            <summary>
            IESObject manipulated internally (in the UI)
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESObject.iesMetaData">
            <summary>
            Metadata of the IES file
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.ISerializedCamera">
            <summary>
            Interface to be implemented by each pipeline to hold the <see cref="T:UnityEditor.SerializedObject"/> for a Camera Editor
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.serializedObject">
            <summary>The camera serialized</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.serializedAdditionalDataObject">
            <summary>The additional camera data serialized</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.baseCameraSettings">
            <summary>The base camera settings</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.projectionMatrixMode">
            <summary>The projection matrix mode</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.dithering">
            <summary>Dithering property</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.stopNaNs">
            <summary>Stop NaNs property</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.allowDynamicResolution">
            <summary>Allow Dynamic resolution property</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.volumeLayerMask">
            <summary>Volume layer mask property</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.clearDepth">
            <summary>Clear Depth property property</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedCamera.antialiasing">
            <summary>Anti aliasing property</summary>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedCamera.Update">
            <summary>Method that updates the <see cref="T:UnityEditor.SerializedObject"/> of the Camera and the Additional Camera Data</summary>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedCamera.Apply">
            <summary>Applies the modified properties to the <see cref="T:UnityEditor.SerializedObject"/> of the Camera and the Additional Camera Data</summary>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedCamera.Refresh">
            <summary>Refreshes the <see cref="T:UnityEditor.SerializedProperty"/> of the <see cref="T:UnityEditor.SerializedObject"/> of the Camera and the Additional Camera Data</summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor">
            <summary>
            Common class for IES Importer Editor (currently implemented only on HDRP)
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESImporterEditor.m_LightAimAxisRotationProp">
            <summary>
            Property to the aim axis rotation for projection
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESImporterEditor.m_PreviewRenderUtility">
            <summary>
            Object used to setup Preview renderer
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor.LayoutRenderPipelineUseIesMaximumIntensity">
            <summary>
            Delegate prototype sent by the specialization of the IESImporterEditor per Render Pipeline
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewCamera">
            <summary>
            Delegate prototype sent by the specialization of the IESImporterEditor per Render Pipeline
            </summary>
            <param name="camera">Current camera</param>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewLight">
            <summary>
            Delegate prototype sent by the specialization of the IESImporterEditor per Render Pipeline
            </summary>
            <param name="light">Light will be setuped, specialization for a given SRP</param>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewWallRenderer">
            <summary>
            Delegate prototype sent by the specialization of the IESImporterEditor per Render Pipeline
            </summary>
            <param name="wallRenderer">Setup a wall for the preview</param>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewFloorRenderer">
            <summary>
            Delegate prototype sent by the specialization of the IESImporterEditor per Render Pipeline
            </summary>
            <param name="floorRenderer">Setup a floor for the preview</param>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewLightIntensity">
            <summary>
            Delegate prototype sent by the specialization of the IESImporterEditor per Render Pipeline
            </summary>
            <param name="light">Light used to setup the IES</param>
            <param name="useIESMaximumIntensityProp">Serialized property to the "useIESMaximumIntensity" property</param>
            <param name="iesMaximumIntensityUnitProp">Serialized property to the "iesMaximumIntensityUnit" property</param>
            <param name="iesMaximumIntensityProp">Serialized property to the "iesMaximumIntensity" property</param>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonOnEnable(UnityEditor.SerializedProperty)">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
            <param name="serializedObject">Serialized object which can be linked to IESMetadata</param>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonOnInspectorGUI(UnityEditor.AssetImporters.ScriptedImporterEditor)">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
            <param name="scriptedImporter">The current specialized scripted importer using the common code</param>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonApply">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonHasPreviewGUI(UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewCamera,UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewLight,UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewWallRenderer,UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewFloorRenderer)">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
            <param name="setupRenderPipelinePreviewCamera">Delegate provided by the Render pipeline to setup the Preview Camera</param>
            <param name="setupRenderPipelinePreviewFloorRenderer">Delegate provided by the Render pipeline to setup the Preview Light</param>
            <param name="setupRenderPipelinePreviewLight">Delegate provided by the Render pipeline to setup the Preview Wall</param>
            <param name="setupRenderPipelinePreviewWallRenderer">Delegate provided by the Render pipeline to setup the Preview Floor</param>
            <returns>true to specified IES has a Preview</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonGetPreviewTitle">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
            <returns>The title of the Preview</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonOnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle,UnityEditor.AssetImporters.ScriptedImporter,UnityEditor.Rendering.IESImporterEditor.SetupRenderPipelinePreviewLightIntensity)">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
            <param name="background">Background of the Preview</param>
            <param name="r">Rect of the Preview</param>
            <param name="target">ScriptedImporter targeted</param>
            <param name="setupRenderPipelinePreviewLightIntensity">Delegate provided by the Rendering Pipeline to setup the Light Intensity</param>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporterEditor.CommonOnDisable">
            <summary>
            Callback called on the Implemented IESImporterEditor (currently on HDRP Only)
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IVariantStripper`2">
            <summary>
            Interface to be implemented for a type of shader that it's variants can be stripped
            </summary>
            <typeparam name="TShader">The shader <see cref="T:UnityEngine.Shader"/> or <see cref="T:UnityEngine.ComputeShader"/></typeparam>
            <typeparam name="TShaderVariant">The type of variant for the given type of shader can either be <see cref="T:UnityEditor.Rendering.ShaderSnippetData"/> or <see cref="T:System.String"/></typeparam>
        </member>
        <member name="P:UnityEditor.Rendering.IVariantStripper`2.active">
            <summary>
            Returns if the stripper is active
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IVariantStripper`2.CanRemoveVariant(`0,`1,UnityEditor.Rendering.ShaderCompilerData)">
            <summary>
            Specifies if a <see cref="!:TShader"/> variant can be stripped
            </summary>
            <param name="shader">The <see cref="!:TShader"/></param>
            <param name="shaderVariant"><see cref="!:TShaderVariant"/></param>
            <param name="shaderCompilerData">The variant</param>
            <returns>true if the variant is not used and can be stripped</returns>
        </member>
        <member name="T:UnityEditor.Rendering.IVariantStripperSkipper`2">
            <summary>
            Interface to allow an <see cref="T:UnityEditor.Rendering.IVariantStripper`2"/> to skip a shader variant for processing
            </summary>
            <typeparam name="TShader">The shader <see cref="T:UnityEngine.Shader"/> or <see cref="T:UnityEngine.ComputeShader"/></typeparam>
            <typeparam name="TShaderVariant">The type of variant for the given type of shader can either be <see cref="T:UnityEditor.Rendering.ShaderSnippetData"/> or <see cref="T:System.String"/></typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.IVariantStripperSkipper`2.SkipShader(`0,`1)">
            <summary>
            Returns if the <see cref="!:TShader"/> for the current <see cref="!:TShaderVariant"/> is skipped for stripping
            </summary>
            <param name="shader">The shader</param>
            <param name="shaderVariant">The variant</param>
            <returns>true, if the shader can be skipped</returns>
        </member>
        <member name="T:UnityEditor.Rendering.IVariantStripperScope`2">
            <summary>
            Interface to allow an <see cref="T:UnityEditor.Rendering.IVariantStripper`2"/> to have a callback before and after the processing of variants
            </summary>
            <typeparam name="TShader">The shader <see cref="T:UnityEngine.Shader"/> or <see cref="T:UnityEngine.ComputeShader"/></typeparam>
            <typeparam name="TShaderVariant">The type of variant for the given type of shader can either be <see cref="T:UnityEditor.Rendering.ShaderSnippetData"/> or <see cref="T:System.String"/></typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.IVariantStripperScope`2.BeforeShaderStripping(`0)">
            <summary>
            Callback that will be executed before parsing variants
            </summary>
            <param name="shader">The shader</param>
        </member>
        <member name="M:UnityEditor.Rendering.IVariantStripperScope`2.AfterShaderStripping(`0)">
            <summary>
            Callback that will be executed after parsing variants
            </summary>
            <param name="shader">The shader</param>
        </member>
        <member name="T:UnityEditor.Rendering.IShaderVariantStripper">
            <summary>
            Helper interface to create a <see cref="T:UnityEditor.Rendering.IVariantStripper`2"/> targeting <see cref="T:UnityEngine.Shader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IShaderVariantStripperSkipper">
            <summary>
            Helper interface to create a <see cref="T:UnityEditor.Rendering.IVariantStripperSkipper`2"/> targeting <see cref="T:UnityEngine.Shader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IShaderVariantStripperScope">
            <summary>
            Helper interface to create a <see cref="T:UnityEditor.Rendering.IVariantStripperScope`2"/> targeting <see cref="T:UnityEngine.Shader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IComputeShaderVariantStripper">
            <summary>
            Helper interface to create a <see cref="T:UnityEditor.Rendering.IVariantStripper`2"/> targeting <see cref="T:UnityEngine.ComputeShader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IComputeShaderVariantStripperSkipper">
            <summary>
            Helper interface to create a <see cref="T:UnityEditor.Rendering.IVariantStripperSkipper`2"/> targeting <see cref="T:UnityEngine.ComputeShader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IComputeShaderVariantStripperScope">
            <summary>
            Helper interface to create a <see cref="T:UnityEditor.Rendering.IVariantStripperScope`2"/> targeting <see cref="T:UnityEngine.ComputeShader"/>
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArrayUtilities">
            <summary>Serialisation of BitArray, Utility class</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.ToSerializeBitArray8(UnityEditor.SerializedProperty)">
            <summary>Convert to 8bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <returns>A SerializedBitArray8</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.TryGetSerializeBitArray8(UnityEditor.SerializedProperty,UnityEditor.Rendering.SerializedBitArray8@)">
            <summary>Try convert to 8bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <param name="serializedBitArray">Out SerializedBitArray8</param>
            <returns>True if convertion was a success</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.ToSerializeBitArray16(UnityEditor.SerializedProperty)">
            <summary>Convert to 16bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <returns>A SerializedBitArray16</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.TryGetSerializeBitArray16(UnityEditor.SerializedProperty,UnityEditor.Rendering.SerializedBitArray16@)">
            <summary>Try convert to 16bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <param name="serializedBitArray">Out SerializedBitArray16</param>
            <returns>True if convertion was a success</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.ToSerializeBitArray32(UnityEditor.SerializedProperty)">
            <summary>Convert to 32bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <returns>A SerializedBitArray32</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.TryGetSerializeBitArray32(UnityEditor.SerializedProperty,UnityEditor.Rendering.SerializedBitArray32@)">
            <summary>Try convert to 32bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <param name="serializedBitArray">Out SerializedBitArray32</param>
            <returns>True if convertion was a success</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.ToSerializeBitArray64(UnityEditor.SerializedProperty)">
            <summary>Convert to 64bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <returns>A SerializedBitArray64</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.TryGetSerializeBitArray64(UnityEditor.SerializedProperty,UnityEditor.Rendering.SerializedBitArray64@)">
            <summary>Try convert to 64bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <param name="serializedBitArray">Out SerializedBitArray64</param>
            <returns>True if convertion was a success</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.ToSerializeBitArray128(UnityEditor.SerializedProperty)">
            <summary>Convert to 128bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <returns>A SerializedBitArray128</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.TryGetSerializeBitArray128(UnityEditor.SerializedProperty,UnityEditor.Rendering.SerializedBitArray128@)">
            <summary>Try convert to 128bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <param name="serializedBitArray">Out SerializedBitArray128</param>
            <returns>True if convertion was a success</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.ToSerializeBitArray256(UnityEditor.SerializedProperty)">
            <summary>Convert to 256bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <returns>A SerializedBitArray256</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArrayUtilities.TryGetSerializeBitArray256(UnityEditor.SerializedProperty,UnityEditor.Rendering.SerializedBitArray256@)">
            <summary>Try convert to 256bit</summary>
            <param name="serializedProperty">The SerializedProperty</param>
            <param name="serializedBitArray">Out SerializedBitArray256</param>
            <returns>True if convertion was a success</returns>
        </member>
        <member name="T:UnityEditor.Rendering.ISerializedBitArray">
            <summary>interface to handle generic SerializedBitArray</summary>
        </member>
        <member name="P:UnityEditor.Rendering.ISerializedBitArray.capacity">
            <summary>Capacity of the bitarray</summary>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedBitArray.GetBitAt(System.UInt32)">
            <summary>Get the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <returns>Bit value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedBitArray.SetBitAt(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="M:UnityEditor.Rendering.ISerializedBitArray.HasBitMultipleDifferentValue(System.UInt32)">
            <summary>Does the bit at given index have multiple different values?</summary>
            <param name="bitIndex">The index</param>
            <returns>True: Multiple different value</returns>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray">
            <summary>Abstract base classe of all SerializedBitArray</summary>
        </member>
        <member name="F:UnityEditor.Rendering.SerializedBitArray.SetBitAtIndexForAllTargetsImmediate">
            <summary>Set the bit at given index</summary>
        </member>
        <member name="F:UnityEditor.Rendering.SerializedBitArray.HasMultipleDifferentValuesBitwise">
            <summary>Has multiple differente value bitwise</summary>
        </member>
        <member name="F:UnityEditor.Rendering.SerializedBitArray.m_SerializedProperty">
            <summary>The underlying serialized property</summary>
        </member>
        <member name="P:UnityEditor.Rendering.SerializedBitArray.capacity">
            <summary>Capacity of the bitarray</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.GetOrInitializeSerializedProperties">
            <summary>Initialisation of dedicated SerializedPropertiws</summary>
            <returns>Arrays of SerializedProperty</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.HasBitMultipleDifferentValue(System.UInt32)">
            <summary>Does the bit at given index have multiple different values?</summary>
            <param name="bitIndex">The index</param>
            <returns>True: Multiple different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.HasBitMultipleDifferentValue_For64Bits(System.String,UnityEditor.SerializedProperty,System.UInt32)">
            <summary>
            Safety: serializedProperty must match its path
            </summary>
            <param name="propertyPath">serializedProperty must match its path</param>
            <param name="serializedProperty">serializedProperty must match its path</param>
            <param name="bitIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.GetBitAt(System.UInt32)">
            <summary>Get the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <returns>Bit value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.SetBitAt(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.ResyncSerialization">
            <summary>Sync again every serializedProperty</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray.Update">
            <summary>Sync the reflected value with target value change</summary>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray8">
            <summary>SerializedBitArray spetialized for 8bit capacity</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray8.#ctor(UnityEditor.SerializedProperty)">
            <summary>Constructor</summary>
            <param name="serializedProperty">The SerializedProperty</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray8.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray8.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray8.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray16">
            <summary>SerializedBitArray spetialized for 16bit capacity</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray16.#ctor(UnityEditor.SerializedProperty)">
            <summary>Constructor</summary>
            <param name="serializedProperty">The SerializedProperty</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray16.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray16.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray16.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray32">
            <summary>SerializedBitArray spetialized for 32bit capacity</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray32.#ctor(UnityEditor.SerializedProperty)">
            <summary>Constructor</summary>
            <param name="serializedProperty">The SerializedProperty</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray32.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray32.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray32.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray64">
            <summary>SerializedBitArray spetialized for 64bit capacity</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray64.#ctor(UnityEditor.SerializedProperty)">
            <summary>Constructor</summary>
            <param name="serializedProperty">The SerializedProperty</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray64.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray64.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray64.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray128">
            <summary>SerializedBitArray spetialized for 128bit capacity</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray128.#ctor(UnityEditor.SerializedProperty)">
            <summary>Constructor</summary>
            <param name="serializedProperty">The SerializedProperty</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray128.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray128.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray128.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedBitArray256">
            <summary>SerializedBitArray spetialized for 256bit capacity</summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray256.#ctor(UnityEditor.SerializedProperty)">
            <summary>Constructor</summary>
            <param name="serializedProperty">The SerializedProperty</param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray256.HasBitMultipleDifferentValue_Internal(System.UInt32)">
            <summary>Say if the properties have differente values</summary>
            <param name="bitIndex">The index</param>
            <returns>True: properties have different value</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray256.GetBitAt_Internal(System.UInt32)">
            <summary>Get the value at index</summary>
            <param name="bitIndex">The index</param>
            <returns>Value at the index</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedBitArray256.SetBitAt_Internal(System.UInt32,System.Boolean)">
            <summary>Set the bit at given index</summary>
            <param name="bitIndex">The index</param>
            <param name="value">The value</param>
        </member>
        <member name="T:UnityEditor.Rendering.ExpandedState`2">
            <summary>Used in editor drawer part to store the state of expendable areas.</summary>
            <typeparam name="TState">An enum to use to describe the state.</typeparam>
            <typeparam name="TTarget">A type given to automatically compute the key.</typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.ExpandedState`2.#ctor(`0,System.String)">
            <summary>
                Constructor will create the key to store in the EditorPref the state given generic type passed.
                The key will be formated as such prefix:TTarget:TState:UI_State.
            </summary>
            <param name="defaultValue">If key did not exist, it will be created with this value for initialization.</param>
            <param name="prefix">[Optional] Prefix scope of the key (Default is CoreRP)</param>
        </member>
        <member name="P:UnityEditor.Rendering.ExpandedState`2.Item(`0)">
            <summary>Get or set the state given the mask.</summary>
            <param name="mask">The filtering mask</param>
            <returns>True: All flagged area are expended</returns>
        </member>
        <member name="M:UnityEditor.Rendering.ExpandedState`2.GetExpandedAreas(`0)">
            <summary>Accessor to the expended state of this specific mask.</summary>
            <param name="mask">The filtering mask</param>
            <returns>True: All flagged area are expended</returns>
        </member>
        <member name="M:UnityEditor.Rendering.ExpandedState`2.SetExpandedAreas(`0,System.Boolean)">
            <summary>Setter to the expended state.</summary>
            <param name="mask">The filtering mask</param>
            <param name="value">The expended state to set</param>
        </member>
        <member name="M:UnityEditor.Rendering.ExpandedState`2.ExpandAll">
            <summary> Utility to set all states to true </summary>
        </member>
        <member name="M:UnityEditor.Rendering.ExpandedState`2.CollapseAll">
            <summary> Utility to set all states to false </summary>
        </member>
        <member name="T:UnityEditor.Rendering.IESEngine">
            <summary>
            IES class which is common for the Importers
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.IESEngine.TextureGenerationType">
            <summary>
            setter for the Texture generation Type
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IESEngine.ReadFile(System.String)">
            <summary>
            Method to read the IES File
            </summary>
            <param name="iesFilePath">Path to the IES file in the Disk.</param>
            <returns>An error message or warning otherwise null if no error</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESEngine.GetKeywordValue(System.String)">
            <summary>
            Check a keyword
            </summary>
            <param name="keyword">A keyword to check if exist.</param>
            <returns>A Keyword if exist inside the internal Dictionary</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESEngine.GetPhotometricType">
            <summary>
            Getter (as a string) for the Photometric Type
            </summary>
            <returns>The current Photometric Type</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESEngine.GetMaximumIntensity">
            <summary>
            Get the CUrrent Max intensity
            </summary>
            <returns>A pair of the intensity follow by the used unit (candelas or lumens)</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESEngine.GenerateCubeCookie(UnityEditor.TextureImporterCompression,System.Int32)">
            <summary>
            Generated a Cube texture based on the internal PhotometricType
            </summary>
            <param name="compression">Compression parameter requestted.</param>
            <param name="textureSize">The resquested size.</param>
            <returns>A Cubemap representing this IES</returns>
        </member>
        <member name="M:UnityEditor.Rendering.IESEngine.Generate2DCookie(UnityEditor.TextureImporterCompression,System.Single,System.Int32,System.Boolean)">
            <summary>
            Generating a 2D Texture of this cookie, using a Gnomonic projection of the bottom of the IES
            </summary>
            <param name="compression">Compression parameter requestted.</param>
            <param name="coneAngle">Cone angle used to performe the Gnomonic projection.</param>
            <param name="textureSize">The resquested size.</param>
            <param name="applyLightAttenuation">Bool to enable or not the Light Attenuation based on the squared distance.</param>
            <returns>A Generated 2D texture doing the projection of the IES using the Gnomonic projection of the bottom half hemisphere with the given 'cone angle'</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CSharpToHLSL.GenerateAll">
            <summary>
                Generate all shader code from <see cref="T:UnityEngine.Rendering.GenerateHLSL" /> attribute.
            </summary>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CSharpToHLSL.GenerateAsync(System.String,System.String,System.Collections.Generic.List{UnityEditor.Rendering.ShaderTypeGenerator})">
            <summary>
                Generate all shader code from <paramref name="generators" /> into <paramref name="targetFilename" />.
            </summary>
            <param name="targetFilename">Path of the file to generate.</param>
            <param name="targetCustomFilename">Path of the custom file to include. (If it exists)</param>
            <param name="generators">Generators to execute.</param>
            <returns>Awaitable task.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedPropertyExtension">
            <summary>
            Extensions for <see cref="T:UnityEditor.SerializedProperty"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedPropertyExtension.IsTargetAlive(UnityEditor.SerializedProperty)">
            <summary>
            Checks if the property target is alive
            </summary>
            <param name="property">The <see cref="T:UnityEditor.SerializedProperty"/> to check </param>
            <returns>true, if the property is not null</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedPropertyExtension.GetEnumValue``1(UnityEditor.SerializedProperty)">
            <summary>
            Helper to get an enum value from a SerializedProperty.
            This handle case where index do not correspond to enum value.
            </summary>
            <typeparam name="T">A valid <see cref="T:System.Enum"/></typeparam>
            <param name="property">The <see cref="T:UnityEditor.SerializedProperty"/></param>
            <returns>The <see cref="T:System.Enum"/> value</returns>
            <code>
            <example>
            enum MyEnum
            {
                A = 2,
                B = 4,
            }
            public class MyObject : MonoBehavior
            {
                public MyEnum theEnum = MyEnum.A;
            }
            [CustomEditor(typeof(MyObject))]
            class MyObjectEditor : Editor
            {
                public override void OnInspectorGUI()
                {
                    Debug.Log($"By enumValueIndex: {(MyEnum)serializedObject.FindProperty("theEnum").enumValueIndex}");         //write the value (MyEnum)(0)
                    Debug.Log($"By GetEnumValue: {(MyEnum)serializedObject.FindProperty("theEnum").GetEnumValue&lt;MyEnum&gt;()}");   //write the value MyEnum.A
                }
            }
            </example>
            </code>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedPropertyExtension.GetEnumName``1(UnityEditor.SerializedProperty)">
            <summary>
            Helper to get an enum name from a SerializedProperty
            </summary>
            <typeparam name="T">A valid <see cref="T:System.Enum"/></typeparam>
            <param name="property">The <see cref="T:UnityEditor.SerializedProperty"/></param>
            <returns>The string containing the name of the enum</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedPropertyExtension.SetEnumValue``1(UnityEditor.SerializedProperty,``0)">
            <summary>
            Helper to set an enum value to a SerializedProperty
            </summary>
            <typeparam name="T">A valid <see cref="T:System.Enum"/></typeparam>
            <param name="property">The <see cref="T:UnityEditor.SerializedProperty"/></param>
            <param name="value">The <see cref="T:System.Enum"/></param>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedPropertyExtension.GetInline``1(UnityEditor.SerializedProperty)">
             <summary>
             Get the value of a <see cref="T:UnityEditor.SerializedProperty"/>.
            
             This function will be inlined by the compiler.
             Caution: The case of Enum is not handled here.
             </summary>
             <typeparam name="T">
             The type of the value to get.
            
             It is expected to be a supported type by the <see cref="T:UnityEditor.SerializedProperty"/>.
             </typeparam>
             <param name="serializedProperty">The property to get.</param>
             <returns>The value of the property.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedPropertyExtension.SetInline``1(UnityEditor.SerializedProperty,``0)">
             <summary>
             Set the value of a <see cref="T:UnityEditor.SerializedProperty"/>.
            
             This function will be inlined by the compiler.
             Caution: The case of Enum is not handled here.
             </summary>
             <typeparam name="T">
             The type of the value to set.
            
             It is expected to be a supported type by the <see cref="T:UnityEditor.SerializedProperty"/>.
             </typeparam>
             <param name="serializedProperty">The property to set.</param>
             <param name="value">The value to set.</param>
        </member>
        <member name="T:UnityEditor.Rendering.StringExtensions">
            <summary>
            Set of utility functions with <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.StringExtensions.ReplaceInvalidFileNameCharacters(System.String,System.String)">
            <summary>
            Replaces invalid characters for a filename or a directory with a given optional replacemenet string
            </summary>
            <param name="input">The input filename or directory</param>
            <param name="replacement">The replacement</param>
            <returns>The string with the invalid characters replaced</returns>
        </member>
        <member name="T:UnityEditor.Rendering.SerializedDataParameter">
            <summary>
            A serialization wrapper for <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.SerializedDataParameter.overrideState">
            <summary>
            The serialized property for <see cref="P:UnityEngine.Rendering.VolumeParameter.overrideState"/>.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.SerializedDataParameter.value">
            <summary>
            The serialized property for <see cref="P:UnityEngine.Rendering.VolumeParameter`1.value"/>
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.SerializedDataParameter.attributes">
            <summary>
            A pre-fetched list of all the attributes applied on the <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.SerializedDataParameter.referenceType">
            <summary>
            The actual type of the serialized <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.SerializedDataParameter.displayName">
            <summary>
            The generated display name of the <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/> for the inspector.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedDataParameter.GetAttribute``1">
            <summary>
            Gets and casts an attribute applied on the base <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.Rendering.SerializedDataParameter.GetObjectRef``1">
            <summary>
            Gets and casts the underlying reference of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to cast to</typeparam>
            <returns>The reference to the serialized <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/> type</returns>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialHeaderScope">
            <summary>
            Create a toggleable header for material UI, must be used within a scope.
            <example>Example:
            <code>
            void OnGUI()
            {
                using (var header = new MaterialHeaderScope(text, ExpandBit, editor))
                {
                    if (header.expanded)
                        EditorGUILayout.LabelField("Hello World !");
                }
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.MaterialHeaderScope.expanded">
            <summary>Indicates whether the header is expanded or not. Is true if the header is expanded, false otherwise.</summary>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialHeaderScope.#ctor(UnityEngine.GUIContent,System.UInt32,UnityEditor.MaterialEditor,System.Boolean,System.Boolean,System.UInt32,System.String)">
            <summary>
            Creates a material header scope to display the foldout in the material UI.
            </summary>
            <param name="title">GUI Content of the header.</param>
            <param name="bitExpanded">Bit index which specifies the state of the header (whether it is open or collapsed) inside Editor Prefs.</param>
            <param name="materialEditor">The current material editor.</param>
            <param name="spaceAtEnd">Set this to true to make the block include space at the bottom of its UI. Set to false to not include any space.</param>
            <param name="subHeader">Set to true to make this into a sub-header. This affects the style of the header. Set to false to make this use the standard style.</param>
            <param name="defaultExpandedState">The default state if the header is not present</param>
            <param name="documentationURL">[optional] Documentation page</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialHeaderScope.#ctor(System.String,System.UInt32,UnityEditor.MaterialEditor,System.Boolean,System.Boolean)">
            <summary>
            Creates a material header scope to display the foldout in the material UI.
            </summary>
            <param name="title">Title of the header.</param>
            <param name="bitExpanded">Bit index which specifies the state of the header (whether it is open or collapsed) inside Editor Prefs.</param>
            <param name="materialEditor">The current material editor.</param>
            <param name="spaceAtEnd">Set this to true to make the block include space at the bottom of its UI. Set to false to not include any space.</param>
            <param name="subHeader">Set to true to make this into a sub-header. This affects the style of the header. Set to false to make this use the standard style.</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialHeaderScope.System#IDisposable#Dispose">
            <summary>Disposes of the material scope header and cleans up any resources it used.</summary>
        </member>
        <member name="T:UnityEditor.Rendering.RemoveAdditionalDataUtils">
            <summary>
            Utilities to remove <see cref="T:UnityEngine.MonoBehaviour"/> implementing <see cref="T:UnityEngine.Rendering.IAdditionalData"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.RemoveAdditionalDataUtils.RemoveAdditionalData(UnityEditor.MenuCommand,System.Boolean)">
            <summary>
            Removes a <see cref="T:UnityEngine.Rendering.IAdditionalData"/> and it's components defined by <see cref="T:UnityEngine.RequireComponent"/>
            </summary>
            <param name="command">The command that is executing the removal</param>
            <param name="promptDisplay">If the command must prompt a display to get user confirmation</param>
            <exception cref="T:System.Exception">If the given <see cref="T:UnityEngine.MonoBehaviour"/> is not an <see cref="T:UnityEngine.Rendering.IAdditionalData"/></exception>
        </member>
        <member name="T:UnityEditor.Rendering.TemperatureSlider">
            <summary>
            Formats the provided descriptor into a temperature unit slider with contextual slider markers, tooltips, and icons.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSlider.PrepareExponentialConstraints(System.Single,System.Single,System.Single)">
            <summary>
            Exponential slider modeled to set a f(0.5) value.
            ref: https://stackoverflow.com/a/17102320
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSlider.#ctor(UnityEditor.Rendering.LightUnitSliderUIDescriptor)">
            <summary>
            Constructs the temperature slider
            </summary>
            <param name="descriptor">The descriptor</param>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSlider.Setup(UnityEditor.LightEditor.Settings)">
            <summary>
            Setups the light editor
            </summary>
            <param name="settings">The light editor from the light</param>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSlider.SetValueToPreset(UnityEditor.SerializedProperty,UnityEditor.Rendering.LightUnitSliderUIRange)">
            <summary>
            The serialized property for color temperature is stored in the build-in light editor, and we need to use this object to apply the update.
            </summary>
            <param name="value">The value to update</param>
            <param name="preset">The preset range</param>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSlider.DoSlider(UnityEngine.Rect,System.Single@,UnityEngine.Vector2)">
            <summary>
            Draws the slider
            </summary>
            <param name="rect">The <see cref="T:UnityEngine.Rect"/> to draw the slider.</param>
            <param name="value">The current value, and also returns the modified value.</param>
            <param name="sliderRange">The ranges of the slider.</param>
        </member>
        <member name="T:UnityEditor.Rendering.TemperatureSliderUIDrawer">
            <summary>
            Helper to draw a temperature slider on the inspector
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSliderUIDrawer.Draw(UnityEditor.LightEditor.Settings,UnityEditor.SerializedObject,UnityEditor.SerializedProperty,UnityEngine.Rect)">
            <summary>
            Draws a temperature slider
            </summary>
            <param name="settings">The light settings</param>
            <param name="serializedObject">The serialized object</param>
            <param name="value">The serialized property</param>
            <param name="rect">The rect where the slider will be drawn</param>
        </member>
        <member name="M:UnityEditor.Rendering.TemperatureSliderUIDrawer.ClampValue(UnityEditor.SerializedProperty)">
            <summary>
            Clamp to the authorized range of the temperature slider
            </summary>
            <param name="value">The serialized property</param>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeComponentEditorAttribute">
            <summary>
            This attributes tells a <see cref="T:UnityEditor.Rendering.VolumeComponentEditor"/> class which type of
            <see cref="!:VolumeComponent"/> it's an editor for.
            When you make a custom editor for a component, you need put this attribute on the editor
            class.
            </summary>
            <seealso cref="T:UnityEditor.Rendering.VolumeComponentEditor"/>
        </member>
        <member name="F:UnityEditor.Rendering.VolumeComponentEditorAttribute.componentType">
            <summary>
            A type derived from <see cref="!:VolumeComponent"/>.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentEditorAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:UnityEditor.Rendering.VolumeComponentEditorAttribute"/> instance.
            </summary>
            <param name="componentType">A type derived from <see cref="!:VolumeComponent"/></param>
        </member>
        <member name="T:UnityEditor.Rendering.IRemoveAdditionalDataContextualMenu`1">
            <summary>
            Interface that should be used with [ScriptableRenderPipelineExtension(type))] attribute to dispatch ContextualMenu calls on the different SRPs
            </summary>
            <typeparam name="T">This must be a component that require AdditionalData in your SRP</typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.IRemoveAdditionalDataContextualMenu`1.RemoveComponent(`0,System.Collections.Generic.IEnumerable{UnityEngine.Component})">
            <summary>
            Remove the given component
            </summary>
            <param name="component">The component to remove</param>
            <param name="dependencies">Dependencies.</param>
        </member>
        <member name="T:UnityEditor.Rendering.CoreLightEditorUtilities">
            <summary>Utility class for drawing light Editor gizmos</summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreLightEditorUtilities.DrawDirectionalLightGizmo(UnityEngine.Light)">
            <summary>
            Draw a gizmo for a directional light.
            </summary>
            <param name="light">The light that is used for this gizmo.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreLightEditorUtilities.DrawPointLightGizmo(UnityEngine.Light)">
            <summary>
            Draw a gizmo for a point light.
            </summary>
            <param name="light">The light that is used for this gizmo.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreLightEditorUtilities.DrawRectangleLightGizmo(UnityEngine.Light)">
            <summary>
            Draw a gizmo for an area/rectangle light.
            </summary>
            <param name="light">The light that is used for this gizmo.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreLightEditorUtilities.DrawDiscLightGizmo(UnityEngine.Light)">
            <summary>
            Draw a gizmo for a disc light.
            </summary>
            <param name="light">The light that is used for this gizmo.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreLightEditorUtilities.DrawSpotLightGizmo(UnityEngine.Light)">
            <summary>
            Draw a gizmo for a spot light.
            </summary>
            <param name="light">The light that is used for this gizmo.</param>
        </member>
        <member name="T:UnityEditor.Rendering.LightUI">
            <summary>
            Contains a set of methods to help render the inspectors of Lights across SRP's
            </summary>
            <summary>
            Contains a set of methods to help render the inspectors of Lights across SRP's
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.LightUI.DrawColor(UnityEditor.Rendering.ISerializedLight,UnityEditor.Editor)">
            <summary>
            Draws the color temperature for a serialized light
            </summary>
            <param name="serialized">The serizalized light</param>
            <param name="owner">The editor</param>
        </member>
        <member name="T:UnityEditor.Rendering.LightUI.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.generalHeader">
            <summary>Title with "General"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.shapeHeader">
            <summary>Title with "Shape"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.renderingHeader">
            <summary>Title with "Rendering"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.emissionHeader">
            <summary>Title with "Emission"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.shadowHeader">
            <summary>Title with "Shadows"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.lightLayer">
            <summary>Title with "Light Layer"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.color">
            <summary>Label with "Color"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.lightAppearance">
            <summary>Label with "Color"</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.lightAppearanceOptions">
            <summary>List of the appearance options </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.lightAppearanceUnits">
            <summary>List of the appearance units </summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.colorFilter">
            <summary>Label for color filter</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.colorTemperature">
            <summary>Label for color temperature</summary>
        </member>
        <member name="F:UnityEditor.Rendering.LightUI.Styles.unsupportedPresetPropertiesMessage">
            <summary>When using Preset of Light Component, only a subset of properties are supported.  Unsupported properties are hidden.</summary>
        </member>
        <member name="T:UnityEditor.Rendering.GizmoUtility">
            <summary>
            Set of utilities for gizmos
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.GizmoUtility.GetHandleColor(UnityEngine.Color)">
            <summary>Modifies the given <see cref="T:UnityEngine.Color"/> for handles</summary>
            <param name="baseColor">The color to be modified</param>
            <returns>a <see cref="T:UnityEngine.Color"/></returns>
        </member>
        <member name="M:UnityEditor.Rendering.GizmoUtility.GetWireframeColor(UnityEngine.Color)">
            <summary>Modifies the given <see cref="T:UnityEngine.Color"/> for wire frames</summary>
            <param name="baseColor">The color to be modified</param>
            <returns>a <see cref="T:UnityEngine.Color"/></returns>
        </member>
        <member name="M:UnityEditor.Rendering.GizmoUtility.GetWireframeColorBehindObjects(UnityEngine.Color)">
            <summary>Modifies the given <see cref="T:UnityEngine.Color"/> for wire frames behind objects</summary>
            <param name="baseColor">The color to be modified</param>
            <returns>a <see cref="T:UnityEngine.Color"/></returns>
        </member>
        <member name="T:UnityEditor.Rendering.ShaderExtensions">
            <summary>
            Collection of extensions for <see cref="T:UnityEngine.Shader"/>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.ShaderExtensions.TryGetRenderPipelineTag(UnityEngine.Shader,UnityEditor.Rendering.ShaderSnippetData,System.String@)">
            <summary>
            Tries to find the "RenderPipeline" on the shader by the given <see cref="T:UnityEditor.Rendering.ShaderSnippetData"/>
            </summary>
            <param name="shader"><see cref="T:UnityEngine.Shader"/> The shader to look for the tag</param>
            <param name="snippetData"><see cref="T:UnityEditor.Rendering.ShaderSnippetData"/></param>
            <param name="renderPipelineTag"><see cref="T:System.String"/> containing the value of the tag "RenderPipeline"</param>
            <returns>true if the tag is found and has a value</returns>
        </member>
        <member name="T:UnityEditor.Rendering.EditorPrefBool">
            <summary>
            Bool saved in EditorPref.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.EditorPrefBool.value">
            <summary>
            Value of the boolean in editor preferences.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.EditorPrefBool.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="key">Key in the editor preferences.</param>
            <param name="defaultValue">Default value of the preference.</param>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorConstants">
            <summary>Class containing constants</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorConstants.additionalPropertiesHightLightSpeed">
            <summary>Speed of additional properties highlight.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorConstants.standardHorizontalSpacing">
            <summary>Standard UI spacing</summary>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorStyles">
            <summary>Class containing style definition</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.smallTickbox">
            <summary>Style for a small checkbox</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.smallMixedTickbox">
            <summary>Style for a small checkbox in mixed state</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.miniLabelButton">
            <summary>Style for a minilabel button</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.contextMenuStyle">
            <summary>Context Menu button style</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.additionalPropertiesHighlightStyle">
            <summary>Style of a additional properties highlighted background.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.iconHelpStyle">
            <summary>Help icon style</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.sectionHeaderStyle">
            <summary>Style of Section Headers.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.subSectionHeaderStyle">
            <summary>Style of Sub-Section Headers.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.redTexture">
            <summary><see cref="T:UnityEngine.Texture2D"/> 1x1 pixel with red color</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.greenTexture">
            <summary><see cref="T:UnityEngine.Texture2D"/> 1x1 pixel with green color</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.blueTexture">
            <summary><see cref="T:UnityEngine.Texture2D"/> 1x1 pixel with blue color</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.paneOptionsIconDark">
            <summary> PaneOption icon for dark skin</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.paneOptionsIconLight">
            <summary> PaneOption icon for light skin</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.paneOptionsIcon">
            <summary> PaneOption icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.iconWarn">
            <summary> Warning icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.iconHelp">
            <summary> Help icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.iconFail">
            <summary> Fail icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.iconSuccess">
            <summary> Success icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.iconComplete">
            <summary> Complete icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.iconPending">
            <summary> Pending icon </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.globalSettingsIcon">
            <summary>RenderPipeline Global Settings icon</summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorStyles.GetMessageTypeIcon(UnityEditor.MessageType)">
            <summary>
            Gets the icon that describes the <see cref="T:UnityEditor.MessageType"/>
            </summary>
            <param name="messageType">The <see cref="T:UnityEditor.MessageType"/> to obtain the icon from</param>
            <returns>a <see cref="T:UnityEngine.Texture2D"/> with the icon for the <see cref="T:UnityEditor.MessageType"/></returns>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.backgroundColor">
            <summary>Regular background color.</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorStyles.backgroundHighlightColor">
            <summary>Hightlited background color.</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.contextMenuIcon">
            <summary>Context Menu button icon</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.resetButtonLabel">
            <summary>Reset Content</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.resetAllButtonLabel">
            <summary>Reset All content</summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreEditorStyles.empty">
            <summary>
            Empty space content in case that you want to keep the indentation but have nothing to write
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialHeaderScopeList">
            <summary>
            Collection to store <see cref="T:UnityEditor.Rendering.MaterialHeaderScopeItem"></see>
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialHeaderScopeList.#ctor(System.UInt32)">
            <summary>
            Constructor that initializes it with the default expanded state for the internal scopes
            </summary>
            <param name="defaultExpandedState">By default, everything is expanded</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialHeaderScopeList.RegisterHeaderScope``1(UnityEngine.GUIContent,``0,System.Action{UnityEngine.Material})">
            <summary>
            Registers a <see cref="T:UnityEditor.Rendering.MaterialHeaderScopeItem"/> into the list
            </summary>
            <typeparam name="TEnum">A valid <see cref="!:struct"/> and <see cref="T:System.IConvertible"/></typeparam>
            <param name="title"><see cref="T:UnityEngine.GUIContent"/> The title of the scope</param>
            <param name="expandable">The mask identifying the scope</param>
            <param name="action">The action that will be drawn if the scope is expanded</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialHeaderScopeList.DrawHeaders(UnityEditor.MaterialEditor,UnityEngine.Material)">
            <summary>
            Draws all the <see cref="T:UnityEditor.Rendering.MaterialHeaderScopeItem"/> with its information stored
            </summary>
            <param name="materialEditor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="material"><see cref="T:UnityEngine.Material"/></param>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeComponentListEditor">
             <summary>
             Unity uses this class to draw the user interface for all the settings
             contained in a <see cref="T:UnityEngine.Rendering.VolumeProfile"/> in the Inspector.
             </summary>
             <example>
             A minimal example of how to write a custom editor that displays the content of a profile
             in the inspector:
             <code>
             using UnityEngine.Rendering;
            
             [CustomEditor(typeof(VolumeProfile))]
             public class CustomVolumeProfileEditor : Editor
             {
                 VolumeComponentListEditor m_ComponentList;
            
                 void OnEnable()
                 {
                     m_ComponentList = new VolumeComponentListEditor(this);
                     m_ComponentList.Init(target as VolumeProfile, serializedObject);
                 }
            
                 void OnDisable()
                 {
                     if (m_ComponentList != null)
                         m_ComponentList.Clear();
                 }
            
                 public override void OnInspectorGUI()
                 {
                     serializedObject.Update();
                     m_ComponentList.OnGUI();
                     serializedObject.ApplyModifiedProperties();
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentListEditor.asset">
            <summary>
            A direct reference to the <see cref="T:UnityEngine.Rendering.VolumeProfile"/> this editor displays.
            </summary>
        </member>
        <member name="P:UnityEditor.Rendering.VolumeComponentListEditor.hasHiddenVolumeComponents">
            <summary>
            Obtains if all the volume components are visible
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentListEditor.#ctor(UnityEditor.Editor)">
            <summary>
            Creates a new instance of <see cref="T:UnityEditor.Rendering.VolumeComponentListEditor"/> to use in an
            existing editor.
            </summary>
            <param name="editor">A reference to the parent editor instance</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentListEditor.Init(UnityEngine.Rendering.VolumeProfile,UnityEditor.SerializedObject)">
            <summary>
            Initializes the editor.
            </summary>
            <param name="asset">A direct reference to the profile Asset.</param>
            <param name="serializedObject">An instance of the <see cref="T:UnityEditor.SerializedObject"/>
            provided by the parent editor.</param>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentListEditor.Clear">
            <summary>
            Cleans up the editor and individual <see cref="T:UnityEditor.Rendering.VolumeComponentEditor"/> instances. You
            must call this when the parent editor is disabled or destroyed.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeComponentListEditor.OnGUI">
            <summary>
            Draws the editor.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerValue">
            <summary>
            Builtin Drawer for Value Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerValue.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.Value)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The widget</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerValueTuple">
            <summary>
            Builtin Drawer for ValueTuple Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerValueTuple.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.ValueTuple)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The widget</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerProgressBarValue">
            <summary>
            Builtin Drawer for ProgressBarValue Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerProgressBarValue.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.ProgressBarValue)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The widget</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerButton">
            <summary>
            Builtin Drawer for Button Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerButton.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.Button)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The widget</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerBoolField">
            <summary>
            Builtin Drawer for Boolean Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerBoolField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.BoolField,UnityEditor.Rendering.DebugStateBool)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The value</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerHistoryBoolField">
            <summary>
            Builtin Drawer for History Boolean Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerHistoryBoolField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.HistoryBoolField,UnityEditor.Rendering.DebugStateBool)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerIntField">
            <summary>
            Builtin Drawer for Integer Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerIntField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.IntField,UnityEditor.Rendering.DebugStateInt)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerUIntField">
            <summary>
            Builtin Drawer for Unsigned Integer Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerUIntField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.UIntField,UnityEditor.Rendering.DebugStateUInt)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerFloatField">
            <summary>
            Builtin Drawer for Float Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerFloatField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.FloatField,UnityEditor.Rendering.DebugStateFloat)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerEnumField">
            <summary>
            Builtin Drawer for Enum Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerEnumField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.EnumField,UnityEditor.Rendering.DebugStateEnum)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerObjectPopupField">
            <summary>
            Builtin Drawer for Object Popup Fields Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerObjectPopupField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.ObjectPopupField,UnityEditor.Rendering.DebugStateObject)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerHistoryEnumField">
            <summary>
            Builtin Drawer for History Enum Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerHistoryEnumField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.HistoryEnumField,UnityEditor.Rendering.DebugStateEnum)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerBitField">
            <summary>
            Builtin Drawer for Bitfield Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerBitField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.BitField,UnityEditor.Rendering.DebugStateFlags)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerFoldout">
            <summary>
            Builtin Drawer for Foldout Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerFoldout.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerFoldout.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            OnGUI implementation for Foldout DebugUIDrawer.
            </summary>
            <param name="widget">DebugUI Widget.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>The state of the widget.</returns>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerFoldout.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            End implementation for Foldout DebugUIDrawer.
            </summary>
            <param name="widget">DebugUI Widget.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerColorField">
            <summary>
            Builtin Drawer for Color Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerColorField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.ColorField,UnityEditor.Rendering.DebugStateColor)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerVector2Field">
            <summary>
            Builtin Drawer for Vector2 Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerVector2Field.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.Vector2Field,UnityEditor.Rendering.DebugStateVector2)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerVector3Field">
            <summary>
            Builtin Drawer for Vector3 Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerVector3Field.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.Vector3Field,UnityEditor.Rendering.DebugStateVector3)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerVector4Field">
            <summary>
            Builtin Drawer for Vector4 Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerVector4Field.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.Vector4Field,UnityEditor.Rendering.DebugStateVector4)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerObjectField">
            <summary>
            Builtin Drawer for <see cref="T:UnityEngine.Rendering.DebugUI.ObjectField"/> items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerObjectField.DoGUI(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rendering.DebugUI.ObjectField,UnityEditor.Rendering.DebugStateObject)">
            <summary>
            Does the field of the given type
            </summary>
            <param name="rect">The rect to draw the field</param>
            <param name="label">The label for the field</param>
            <param name="field">The field</param>
            <param name="state">The state</param>
            <returns>The current value from the UI</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerObjectListField">
            <summary>
            Builtin Drawer for <see cref="T:UnityEngine.Rendering.DebugUI.ObjectListField"/> Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerObjectListField.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>Returns the state of the widget.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerMessageBox">
            <summary>
            Builtin Drawer for MessageBox Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerMessageBox.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>Returns the state of the widget.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerContainer">
            <summary>
            Builtin Drawer for Container Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerContainer.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerContainer.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing after UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerHBox">
            <summary>
            Builtin Drawer for Horizontal Box Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerHBox.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerHBox.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing after UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerVBox">
            <summary>
            Builtin Drawer for Vertical Box Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerVBox.Begin(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing before UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerVBox.End(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute processing after UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
        </member>
        <member name="T:UnityEditor.Rendering.DebugUIDrawerTable">
            <summary>
            Builtin Drawer for Table Debug Items.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.DebugUIDrawerTable.OnGUI(UnityEngine.Rendering.DebugUI.Widget,UnityEditor.Rendering.DebugState)">
            <summary>
            Implement this to execute UI rendering.
            </summary>
            <param name="widget">Widget that is going to be rendered.</param>
            <param name="state">Debug State associated with the Debug Item.</param>
            <returns>Returns the state of the widget.</returns>
        </member>
        <member name="T:UnityEditor.Rendering.CoreEditorUtils">
            <summary>Utility class for Editor</summary>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorUtils.buildTargets">
            <summary>Build targets</summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.FindProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            To use with extreme caution. It not really get the property but try to find a field with similar name
            Hence inheritance override of property is not supported.
            Also variable rename will silently break the search.
            </summary>
            <typeparam name="T">Entry type of expr</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="expr">Expression returning the value seeked</param>
            <returns>serialization path of the seeked property</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.CreateColoredTexture2D(UnityEngine.Color,System.String)">
            <summary>Creates a 1x1 <see cref="T:UnityEngine.Texture2D"/> with a plain <see cref="T:UnityEngine.Color"/></summary>
            <param name="color">The color to fill the texture</param>
            <param name="textureName">The name of the texture</param>
            <returns>a <see cref="T:UnityEngine.Texture2D"/></returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.Highlight(System.String,System.String,UnityEditor.HighlightSearchMode)">
            <summary>Highlights an element in the editor for a short period of time.</summary>
            <param name="windowTitle">The title of the window the element is inside.</param>
            <param name="text">The text to identify the element with.</param>
            <param name="mode">Optional mode to specify how to search for the element.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawFixMeBox(System.String,System.Action)">
            <summary>Draw a help box with the Fix button.</summary>
            <param name="message">The message text.</param>
            <param name="action">When the user clicks the button, Unity performs this action.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawFixMeBox(System.String,UnityEditor.MessageType,System.Action)">
            <summary>Draw a help box with the Fix button.</summary>
            <param name="message">The message text.</param>
            <param name="messageType">The type of the message.</param>
            <param name="action">When the user clicks the button, Unity performs this action.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawFixMeBox(System.String,UnityEditor.MessageType,System.String,System.Action)">
            <summary>Draw a help box with the Fix button.</summary>
            <param name="message">The message text.</param>
            <param name="messageType">The type of the message.</param>
            <param name="buttonLabel">The button text.</param>
            <param name="action">When the user clicks the button, Unity performs this action.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawFixMeBox(UnityEngine.GUIContent,System.Action)">
            <summary>Draw a help box with the Fix button.</summary>
            <param name="message">The message with icon if needed.</param>
            <param name="action">When the user clicks the button, Unity performs this action.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawFixMeBox(UnityEngine.GUIContent,System.String,System.Action)">
            <summary>Draw a help box with the Fix button.</summary>
            <param name="message">The message with icon if needed.</param>
            <param name="buttonLabel">The button text.</param>
            <param name="action">When the user clicks the button, Unity performs this action.</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawMultipleFields(System.String,UnityEditor.SerializedProperty[],UnityEngine.GUIContent[])">
            <summary>
            Draw a multiple field property
            </summary>
            <param name="label">Label of the whole</param>
            <param name="ppts">Properties</param>
            <param name="labels">Sub-labels</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawEnumPopup``1(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
            <summary>
            Draws an <see cref="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum)"/> for the given property
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="rect">The rect where the drop down will be drawn</param>
            <param name="label">The label for the drop down</param>
            <param name="serializedProperty">The <see cref="T:UnityEditor.SerializedProperty"/> to modify</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawMultipleFields(UnityEngine.GUIContent,UnityEditor.SerializedProperty[],UnityEngine.GUIContent[])">
            <summary>
            Draw a multiple field property
            </summary>
            <param name="label">Label of the whole</param>
            <param name="ppts">Properties</param>
            <param name="labels">Sub-labels</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawMultipleFields``1(UnityEngine.GUIContent,UnityEngine.GUIContent[],``0[])">
            <summary>
            Draw a multiple field property
            </summary>
            <typeparam name="T">A valid <see cref="!:struct"/></typeparam>
            <param name="label">Label of the whole</param>
            <param name="labels">The labels mapping the values</param>
            <param name="values">The values to be displayed</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawSplitter(System.Boolean)">
            <summary>Draw a splitter separator</summary>
            <param name="isBoxed">[Optional] add margin if the splitter is boxed</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeader(System.String)">
            <summary>Draw a header</summary>
            <param name="title">Title of the header</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeader(UnityEngine.GUIContent)">
            <summary>Draw a header</summary>
            <param name="title">Title of the header</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderFoldout(System.String,System.Boolean,System.Boolean,System.Func{System.Boolean},System.Action)">
            <summary> Draw a foldout header </summary>
            <param name="title"> The title of the header </param>
            <param name="state"> The state of the header </param>
            <param name="isBoxed"> [optional] is the eader contained in a box style ? </param>
            <param name="hasMoreOptions"> [optional] Delegate used to draw the right state of the advanced button. If null, no button drawn. </param>
            <param name="toggleMoreOption"> [optional] Callback call when advanced button clicked. Should be used to toggle its state. </param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderFoldout(UnityEngine.GUIContent,System.Boolean,System.Boolean,System.Func{System.Boolean},System.Action,System.String,System.Action{UnityEngine.Vector2})">
            <summary> Draw a foldout header </summary>
            <param name="title"> The title of the header </param>
            <param name="state"> The state of the header </param>
            <param name="isBoxed"> [optional] is the eader contained in a box style ? </param>
            <param name="hasMoreOptions"> [optional] Delegate used to draw the right state of the advanced button. If null, no button drawn. </param>
            <param name="toggleMoreOptions"> [optional] Callback call when advanced button clicked. Should be used to toggle its state. </param>
            <param name="documentationURL">[optional] The URL that the Unity Editor opens when the user presses the help button on the header.</param>
            <param name="contextAction">[optional] The callback that the Unity Editor executes when the user presses the burger menu on the header.</param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawSubHeaderFoldout(System.String,System.Boolean,System.Boolean,System.Func{System.Boolean},System.Action)">
            <summary> Draw a foldout header </summary>
            <param name="title"> The title of the header </param>
            <param name="state"> The state of the header </param>
            <param name="isBoxed"> [optional] is the eader contained in a box style ? </param>
            <param name="hasMoreOptions"> [optional] Delegate used to draw the right state of the advanced button. If null, no button drawn. </param>
            <param name="toggleMoreOptions"> [optional] Callback call when advanced button clicked. Should be used to toggle its state. </param>
            <returns>return the state of the sub foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawSubHeaderFoldout(UnityEngine.GUIContent,System.Boolean,System.Boolean,System.Func{System.Boolean},System.Action)">
            <summary> Draw a foldout header </summary>
            <param name="title"> The title of the header </param>
            <param name="state"> The state of the header </param>
            <param name="isBoxed"> [optional] is the eader contained in a box style ? </param>
            <param name="hasMoreOptions"> [optional] Delegate used to draw the right state of the advanced button. If null, no button drawn. </param>
            <param name="toggleMoreOptions"> [optional] Callback call when advanced button clicked. Should be used to toggle its state. </param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawSubHeaderFoldout(System.String,System.Boolean,System.Boolean)">
            <summary>
            Draw a foldout sub header
            </summary>
            <param name="title"> The title of the header </param>
            <param name="state"> The state of the header </param>
            <param name="isBoxed"> [optional] is the eader contained in a box style ? </param>
            <returns>return the state of the sub foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawSubHeaderFoldout(UnityEngine.GUIContent,System.Boolean,System.Boolean)">
            <summary>
            Draw a foldout sub header
            </summary>
            <param name="title"> The title of the header </param>
            <param name="state"> The state of the header </param>
            <param name="isBoxed"> [optional] is the eader contained in a box style ? </param>
            <returns>return the state of the sub foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderToggle(System.String,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,System.Action{UnityEngine.Vector2},System.Func{System.Boolean},System.Action)">
            <summary>Draw a header toggle like in Volumes</summary>
            <param name="title"> The title of the header </param>
            <param name="group"> The group of the header </param>
            <param name="activeField">The active field</param>
            <param name="contextAction">The context action</param>
            <param name="hasMoreOptions">Delegate saying if we have MoreOptions</param>
            <param name="toggleMoreOptions">Callback called when the MoreOptions is toggled</param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderToggle(UnityEngine.GUIContent,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,System.Action{UnityEngine.Vector2},System.Func{System.Boolean},System.Action)">
            <summary>Draw a header toggle like in Volumes</summary>
            <param name="title"> The title of the header </param>
            <param name="group"> The group of the header </param>
            <param name="activeField">The active field</param>
            <param name="contextAction">The context action</param>
            <param name="hasMoreOptions">Delegate saying if we have MoreOptions</param>
            <param name="toggleMoreOptions">Callback called when the MoreOptions is toggled</param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderToggle(System.String,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,System.Action{UnityEngine.Vector2},System.Func{System.Boolean},System.Action,System.String)">
            <summary>Draw a header toggle like in Volumes</summary>
            <param name="title"> The title of the header </param>
            <param name="group"> The group of the header </param>
            <param name="activeField">The active field</param>
            <param name="contextAction">The context action</param>
            <param name="hasMoreOptions">Delegate saying if we have MoreOptions</param>
            <param name="toggleMoreOptions">Callback called when the MoreOptions is toggled</param>
            <param name="documentationURL">Documentation URL</param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderToggle(UnityEngine.GUIContent,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,System.Action{UnityEngine.Vector2},System.Func{System.Boolean},System.Action,System.String)">
            <summary>Draw a header toggle like in Volumes</summary>
            <param name="title"> The title of the header </param>
            <param name="group"> The group of the header </param>
            <param name="activeField">The active field</param>
            <param name="contextAction">The context action</param>
            <param name="hasMoreOptions">Delegate saying if we have MoreOptions</param>
            <param name="toggleMoreOptions">Callback called when the MoreOptions is toggled</param>
            <param name="documentationURL">Documentation URL</param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawHeaderToggleFoldout(UnityEngine.GUIContent,System.Boolean,UnityEditor.SerializedProperty,System.Action{UnityEngine.Vector2},System.Func{System.Boolean},System.Action,System.String)">
            <summary>Draw a header toggle like in Volumes</summary>
            <param name="title"> The title of the header </param>
            <param name="foldoutExpanded">If the foldout is expanded</param>
            <param name="toogleProperty">The property to bind the toggle</param>
            <param name="contextAction">The context action</param>
            <param name="hasMoreOptions">Delegate saying if we have MoreOptions</param>
            <param name="toggleMoreOptions">Callback called when the MoreOptions is toggled</param>
            <param name="documentationURL">Documentation URL</param>
            <returns>return the state of the foldout header</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawSectionHeader(UnityEngine.GUIContent,System.String,System.Action{UnityEngine.Vector2},System.Func{System.Boolean},System.Action)">
            <summary>Draw a header section like in Global Settings</summary>
            <param name="title"> The title of the header </param>
            <param name="documentationURL">Documentation URL</param>
            <param name="contextAction">The context action</param>
            <param name="hasMoreOptions">Delegate saying if we have MoreOptions</param>
            <param name="toggleMoreOptions">Callback called when the MoreOptions is toggled</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawVector6(UnityEngine.GUIContent,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color[],UnityEditor.SerializedProperty,System.Boolean)">
            <summary>
            Draw a Vector6 field
            </summary>
            <param name="label">The label</param>
            <param name="positive">The data for +X, +Y and +Z</param>
            <param name="negative">The data for -X, -Y and -Z</param>
            <param name="min">Min clamping value along axis</param>
            <param name="max">Max clamping value along axis</param>
            <param name="colors">[Optional] Color marks to use</param>
            <param name="multiplicator">[Optional] multiplicator on the datas</param>
            <param name="allowIntersection">[Optional] Allow the face positive values to be smaller than negative ones and vice versa</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawPopup(UnityEngine.GUIContent,UnityEditor.SerializedProperty,System.String[])">
            <summary>Draw a popup</summary>
            <param name="label">the label</param>
            <param name="property">The data displayed</param>
            <param name="options">Options of the dropdown</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.DrawEnumPopup(UnityEditor.SerializedProperty,System.Type,UnityEngine.GUIContent)">
            <summary>
            Draw an EnumPopup handling multiEdition
            </summary>
            <param name="property">The data displayed</param>
            <param name="type">Type of the property</param>
            <param name="label">The label</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.RemoveMaterialKeywords(UnityEngine.Material)">
            <summary>Remove the keywords on the given materials</summary>
            <param name="material">The material to edit</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.GetAdditionalData``1(UnityEngine.Object[],System.Action{``0})">
            <summary>Get the AdditionalData of the given component </summary>
            <typeparam name="T">The type of the AdditionalData component</typeparam>
            <param name="targets">The object to seek for AdditionalData</param>
            <param name="initDefault">[Optional] The default value to use if there is no AdditionalData</param>
            <returns>return an AdditionalData component</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.AddAdditionalData``2(UnityEngine.GameObject,System.Action{``1})">
            <summary>Add the appropriate AdditionalData to the given GameObject and its children containing the original component</summary>
            <typeparam name="T">The type of the original component</typeparam>
            <typeparam name="AdditionalT">The type of the AdditionalData component</typeparam>
            <param name="go">The root object to update</param>
            <param name="initDefault">[Optional] The default value to use if there is no AdditionalData</param>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.CreateGameObject(UnityEngine.GameObject,System.String,System.Type[])">
            <summary>Create a game object</summary>
            <param name="parent">The parent</param>
            <param name="name">The wanted name (can be updated with a number if a sibling with same name exist</param>
            <param name="types">Required component on this object in addition to Transform</param>
            <returns>The created object</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.CreateGameObject(System.String,UnityEngine.Object)">
            <summary>
            Creates a new GameObject and set it's position to the current view
            </summary>
            <param name="name">the name of the new gameobject</param>
            <param name="context">the parent of the gameobject</param>
            <returns>the created GameObject</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.GetCurrentProjectVersion">
            <summary>Parse and return current project version</summary>
            <returns>The version</returns>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.CheckOutFile(System.Boolean,UnityEngine.Object)">
            <summary></summary>
            <param name="VCSEnabled"></param>
            <param name="mat"></param>
        </member>
        <member name="P:UnityEditor.Rendering.CoreEditorUtils.currentSkin">
            <summary>Get the skin currently in use</summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreEditorUtils.LoadIcon(System.String,System.String,System.String)">
            <summary>
            Load an icon regarding skin and editor resolution.
            Icon should be stored as legacy icon resources:
            - "d_" prefix for Professional theme
            - "@2x" suffix for high resolution
            </summary>
            <param name="path">Path to seek the icon from Assets/ folder</param>
            <param name="name">Icon name without suffix, prefix or extention</param>
            <param name="extention">[Optional] Extention of file (png per default)</param>
            <returns>The loaded texture</returns>
        </member>
        <member name="T:UnityEditor.Rendering.CoreRenderPipelinePreferences">
            <summary>
            Core Render Pipeline preferences.
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.CoreRenderPipelinePreferences.corePreferencePath">
            <summary>
            Path to the Render Pipeline Preferences
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.CoreRenderPipelinePreferences.Open">
            <summary>
            Open the Core Rendering Pipeline preference window.
            </summary>
        </member>
        <member name="T:UnityEditor.Rendering.AdditionalPropertiesState`2">
            <summary>Used in editor drawer part to store the state of additional properties areas.</summary>
            <typeparam name="TState">An enum to use to describe the state.</typeparam>
            <typeparam name="TTarget">A type given to automatically compute the key.</typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.#ctor(`0,System.String)">
            <summary>Constructor will create the key to store in the EditorPref the state given generic type passed.</summary>
            <param name="defaultValue">If key did not exist, it will be created with this value for initialization.</param>
            <param name="prefix">[Optional] Prefix scope of the key (Default is CoreRP)</param>
        </member>
        <member name="P:UnityEditor.Rendering.AdditionalPropertiesState`2.Item(`0)">
            <summary>Get or set the state given the mask.</summary>
            <param name="mask">The filtering mask</param>
            <returns>True: All flagged area are expended</returns>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.GetAdditionalPropertiesState(`0)">
            <summary>Accessor to the expended state of this specific mask.</summary>
            <param name="mask">The filtering mask</param>
            <returns>True: All flagged area are expended</returns>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.SetAdditionalPropertiesState(`0,System.Boolean)">
            <summary>Setter to the expended state.</summary>
            <param name="mask">The filtering mask</param>
            <param name="value">True to show the additional properties.</param>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.ShowAll">
            <summary> Utility to set all states to true </summary>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.HideAll">
            <summary> Utility to set all states to false </summary>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.RegisterEditor(UnityEditor.Editor)">
            <summary>
            Register an editor for this set of additional properties.
            </summary>
            <param name="editor">Editor to register.</param>
        </member>
        <member name="M:UnityEditor.Rendering.AdditionalPropertiesState`2.UnregisterEditor(UnityEditor.Editor)">
            <summary>
            Unregister an editor for this set of additional properties.
            </summary>
            <param name="editor">Editor to unregister.</param>
        </member>
        <member name="M:UnityEditor.Rendering.Texture2DParameterDrawer.OnGUI(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent)">
            <summary>Draws the parameter in the editor.</summary>
            <param name="parameter">The parameter to draw.</param>
            <param name="title">The label and tooltip of the parameter.</param>
            <returns><c>true</c> if the input parameter is valid, <c>false</c> otherwise</returns>
        </member>
        <member name="T:UnityEditor.Rendering.SpeedTree8MaterialUpgrader">
            <summary>
            Material upgrader and relevant utilities for SpeedTree 8.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.SpeedTree8MaterialUpgrader.#ctor(System.String,System.String,UnityEditor.Rendering.MaterialUpgrader.MaterialFinalizer)">
            <summary>
            Creates a material upgrader that handles the property renames that HD and Universal have in common when upgrading
            from the built-in SpeedTree 8 shader.
            </summary>
            <param name="sourceShaderName">Original SpeedTree8 shader name.</param>
            <param name="destShaderName">New SpeedTree 8 shader name.</param>
            <param name="finalizer">A delegate that postprocesses the material for the render pipeline in use.</param>
        </member>
        <member name="M:UnityEditor.Rendering.SpeedTree8MaterialUpgrader.PostprocessSpeedTree8Materials(UnityEngine.GameObject,UnityEditor.SpeedTreeImporter,UnityEditor.Rendering.MaterialUpgrader.MaterialFinalizer)">
            <summary>
            Postprocesses materials while you are importing a SpeedTree 8 asset. Call from OnPostprocessSpeedTree in a MaterialPostprocessor.
            </summary>
            <param name="speedtree">The GameObject Unity creates from this imported SpeedTree.</param>
            <param name="stImporter">The asset importer used to import this SpeedTree asset.</param>
            <param name="finalizer">Render pipeline-specific material finalizer.</param>
        </member>
        <member name="M:UnityEditor.Rendering.SpeedTree8MaterialUpgrader.SpeedTree8MaterialFinalizer(UnityEngine.Material)">
            <summary>
            Preserves wind quality and billboard settings while you are upgrading a SpeedTree 8 material from previous versions of SpeedTree 8.
            Wind priority order is _WindQuality float value > enabled keyword.
            Should work for upgrading versions within a pipeline and from standard to current pipeline.
            </summary>
            <param name="material">SpeedTree 8 material to upgrade.</param>
        </member>
        <member name="T:UnityEditor.Rendering.AnalyticsUtils">
            <summary>
            Set of utilities for analytics
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.AnalyticsUtils.ToNestedColumn``1(``0,System.Boolean)">
            <summary>
            Obtains the Serialized fields and values in form of nested columns for BigQuery
            https://cloud.google.com/bigquery/docs/nested-repeated
            </summary>
            <typeparam name="T">The given type</typeparam>
            <param name="current">The current object to obtain the fields and values.</param>
            <param name="compareAndSimplifyWithDefault">If a comparison against the default value must be done.</param>
            <returns>The nested columns in form of {key.nestedKey : value} </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:UnityEditor.Rendering.AnalyticsUtils.ToNestedColumnWithDefault``1(``0,``0,System.Boolean)">
            <summary>
            Obtains the Serialized fields and values in form of nested columns for BigQuery
            https://cloud.google.com/bigquery/docs/nested-repeated
            </summary>
            <typeparam name="T">The given type</typeparam>
            <param name="current">The current object to obtain the fields and values.</param>
            <param name="defaultObject">The default object</param>
            <param name="compareAndSimplifyWithDefault">If a comparison against the default value must be done.</param>
            <returns>The nested columns in form of {key.nestedKey : value} </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeParameterDrawerAttribute">
            <summary>
            This attributes tells an <see cref="T:UnityEditor.Rendering.VolumeParameterDrawer"/> class which type of
            <see cref="T:UnityEngine.Rendering.VolumeParameter"/> it's an editor for.
            When you make a custom drawer for a parameter, you need add this attribute to the drawer
            class.
            </summary>
            <seealso cref="T:UnityEditor.Rendering.VolumeParameterDrawer"/>
        </member>
        <member name="F:UnityEditor.Rendering.VolumeParameterDrawerAttribute.parameterType">
            <summary>
            A type derived from <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeParameterDrawerAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:UnityEditor.Rendering.VolumeParameterDrawerAttribute"/> instance.
            </summary>
            <param name="parameterType">A type derived from <see cref="T:UnityEngine.Rendering.VolumeParameter`1"/>.</param>
        </member>
        <member name="T:UnityEditor.Rendering.VolumeParameterDrawer">
             <summary>
             A base class to implement to draw custom editors for custom <see cref="T:UnityEngine.Rendering.VolumeParameter"/>.
             You must use a <see cref="T:UnityEditor.Rendering.VolumeParameterDrawerAttribute"/> to let the editor know which
             parameter this drawer is for.
             </summary>
             <remarks>
             If you do not provide a custom editor for a <see cref="T:UnityEngine.Rendering.VolumeParameter"/>, Unity uses the buil-in property drawers to draw the
             property as-is.
             </remarks>
             <example>
             Here's an example about how <see cref="T:UnityEngine.Rendering.ClampedFloatParameter"/> is implemented:
             <code>
             [VolumeParameterDrawer(typeof(ClampedFloatParameter))]
             class ClampedFloatParameterDrawer : VolumeParameterDrawer
             {
                 public override bool OnGUI(SerializedDataParameter parameter, GUIContent title)
                 {
                     var value = parameter.value;
            
                     if (value.propertyType != SerializedPropertyType.Float)
                         return false;
            
                     var o = parameter.GetObjectRef&lt;ClampedFloatParameter&gt;();
                     EditorGUILayout.Slider(value, o.min, o.max, title);
                     value.floatValue = Mathf.Clamp(value.floatValue, o.min, o.max);
                     return true;
                 }
             }
             </code>
             </example>
             <seealso cref="T:UnityEditor.Rendering.VolumeParameterDrawerAttribute"/>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeParameterDrawer.IsAutoProperty">
            <summary>
            Override this and return <c>false</c> if you want to customize the position of the override
            checkbox. If you don't, Unity automatically draws the checkbox and puts the property content in a
            horizontal scope.
            </summary>
            <returns><c>false</c> if the override checkbox position is customized, <c>true</c>
            otherwise</returns>
        </member>
        <member name="M:UnityEditor.Rendering.VolumeParameterDrawer.OnGUI(UnityEditor.Rendering.SerializedDataParameter,UnityEngine.GUIContent)">
            <summary>
            Draws the parameter in the editor. If the input parameter is invalid you should return
            <c>false</c> so that Unity displays the default editor for this parameter.
            </summary>
            <param name="parameter">The parameter to draw.</param>
            <param name="title">The label and tooltip of the parameter.</param>
            <returns><c>true</c> if the input parameter is valid, <c>false</c> otherwise in which
            case Unity will revert to the default editor for this parameter</returns>
        </member>
        <member name="T:UnityEditor.Rendering.AssetReimportUtils">
            <summary>
            Set of utilities for Material reimporting.
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.AssetReimportUtils.ReimportAll``1(System.Double@,System.UInt32@,System.Func{System.String,System.Boolean})">
            <summary>
            Re-imports a given type of asset, and sends an analytic with the elapsed time
            </summary>
            <param name="duration">The elapsed time</param>
            <param name="numberOfAssetsReimported">The number of assets that have been re-imported</param>
            <param name="importNeedDelegate">A delegate if you want to skip some asset to be re-imported</param>
            <typeparam name="TAsset">The asset type that will be re-imported</typeparam>
        </member>
        <member name="T:UnityEditor.Rendering.IESImporter">
            <summary>
            Common class use to share code between implementation of IES Importeres
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESImporter.engine">
            <summary>
            IES Engine
            </summary>
        </member>
        <member name="F:UnityEditor.Rendering.IESImporter.iesMetaData">
            <summary>
            IES Meta data stored in the ies file
            </summary>
        </member>
        <member name="E:UnityEditor.Rendering.IESImporter.createRenderPipelinePrefabLight">
            <summary>
            Delegate prototype which will be sent by the pipeline implementation of the IES Importer
            Must be initialized during the creation of the SRP
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.IESImporter.OnImportAsset(UnityEditor.AssetImporters.AssetImportContext)">
            <summary>
            Common method performing the import of the asset
            </summary>
            <param name="ctx">Asset importer context.</param>
        </member>
        <member name="T:UnityEditor.Rendering.MaterialEditorExtension">
            <summary>
            Set of extensions to allow storing, getting and setting the expandable states of a <see cref="T:UnityEditor.MaterialEditor"/> areas
            </summary>
            <summary>
            Set of extensions to handle more shader property drawer
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.IsAreaExpanded(UnityEditor.MaterialEditor,System.UInt32,System.UInt32)">
            <summary>
            Obtains if an area is expanded in a <see cref="T:UnityEditor.MaterialEditor"/>
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="mask">The mask identifying the area to check the state</param>
            <param name="defaultExpandedState">Default value if is key is not present</param>
            <returns>true if the area is expanded</returns>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.SetIsAreaExpanded(UnityEditor.MaterialEditor,System.UInt32,System.Boolean)">
            <summary>
            Sets if the area is expanded <see cref="T:UnityEditor.MaterialEditor"/>
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="mask">The mask identifying the area to check the state</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.IntShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,UnityEngine.GUIContent,System.Func{System.Int32,System.Int32})">
            <summary>
            Draw an integer property field for a float shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="label">Label for the property</param>
            <param name="transform">Optional function to apply on the new value</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.IntSliderShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,UnityEngine.GUIContent)">
            <summary>
            Draw an integer slider for a range shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="label">Label for the property</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.IntSliderShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,System.Int32,System.Int32,UnityEngine.GUIContent)">
            <summary>
            Draw an integer slider for a float shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="min">The value at the left end of the slider</param>
            <param name="max">The value at the right end of the slider</param>
            <param name="label">Label for the property</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.MinFloatShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,UnityEngine.GUIContent,System.Single)">
            <summary>
            Draw a property field for a float shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="label">Label for the property</param>
            <param name="min">The minimum value the user can specify</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.Vector3ShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,UnityEngine.GUIContent)">
            <summary>
            Draw an vector3 field for a vector shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="label">Label for the property</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.PopupShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,UnityEngine.GUIContent,System.String[])">
            <summary>
            Draw a popup selection field for a float shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="label">Label for the property</param>
            <param name="displayedOptions">An array with the options shown in the popup</param>
            <returns>The index of the option that has been selected by the user</returns>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.IntPopupShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,System.String,System.String[],System.Int32[])">
            <summary>
            Draw an integer popup selection field for a float shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="prop">The MaterialProperty to make a field for</param>
            <param name="label">Label for the property</param>
            <param name="displayedOptions">An array with the options shown in the popup</param>
            <param name="optionValues">An array with the values for each option</param>
            <returns>The value of the option that has been selected by the user</returns>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.MinMaxShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,System.Single,System.Single,UnityEngine.GUIContent)">
            <summary>
            Draw a special slider to specify a range between a min and a max for two float shader properties.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="min">The MaterialProperty containing the lower value of the range the slider shows</param>
            <param name="max">The MaterialProperty containing the upper value of the range the slider shows</param>
            <param name="minLimit">The limit at the left end of the slider</param>
            <param name="maxLimit">The limit at the right end of the slider</param>
            <param name="label">Label for the property</param>
        </member>
        <member name="M:UnityEditor.Rendering.MaterialEditorExtension.MinMaxShaderProperty(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty,System.Single,System.Single,UnityEngine.GUIContent)">
            <summary>
            Draw a special slider to specify a range between a min and a max for a vector shader property.
            </summary>
            <param name="editor"><see cref="T:UnityEditor.MaterialEditor"/></param>
            <param name="remapProp">The MaterialProperty containing the range the slider shows in the x and y components of its vectorValue</param>
            <param name="minLimit">The limit at the left end of the slider</param>
            <param name="maxLimit">The limit at the right end of the slider</param>
            <param name="label">Label for the property</param>
        </member>
        <member name="T:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2">
            <summary>
            Render Pipeline Settings provider
            </summary>
            <typeparam name="TRenderPipeline"><see cref="T:UnityEngine.Rendering.RenderPipeline"/></typeparam>
            <typeparam name="TGlobalSettings"><see cref="T:UnityEngine.Rendering.RenderPipelineGlobalSettings"/></typeparam>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="v">The path of the settings</param>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.OnTitleBarGUI">
            <summary>
            Method called when the title bar is being rendered
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.OnActivate(System.String,UnityEngine.UIElements.VisualElement)">
            <summary>
            This method is being called when the provider is activated
            </summary>
            <param name="searchContext">The context with the search</param>
            <param name="rootElement">The <see cref="T:UnityEngine.UIElements.VisualElement"/> with the root</param>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.OnDeactivate">
            <summary>
            This method is being called when the provider is deactivated
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.Ensure">
            <summary>
            Ensures that the <see cref="T:UnityEngine.Rendering.RenderPipelineGlobalSettings"/> asset is correct
            </summary>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.Create(System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.RenderPipelineGlobalSettings"/> asset
            </summary>
            <param name="useProjectSettingsFolder">If the asset should be created on the project settings folder</param>
            <param name="activateAsset">if the asset should be shown on the inspector</param>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.Clone(UnityEngine.Rendering.RenderPipelineGlobalSettings,System.Boolean)">
            <summary>
            Clones the <see cref="T:UnityEngine.Rendering.RenderPipelineGlobalSettings"/> asset
            </summary>
            <param name="src">The <see cref="T:UnityEngine.Rendering.RenderPipelineGlobalSettings"/> to clone.</param>
            <param name="activateAsset">if the asset should be shown on the inspector.</param>
        </member>
        <member name="M:UnityEditor.Rendering.RenderPipelineGlobalSettingsProvider`2.OnGUI(System.String)">
            <summary>
            Method called to render the IMGUI of the settings provider
            </summary>
            <param name="searchContext">The search content</param>
        </member>
        <member name="T:UnityEditor.LightAnchorEditorTool">
            <summary>
            LightAnchorEditorTool
            </summary>
        </member>
        <member name="P:UnityEditor.LightAnchorEditorTool.toolbarIcon">
            <summary>
            Icon for LightAnchor Tool
            </summary>
        </member>
        <member name="M:UnityEditor.LightAnchorEditorTool.IsAvailable">
            <summary>
            Checks whether the custom editor tool is available based on the state of the editor.
            </summary>
            <returns>Always return true</returns>
        </member>
        <member name="M:UnityEditor.LightAnchorEditorTool.OnToolGUI(UnityEditor.EditorWindow)">
            <summary>
            Use this method to implement a custom editor tool.
            </summary>
            <param name="window">The window that is displaying the custom editor tool.</param>
        </member>
        <member name="T:UnityEditor.LightAnchorHandles">
            <summary>
            LightAnchorHandles describes the Handles for the LightAnchorEditorTool
            </summary>
        </member>
        <member name="P:UnityEditor.LightAnchorHandles.lightPosition">
            <summary>
            The light position
            </summary>
        </member>
        <member name="P:UnityEditor.LightAnchorHandles.anchorPosition">
            <summary>
            The anchor position
            </summary>
        </member>
        <member name="M:UnityEditor.LightAnchorHandles.#ctor(UnityEngine.LightAnchor)">
            <summary>
            Initializes and returns an instance of LightAnchorHandles
            </summary>
            <param name="target">Target object</param>
        </member>
        <member name="M:UnityEditor.LightAnchorHandles.OnGUI">
            <summary>
            On GUI
            </summary>
        </member>
        <member name="T:UnityEditor.LightAnchorEditor">
            <summary>
            LightAnchorEditor represent the inspector for the LightAnchor
            </summary>
        </member>
        <member name="M:UnityEditor.LightAnchorEditor.OnInspectorGUI">
            <summary>
            Calls the methods in its invocation list when show the Inspector
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.ProbeGIBaking.WriteBakingCells(UnityEngine.Rendering.ProbeVolumePerSceneData,System.Collections.Generic.List{UnityEngine.Rendering.BakingCell})">
            <summary>
            This method converts a list of baking cells into 5 separate assets:
             2 assets per baking state:
              CellData: a binary flat file containing L0L1 probes data
              CellOptionalData: a binary flat file containing L2 probe data (when present)
             3 assets shared between states:
              ProbeVolumeAsset: a Scriptable Object which currently contains book-keeping data, runtime cells, and references to flattened data
              CellSharedData: a binary flat file containing bricks data
              CellSupportData: a binary flat file containing debug data (stripped from player builds if building without debug shaders)
            </summary>
        </member>
        <member name="T:UnityEngine.FlareEditor">
            <summary>
            Editor for Flare (builtin): Editor to show an error message
            </summary>
        </member>
        <member name="M:UnityEngine.FlareEditor.OnInspectorGUI">
            <summary>
            Implement this function to make a custom inspector
            </summary>
        </member>
        <member name="T:UnityEngine.LensFlareEditor">
            <summary>
            Editor for Lens Flare (builtin): Editor to show an error message
            </summary>
        </member>
        <member name="M:UnityEngine.LensFlareEditor.OnInspectorGUI">
            <summary>
            Implement this function to make a custom inspector
            </summary>
        </member>
        <member name="T:RenderGraphViewer">
            <summary>
            Editor window class for the Render Graph Viewer
            </summary>
        </member>
    </members>
</doc>
