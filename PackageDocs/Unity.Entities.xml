<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Entities</name>
    </assembly>
    <members>
        <member name="T:Unity.Entities.EntitiesJournaling">
            <summary>
            Entities journaling provides detailed information about past ECS events.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray">
            <summary>
            Array of <see cref="T:Unity.Entities.EntitiesJournaling.ComponentTypeView"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.Length">
            <summary>
            Number of component type in the array.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.Item(System.Int32)">
            <summary>
            Get the component type at the specified index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.IndexOf(Unity.Entities.EntitiesJournaling.ComponentTypeView)">
            <summary>
            Retrieve the index of the component type view in the array.
            </summary>
            <param name="componentTypeView">The component type view.</param>
            <returns>The index of the component type view if found, otherwise -1.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.ToNativeArray(Unity.Collections.Allocator)">
            <summary>
            Convert array to native array.
            </summary>
            <param name="allocator">The Allocator of the NativeArray.</param>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.ToArray">
            <summary>
            Convert array to managed array.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.System#Collections#Generic#IEnumerable{Unity#Entities#EntitiesJournaling#ComponentTypeView}#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray.Enumerator">
            <summary>
            Enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.ComponentTypeViewArray"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.RecordViewArrayUtility">
            <summary>
            Utiliy methods for <see cref="T:Unity.Entities.EntitiesJournaling.RecordViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArrayUtility.ConvertGetRWsToSets(Unity.Entities.EntitiesJournaling.RecordViewArray@)">
            <summary>
            Convert <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.GetComponentDataRW"/> records to <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.SetComponentData"/> records, when possible.
            </summary>
            <param name="records">The record view array to convert.</param>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.SystemView">
            <summary>
            System view into journal buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.SystemView.Handle">
            <summary>
            The system untyped handle.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.SystemView.Type">
            <summary>
            The system type.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.SystemView.Name">
            <summary>
            The system name.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithRecordIndex(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.UInt64)">
            <summary>
            Get the records matching a record index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The record index.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithRecordType(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.EntitiesJournaling.RecordType)">
            <summary>
            Get all records matching a record type.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The record type.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithFrameIndex(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.Int32)">
            <summary>
            Get all records matching a frame index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The frame index.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithWorld(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.String)">
            <summary>
            Get all records matching a world name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The world name.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithWorld(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.UInt64)">
            <summary>
            Get all records matching a world sequence number.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The world sequence number.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithWorld(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.World)">
            <summary>
            Get all records matching an existing world.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The world.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithSystem(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.String)">
            <summary>
            Get all records matching a system type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system type name.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithSystem(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.SystemHandle)">
            <summary>
            Get all records matching a system handle untyped.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system handle untyped.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithExecutingSystem(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.String)">
            <summary>
            Get all records matching an executing system type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system type name.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithExecutingSystem(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.SystemHandle)">
            <summary>
            Get all records matching an executing system handle untyped.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system handle untyped.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithOriginSystem(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.String)">
            <summary>
            Get all records matching an origin system type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system type name.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithOriginSystem(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.SystemHandle)">
            <summary>
            Get all records matching an origin system handle untyped.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system handle untyped.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithComponentType(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.String)">
            <summary>
            Get all records matching a component type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The component type name.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithComponentType(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.ComponentType)">
            <summary>
            Get all records matching a component type.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The component type.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithComponentType(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.TypeIndex)">
            <summary>
            Get all records matching a component type index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="typeIndex">The component type index.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithEntity(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.Int32)">
            <summary>
            Get all records matching an entity index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="index">The entity index.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithEntity(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.Int32,System.Int32)">
            <summary>
            Get all records matching an entity index and version.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="index">The entity index.</param>
            <param name="version">The entity version.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithEntity(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},Unity.Entities.Entity)">
            <summary>
            Get all records matching an entity.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="entity">The entity.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.WithEntity(System.Collections.Generic.IEnumerable{Unity.Entities.EntitiesJournaling.RecordView},System.String)">
            <summary>
            Get all records matching an existing entity name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The entity name.</param>
            <returns>IEnumerable of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.Enabled">
            <summary>
            Whether or not entities journaling events are recorded.
            </summary>
            <remarks>
            Setting this to <see langword="false"/> does not clear or deallocate the journaling state.
            </remarks>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordCount">
            <summary>
            The number of records in the buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordIndex">
            <summary>
            The last record index that was added to the buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.UsedBytes">
            <summary>
            Current used bytes.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.AllocatedBytes">
            <summary>
            Current allocated bytes.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.GetRecords(Unity.Entities.EntitiesJournaling.Ordering)">
            <summary>
            Retrieve records currently in buffer.
            </summary>
            <remarks>
            <b>Call will be blocking if records are currently locked for write.</b>
            <para>For this reason, it is not recommended to call this in a debugger watch window, otherwise a deadlock might occur.</para>
            </remarks>
            <returns>Array of record view.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.TryGetRecords(Unity.Entities.EntitiesJournaling.Ordering)">
            <summary>
            Try to retrieve records currently in buffer.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <returns>Array of record view.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Clear">
            <summary>
            Clear all the records.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.WorldView">
            <summary>
            World view into journal buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.WorldView.SequenceNumber">
            <summary>
            The world sequence number.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.WorldView.Name">
            <summary>
            The world name.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.WorldView.Reference">
            <summary>
            A reference to the world that matches the sequence number, if it still exists.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.ComponentTypeView">
            <summary>
            Entity view into journal buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.ComponentTypeView.TypeIndex">
            <summary>
            The component type index.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.ComponentTypeView.ComponentType">
            <summary>
            The component type from the type index.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.ComponentTypeView.Name">
            <summary>
            The component type name.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.RecordViewArray">
            <summary>
            Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordViewArray.Length">
            <summary>
            Number of record in the array.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordViewArray.IsValid">
            <summary>
            Whether or not the buffer pointer is still valid.
            </summary>
            <remarks>
            Any changes to the journal buffer will cause record view arrays to become invalid.
            </remarks>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordViewArray.Ordering">
            <summary>
            The ordering of records in the array.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordViewArray.Item(System.Int32)">
            <summary>
            Get the record at the specified index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArray.IndexOf(Unity.Entities.EntitiesJournaling.RecordView)">
            <summary>
            Retrieve the index of the entity view in the array.
            </summary>
            <param name="entityView">The entity view.</param>
            <returns>The index of the entity view if found, otherwise -1.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArray.ToNativeArray(Unity.Collections.Allocator)">
            <summary>
            Convert array to native array.
            </summary>
            <param name="allocator">The Allocator of the NativeArray.</param>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArray.ToArray">
            <summary>
            Convert array to managed array.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArray.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.RecordViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArray.System#Collections#Generic#IEnumerable{Unity#Entities#EntitiesJournaling#RecordView}#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.RecordViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.RecordViewArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.RecordViewArray"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.RecordViewArray.Enumerator">
            <summary>
            Enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.RecordViewArray"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.JournalingState">
            <summary>
            Journaling state data container.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.RecordType">
            <summary>
            Record type enumeration.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.EntityViewArray">
            <summary>
            Array of <see cref="T:Unity.Entities.EntitiesJournaling.EntityView"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityViewArray.Length">
            <summary>
            Number of entity in the array.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityViewArray.Item(System.Int32)">
            <summary>
            Get the entity at the specified index.
            </summary>
            <param name="index">The element index.</param>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.EntityViewArray.IndexOf(Unity.Entities.EntitiesJournaling.EntityView)">
            <summary>
            Retrieve the index of the entity view in the array.
            </summary>
            <param name="entityView">The entity view.</param>
            <returns>The index of the entity view if found, otherwise -1.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.EntityViewArray.ToNativeArray(Unity.Collections.Allocator)">
            <summary>
            Convert array to native array.
            </summary>
            <param name="allocator">The Allocator of the NativeArray.</param>
            <returns>A native array of entity views.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.EntityViewArray.ToArray">
            <summary>
            Convert array to managed array.
            </summary>
            <returns>A managed array of entity views.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.EntityViewArray.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.EntityViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.EntityViewArray.System#Collections#Generic#IEnumerable{Unity#Entities#EntitiesJournaling#EntityView}#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.EntityViewArray"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.EntityViewArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.EntityViewArray"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.EntityViewArray.Enumerator">
            <summary>
            Enumerator that can iterate through the <see cref="T:Unity.Entities.EntitiesJournaling.EntityViewArray"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.Preferences">
            <summary>
            Class that stores journaling preferences used during initialization.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.Preferences.Enabled">
            <summary>
            Whether or not entities journaling events are recorded.
            </summary>
            <remarks>
            This value is only read during journaling initialization.
            The new value will take effect when journaling initializes again.
            </remarks>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.Preferences.TotalMemoryMB">
            <summary>
            Total amount of memory in megabytes allocated for journaling.
            </summary>
            <remarks>
            This value is only read during journaling initialization.
            The new value will take effect when journaling initializes again.
            </remarks>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.Preferences.PostProcess">
            <summary>
            Apply post-processing to journaling records.
            Converts <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.GetComponentDataRW"/> records into <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.SetComponentData"/> whenever possible.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.Header">
            <summary>
            Data header written in buffer.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.RecordView">
            <summary>
            Record view into journal buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.Index">
            <summary>
            The record unique index.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.RecordType">
            <summary>
            The record type.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.FrameIndex">
            <summary>
            The record frame index.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.World">
            <summary>
            The record world view.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.ExecutingSystem">
            <summary>
            The record executing system view.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.OriginSystem">
            <summary>
            The record origin system view.
            In the case of deferred changes, this will tell where the deferred command originated from. Otherwise it will be a default value.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.Entities">
            <summary>
            The record entities view.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.ComponentTypes">
            <summary>
            The record component types view.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.DataPtr">
            <summary>
            The record payload data pointer.
            The content of those bytes depends on the record type.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.DataLength">
            <summary>
            The record payload data length.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.RecordView.Data">
            <summary>
            The record payload data.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.Record">
            <summary>
            Information about a record entry.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.EntityView">
            <summary>
            Entity view into journal buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityView.Index">
            <summary>
            The entity index.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityView.Version">
            <summary>
            The entity version.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityView.WorldSequenceNumber">
            <summary>
            The entity world sequence number.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityView.Reference">
            <summary>
            An entity that matches the index, version and world sequence number, if it exists.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.EntityView.Name">
            <summary>
            The entity display name.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.TryGetRecordDataAsSystemView(Unity.Entities.EntitiesJournaling.RecordView,Unity.Entities.EntitiesJournaling.SystemView@)">
            <summary>
            Try to retrieve record data as a <see cref="T:Unity.Entities.EntitiesJournaling.SystemView"/>.
            </summary>
            <remarks>
            Record type must be <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.SystemAdded"/> or <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.SystemRemoved"/>.
            </remarks>
            <param name="record">The record view.</param>
            <param name="systemView">The system view.</param>
            <returns><see langword="true"/> if successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.TryGetRecordDataAsComponentDataArrayBoxed(Unity.Entities.EntitiesJournaling.RecordView,System.Array@)">
            <summary>
            Try to retrieve record data as component data array boxed.
            </summary>
            <remarks>
            Record type must be either <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.GetComponentDataRW"/>,
            <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.SetComponentData"/> or <see cref="F:Unity.Entities.EntitiesJournaling.RecordType.SetSharedComponentData"/>.
            </remarks>
            <param name="record">The record view.</param>
            <param name="componentDataArray">The component data array boxed.</param>
            <returns><see langword="true"/> if successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Unity.Entities.EntitiesJournaling.Records">
            <summary>
            Non-blocking utility methods to retrieve records.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntitiesJournaling.Records.All">
            <summary>
            Get all records currently in buffer.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.Range(System.Int32,System.Int32)">
            <summary>
            Get a number records starting from index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="index">The start index.</param>
            <param name="count">The count of records.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithRecordIndex(System.UInt64)">
            <summary>
            Get the record matching a record index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The record index.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithRecordType(Unity.Entities.EntitiesJournaling.RecordType)">
            <summary>
            Get all records matching a record type.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The record type.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithFrameIndex(System.Int32)">
            <summary>
            Get all records matching a frame index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The frame index.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithWorld(System.String)">
            <summary>
            Get all records matching a world name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The world name.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithWorld(System.UInt64)">
            <summary>
            Get all records matching a world sequence number.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The world sequence number.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithWorld(Unity.Entities.World)">
            <summary>
            Get all records matching an existing world.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The world.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithSystem(System.String)">
            <summary>
            Get all records matching a system type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system type name.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithSystem(Unity.Entities.SystemHandle)">
            <summary>
            Get all records matching a system handle untyped.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system handle untyped.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithExecutingSystem(System.String)">
            <summary>
            Get all records matching an executing system type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system type name.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithExecutingSystem(Unity.Entities.SystemHandle)">
            <summary>
            Get all records matching an executing system handle untyped.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system handle untyped.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithOriginSystem(System.String)">
            <summary>
            Get all records matching an origin system type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system type name.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithOriginSystem(Unity.Entities.SystemHandle)">
            <summary>
            Get all records matching an origin system handle untyped.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The system handle untyped.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithComponentType(System.String)">
            <summary>
            Get all records matching a component type name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The component type name.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithComponentType(Unity.Entities.ComponentType)">
            <summary>
            Get all records matching a component type.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="typeIndex">The component type.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithComponentType(Unity.Entities.TypeIndex)">
            <summary>
            Get all records matching a component type index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="typeIndex">The component type index.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithEntity(System.Int32)">
            <summary>
            Get all records matching an entity index.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="index">The entity index.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithEntity(System.Int32,System.Int32)">
            <summary>
            Get all records matching an entity index and version.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="index">The entity index.</param>
            <param name="version">The entity version.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithEntity(Unity.Entities.Entity)">
            <summary>
            Get all records matching an entity.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="entity">The entity.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.Records.WithEntity(System.String)">
            <summary>
            Get all records matching an existing entity name.
            </summary>
            <remarks>
            Throws <see cref="T:System.InvalidOperationException"/> if records are currently locked for write.
            </remarks>
            <param name="name">The entity name.</param>
            <returns>Array of <see cref="T:Unity.Entities.EntitiesJournaling.RecordView"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntitiesJournaling.ExportToCSV">
            <summary>
            Export journaling data as CSV.
            </summary>
            <returns>An enumerable of strings, one per CSV data row.</returns>
        </member>
        <member name="T:Unity.Entities.IComponentData">
            <summary>
            This interface marks structs as 'unmanaged components' and classes as 'managed components'.
            </summary>
            <remarks>
            For more information, see the documentation on [components](xref:ecs-components).
            </remarks>
        </member>
        <member name="T:Unity.Entities.IBufferElementData">
            <summary>
            An interface for creating structs that can be stored in a <see cref="T:Unity.Entities.DynamicBuffer`1"/>.
            </summary>
            <remarks>
            See [Dynamic Buffers](xref:components-buffer-introducing) for additional information.
            </remarks>
        </member>
        <member name="T:Unity.Entities.InternalBufferCapacityAttribute">
             <summary>
             Specifies the maximum number of elements to store inside a chunk.
             </summary>
             <remarks>
             Use this attribute on the declaration of your IBufferElementData subtype:
            
             <code>
             [InternalBufferCapacity(10)]
             public struct FloatBufferElement : IBufferElementData
             {
                 public float Value;
             }
             </code>
            
             All <see cref="T:Unity.Entities.DynamicBuffer`1"/> with this type of element store the specified number of elements inside the
             chunk along with other component types in the same archetype. When the number of elements in the buffer exceeds
             this limit, the entire buffer is moved outside the chunk.
            
             [DefaultBufferCapacityNumerator](xref:Unity.Entities.TypeManager.DefaultBufferCapacityNumerator) defines
             the default number of elements.
             </remarks>
        </member>
        <member name="F:Unity.Entities.InternalBufferCapacityAttribute.Capacity">
            <summary>
            The number of elements stored inside the chunk.
            </summary>
        </member>
        <member name="M:Unity.Entities.InternalBufferCapacityAttribute.#ctor(System.Int32)">
            <summary>
            The number of elements stored inside the chunk.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Unity.Entities.MaximumChunkCapacityAttribute">
             <summary>
             Specifies the maximum number of components of a type that can be stored in the same chunk.
             </summary>
             <remarks>Place this attribute on the declaration of a component, such as <see cref="T:Unity.Entities.IComponentData"/>, to
             limit the number of entities with that component which can be stored in a single chunk. Note that the actual
             limit on the number of entities in a chunk can be smaller, based on the actual size of all the components in the
             same <see cref="T:Unity.Entities.EntityArchetype"/> as the component defining this limit.
            
             If an archetype contains more than one component type specifying a chunk capacity limit, then the lowest limit
             is used.</remarks>
        </member>
        <member name="F:Unity.Entities.MaximumChunkCapacityAttribute.Capacity">
            <summary>
            The maximum number of entities having this component type in an <see cref="T:Unity.Entities.ArchetypeChunk"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.MaximumChunkCapacityAttribute.#ctor(System.Int32)">
            <summary>
            The maximum number of entities having this component type in an <see cref="T:Unity.Entities.ArchetypeChunk"/>.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Unity.Entities.ChunkSerializableAttribute">
             <summary>
             States that a component type is serializable.
             </summary>
             <remarks>
             By default, ECS does not support storing pointer types in chunks. Apply this attribute to a component declaration
             to allow the use of pointers as fields in the component.
            
             Note that ECS does not perform any pre- or post-serialization processing to maintain pointer validity. When
             using this attribute, your code assumes responsibility for handling pointer serialization and deserialization.
             </remarks>
        </member>
        <member name="T:Unity.Entities.ISharedComponentData">
            <summary>
            An interface for a component type whose value is shared across all entities with the same value.
            </summary>
            <remarks>
            For more information, see the documentation on [Shared components](xref:components-shared).
            </remarks>
        </member>
        <member name="T:Unity.Entities.ICleanupComponentData">
            <summary>
            An interface for a component that must be removed individually after its entity is destroyed.
            </summary>
            <remarks>
            See [Cleanup Components](xref:components-cleanup) for additional information.
            </remarks>
        </member>
        <member name="T:Unity.Entities.ISystemStateComponentData">
             <summary>
             Obsolete. Use <see cref="T:Unity.Entities.ICleanupComponentData"/> instead.
             </summary>
             <remarks>
             **Obsolete.** Use <see cref="T:Unity.Entities.ICleanupComponentData"/> instead. See [Cleanup Components](xref:components-cleanup) for additional information.
            
             An interface for a component that must be removed individually after its entity is destroyed.
             </remarks>
        </member>
        <member name="T:Unity.Entities.ICleanupBufferElementData">
            <summary>
            An interface for a buffer component that must be removed individually after its entity is destroyed.
            </summary>
            <seealso cref="T:Unity.Entities.ICleanupComponentData"/>
            <seealso cref="T:Unity.Entities.IBufferElementData"/>
        </member>
        <member name="T:Unity.Entities.ISystemStateBufferElementData">
             <summary>
             Obsolete. Use <see cref="T:Unity.Entities.ICleanupBufferElementData"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="T:Unity.Entities.ICleanupBufferElementData"/> instead.
            
             An interface for a buffer component that must be removed individually after its entity is destroyed.</remarks>
             <seealso cref="T:Unity.Entities.ICleanupComponentData"/>
             <seealso cref="T:Unity.Entities.IBufferElementData"/>
        </member>
        <member name="T:Unity.Entities.ICleanupSharedComponentData">
            <summary>
            An interface for a shared component that must be removed individually after its entity is destroyed.
            </summary>
            <seealso cref="T:Unity.Entities.ICleanupComponentData"/>
            <seealso cref="T:Unity.Entities.ISharedComponentData"/>
        </member>
        <member name="T:Unity.Entities.ISystemStateSharedComponentData">
             <summary>
             Obsolete. Use <see cref="T:Unity.Entities.ICleanupSharedComponentData"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="T:Unity.Entities.ICleanupSharedComponentData"/> instead.
            
             An interface for a shared component that must be removed individually after its entity is destroyed.</remarks>
             <seealso cref="T:Unity.Entities.ICleanupComponentData"/>
             <seealso cref="T:Unity.Entities.IBufferElementData"/>
        </member>
        <member name="T:Unity.Entities.IEnableableComponent">
            <summary>
            An interface for a component type which allows the component to be enabled and disabled at runtime without a
            structural change.
            </summary>
            <remarks>
            This interface is only valid when used in combination with <see cref="T:Unity.Entities.IBufferElementData"/> or <see cref="T:Unity.Entities.IComponentData"/>.
            While the extra overhead involved in processing enableable components is generally quite low, this interface should only
            be used on components that will actually be enabled/disabled by the application at relatively high frequency.
            </remarks>
            <seealso cref="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.EntityManager.IsComponentEnabled``1(Unity.Entities.Entity)"/>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.SystemHandle,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.Entity)"/>
            <seealso cref="M:Unity.Entities.BufferLookup`1.SetBufferEnabled(Unity.Entities.Entity,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.BufferLookup`1.IsBufferEnabled(Unity.Entities.Entity)"/>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32)"/>
        </member>
        <member name="T:Unity.Entities.Disabled">
            <summary>
            Disables the entity.
            </summary>
            <remarks> By default, an <see cref="T:Unity.Entities.EntityQuery"/> ignores all entities that have this component. You
            can override this default behavior by setting the `EntityQueryOptions.IncludeDisabledEntities` flag of the
            <see cref="T:Unity.Entities.EntityQueryDesc"/> object used to create the query.</remarks>
            <seealso cref="M:Unity.Entities.EntityManager.IsEnabled(Unity.Entities.Entity)"/>
            <seealso cref="M:Unity.Entities.EntityManager.SetEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="T:Unity.Entities.Prefab">
            <summary>
            Marks the entity as a prefab, which implicitly disables the entity.
            </summary>
            <remarks> By default, an <see cref="T:Unity.Entities.EntityQuery"/> ignores all entities that have a Prefab component. You
            can override this default behavior by setting the EntityQueryOptions.IncludePrefab flag of the
            <see cref="T:Unity.Entities.EntityQueryDesc"/> object used to create the query.</remarks>
        </member>
        <member name="T:Unity.Entities.Asset">
            <summary>
            Marks the entity as an asset, which is used for the Export phase of GameObject conversion.
            </summary>
        </member>
        <member name="T:Unity.Entities.LinkedEntityGroup">
            <summary>
            The LinkedEntityGroup buffer makes the entity be the root of a set of connected entities.
            </summary>
            <remarks>
            Referenced Prefabs automatically add a LinkedEntityGroup with the complete child hierarchy.
            EntityManager.Instantiate uses LinkedEntityGroup to instantiate the whole set of entities automatically.
            EntityManager.SetEnabled uses LinkedEntityGroup to enable the whole set of entities.
            </remarks>
        </member>
        <member name="F:Unity.Entities.LinkedEntityGroup.Value">
            <summary>
            A child entity.
            </summary>
        </member>
        <member name="M:Unity.Entities.LinkedEntityGroup.op_Implicit(Unity.Entities.Entity)~Unity.Entities.LinkedEntityGroup">
            <summary>
            Provides implicit conversion of an <see cref="T:Unity.Entities.Entity"/> to a LinkedEntityGroup element.
            </summary>
            <param name="e">The entity to convert</param>
            <returns>A new buffer element.</returns>
        </member>
        <member name="T:Unity.Entities.SceneTag">
            <summary>
            A Unity-defined shared component assigned to all entities in the same subscene.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneTag.SceneEntity">
            <summary>
            The root entity of the subscene.
            </summary>
        </member>
        <member name="M:Unity.Entities.SceneTag.GetHashCode">
            <summary>
            A unique hash code for comparison.
            </summary>
            <returns>The scene entity has code.</returns>
        </member>
        <member name="M:Unity.Entities.SceneTag.Equals(Unity.Entities.SceneTag)">
            <summary>
            Two SceneTags are equal if they have the same root subscene entity.
            </summary>
            <param name="other">The other SceneTag.</param>
            <returns>True if both SceneTags refer to the same Subscene. False, otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.SceneTag.ToString">
            <summary>
            A string for logging.
            </summary>
            <returns>A string identifying the root subscene entity.</returns>
        </member>
        <member name="T:Unity.Entities.Simulate">
            <summary>
            Enable simulation of an entity.
            </summary>
            <remarks> This component is added by default to all entities. Systems which needs to support simulating a
            subset of entities matching a specific query - such as prediction systems in netcode - need to include this
            component in their queries to make sure entities which are not supposed to be simulated at the moment
            are skipped.</remarks>
        </member>
        <member name="T:Unity.Entities.EntityManagerDiffer">
            <summary>
            The <see cref="T:Unity.Entities.EntityManagerDiffer"/> is used to efficiently track changes to a given world over time.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManagerDiffer.#ctor(Unity.Entities.EntityManager,Unity.Collections.Allocator,Unity.Entities.EntityQueryDesc)">
            <summary>
            Constructs a new EntityManagerDiffer object.
            </summary>
            <param name="sourceEntityManager">The EntityManager to associate with this differ.</param>
            <param name="allocator">The allocator to use for any internal memory allocations for this object.</param>
            <param name="entityQueryDesc">If non-null, the differ limits its change-tracking to the entities that this query matches.</param>
        </member>
        <member name="M:Unity.Entities.EntityManagerDiffer.Dispose">
            <summary>
            Disposes an EntityManagerDiffer object.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManagerDiffer.GetChanges(Unity.Entities.EntityManagerDifferOptions,Unity.Collections.Allocator)">
            <summary>
            Generates a detailed change set for the world.
            All entities to be considered for diffing must have the <see cref="T:Unity.Entities.EntityGuid"/> component with a unique value.
            </summary>
            <remarks>
            The resulting <see cref="T:Unity.Entities.EntityChanges"/> must be disposed when no longer needed.
            </remarks>
            <param name="options">A set of options which can be toggled.</param>
            <param name="allocator">The allocator to use for the results object.</param>
            <returns>A set of changes for the world since the last fast-forward.</returns>
        </member>
        <member name="T:Unity.Entities.SystemBaseRegistry">
            <summary>
            Internal class used by codegen (as such it is necessary to be public). For registering unmanaged systems
            prefer <seealso cref="M:Unity.Entities.World.AddSystem``1(``0)"/>
            </summary>
        </member>
        <member name="T:Unity.Entities.WorldFlags">
            <summary>
            Specify all traits a <see cref="T:Unity.Entities.World"/> can have.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.None">
            <summary>
            Default WorldFlags value.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Live">
            <summary>
            The main <see cref="T:Unity.Entities.World"/> for a game/application.
            This flag is combined with <see cref="F:Unity.Entities.WorldFlags.Editor"/>, <see cref="F:Unity.Entities.WorldFlags.Game"/> and <see cref="F:Unity.Entities.WorldFlags.Simulation"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Editor">
            <summary>
            Main <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> running in the Editor.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Game">
            <summary>
            Main <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> running in the Player.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Simulation">
            <summary>
            Any additional <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> running in the application for background processes that
            queue up data for other <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> (ie. physics, AI simulation, networking, etc.).
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Conversion">
            <summary>
            <see cref="T:Unity.Entities.World"/> on which conversion systems run to transform authoring data to runtime data.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Staging">
            <summary>
            <see cref="T:Unity.Entities.World"/> in which temporary results are staged before being moved into a <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/>.
            Typically combined with <see cref="F:Unity.Entities.WorldFlags.Conversion"/> to represent an intermediate step in the full conversion process.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Shadow">
            <summary>
            <see cref="T:Unity.Entities.World"/> representing a previous state of another <see cref="T:Unity.Entities.World"/> typically to compute
            a diff of runtime data - for example useful for undo/redo or Live Link.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.Streaming">
            <summary>
            Dedicated <see cref="T:Unity.Entities.World"/> for managing incoming streamed data to the Player.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.GameServer">
            <summary>
            Server <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> running in the Player.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.GameClient">
            <summary>
            Client <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> running in the Player.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldFlags.GameThinClient">
            <summary>
            Thin client <see cref="F:Unity.Entities.WorldFlags.Live"/> <see cref="T:Unity.Entities.World"/> running in the Player.
            </summary>
        </member>
        <member name="T:Unity.Entities.ICustomBootstrap">
            <summary>
            When entering playmode or the game starts in the Player a default world is created.
            Sometimes you need multiple worlds to be setup when the game starts or perform some
            custom world initialization. This lets you override the bootstrap of game code world creation.
            </summary>
        </member>
        <member name="M:Unity.Entities.ICustomBootstrap.Initialize(System.String)">
            <summary>
            Called during default world initialization to give the application a chance to set up additional worlds beyond
            (or instead of) the default world, and to perform additional one-time initialization before any worlds are created.
            </summary>
            <param name="defaultWorldName">The name of the default <see cref="T:Unity.Entities.World"/> that will be created</param>
            <returns>true if the bootstrap has performed initialization, or false if default world initialization should be performed.</returns>
        </member>
        <member name="T:Unity.Entities.World">
            <summary>
            Encapsulates a set of entities, component data, and systems.
            </summary>
            <remarks>Multiple Worlds may exist concurrently in the same application, but they are isolated from each other;
            an <see cref="T:Unity.Entities.EntityQuery"/> will only match entities in the World that created the query, a World's <see cref="P:Unity.Entities.World.EntityManager"/> can only
            process entities from the same World, etc.</remarks>
        </member>
        <member name="P:Unity.Entities.World.DefaultGameObjectInjectionWorld">
            <summary>
            Reference to the default World
            </summary>
        </member>
        <member name="P:Unity.Entities.World.All">
            <summary>
            List of all Worlds that currently exist in the application
            </summary>
        </member>
        <member name="P:Unity.Entities.World.NextSequenceNumber">
            <inheritdoc cref="F:Unity.Entities.WorldUnmanaged.NextSequenceNumber"/>
        </member>
        <member name="E:Unity.Entities.World.SystemCreated">
            <summary>
            Event invoked after system has been fully constructed.
            </summary>
        </member>
        <member name="E:Unity.Entities.World.SystemDestroyed">
            <summary>
            Event invoked before system is disposed.
            </summary>
        </member>
        <member name="P:Unity.Entities.World.Systems">
            <summary>
            List of all managed systems in this World
            </summary>
        </member>
        <member name="P:Unity.Entities.World.Unmanaged">
            <summary>
            Gives access to the unmanaged data of an instance of the World. This is useful when your code needs to run
            with Burst.
            </summary>
        </member>
        <member name="P:Unity.Entities.World.Flags">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.Flags"/>
        </member>
        <member name="P:Unity.Entities.World.Name">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.Name"/>
        </member>
        <member name="M:Unity.Entities.World.ToString">
            <summary>
            Returns the name of the World
            </summary>
            <returns>The World's name</returns>
        </member>
        <member name="P:Unity.Entities.World.Version">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.Version"/>
        </member>
        <member name="P:Unity.Entities.World.EntityManager">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.EntityManager"/>
        </member>
        <member name="P:Unity.Entities.World.IsCreated">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.IsCreated"/>
        </member>
        <member name="P:Unity.Entities.World.SequenceNumber">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.SequenceNumber"/>
        </member>
        <member name="P:Unity.Entities.World.Time">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.Time"/>
        </member>
        <member name="P:Unity.Entities.World.UpdateAllocatorEnableBlockFree">
            <summary>
            Property to get and set enable block free flag, a flag indicating whether the allocator should enable individual block to be freed.
            </summary>
        </member>
        <member name="P:Unity.Entities.World.MaximumDeltaTime">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.MaximumDeltaTime"/>
        </member>
        <member name="M:Unity.Entities.World.#ctor(System.String,Unity.Entities.WorldFlags)">
            <summary>
            Construct a new World instance
            </summary>
            <param name="name">The name to assign to the new World</param>
            <param name="flags">The flags to assign to the new World</param>
        </member>
        <member name="M:Unity.Entities.World.#ctor(System.String,Unity.Entities.WorldFlags,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Construct a new World instance
            </summary>
            <param name="name">The name to assign to the new World</param>
            <param name="flags">The flags to assign to the new World</param>
            <param name="backingAllocatorHandle">The allocator to use for any of the world's internal memory allocations</param>
        </member>
        <member name="M:Unity.Entities.World.Dispose">
            <summary>
            Dispose of a World instance
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the World has already been disposed, or if one of the World's systems is still executing.</exception>
        </member>
        <member name="M:Unity.Entities.World.DisposeAllWorlds">
            <summary>
            Destroys all existing Worlds
            </summary>
        </member>
        <member name="P:Unity.Entities.World.TimeSingleton">
            <summary>
            Singleton instance of the <see cref="T:Unity.Entities.WorldTime"/> component. This data is generally accessed through <see cref="P:Unity.Entities.World.Time"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.World.SetTime(Unity.Core.TimeData)">
            <summary>
            Assigns a new value to the World's current time.
            </summary>
            <param name="newTimeData">The new time to assign for this World</param>
        </member>
        <member name="M:Unity.Entities.World.PushTime(Unity.Core.TimeData)">
            <summary>
            Push a new temporary time value to the World's current time
            </summary>
            <remarks>This is generally used to temporarily override the time for a world for the duration of a single
            <see cref="T:Unity.Entities.ComponentSystemGroup"/> update, when using fixed-timestep semantics. The original time can
            subsequently be restored with <see cref="M:Unity.Entities.World.PopTime"/>.</remarks>
            <param name="newTimeData">The temporary TimeData.</param>
            <seealso cref="M:Unity.Entities.World.PopTime"/>
        </member>
        <member name="M:Unity.Entities.World.PopTime">
            <summary>
            Restore the previous World time, after pushing a temporary time value with <see cref="M:Unity.Entities.World.PushTime(Unity.Core.TimeData)"/>
            </summary>
            <seealso cref="M:Unity.Entities.World.PushTime(Unity.Core.TimeData)"/>
        </member>
        <member name="M:Unity.Entities.World.GetOrCreateSystem``1">
            <summary>
            Retrieve the handle for the instance of a system of type <typeparamref name="T"/> from the current World. If the system
            does not exist in this World, it will first be created.
            </summary>
            <remarks>
            **Important:** This function creates a sync point if a system is created, which means that the EntityManager waits for all
            currently running Jobs to complete before creating the system, and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <typeparam name="T">The system type</typeparam>
            <returns>The handle for the instance of system type <typeparamref name="T"/> in this World. If the system
            does not exist in this World, it will first be created.</returns>
        </member>
        <member name="M:Unity.Entities.World.GetOrCreateSystemManaged``1">
             <summary>
             Retrieve the instance of a system of type <typeparamref name="T"/> from the current World. If the system
             does not exist in this World, it will first be created.
             </summary>
             <remarks>
             **Important:** This function creates a sync point if a system is created, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
            
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.GetOrCreateSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
             </remarks>
             <typeparam name="T">The system type</typeparam>
             <returns>The instance of system type <typeparamref name="T"/> in this World. If the system
             does not exist in this World, it will first be created.</returns>
        </member>
        <member name="M:Unity.Entities.World.GetOrCreateSystem(System.Type)">
            <summary>
            Retrieve the handle for the instance of a system of type <paramref name="type"/> from the current World. If the system
            does not exist in this World, it will first be created.
            </summary>
            <remarks>
            **Important:** This function creates a sync point if a system is created, which means that the EntityManager waits for all
            currently running Jobs to complete before creating the system, and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <param name="type">The system type</param>
            <returns>The handle for the instance of system type <paramref name="type"/> in this World. If the system
            does not exist in this World, it will first be created.</returns>
        </member>
        <member name="M:Unity.Entities.World.GetOrCreateSystemManaged(System.Type)">
             <summary>
             Retrieve the instance of a system of type <paramref name="type"/> from the current World. If the system
             does not exist in this World, it will first be created.
             </summary>
             <remarks>
             **Important:** This function creates a sync point if a system is created, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
            
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.GetOrCreateSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
             </remarks>
             <param name="type">The system type</param>
             <returns>The instance of system type <paramref name="type"/> in this World. If the system
             does not exist in this World, it will first be created.</returns>
        </member>
        <member name="M:Unity.Entities.World.CreateSystem``1">
             <summary>
             Create and return a handle to an instance of a system of type <typeparamref name="T"/> in this World.
             </summary>
             <remarks>
             This can result in multiple instances of the same system in a single World, which is generally undesirable.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <typeparam name="T">The system type</typeparam>
             <returns>A handle to the new instance of system type <typeparamref name="T"/> in this World.</returns>
        </member>
        <member name="M:Unity.Entities.World.CreateSystemManaged``1">
             <summary>
             Create and return an instance of a system of type <typeparamref name="T"/> in this World.
             </summary>
             <remarks>
             This can result in multiple instances of the same system in a single World, which is generally undesirable.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
            
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.CreateSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
            
             </remarks>
             <typeparam name="T">The system type</typeparam>
             <returns>The new instance of system type <typeparamref name="T"/> in this World.</returns>
        </member>
        <member name="M:Unity.Entities.World.CreateSystem(System.Type)">
             <summary>
             Create and return a handle to an instance of a system of type <paramref name="type"/> in this World.
             </summary>
             <remarks>
             This can result in multiple instances of the same system in a single World, which is generally undesirable.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="type">The system type</param>
             <returns>A handle to the new instance of system type <paramref name="type"/> in this World.</returns>
        </member>
        <member name="M:Unity.Entities.World.CreateSystemManaged(System.Type)">
             <summary>
             Create and return an instance of a system of type <paramref name="type"/> in this World.
             </summary>
             <remarks>
             This can result in multiple instances of the same system in a single World, which is generally undesirable.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
            
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.CreateSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
             </remarks>
             <param name="type">The system type</param>
             <returns>The new instance of system type <paramref name="type"/> in this World.</returns>
        </member>
        <member name="M:Unity.Entities.World.AddSystem``1(``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.World.AddSystemManaged``1(``0)"/> instead.</summary>
            <typeparam name="T">The system type</typeparam>
            <param name="system">The existing system instance to add</param>
            <returns>The input <paramref name="system"/></returns>
        </member>
        <member name="M:Unity.Entities.World.AddSystemManaged``1(``0)">
             <summary>
             Adds an existing system instance to this World
             </summary>
             <remarks>
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before adding the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
            
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.CreateSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
             </remarks>
             <typeparam name="T">The system type</typeparam>
             <param name="system">The existing system instance to add</param>
             <returns>The input <paramref name="system"/></returns>
             <exception cref="T:System.Exception">Thrown if a system of type <typeparamref name="T"/> already exists in this World</exception>
        </member>
        <member name="M:Unity.Entities.World.GetExistingSystem``1">
            <summary>
            Return a handle to an existing instance of a system of type <typeparamref name="T"/> in this World.
            </summary>
            <typeparam name="T">The system type</typeparam>
            <returns>A handle to the existing instance of system type <typeparamref name="T"/> in this World. If no such instance exists, the method returns default.</returns>
        </member>
        <member name="M:Unity.Entities.World.GetExistingSystemManaged``1">
             <summary>
             Return an existing instance of a system of type <typeparamref name="T"/> in this World.
             </summary>
             <remarks>
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.GetExistingSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
             </remarks>
             <typeparam name="T">The system type</typeparam>
             <returns>The existing instance of system type <typeparamref name="T"/> in this World. If no such instance exists, the method returns null.</returns>
        </member>
        <member name="M:Unity.Entities.World.GetExistingSystem(System.Type)">
            <summary>
            Return a handle to an existing instance of a system of type <paramref name="type"/> in this World.
            </summary>
            <param name="type">The system type</param>
            <returns>A handle to the existing instance of system type <paramref name="type"/> in this World. If no such instance exists, the method returns default.</returns>
        </member>
        <member name="M:Unity.Entities.World.GetExistingSystemManaged(System.Type)">
             <summary>
             Return an existing instance of a system of type <paramref name="type"/> in this World.
             </summary>
             <remarks>
             **Note:** This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the OnDestroy
             and cleanup functionality will have been called for this system.
            
             If possible, using <see cref="M:Unity.Entities.World.GetExistingSystem(System.Type)"/> is preferred, and instead of public member data, component data is recommended for
             system level data that needs to be shared between systems or externally to them. This defines a data protocol for the
             system which is separated from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             Keep in mind using a managed reference for systems
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data access
             - does not provide lifetime or thread safety guarantees for system access through the returned managed reference
             </remarks>
             <param name="type">The system type</param>
             <returns>The existing instance of system type <paramref name="type"/> in this World. If no such instance exists, the method returns null.</returns>
        </member>
        <member name="M:Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle)">
            <summary>
            Destroys one of the World's existing system instances.
            </summary>
            <remarks>
            **Important:** This function creates a sync point, which means that the EntityManager waits for all
            currently running Jobs to complete before destroying the system, and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <param name="sysHandle">The system to destroy. Must be an existing instance in this World.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the World's systems are currently executing.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the system handle is invalid or does not belong to this world.</exception>
        </member>
        <member name="M:Unity.Entities.World.DestroySystemManaged(Unity.Entities.ComponentSystemBase)">
            <summary>
            Destroys one of the World's existing system instances.
            </summary>
            <remarks>
            **Important:** This function creates a sync point, which means that the EntityManager waits for all
            currently running Jobs to complete before destroying the system, and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <param name="system">The system to destroy. Must be an existing instance in this World.</param>
            <exception cref="T:System.ArgumentException">Thrown if any of the World's systems are currently executing.</exception>
        </member>
        <member name="M:Unity.Entities.World.DestroyAllSystemsAndLogException">
            <summary>
            Destroy all system instances in the World. Any errors encountered during individual system destruction will be logged to the console.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if any of the World's systems are currently executing.</exception>
        </member>
        <member name="M:Unity.Entities.World.GetOrCreateSystemsAndLogException(System.Collections.Generic.IEnumerable{System.Type},System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            For the systems from the list of types which are not already created yet in the current world,
            create systems in the order they are passed in, NOT checking createafter/createbefore validity.
            </summary>
            <remarks>
            If errors are encountered either when creating the system or when calling OnCreate, a default
            SystemHandle will be returned for that system.
            </remarks>
            <param name="types">The system types to create</param>
            <param name="typesCount">The number of elements in the <paramref name="types"/> enumeration</param>
            <param name="allocator">The allocator to use to allocate the output system list</param>
            <returns>A list of system instances</returns>
        </member>
        <member name="M:Unity.Entities.World.GetOrCreateSystemsAndLogException(System.Type[],Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Creates systems from the list of types which aren't already created in the current world.
             </summary>
             <remarks>
             This function creates systems in the order they are passed in, and ignores <see cref="T:Unity.Entities.CreateBeforeAttribute"/>
             and <see cref="T:Unity.Entities.CreateAfterAttribute"/> validity.
             If errors are encountered either when creating the system or when calling OnCreate, a default
             <see cref="T:Unity.Entities.SystemHandle"/> will be returned for that system.
            
             **Important:** This function creates a sync point if any systems are created, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the systems, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="types">The system types to create, in the order in which they should be created.</param>
             <param name="allocator">The allocator to use to allocate the output system list</param>
             <returns>A list of system instances</returns>
        </member>
        <member name="P:Unity.Entities.World.QuitUpdate">
            <summary>
            Set this property to true to abort a world update after the next system update.
            </summary>
        </member>
        <member name="P:Unity.Entities.World.UpdateAllocator">
            <inheritdoc cref="P:Unity.Entities.WorldUnmanaged.UpdateAllocator"/>
        </member>
        <member name="P:Unity.Entities.World.CurrentGroupAllocators">
            <summary>
            Retrieve current double rewindable allocator for this World.
            </summary>
        </member>
        <member name="M:Unity.Entities.World.SetGroupAllocator(Unity.Collections.DoubleRewindableAllocators*)">
            <summary>
            Push group allocator into a stack.
            </summary>
            <remarks>System groups use the group allocator to rewind memory at a different rate from the world update.
            To do this, use the rate manager's ShouldGroupUpdate(), when pushing time into world. You can also set the group
            allocator to replace the world's update allocator. When popping time out of the world, you can rewind the allocator,
            and if not world owned update the allocator, and then restore the old allocator back.</remarks>
            <param name="newGroupAllocators">The group allocator to push into a stack.</param>
        </member>
        <member name="M:Unity.Entities.World.RestoreGroupAllocator(Unity.Collections.DoubleRewindableAllocators*)">
            <summary>
            Pop group allocator out of the stack.
            </summary>
            <remarks>System group can make use of group allocator to rewind memory at a different rate from the world update.
            User can achieve this in rate manager's ShouldGroupUpdate(), when pushing time into world, user also set group
            allocator to replace world update allocator. When popping time out of the world, user rewinds the allocator
            if not world owned update allocator and then restore the old allocator back.</remarks>
            <param name="oldGroupAllocators">The group allocator to pop from the stack.</param>
        </member>
        <member name="M:Unity.Entities.World.Update">
             <summary>
             Update the World's default system groups.
             </summary>
             <remarks>The system group update order is:
             1. <see cref="T:Unity.Entities.InitializationSystemGroup"/>
             2. <see cref="T:Unity.Entities.SimulationSystemGroup"/>
             3. <see cref="T:Unity.Entities.PresentationSystemGroup"/>
            
             Generally this is not necessary within the context of a UnityEngine application; instead, use
             <see cref="M:Unity.Entities.ScriptBehaviourUpdateOrder.AppendWorldToPlayerLoop(Unity.Entities.World,UnityEngine.LowLevel.PlayerLoopSystem@)"/> to insert these system groups into the
             UnityEngine player loop, where they'll be interleaved with existing UnityEngine updates.</remarks>
        </member>
        <member name="T:Unity.Entities.World.NoAllocReadOnlyCollection`1">
            <summary>
            Read only collection that doesn't generate garbage when used in a foreach.
            </summary>
            <typeparam name="T">The list element type</typeparam>
        </member>
        <member name="M:Unity.Entities.World.NoAllocReadOnlyCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Construct a new instance
            </summary>
            <param name="source">The source list</param>
        </member>
        <member name="P:Unity.Entities.World.NoAllocReadOnlyCollection`1.Count">
            <summary>
            The number of list elements
            </summary>
        </member>
        <member name="P:Unity.Entities.World.NoAllocReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Look up a list element by index
            </summary>
            <param name="index">The list index to look up</param>
        </member>
        <member name="M:Unity.Entities.World.NoAllocReadOnlyCollection`1.GetEnumerator">
            <summary>
            Get an enumerator interface to the list
            </summary>
            <returns>A list enumerator</returns>
        </member>
        <member name="M:Unity.Entities.World.NoAllocReadOnlyCollection`1.Contains(`0)">
            <summary>
            Check if the list contains a specific element
            </summary>
            <param name="item">The itme to search for</param>
            <returns>True if the element is found in the list, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.World.FindSystemStateForId(System.Int32)">
            <returns>Null if not found.</returns>
        </member>
        <member name="T:Unity.Entities.World.SystemStub">
            <summary>
            This stub system is used to create instances of aspects
            when no SystemState is available (outside dot runtime).
            It is used by EntityManager.GetAspect and EntityManager.GetAspectRO
            which will be called from the editor.
            </summary>
        </member>
        <member name="T:Unity.Entities.WorldExtensions">
            <summary>
            Variants of World methods that support unmanaged systems (<see cref="T:Unity.Entities.ISystem"/>s)
            </summary>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.CreateSystem``1(Unity.Entities.World)">
             <summary>
             Create and return a handle for an instance of a system of type <typeparamref name="T"/> in this World.
             </summary>
             <remarks>
             This can result in multiple instances of the same system in a single World, which is generally undesirable.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the system, and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="self">The World</param>
             <typeparam name="T">The system type</typeparam>
             <returns>The new system instance's handle of system type <typeparamref name="T"/> in this World.</returns>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.GetExistingSystem``1(Unity.Entities.World)">
            <summary>
            Return an existing handle for an instance of a system of type <typeparamref name="T"/> in this World.
            </summary>
            <typeparam name="T">The system type</typeparam>
            <param name="self">The World</param>
            <returns>The existing system instance's handle of system type <typeparamref name="T"/> in this World. If no such instance exists, the method returns SystemHandle.Null.</returns>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.GetOrCreateSystem``1(Unity.Entities.World)">
            <summary>
            Retrieve the handle for an instance of a system of type <typeparamref name="T"/> from the current World. If the system
            does not exist in this World, it will first be created.
            </summary>
            <remarks>
            **Important:** This function creates a sync point if a system is created, which means that the EntityManager waits for all
            currently running Jobs to complete before creating the system, and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <typeparam name="T">The system type</typeparam>
            <param name="self">The World</param>
            <returns>The instance's handle of system type <typeparamref name="T"/> in this World. If the system
            does not exist in this World, it will first be created.</returns>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.GetOrCreateSystem(Unity.Entities.World,System.Type)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.World.GetOrCreateSystem(System.Type)"/> instead.</summary>
            <param name="self">The World</param>
            <param name="unmanagedType">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.DestroySystem(Unity.Entities.World,Unity.Entities.SystemHandle)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle)"/> instead.</summary>
            <param name="self">The World</param>
            <param name="sysHandle">The system handle.</param>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.AddSystem``1(Unity.Entities.World)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.World.CreateSystem``1"/> instead.</summary>
            <param name="self">The World</param>
            <typeparam name="T">The system</typeparam>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.GetOrCreateUnmanagedSystem(Unity.Entities.World,System.Type)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.World.GetOrCreateSystem(System.Type)"/> instead.</summary>
            <param name="self">The World</param>
            <param name="unmanagedType">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.WorldExtensions.DestroyUnmanagedSystem(Unity.Entities.World,Unity.Entities.SystemHandle)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle)"/> instead.</summary>
            <param name="self">The World</param>
            <param name="sysHandle">The system handle.</param>
        </member>
        <member name="P:Unity.Entities.LowLevel.UnsafeStack`1.IsEmpty">
            <summary>
            Determine if the stack is empty.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.UnsafeStack`1.Length">
            <summary>
            Retrieve the number of items on the stack.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.UnsafeStack`1.IsCreated">
            <summary>
            Determine if the stack has been allocated.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
            Create a new stack.
            </summary>
            <param name="initialCapacity">The initial capacity of the stack.</param>
            <param name="allocator">The allocator for the stack container.</param>
            <param name="options">Initialization options for the stack allocation.</param>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.Push(`0@)">
            <summary>
            Push an item onto the stack.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.Top">
            <summary>
            Retrieve the item on the top of the stack.
            </summary>
            <returns>The item returned by reference.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.Pop">
            <summary>
            Pop the item on top of the stack.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.Clear">
            <summary>
            Clear the stack from all its items.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.Dispose">
            <summary>
            Dispose the memory of the stack.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.UnsafeStack`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Dispose the memory of the stack.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.SpinLock.Acquire">
            <summary>
            Continually spin until the lock can be acquired.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.SpinLock.TryAcquire">
            <summary>
            Try to acquire the lock and immediately return without spinning.
            </summary>
            <returns><see langword="true"/> if the lock was acquired, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.SpinLock.TryAcquire(System.Boolean)">
            <summary>
            Try to acquire the lock, and spin only if <paramref name="spin"/> is <see langword="true"/>.
            </summary>
            <param name="spin">Set to true to spin the lock.</param>
            <returns><see langword="true"/> if the lock was acquired, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.SpinLock.Release">
            <summary>
            Release the lock.
            </summary>
        </member>
        <member name="T:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference">
            <summary>
            An untyped reference to a blob assets. UnsafeUntypedBlobAssetReference can be cast to specific typed BlobAssetReferences.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Create``1(Unity.Entities.BlobAssetReference{``0})">
            <summary>
            Creates an unsafe untyped blob asset reference from a BlobAssetReference.
            </summary>
            <typeparam name="T">The unsafe type.</typeparam>
            <param name="blob">Reference to the blob asset that will be referenced by the new UnsafeUntypedBlobAssetReference.</param>
            <returns>An unsafe untyped blob asset reference to the blob asset.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Reinterpret``1">
            <summary>
            Returns a typed blob asset reference to the blob asset referenced by this instance.
            </summary>
            <typeparam name="T">The reinterpreted type.</typeparam>
            <returns>A blob asset reference of the reinterpreted type.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Dispose">
            <summary>
            Disposes the UnsafeUntypedBlobAssetReference object.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference.Equals(Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBlobAssetReference)">
            <summary>
            Two UnsafeUntypedBlobAssetReference are equal when they reference the same data.
            </summary>
            <param name="other">The reference to compare to this one.</param>
            <returns>True, if both references point to the same data or if both are null.</returns>
        </member>
        <member name="T:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor">
            <summary>
            Allow untyped access to buffers data in a chunk. The use of untyped accessor is in general
            not recommended and should be exploited only in very specific use case scenario.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.Length">
            <summary>
            The number of buffers in the chunk.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.ElementSize">
            <summary>
            The size (in bytes) of a single buffer element.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafePtrAndLength(System.Int32,System.Int32@)">
            <summary>
            The unsafe pointer and length for the buffer at the given <paramref name="index"/> in the chunk
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <param name="length">The buffer's length will be written here</param>
            <returns>The base pointer for the buffer at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafeReadOnlyPtrAndLength(System.Int32,System.Int32@)">
            <summary>
            The read-only unsafe pointer and length for the buffer at the given <paramref name="index"/> in the chunk
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <param name="length">The buffer's length will be written here</param>
            <returns>The base pointer for the buffer at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafePtr(System.Int32)">
            <summary>
            Gets the unsafe pointer to buffer elements at the given <paramref name="index"/> in the chunk
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <returns>The base pointer for the buffer at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetUnsafeReadOnlyPtr(System.Int32)">
            <summary>
            Gets the read-only unsafe pointer to buffer elements at the given <paramref name="index"/> in the chunk
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <returns>The base pointer for the buffer at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetBufferLength(System.Int32)">
            <summary>
            Gets the current size of the buffer at the given <paramref name="index"/> in the chunk
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <returns>The length the buffer at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.GetBufferCapacity(System.Int32)">
            <summary>
            Gets the current capacity of the buffer at the given <paramref name="index"/> in the chunk
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <returns>The capacity for the buffer at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeUntypedBufferAccessor.ResizeUninitialized(System.Int32,System.Int32)">
            <summary>
            Increases the buffer capacity and length of the buffer associated to the entity at the given
            <paramref name="index"/> in the chunk
            </summary>
            <remarks>If <paramref name="length"/> is less than the current
            length of the buffer at index <paramref name="index"/>, the length of the buffer is reduced while the
            capacity remains unchanged.</remarks>
            <param name="index">The array index of the buffer to query</param>
            <param name="length">the new length of the buffer</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="T:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1">
            <summary>
            An unmanaged, not resizable circular buffer.
            </summary>
            <typeparam name="T">The type of elements in the circular buffer.</typeparam>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Ptr">
            <summary>
            The internal buffer allocation pointer of the circular buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.IsCreated">
            <summary>
            Whether this circular buffer has been allocated (and not yet deallocated).
            </summary>
            <value>True if this list has been allocated (and not yet deallocated).</value>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Capacity">
            <summary>
            The capacity of the circular buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Count">
            <summary>
            The element count currently in the circular buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.IsEmpty">
            <summary>
            Whether or not this circular buffer is empty.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.IsFull">
            <summary>
            Whether or not this circular buffer is full (Count reached Capacity).
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.FrontIndex">
            <summary>
            Retrieve the front index value in the circular buffer.
            </summary>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.BackIndex">
            <summary>
            Retrieve the back index value in the circular buffer.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
            Create a new circular buffer.
            </summary>
            <param name="capacity">The total capacity.</param>
            <param name="allocator">The allocator.</param>
            <param name="options">Memory initialization options.</param>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.#ctor(Unity.Collections.NativeArray{`0}@,Unity.Collections.Allocator)">
            <summary>
            Create a new circular buffer from a native array.
            </summary>
            <param name="array">The native array.</param>
            <param name="allocator">The allocator.</param>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.#ctor(`0[],Unity.Collections.Allocator)">
            <summary>
            Create a new circular buffer from a managed array.
            </summary>
            <param name="array">The managed array.</param>
            <param name="allocator">The allocator.</param>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Construct(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
            Construct the circular buffer. Throws if already allocated.
            </summary>
            <param name="capacity">The total capacity.</param>
            <param name="allocator">The allocator.</param>
            <param name="options">Memory initialization options.</param>
        </member>
        <member name="P:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Item(System.Int32)">
            <summary>
            The element at index of the circular buffer.
            </summary>
            <remarks>
            Throws if index is out of range.
            </remarks>
            <param name="index">The index.</param>
            <returns>The element returned by value.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.ElementAt(System.Int32)">
            <summary>
            The element at index of the circular buffer, returned by ref.
            </summary>
            <remarks>
            Throws if index is out of range.
            </remarks>
            <param name="index">The index.</param>
            <returns>The element returned by ref.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Front">
            <summary>
            Retrieve the element value at the front of the circular buffer.
            </summary>
            <remarks>
            Throws if empty.
            </remarks>
            <returns>The element value at the front.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Back">
            <summary>
            Retrieve the element value at the back of the circular buffer.
            </summary>
            <remarks>
            Throws if empty.
            </remarks>
            <returns>The element value at the back.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushFront(`0@)">
            <summary>
            Push one element at the front of the circular buffer.
            </summary>
            <param name="element">The element.</param>
            <returns>Whether or not the element could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushFront(`0*,System.Int32)">
            <summary>
            Push many elements at the front of the circular buffer.
            </summary>
            <param name="elements">The elements.</param>
            <param name="count">The element count.</param>
            <returns>Whether or not the elements could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushFront(Unity.Collections.NativeArray{`0}@)">
            <summary>
            Push many elements at the front of the circular buffer.
            </summary>
            <param name="array">The elements.</param>
            <returns>Whether or not the elements could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushFront(`0[])">
            <summary>
            Push many elements at the front of the circular buffer.
            </summary>
            <param name="array">The elements.</param>
            <returns>Whether or not the elements could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushBack(`0@)">
            <summary>
            Push one element at the back of the circular buffer.
            </summary>
            <param name="element">The element.</param>
            <returns>Whether or not the element could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushBack(`0*,System.Int32)">
            <summary>
            Push many elements at the back of the circular buffer.
            </summary>
            <param name="elements">The elements.</param>
            <param name="count">The element count.</param>
            <returns>Whether or not the elements could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushBack(Unity.Collections.NativeArray{`0}@)">
            <summary>
            Push many elements at the front of the circular buffer.
            </summary>
            <param name="array">The elements.</param>
            <returns>Whether or not the elements could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PushBack(`0[])">
            <summary>
            Push many elements at the front of the circular buffer.
            </summary>
            <param name="array">The elements.</param>
            <returns>Whether or not the elements could be added.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PopFront">
            <summary>
            Remove one element at the front of the circular buffer.
            </summary>
            <returns>Whether or not the element could be removed.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PopFront(System.Int32)">
            <summary>
            Remove many elements at the front of the circular buffer.
            </summary>
            <param name="count">The element count.</param>
            <returns>Whether or not the elements could be removed.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PopBack">
            <summary>
            Pop one element at the back of the circular buffer.
            </summary>
            <returns>Whether or not the element could be removed.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.PopBack(System.Int32)">
            <summary>
            Pop many elements at the back of the circular buffer.
            </summary>
            <param name="count">The number of elements to pop.</param>
            <returns>Whether or not the elements could be removed.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Unwind">
            <summary>
            Rotate the circular buffer elements back to the front of the allocation.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Clear">
            <summary>
            Clear the circular buffer from all its elements.
            </summary>
            <remarks>
            Does not deallocate memory.
            </remarks>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.ToNativeArray(Unity.Collections.Allocator)">
            <summary>
            Convert the circular buffer to a new NativeArray.
            </summary>
            <param name="allocator">The allocator used for the new NativeArray.</param>
            <returns>The circular buffer elements copied into a NativeArray.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.ToArray">
            <summary>
            Convert the circular buffer to an array.
            </summary>
            <returns>The circular buffer elements copied into an array.</returns>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Enumerator">
            <summary>
            Enumerator that can iterate through the <see cref="T:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.GetIndex(System.Int32)">
            <summary>
            Convert relative index to absolute index.
            </summary>
        </member>
        <member name="M:Unity.Entities.LowLevel.Unsafe.UnsafeCircularBuffer`1.Modulo(System.Int32,System.Int32)">
            <summary>
            Modulo implementation that works with negative numbers.
            </summary>
        </member>
        <member name="T:Unity.Entities.RefRO`1">
            <summary>
            ReadOnlyRef stores a safe read-only reference to a component data.
            </summary>
            <typeparam name="T">Type of this component</typeparam>
        </member>
        <member name="M:Unity.Entities.RefRO`1.#ctor(Unity.Collections.NativeArray{`0},System.Int32)">
            <summary>
            Stores a safe reference to a component from an array of components at the index.
            </summary>
            <param name="componentDataArray">The NativeArray of components.</param>
            <param name="index">The index of the the components.</param>
        </member>
        <member name="M:Unity.Entities.RefRO`1.Optional(Unity.Collections.NativeArray{`0},System.Int32)">
            <summary>
            Stores a safe reference to a component from an array of components at the index.
            If the array is empty stores a null reference.
            </summary>
            <param name="componentDataArray">The NativeArray of components.</param>
            <param name="index">The index of the components.</param>
            <returns>Read-only optional reference to component</returns>
        </member>
        <member name="P:Unity.Entities.RefRO`1.IsValid">
            <summary>
            Property that returns true if the reference is valid, false otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.RefRO`1.ValueRO">
            <summary>
            Returns a read-only reference to the component value itself.
            </summary>
            <remarks>
            This value is a reference to the actual component data.  It is safe to use this field directly, e.g.
            "Data.Value.SomeField".  It is also safe to make a copy of this value, e.g. "var myComponent = Data.Value".
            Keeping a ref ("ref var myref = Data.Value" is inherently unsafe as any structural change may invalidate this
            reference, and there is no way to detect this. It is safe to use this reference locally if you can guarantee
            that no structural changes will occur in between acquiring it and using it. Do not hold on to such a reference
            for any extended amount of time.
            </remarks>
        </member>
        <member name="T:Unity.Entities.Content.ContentDeliveryService">
            <summary>
            This class handles the overall process of delivering remote content to the client device.
            <seealso cref="T:Unity.Entities.Content.ContentLocationService"/>s are used to resolve <seealso cref="T:Unity.Entities.Content.RemoteContentId"/> into <seealso cref="T:Unity.Entities.Content.RemoteContentLocation"/>s.
            The <seealso cref="T:Unity.Entities.Content.ContentDownloadService"/> is used to download the data described by the <seealso cref="T:Unity.Entities.Content.RemoteContentLocation"/>s.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDeliveryService.DeliveryState">
            <summary>
            The state of the content delivery process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.None">
            <summary>
            Content has not begun the dlivery process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.ResolvingLocation">
            <summary>
            The location is being resolved.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.LocationResolved">
            <summary>
            The location has been resolved.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.DownloadingContent">
            <summary>
            The content is downloading.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.ContentDownloaded">
            <summary>
            The content has sucessfully downloaded and is in the cache.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.Cancelled">
            <summary>
            The delivery was cancelled.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryState.Failed">
            <summary>
            The delivery failed.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDeliveryService.DeliveryStatus">
            <summary>
            The status of the content delivery process.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDeliveryService.DeliveryStatus.State">
            <summary>
            The delivery state, which is determined from both the location resolving state and the download state.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryStatus.ContentId">
            <summary>
            The id of the remote content.  This is generally the hash of the relative path of the content file within the streaming assest folder.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryStatus.LocationStatus">
            <summary>
            The status of the location resolving process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryService.DeliveryStatus.DownloadStatus">
            <summary>
            The status of the downloading process.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDeliveryService.LocationServices">
            <summary>
            Enumeration of location services.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDeliveryService.DownloadServices">
            <summary>
            Enumeration of download services.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.#ctor">
            <summary>
            Construct a new delivery service.  In order to be functional, at least 1 locations service and 1 download service must be added.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.RemapContentPath(System.String)">
            <summary>
            Remaps the orignal content path to the path of the content in the local cache.
            </summary>
            <param name="originalPath">The original content path, relative to teh streaming assets folder.</param>
            <returns>The remapped path in the local cache.  If the content is not already in the cache, the original path is returned.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.AddDownloadService(Unity.Entities.Content.ContentDownloadService)">
            <summary>
            Adds a download service.  The priority of the service will be used to set the order.
            If there is another service with the same priority, the priority of the service added will be increased until it can be added.
            When added, OnAddedToDeliveryService will be called on the service.
            If there is a service with the same name, the existing service will be replaced with the passed in service.
            </summary>
            <param name="service">The download service.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.AddLocationService(Unity.Entities.Content.ContentLocationService)">
            <summary>
            Adds a location service. The priority of the service will be used to set the order.
            If there is another service with the same priority, the priority of the service added will be increased until it can be added.  When added, OnAddedToDeliveryService will be called on the service.
            </summary>
            <param name="service">The location service.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.AccumulateContentSize(System.Int32@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Computes the size of content.
            </summary>
            <param name="entryCount">The total number of resolved locations in the service.</param>
            <param name="totalBytes">The total number of bytes of the data.</param>
            <param name="cachedBytes">The total number of bytes already cached by the download service.</param>
            <param name="uncachedBytes">The total number of bytes not cached by the download service.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.AccumulateContentSize(Unity.Collections.FixedString512Bytes@,System.Int32@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Computes the size of the content set specified.
            </summary>
            <param name="setName">The content set to compute the size of.</param>
            <param name="entryCount">The total number of resolved locations in the service.</param>
            <param name="totalBytes">The total number of bytes of the data.</param>
            <param name="cachedBytes">The total number of bytes already cached by the download service.</param>
            <param name="uncachedBytes">The total number of bytes not cached by the download service.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.AccumulateDownloadStats(Unity.Entities.Content.RemoteContentId@,System.Int64@,System.Int64@)">
            <summary>
            Get the download statistics for a specified remote content id.
            </summary>
            <param name="id">The remote content id.</param>
            <param name="totalBytes">The total size of the content.</param>
            <param name="downloadedBytes">The number of bytes already downloaded.</param>
            <returns>True if successful, false if the id has not been resolved or is not known to the system.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.CleanCache">
            <summary>
            Clears any data from the cache directory that is not referenced by a location service.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.GetDeliveryStatus(Unity.Entities.Content.RemoteContentId@,Unity.Collections.NativeList{Unity.Entities.Content.ContentDeliveryService.DeliveryStatus}@)">
            <summary>
            Gets the delivery status of a remote id.  This version of this method should be used when retrieving the id of a set of downloads.
            </summary>
            <param name="id">The id of the delivery request.</param>
            <param name="results">The results of the status inquiry.  If the id refers to a set of requests, this array will contain multiple entries.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.CancelAllDeliveries">
            <summary>
            Cancels all active downloads.  This also marks all completed downloads as cancelled as well.  This will force any previously completed downloads to restart.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.GetDeliveryStatus(Unity.Entities.Content.RemoteContentId@)">
            <summary>
            Gets the delivery status of a remote id.  If the id refers to a single delivery, the status returned will be for that id.
            If it refers to a set of deliveries, the status will be aggregated to the lowest value of the set.
            </summary>
            <param name="id">The remote content id.</param>
            <returns>The status of the delivery.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.DeliverContent(System.String,Unity.Entities.Hash128,System.Int64,System.UInt32)">
            <summary>
            Starts the process of delivering content based on its location.
            </summary>
            <param name="url">The url of the remote content.</param>
            <param name="hash">The hash of the remote content.  If not set, the cache will not be used.</param>
            <param name="size">The expected size of the remote content.  If not set, accurate download progress is not available.</param>
            <param name="crc">The crc of the content.  If not set, the crc is not checked.</param>
            <returns>The remote content id for the content that is downloaded.  This id can be used to check the status of the download.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.DeliverContent(Unity.Entities.Content.RemoteContentLocation@)">
            <summary>
            Starts the process of delivering content based on its location.
            </summary>
            <param name="loc">The location of the content.</param>
            <returns>The generated remote content id for the location.  This can be used to track the progress.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.CancelDelivery(Unity.Entities.Content.RemoteContentId@)">
            <summary>
            Cancel an in progress download. This will remove the download state and attempt to cancel the download if it is still inprogress or queued.
            If the download has already completed, the cached data will not be removed.
            </summary>
            <param name="id">The remote content id to cancel.</param>
            <returns>False if the id is not known. True otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.DeliverContent(Unity.Entities.Content.RemoteContentId@)">
            <summary>
            Starts the delivery process for content identified by the remote content id.
            </summary>
            <param name="id">The remote content id for the content.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.DeliverContent(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Delivers a named content set.
            </summary>
            <param name="setName">The name of the content set.  These are defined during the publishing process.</param>
            <returns>The remote id for the content set.  This can be used to check the download status.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.DeliverContent(Unity.Entities.Content.RemoteContentId*,System.Int32)">
            <summary>
            Downloads multiple files as a single set.
            </summary>
            <param name="remoteIds">A pointer to the array of remote content ids.</param>
            <param name="length">The number of remote content ids.</param>
            <returns>The remote id for the content set.  This can be used to check the download status.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.DeliverContent(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.Content.RemoteContentId}@)">
            <summary>
            Starts the delivery process of a set of contents.
            </summary>
            <param name="remoteIds">The set of remote ids to deliver.</param>
            <returns>A generated remote content id that can be used to track the progress of the delivery.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.Process">
            <summary>
            Process active content deliveries.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryService.Dispose">
            <summary>
            Free internal resources.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.RuntimeContentCatalog">
            <summary>
            Runtime catalog.  The class uses data loaded from RuntimeContentCatalogData but expands it into a format that is better suited for runtime access.
            Paths are precomputed, dependency arrays are created, and index lookups are resolved into ids.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize internal data storage.
            </summary>
            <param name="objectCapacity">The initial capacity for objects.</param>
            <param name="fileCapacity">The initial capacity for files.</param>
            <param name="archiveCapacity">The initial capacity for archives.</param>
            <param name="dependencyCapacity">The initial capacity for file dependencies.</param>
            <param name="sceneCapacity">The initial capacity for scenes.</param>
        </member>
        <member name="P:Unity.Entities.Content.RuntimeContentCatalog.FileDependencySetCount">
            <summary>
            The number of file dependency sets
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetArchiveIds(Unity.Collections.Allocator)">
            <summary>
            Get the entire list of archive ids.
            </summary>
            <param name="alloc">Allocator to use for created NativeArray.</param>
            <returns>The set of archive ids.  The caller is responsible for disposing the returned array.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetObjectIds(Unity.Collections.Allocator)">
            <summary>
            Get the entire list of object ids.
            </summary>
            <param name="alloc">Allocator to use for created NativeArray.</param>
            <returns>The set of object ids.  The caller is responsible for disposing the returned array.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetSceneIds(Unity.Collections.Allocator)">
            <summary>
            Get the entire list of object ids.
            </summary>
            <param name="alloc">Allocator to use for created NativeArray.</param>
            <returns>The set of object ids.  The caller is responsible for disposing the returned array.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetFileIds(Unity.Collections.Allocator)">
            <summary>
            Get the entire list of file ids.
            </summary>
            <param name="alloc">Allocator to use for created NativeArray.</param>
            <returns>The set of file ids.  The caller is responsible for disposing the returned array.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetSceneLocationCount">
            <summary>
            The number of scenes.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetObjectLocationCount">
            <summary>
            The number of objects.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetFileLocationCount">
            <summary>
            The number of serialized files.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetArchiveLocationCount">
            <summary>
            The number of archives.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.LoadCatalogData(System.String,System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Loads the Catalog data from a given directory. If reset is false and there is existing catalog data, this
            will merge the existing RuntimeContentCatalog with the catalog stored at catalogPath.
            </summary>
            <param name="catalogPath"> The path at which the catalog data that will be loaded is stored. </param>
            <param name="archivePathTransformFunc">Functor to transform archive paths.</param>
            <param name="mountedFileNameTransformFunc">Functor to transform filenames.</param>
            <returns> Returns true if the load was successful, false if it was unsuccessful. </returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.LoadCatalogData(Unity.Entities.Content.RuntimeContentCatalogData@,System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Adds catalog data.  Any existing catalog data is preserved.
            </summary>
            <param name="catalogData">The catalog data.</param>
            <param name="archivePathTransformFunc">Functor to transform archive paths.</param>
            <param name="mountedFileNameTransformFunc">Functor to transform filenames.</param>
        </member>
        <member name="P:Unity.Entities.Content.RuntimeContentCatalog.IsCreated">
            <summary>
            True if the data has been created
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.RuntimeContentCatalog.IsEmpty">
            <summary>
            True if there is no data loaded into the catalog.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.GetStringValue(System.Int32)">
            <summary>
            Retrieves the stored string value.
            </summary>
            <param name="index">Index of the stored string value;</param>
            <returns>The string value at the index.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.Dispose">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.TryGetObjectLocation(Unity.Entities.Serialization.UntypedWeakReferenceId,Unity.Entities.Content.ContentFileId@,System.Int64@)">
            <summary>
            Get information about a specific object to load.
            </summary>
            <param name="objectId">The runtime id of the object.  If using an UntypedWeakReferenceId, this would be the RuntimeId property.</param>
            <param name="fileId">The ContentArchive file that this object is in.</param>
            <param name="localIdentifierInFile">The local id in the ContentArchive file.</param>
            <returns>True if the object information has been found, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.TryGetSceneLocation(Unity.Entities.Serialization.UntypedWeakReferenceId,Unity.Entities.Content.ContentFileId@,System.String@)">
            <summary>
            Retrieves location information about a scene.
            </summary>
            <param name="sceneId">The scene id.</param>
            <param name="fileId">The file id of the scene.</param>
            <param name="sceneName">The name of the scene.</param>
            <returns>True if the location data is found, otherwise false.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.TryGetFileLocation(Unity.Entities.Content.ContentFileId,System.String@,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.Content.ContentFileId}@,Unity.Entities.Content.ContentArchiveId@,System.Int32@)">
            <summary>
            Get the ContentArchive file information for loading.
            </summary>
            <param name="fileId">The id of the ContentArchiveFile.</param>
            <param name="filePath">The path of the file within its archive.</param>
            <param name="fileDependencies">The set of file dependencies for this file. These must be loaded before this file is loaded.</param>
            <param name="archiveId">The archive that this file is contained in.</param>
            <returns>True if the file information has been found, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.TryGetFileLocation(Unity.Entities.Content.ContentFileId,System.Int32@,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.Content.ContentFileId}@,Unity.Entities.Content.ContentArchiveId@,System.Int32@)">
            <summary>
            Get the ContentArchive file information for loading.
            </summary>
            <param name="fileId">The id of the ContentArchiveFile.</param>
            <param name="filePathHandle">The path of the file within its archive as a handle.</param>
            <param name="fileDependencies">The set of file dependencies for this file. These must be loaded before this file is loaded.</param>
            <param name="archiveId">The archive that this file is contained in.</param>
            <returns>True if the file information has been found, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.TryGetArchiveLocation(Unity.Entities.Content.ContentArchiveId,System.String@)">
            <summary>
            Get the loading information for and archive.
            </summary>
            <param name="archiveId">The archive id.</param>
            <param name="archivePath">The path to mount the archive.</param>
            <returns>True if the archive information has been found, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.TryGetArchiveLocation(Unity.Entities.Content.ContentArchiveId,System.Int32@)">
            <summary>
            Get the loading information for an archive.
            </summary>
            <param name="archiveId">The archive id.</param>
            <param name="archivePathHandle">The path to mount the archive as a handle.</param>
            <returns>True if the archive information has been found, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalog.Print(System.Action{System.String})">
            <summary>
            Print the contents of the catalog
            </summary>
            <param name="printFunc">Function to handle the actual printing.</param>
        </member>
        <member name="T:Unity.Entities.Content.RuntimeContentCatalogDataUtility">
            <summary>
            Utility class for creating and printing catalog data.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalogDataUtility.Print(Unity.Entities.Content.RuntimeContentCatalogData@,System.Action{System.String})">
            <summary>
            Print data in the serialized format.
            </summary>
            <param name="data">The catalog data to print.</param>
            <param name="printFunc">Method to print each line.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentCatalogDataUtility.Create(Unity.Entities.Content.IRuntimeCatalogDataSource,Unity.Entities.BlobBuilder,Unity.Entities.Content.RuntimeContentCatalogData@,System.Func{Unity.Entities.Serialization.UntypedWeakReferenceId,Unity.Entities.Serialization.UntypedWeakReferenceId})">
            <summary>
            Create runtime catalog data.
            </summary>
            <param name="dataSource">The source catalog data.</param>
            <param name="blobBuilder">The builder to use when creating the data.</param>
            <param name="blobDataRoot">The root object to create data into.</param>
            <param name="idRemapFunc">Functor to remap <seealso cref="!:ContentRuntimeId"/>.</param>
        </member>
        <member name="T:Unity.Entities.Content.RuntimeContentManager">
            <summary>
            Class that manages resources loaded from content archives.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.RuntimeContentManager.RelativeCatalogPath">
            <summary>
            The relative path of the catalog.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.DefaultContentFileNameFunc(System.String)">
            <summary>
            Functor that transforms a file id into the internal mounted path.
            </summary>
            <param name="fileId">The file id.</param>
            <returns>The internal mount path for the file. This is implemented as $"ns:/{k_NameSpaceString}/{ArchivePrefix}/{fileId}"</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.DefaultArchivePathFunc(System.String)">
            <summary>
            Functor that transforms an archive id into a relative path.  This path should be relative to the streaming assets path.
            </summary>
            <param name="archiveId">The archive id.</param>
            <returns>The relative path of the archive file.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.Initialize">
            <summary>
            Initialize the internal data structures for handling content archives.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.Cleanup(System.Int32@)">
            <summary>
            Cleanup internal resources.
            </summary>
            <param name="unreleasedObjectCount">The number of unreleased objects found during cleanup.</param>
            <returns>True if no unreleased objects were found, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.LoadLocalCatalogData(System.String,System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Loads catalog data from a local path.
            </summary>
            <param name="catalogPath">The full path to the catalog file.</param>
            <param name="fileNameFunc">Functor to transform internal content file names.  The string passed in is the file id and the expected returned string is the internal archive file path.  (e.g. $"ns:/{k_NameSpaceString}/{ArchivePrefix}/{fileId}")</param>
            <param name="archivePathFunc">Functor to transform content archive ids to full local paths.</param>
            <returns>True if the data was loaded successfully.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetObjectIds(Unity.Collections.Allocator)">
            <summary>
            Get the entire list of object ids.
            </summary>
            <param name="alloc">Allocator to use for created NativeArray.</param>
            <returns>The set of object ids.  The caller is responsible for disposing the returned array.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetSceneIds(Unity.Collections.Allocator)">
            <summary>
            Get the entire list of object ids.
            </summary>
            <param name="alloc">Allocator to use for created NativeArray.</param>
            <returns>The set of object ids.  The caller is responsible for disposing the returned array.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.LoadObjectAsync(Unity.Entities.Serialization.UntypedWeakReferenceId@)">
            <summary>
            Thread safe method to initiate an object load. The load will start during the main thread update.
            </summary>
            <param name="objectId">The object id to load.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.ReleaseObjectAsync(Unity.Entities.Serialization.UntypedWeakReferenceId@)">
            <summary>
            Thread safe method to release an object.  The release will happen during the main thread update.
            </summary>
            <param name="objectId">The object id to release.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.ProcessQueuedCommands">
            <summary>
            Process queued load and release requests.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetSceneLoadingStatus(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            Gets the current status of an active scene.
            </summary>
            <param name="sceneId">The id of the scene.</param>
            <returns>The status of the scene loading process.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetSceneFileValue(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            The scene file.  This is needed to integrate when the scene is loaded with the <seealso cref="P:Unity.Loading.ContentSceneParameters.autoIntegrate"/> value set to false.
            </summary>
            <param name="sceneId">The runtime id of the scene.</param>
            <returns>The scene file. If the scene is not loaded, the returned scene will be invalid.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetSceneValue(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            The loaded scene value.
            </summary>
            <param name="sceneId">The runtime id of the scene.</param>
            <returns>The scene. If the scene is not loaded, the returned scene will be invalid.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.ReleaseObjects(Unity.Entities.Serialization.UntypedWeakReferenceId*,System.Int32)">
            <summary>
            Release multiple objects.
            </summary>
            <param name="pObjectIds">Pointer to the object id array.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.LoadObjectsAsync(Unity.Entities.Serialization.UntypedWeakReferenceId*,System.Int32)">
            <summary>
            Load multiple objects.
            </summary>
            <param name="pObjectIds">Pointer to the object id array.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.LoadObjectImpl(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            Begins the process of loading an object.  This may trigger the loading of content archives and any dependencies.
            </summary>
            <param name="objectId">The id of the object.</param>
            <returns>True if the process started, false if any errors are encountered.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.LoadSceneAsync(Unity.Entities.Serialization.UntypedWeakReferenceId,Unity.Loading.ContentSceneParameters)">
            <summary>
            Load a scene.
            </summary>
            <param name="sceneId">The runtime id of the scene.</param>
            <param name="loadParams">Parameters to control how the scene is loaded.</param>
            <returns>The scene that was requested to load.  This scene is not loaded at this point.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.ReleaseScene(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            Release a scene.  If the reference count goes to zero, the scene will be unloaded.
            </summary>
            <param name="sceneId">The scene runtime id.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.ReleaseObjectImpl(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            Release an object.  This will decrement the internal reference count and may not immediately unload the object.
            </summary>
            <param name="objectId">The object id to release.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.WaitForObjectCompletion(Unity.Entities.Serialization.UntypedWeakReferenceId,System.Int32)">
            <summary>
            Blocks on the main thread until the load operation completes. This function can be slow and so should be used carefully to avoid frame rate stuttering.
            </summary>
            <param name="objectId">The id of the object to wait for.</param>
            <param name="timeoutMs">The maximum time in milliseconds this function will wait before returning. Pass 0 to block indefinitely until completion.</param>
            <returns> Returns false if the timeout was reached before ContentFile completed loading or if the object is not loading.</returns>
            <exception cref="T:System.Exception">An exception will be thrown if the internal file data is invalid.</exception>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetObjectLoadingStatus(Unity.Entities.Serialization.UntypedWeakReferenceId@)">
            <summary>
            Get the cached object status value.  This method is thread safe and can be burst compiled.  The cached value is only update once per frame.
            </summary>
            <param name="objectId">The object id.</param>
            <returns>The loading status of the object.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetObjectValue``1(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            For an object that is loaded, this will return the loaded value.
            </summary>
            <typeparam name="TObject">The type of object to access.</typeparam>
            <param name="objectId">The object id.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentManager.GetObjectHandle(Unity.Entities.Serialization.UntypedWeakReferenceId@,System.Runtime.InteropServices.GCHandle@)">
            <summary>
            For an object that is loaded, this will return the loaded value handle.  This method can be call from bursted code and background threads.
            </summary>
            <typeparam name="TObject">The type of object to access.</typeparam>
            <param name="objectId">The object id.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="T:Unity.Entities.Content.ContentDownloadService">
            <summary>
            Class responsible for managing active content downloads.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDownloadService.State">
            <summary>
            The state of a content download.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.State.None">
            <summary>
            The download has not been requested.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.State.Queued">
            <summary>
            The download is in the queue to be processed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.State.Downloading">
            <summary>
            The download is in progress.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.State.Complete">
            <summary>
            The download is completed and is successful.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.State.Cancelled">
            <summary>
            The download was cancelled.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.State.Failed">
            <summary>
            The download failed.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDownloadService.DownloadStatus">
            <summary>
            The status of a content download.  This contains the state, progress, and the final local path of a successful download.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.DownloadStatus.DownloadState">
            <summary>
            The state of the download process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.DownloadStatus.BytesDownloaded">
            <summary>
            The current number of bytes downloaded.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDownloadService.DownloadStatus.LocalPath">
            <summary>
            When complete, the local path of the file that was downloaded.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDownloadService.DownloadOperation">
            <summary>
            Abstraction for the individual download operations.  These can be subclassed for custom implementations of downloading.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.DownloadOperation.IsCancelled">
            <summary>
            True if the operation has been cancelled.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.DownloadOperation.Location">
            <summary>
            The location of the operation.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.DownloadOperation.IsStarted">
            <summary>
            True if the operation has been started.  This will be false if the operation is queued.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.Init(Unity.Entities.Content.RemoteContentLocation,System.String,System.String)">
            <summary>
            Initialize the download operation with the information needed to start.
            </summary>
            <param name="loc">The content location.</param>
            <param name="tmpPath">The temporary path to download to.</param>
            <param name="finalPath">The final path to copy to once the download completes.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.Process(Unity.Entities.Content.ContentDownloadService.DownloadStatus@,System.Int64@)">
            <summary>
            Process the state of the operation.
            </summary>
            <param name="status">The status of the operation.  This may be modified if the status changes.</param>
            <param name="downloadedBytes">The total number of bytes downloaded of the content.</param>
            <returns>True if the operation is complete, false if more processing is required.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.StartDownload(System.String,System.String)">
            <summary>
            Called when the operation can begin downloading it data.
            </summary>
            <param name="remotePath">The remote path of the data.  This is typically a url.</param>
            <param name="localTmpPath">The local path to download the data to.  This file will be moved to the final path once completed.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.ProcessDownload(System.Int64@,System.String@)">
            <summary>
            Called to process the download operation.
            </summary>
            <param name="downloadedBytes">The total number of bytes downloaded.</param>
            <param name="error">This will be set to the error string if the operation fails.</param>
            <returns>True if processing is completed, false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.CancelDownload">
            <summary>
            Called when the download is cancelled.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.Start(Unity.Entities.Content.ContentDownloadService.DownloadStatus@)">
            <summary>
            Starts the download operation.
            </summary>
            <param name="status">The status will be updated when Start is called.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadOperation.Cancel">
            <summary>
            Cancel the download if possible.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.CacheRoot">
            <summary>
            The root directory of the local cache.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.Name">
            <summary>
            The download service name. Each service name must be unique.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.Priority">
            <summary>
            The priority of the service. Higher values will place it at the front of the service list.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.TotalDownloadedBytes">
            <summary>
            Total bytes downloaded.
            </summary>
            <remarks>
            If content is loaded from the cache, this value isn't affected. This value is reset when <see cref="M:Unity.Entities.Content.ContentDownloadService.ClearDownloadProgress"/> is called.
            </remarks>
        </member>
        <member name="P:Unity.Entities.Content.ContentDownloadService.TotalBytes">
            <summary>
            Total bytes processed.
            </summary>
            <remarks>
            This value contains the total size of content even if it has already been cached. This value is reset when <see cref="M:Unity.Entities.Content.ContentDownloadService.ClearDownloadProgress"/> is called.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.#ctor(System.String,System.String,System.Int32,System.Int32,System.Func{Unity.Entities.Content.ContentDownloadService.DownloadOperation})">
            <summary>
            Construct a download service.
            </summary>
            <param name="name">The name of the service. Each name must be unique.</param>
            <param name="cacheDir">The root directory of the local cache.</param>
            <param name="priority">The priority of the service. Higher values are placed at the front of the service list.</param>
            <param name="maxActiveDownloads">The maximum allowed concurrent downloads. When there are more requests than can be run concurrently, they are queued until some of the active operations complete.</param>
            <param name="createDownloadOpFunc">Allows for specifying a custom type of DownloadOperation. By default, this will use UnityWebRequest.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.Dispose">
            <summary>
            Release up internal resources
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.OnAddedToDeliveryService(Unity.Entities.Content.ContentDeliveryService)">
            <summary>
            Called when added to the content delivery service.
            </summary>
            <param name="contentDeliveryService">The content delivery service this service is being added to.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.CancelDownload(Unity.Entities.Content.RemoteContentLocation)">
            <summary>
            Called when a download needs to be cancelled.  This is not guaranteed to cancel the operation.
            </summary>
            <param name="loc">The location to cancel.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.GetDownloadStatus(Unity.Entities.Content.RemoteContentLocation@)">
            <summary>
            Gets the download status for a specific location.  If the content is cached, this will return a completed status even if the content was not explicitly requested.
            </summary>
            <param name="loc">The location of the content.</param>
            <returns>The current status of the content delivery.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.CanDownload(Unity.Entities.Content.RemoteContentLocation)">
            <summary>
            Used to determine which download service to use to download content.  Each service is checked in order until a servce returns true.
            </summary>
            <param name="location">The location of the content.</param>
            <returns>True if the service can download this specific location.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.ComputeCachePath(Unity.Entities.Content.RemoteContentLocation)">
            <summary>
            Computes the local path of the content in the cache.
            </summary>
            <param name="loc">The content location.</param>
            <returns>The local path of content.  This does not imply that the content actually exists in the cache.  Use File.Exists or <seealso cref="M:Unity.Entities.Content.ContentDownloadService.GetDownloadStatus(Unity.Entities.Content.RemoteContentLocation@)"/> to determine if the content is cached.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.GetLocalCacheFilePath(Unity.Entities.Content.RemoteContentLocation,System.String@)">
            <summary>
            Gets the local cache file path for a location and checks to see if it exists.
            </summary>
            <param name="loc">The content location.</param>
            <param name="path">The local cache path.  This will be set regardless if the cached file exists.</param>
            <returns>True if the cached file exists, otherwise false.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.ClearDownloadProgress">
            <summary>
            Resets the download statistics.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.GetDownloadProgress(Unity.Entities.Content.RemoteContentLocation,System.Int64@,System.Int64@)">
            <summary>
            Gets the downlaod progress for a specific location.
            </summary>
            <param name="loc">The content location.</param>
            <param name="contentSize">The total bytes of the content.</param>
            <param name="downloadedBytes">The number of bytes downloaded so far.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.DownloadContent(Unity.Entities.Content.RemoteContentLocation@)">
            <summary>
            Starts the process of downloading content.
            </summary>
            <param name="loc">The content location.</param>
            <returns>The status of the download operation.  If the content is cached, this will return a complete status.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentDownloadService.Process">
            <summary>
            Processes active downloads and updates status.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.WeakObjectReference`1">
            <summary>
            Weak reference to an object.  This allows control over when an object is loaded and unloaded.
            </summary>
            <typeparam name="TObject">The type of UnityEngine.Object this reference points to.</typeparam>
        </member>
        <member name="F:Unity.Entities.Content.WeakObjectReference`1.Id">
            <summary>
            The reference Id.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectReference`1.IsReferenceValid">
            <summary>
            Returns true if the reference has a valid id.  This does not imply that the referenced object is loaded.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectReference`1.LoadingStatus">
            <summary>
            Get the loading status of the referenced object.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectReference`1.Result">
            <summary>
            The value of the referenced object.  This returns a valid object if IsLoaded is true.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectReference`1.LoadAsync">
            <summary>
            Directs the object to begin loading.  This will increase the reference count for each call to the same id.  Release must be called for each Load call to properly release resources.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectReference`1.Release">
            <summary>
            Releases the object.  This will decrement the reference count of this object.  When an objects reference count reaches 0, the archive file is released.  The archive file is only
            unloaded when its reference count reaches zero, which will then release the archive it was loaded from.  Archives will be unmounted when their reference count reaches 0.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectReference`1.WaitForCompletion(System.Int32)">
            <summary>
            Wait for object load in main thread.  This will force synchronous loading and may cause performance issues.
            </summary>
            <param name="timeoutMs">The number of milliseconds to wait.  If set to 0, the load will either complet or fail before returning.</param>
            <returns>True if the load completes within the timeout.</returns>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectReference`1.ToString">
            <summary>
            String conversion override.
            </summary>
            <returns>String representation of reference which includes type, guid and local id.</returns>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectReference`1.Equals(Unity.Entities.Content.WeakObjectReference{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectReference`1.GetHashCode">
            <summary>
            Gets the hash code of this reference.
            </summary>
            <returns>The hash code of this reference.</returns>
        </member>
        <member name="T:Unity.Entities.Content.IRuntimeCatalogDataSource">
            <summary>
            Interface for source catalog data.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.IRuntimeCatalogDataSource.GetArchiveIds">
            <summary>
            Get the set of archive ids.
            </summary>
            <returns>The set of archive ids.</returns>
        </member>
        <member name="M:Unity.Entities.Content.IRuntimeCatalogDataSource.GetFileIds(Unity.Entities.Content.ContentArchiveId)">
            <summary>
            Get the set of content files contained within a specific archive.
            </summary>
            <param name="archiveId">The id of the archive.</param>
            <returns>The set of content file ids.</returns>
        </member>
        <member name="M:Unity.Entities.Content.IRuntimeCatalogDataSource.GetDependencies(Unity.Entities.Content.ContentFileId)">
            <summary>
            Get the set of dependencies of a content file.
            </summary>
            <param name="fileId">The id of the content file.</param>
            <returns>The set of dependencies for the content file.</returns>
        </member>
        <member name="M:Unity.Entities.Content.IRuntimeCatalogDataSource.GetObjects(Unity.Entities.Content.ContentFileId)">
            <summary>
            Get the set of object ids and file identifiers.
            </summary>
            <param name="fileId">The id of the content file.</param>
            <returns>The set of object ids and file ids.</returns>
        </member>
        <member name="M:Unity.Entities.Content.IRuntimeCatalogDataSource.GetScenes(Unity.Entities.Content.ContentFileId)">
            <summary>
            Get the set of scene ids and names.
            </summary>
            <param name="fileId">The content file id.</param>
            <returns>The set of scene ids and names.</returns>
        </member>
        <member name="T:Unity.Entities.Content.RuntimeContentSystem">
            <summary>
            System responsible for initializing and updating the <seealso cref="T:Unity.Entities.Content.RuntimeContentManager"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentSystem.OnCreate">
            <summary>Initializes the <seealso cref="T:Unity.Entities.Content.RuntimeContentManager"/>.</summary>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentSystem.LoadContentCatalog(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Loads the content catalog data.
             </summary>
             <remarks>
             By default, this loads the catalog from the StreamingAssets folder.
             However, if you've set the 'ENABLE_CONTENT_DELIVERY' define, this initiates the content delivery system and updates the content before loading the catalog.
            </remarks>
             <param name="remoteUrlRoot">The remote URL root for the content. Set null or leave empty, to load the catalog from the local StreamingAssets path.</param>
             <param name="localCachePath">Optional path for the local cache. Set null or leave empty to create a folder named 'ContentCache' in the device's Application.persistentDataPath.</param>
             <param name="initialContentSet">Initial content set to download.  'all' is generally used to denote the entire content set.</param>
             <param name="allowOverrideArgs">Set to true, to use application command line arguments to override the passed in values.</param>
        </member>
        <member name="M:Unity.Entities.Content.RuntimeContentSystem.OnUpdate">
            <summary>
            Processes the <seealso cref="T:Unity.Entities.Content.RuntimeContentManager"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ObjectLoadingStatus">
            <summary>
            Loading status for requests.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ObjectLoadingStatus.None">
            <summary>
            The requested runtime id was not found and has not started loading.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ObjectLoadingStatus.Queued">
            <summary>
            The requested id has enterd the queue to be loaded.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ObjectLoadingStatus.Loading">
            <summary>
            The requested runtime id has started loading, but is still active.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ObjectLoadingStatus.Completed">
            <summary>
            The requested runtime id has completed loading successfully.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ObjectLoadingStatus.Error">
            <summary>
            There was an error encountered when attempting to load.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.RemoteContentId">
            <summary>
            Identifier of a remote content resource.  This is used to find the <seealso cref="T:Unity.Entities.Content.RemoteContentLocation"/> of a resource.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentId.Name">
            <summary>
            The name of the content.  This is ususally set to the path of the asset.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.RemoteContentId.Hash">
            <summary>
            The hash, used to compare ids.  This is either set as the has of the name or to a custom hash.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RemoteContentId.#ctor(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Construct an id with only the path.  The Hash is computed from the name.
            </summary>
            <param name="name">The name of the content.</param>
        </member>
        <member name="M:Unity.Entities.Content.RemoteContentId.#ctor(Unity.Collections.FixedString512Bytes@,Unity.Entities.Hash128)">
            <summary>
            Construct an id with a name and custom hash.
            </summary>
            <param name="name">The name of the content.</param>
            <param name="hash">The hash for the id.</param>
        </member>
        <member name="P:Unity.Entities.Content.RemoteContentId.IsValid">
            <summary>
            True if the id is valid.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RemoteContentId.Equals(Unity.Entities.Content.RemoteContentId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.RemoteContentId.GetHashCode">
            <summary>
            Gets the path to the hash code.
            </summary>
            <returns>The path to the hash code.</returns>
        </member>
        <member name="T:Unity.Entities.Content.RemoteContentLocation">
            <summary>
            This struct contains all information needed to download a remote content file.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.RemoteContentLocation.LocationType">
            <summary>
            The type of location.  
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentLocation.LocationType.RemoteURL">
            <summary>
            Specifies that the Path property is a remote URL.  This enum is intended to be expanded as other download service types are added.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentLocation.Type">
            <summary>
            The type of location.  This can be used by download services to determine if they are compatible.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentLocation.Path">
            <summary>
            The path of the remote content - this is typically the url.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentLocation.Hash">
            <summary>
            The hash of the contents of the remote data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentLocation.Crc">
            <summary>
            The CRC value for the remote data.  This is used to detect data corruption.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RemoteContentLocation.Size">
            <summary>
            The size, in bytes, of the remote data.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.RemoteContentLocation.IsValid">
            <summary>
            Returns true if the Hash is valid.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.RemoteContentLocation.Equals(Unity.Entities.Content.RemoteContentLocation)">
            <summary>Checks if the path to a remote file is equal to another.</summary>
            <param name="other">The location to compare.</param>
            <returns>True if the paths are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Content.RemoteContentLocation.GetHashCode">
            <summary>
            Gets the path to the hash code.
            </summary>
            <returns>The path to the hash code.</returns>
        </member>
        <member name="T:Unity.Entities.Content.ContentArchiveId">
            <summary>
            Global id for content archives.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentArchiveId.Value">
            <summary>
            The value of the id.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentArchiveId.IsValid">
            <summary>
            True if the id has a non default value.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentArchiveId.Equals(Unity.Entities.Content.ContentArchiveId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.ContentArchiveId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.ContentArchiveId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Entities.Content.ContentFileId">
            <summary>
            Global id of content files.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentFileId.Value">
            <summary>
            The value of the id.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentFileId.IsValid">
            <summary>
            True if the id has a non default value.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentFileId.Equals(Unity.Entities.Content.ContentFileId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.ContentFileId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.ContentFileId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Entities.Content.ContentSceneId">
            <summary>
            Global id for scenes contained in content archives.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentSceneId.Value">
            <summary>
            The value of the id.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentSceneId.IsValid">
            <summary>
            True if the id has a non default value.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentSceneId.Equals(Unity.Entities.Content.ContentSceneId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.ContentSceneId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.ContentSceneId.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Entities.Content.ContentArchiveLocation">
            <summary>
            Content archive information.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentArchiveLocation.ArchiveId">
            <summary>
            The id of the archive, this is transformed into the archive path at runtime.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentFileLocation">
            <summary>
            Content file information.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentFileLocation.FileId">
            <summary>
            The id of the file, this is transformed into the file path at runtime.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentFileLocation.ArchiveIndex">
            <summary>
            The index of the archive that contains this file.  This indexes into the ContentCatalogData.Archives array.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentFileLocation.DependencyIndex">
            <summary>
            Index of content file dependencies.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentObjectLocation">
            <summary>
            Content object information.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentObjectLocation.ObjectId">
            <summary>
            The object reference id.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentObjectLocation.FileIndex">
            <summary>
            The index of the content file to load this object from.  This indexes into the ContentCatalogData.Files array.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentObjectLocation.LocalIdentifierInFile">
            <summary>
            The local file id of this object in the content file. (NOTE: this is not the same local file id as the WeakObjectReferenceId.ObjectId).
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentSceneLocation">
            <summary>
            Content scene information.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentSceneLocation.SceneId">
            <summary>
            The object reference id.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentSceneLocation.FileIndex">
            <summary>
            The index of the content file to load this object from.  This indexes into the ContentCatalogData.Files array.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentSceneLocation.SceneName">
            <summary>
            The name of the scene.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentBlobLocation">
            <summary>
            Content blob information.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentBlobLocation.ObjectId">
            <summary>
            The blob reference id.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentBlobLocation.FileIndex">
            <summary>
            The index of the content file to load this object from.  This indexes into the ContentCatalogData.Files array.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentBlobLocation.Offset">
            <summary>
            The data offset.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentBlobLocation.Length">
            <summary>
            The length of the blob data.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.RuntimeContentCatalogData">
            <summary>
            Serialized catalog data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RuntimeContentCatalogData.Archives">
            <summary>
            The collection of content archives.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RuntimeContentCatalogData.Files">
            <summary>
            The collection of files that are contained in the archives.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RuntimeContentCatalogData.Objects">
            <summary>
            The collection of objects that are contained in the content files and we're directly referenced by a WeakObjectReferenceId.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RuntimeContentCatalogData.Scenes">
            <summary>
            The collection of scene that are contained in the content files and we're directly referenced by a WeakObjectReferenceId.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RuntimeContentCatalogData.Dependencies">
            <summary>
            List of dependency sets for content files.  Many files will potentially share the same set of dependencies so this is separate to allow for that.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.RuntimeContentCatalogData.Blobs">
            <summary>
            The collection of blob data that are contained in the content files and we're directly referenced by a WeakObjectReferenceId.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDeliveryGlobalState">
            <summary>Contains methods for the content update process.</summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.LogFunc">
            <summary>
            Action to log content update progress.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.kCatalogLocations">
            <summary>
            The name of the content set for the catalogs.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState">
            <summary>
            States of content update process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.None">
            <summary>
            Content update process has not started.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.DownloadingCatalogInfo">
            <summary>
            Downloading uncached catalog info - this happens each time the application is started to check for updated catalogs.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.DownloadingCatalogs">
            <summary>
            Downloading catalogs.  
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.DownloadingContentSet">
            <summary>
            Downloading initial content sets.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.NoContentAvailable">
            <summary>
            The content update failed and there is no data in the cache.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.ContentReady">
            <summary>
            Content is ready.  It may be local, updated from remote, or from the cache.  
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.UsingContentFromStreamingAssets">
            <summary>
            The content will be loaded from the streaming assets folder and no attempt to update will be made.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.ContentUpdatedFromRemote">
            <summary>
            The content has successfully been updated from the remote content server.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState.UsingContentFromCache">
            <summary>
            The content update failed, content will be loaded from the local cache if possible.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentDeliveryGlobalState.PathRemapFunc">
            <summary>
            Functor used to remap content into the local cache.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentDeliveryGlobalState.CurrentContentUpdateState">
            <summary>
            The current state of the content update process.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryGlobalState.RegisterForContentUpdateCompletion(System.Action{Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState})">
            <summary>
            Register for content update state changes.
            </summary>
            <param name="updateStateFunc">The action that will be called for each content update state change.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentDeliveryGlobalState.Initialize(System.String,System.String,System.String,System.Action{Unity.Entities.Content.ContentDeliveryGlobalState.ContentUpdateState})">
            <summary>
            Initialize the content delivery system.
            </summary>
            <param name="remoteUrlRoot">The remote url root in the form of "https://hostname.com/pathToContent/".  If this parameter is not specified, content is assumed to be local.</param>
            <param name="cachePath">The full local path of the content cache.  This must be a directory that the application has read and write access to.</param>
            <param name="initialContentSet">The initial set of content to download.  The content sets are given names during the publish process and by default everything is added to the "all" set.</param>
            <param name="updateStateFunc">Callback action that will get called whenever the content update state changes.</param>
        </member>
        <member name="T:Unity.Entities.Content.WeakObjectSceneReference">
            <summary>
            Weak reference to a scene. The Result field can be accessed after the scene has completed loading.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.WeakObjectSceneReference.Id">
            <summary>
            The reference Id.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectSceneReference.IsReferenceValid">
            <summary>
            Returns if the id of the referenced scene is valid.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectSceneReference.LoadingStatus">
            <summary>
            True if the object is either being loaded or already finished loading.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectSceneReference.SceneResult">
            <summary>
            The loaded scene object.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.WeakObjectSceneReference.SceneFileResult">
            <summary>
            The ContentSceneFile that was loaded.  This can be used to manually integrate the loaded scene at the end of the frame.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectSceneReference.LoadAsync(Unity.Loading.ContentSceneParameters)">
            <summary>
            Directs the object to begin loading.  This will increase the reference count for each call to the same id.  Release must be called for each Load call to properly release resources.
            </summary>
            <param name="loadParams">The scene loading parameters.</param>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectSceneReference.Release">
            <summary>
            Releases the object.  This will decrement the reference count of this object.  When an objects reference count reaches 0, the archive file is released.  The archive file is only
            unloaded when its reference count reaches zero, which will then release the archive it was loaded from.  Archives will be unmounted when their reference count reaches 0.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectSceneReference.ToString">
            <summary>
            String conversion override.
            </summary>
            <returns>String representation of reference which includes type, guid and local id.</returns>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectSceneReference.Equals(Unity.Entities.Content.WeakObjectSceneReference)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Content.WeakObjectSceneReference.GetHashCode">
            <summary>
            Returns the hash code of this reference.
            </summary>
            <returns>The hash code of this reference.</returns>
        </member>
        <member name="T:Unity.Entities.Content.ContentLocationService">
            <summary>
            RemoteContentLocationService is an abstract in order to allow for custom implementations of resolving the location of remote content.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentLocationService.ResolvingState">
            <summary>
            State of resolving a location
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentLocationService.ResolvingState.None">
            <summary>
            The location resolving process has not begun.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentLocationService.ResolvingState.Resolving">
            <summary>
            The location is currently resolving.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentLocationService.ResolvingState.Complete">
            <summary>
            The location has been resolved and is ready.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentLocationService.ResolvingState.Failed">
            <summary>
            The location failed to resolve.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentLocationService.Name">
            <summary>
            The download service name.  Each service name must be unique.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentLocationService.Priority">
            <summary>
            The priority of the service.  Higher values will place it at the front of the service list.
            </summary>
        </member>
        <member name="P:Unity.Entities.Content.ContentLocationService.LocationCount">
            <summary>
            The number of locations.
            </summary>
        </member>
        <member name="T:Unity.Entities.Content.ContentLocationService.LocationStatus">
            <summary>
            The status of resolving a location.  When the state is completed, the location field will contain the resolved location.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentLocationService.LocationStatus.State">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Unity.Entities.Content.ContentLocationService.LocationStatus.Location">
            <summary>
            The resolved location.  This is only valid when the State is Complete.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.OnAddedToDeliveryService(Unity.Entities.Content.ContentDeliveryService)">
            <summary>
            Called when the RemoteContentLocationService is added to a delivery service.  This allows for any setup needed after being added to the delivery service.
            </summary>
            <param name="cds">The delivery service that the location service is being added to.</param>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.GetLocationStatus(Unity.Entities.Content.RemoteContentId)">
            <summary>
            Get the current status of a resolving location.
            </summary>
            <param name="id">The id of the location.</param>
            <returns>The location status is returned for the specified id.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.ResolveLocation(Unity.Entities.Content.RemoteContentId)">
            <summary>
            Starts the resolving process for a location.  This may execute immediately and return a complete LocationStatus or it may be asynchronous.
            If the returned status Stat property is Resolving, you must periodically recheck the status to determine when it is completed.
            </summary>
            <param name="id">The remote content id.</param>
            <returns>The current status of the resolving process.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.GetResolvedRemoteContentLocations(Unity.Collections.NativeHashSet{Unity.Entities.Content.RemoteContentLocation}@)">
            <summary>
            Retrieves all resolved content locations.  Depending on the implementation, this may not contain the entire set of locations.
            </summary>
            <param name="locs">The resolved locations.</param>
            <returns>False if the service does not have any resolved locations, True if it does.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.GetResolvedContentIds(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.Content.RemoteContentId}@)">
            <summary>
            Retrieves all resolved content ids.
            </summary>
            <param name="ids">The set of content ids.</param>
            <returns>False if the service does not have any resolved ids, True if it does.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.TryGetLocationSet(Unity.Collections.FixedString512Bytes@,Unity.Entities.Content.RemoteContentId*@,System.Int32@)">
            <summary>
            Get a location set by name.
            </summary>
            <param name="setName">The name of the location set.  These are created during the publish process.</param>
            <param name="idPtr">The pointer to the <seealso cref="T:Unity.Entities.Content.RemoteContentId"/> array.</param>
            <param name="count">The number of ids.</param>
            <returns>True if the set is found. False, otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.Process">
            <summary>
            Method called during the main process loop from the delivery service.
            </summary>
        </member>
        <member name="M:Unity.Entities.Content.ContentLocationService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Entities.WorldUpdateAllocatorResetSystem">
            <summary>
            A system that resets the world update allocator by rewinding its memories.
            </summary>
        </member>
        <member name="M:Unity.Entities.WorldUpdateAllocatorResetSystem.OnUpdate(Unity.Entities.SystemState@)">
            <summary>
            Executes world update allocator reset system to rewind memories of the world update allocator.
            </summary>
            <param name="state">The SystemState of the system.</param>
        </member>
        <member name="T:Unity.Entities.IAspect">
            <summary>
            Base interface for Aspects, a higher level combination for components.
            </summary>
            <remarks>
            Implement IAspect on a struct with any number of <see cref="T:Unity.Entities.RefRW`1"/> fields.
            A <see cref="T:Unity.Entities.RefRW`1"/> field may use these attributes:
                [<see cref="T:Unity.Entities.OptionalAttribute"/>]
                    Make the component optional. Field <see cref="P:Unity.Entities.RefRW`1.IsValid"/> will be true if the component is present on the current entity.
                [<see cref="T:Unity.Collections.ReadOnlyAttribute"/>]
                    Make the component read-only when building an entity query that uses the aspect.
                    The field <see cref="P:Unity.Entities.RefRW`1.ValueRW"/> will break the safety checks. Use <see cref="P:Unity.Entities.RefRW`1.ValueRO"/> instead.
            </remarks>
        </member>
        <member name="T:Unity.Entities.IAspectCreate`1">
            <summary>
            Interface provided by codegen to allow an Aspect to be created from a SystemState reference.
            Only used/generated by internal Unity codegen.
            </summary>
            <typeparam name="T">Type of aspect.</typeparam>
        </member>
        <member name="M:Unity.Entities.IAspectCreate`1.CreateAspect(Unity.Entities.Entity,Unity.Entities.SystemState@,System.Boolean)">
            <summary>
            Create an Aspect that reflects the data attached to an Entity and provides methods and properties for interacting with
            sets of data on the Entity.
            </summary>
            <param name="entity">Entity that this Aspect will reflect.</param>
            <param name="system">SystemState for the system where the Aspect originates from. You should only use Aspects
            in their originating system.</param>
            <param name="isReadOnly">Whether to modify the data associated with an Entity. To assist in scheduling,
            you should only access the Aspect as read-only if possible.</param>
            <returns>Instance of Aspect of this type for the Entity.</returns>
        </member>
        <member name="M:Unity.Entities.IAspectCreate`1.AddComponentRequirementsTo(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.ComponentType}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.ComponentType}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.ComponentType}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.ComponentType}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.ComponentType}@,System.Boolean)">
            <summary>
            Add the query component requirements of this aspect to NativeLists.
            </summary>
            <param name="all">The UnsafeList to add the "All" ComponentTypes requirements to</param>
            <param name="any">The UnsafeList to add the "Any" ComponentTypes requirements to</param>
            <param name="none">The UnsafeList to add the "None" ComponentTypes requirements to</param>
            <param name="disabled">The UnsafeList to add the "Disabled" ComponentTypes requirements to</param>
            <param name="absent">The UnsafeList to add the "Absent" ComponentTypes requirements to</param>
            <param name="isReadOnly">Force read-only access</param>
        </member>
        <member name="T:Unity.Entities.DisableGenerationAttribute">
            <summary>
            Disable the source generator for an Aspect type, i.e. a struct that implements IAspect
            It is up to the user to write the required code to complete all the functionalities needed by an Aspect.
            Disabling the source generator should not be used outside of development purposes.
            </summary>
        </member>
        <member name="T:Unity.Entities.OptionalAttribute">
            <summary>
            When used on an aspect's ComponentDataRef field, marks that component type as optional.
            The DOTS source generator handles the generation of the query using this attribute.
            A ComponentDataRef may also be marked read-only by using the attribute [Unity.Collections.ReadOnly]
            </summary>
        </member>
        <member name="T:Unity.Entities.ScratchpadAllocator">
            <summary>
            A fast allocator which allocates memory from its scratchpad.
            </summary>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.Try(Unity.Collections.AllocatorManager.Block@)">
            <summary>
            Try to allocate, free, or reallocate a block of memory.
            </summary>
            <param name="block">The memory block to allocate, free, or reallocate</param>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.Rewind">
            <summary>
            Rewind the allocator; invalidate all allocations made from it.
            </summary>
        </member>
        <member name="P:Unity.Entities.ScratchpadAllocator.Function">
            <summary>
            All allocators must implement this property, in order to be installed in the custom allocator table.
            </summary>
        </member>
        <member name="P:Unity.Entities.ScratchpadAllocator.Handle">
            <summary>
            Retrieve the AllocatorHandle associated with this allocator. The handle is used as an index into a
            global table, for times when a reference to the allocator object isn't available.
            </summary>
            <value>The AllocatorHandle retrieved.</value>
        </member>
        <member name="P:Unity.Entities.ScratchpadAllocator.ToAllocator">
            <summary>
            Retrieve the Allocator associated with this allocator handle.
            </summary>
            <value>The Allocator retrieved.</value>
        </member>
        <member name="P:Unity.Entities.ScratchpadAllocator.IsCustomAllocator">
            <summary>
            Check whether this allocator is a custom allocator.
            </summary>
            <remarks>The AllocatorHandle is a custom allocator if its Index is larger or equal to `FirstUserIndex`.</remarks>
            <value>True if this AllocatorHandle is a custom allocator.</value>
        </member>
        <member name="P:Unity.Entities.ScratchpadAllocator.IsAutoDispose">
            <summary>
            Check whether this allocator will automatically dispose allocations.
            </summary>
            <remarks>Allocations made by Scrachpad allocator are automatically disposed.</remarks>
            <value>Always true</value>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.Dispose">
            <summary>
            Dispose the allocator.
            </summary>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.Initialize(System.Int32)">
            <summary>
            Initializes the allocator. Must be called before first use.
            </summary>
            <param name="bytes">The amount of memory to allocate.</param>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.GetAvailableBytes">
            <summary>
            Get remaining bytes that are available to allocate.
            </summary>
            <returns>Returns the remaining bytes available.</returns>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.AllocateNativeArray``1(System.Int32)">
            <summary>
            Allocate a NativeArray of type T from memory that's guaranteed to 
            remain valid until <see cref="M:Unity.Entities.ScratchpadAllocator.Rewind"/> is called on the Scratchpad.
            </summary>
            <remarks>
            This memory isn't shared between threads and you don't need to Dispose 
            the NativeArray so it's allocated. You can't Dispose the memory to free 
            it: it's automatically freed when <see cref="M:Unity.Entities.ScratchpadAllocator.Rewind"/> is called.
            </remarks>
            <param name="length">The number of items in the NativeArray.</param>
            <typeparam name="T">The NativeArray.</typeparam>
            <returns>Returns the NativeArray.</returns>
        </member>
        <member name="M:Unity.Entities.ScratchpadAllocator.AllocateNativeList``1(System.Int32)">
            <summary>
            Allocate a NativeList of type T from memory that's guaranteed to 
            remain valid until <see cref="M:Unity.Entities.ScratchpadAllocator.Rewind"/> is called on the Scratchpad.
            </summary>
            <remarks>
            This memory isn't shared between threads and you don't need to Dispose 
            the NativeList so it's allocated. You can't Dispose the memory to free
            it: it's automatically freed when <see cref="M:Unity.Entities.ScratchpadAllocator.Rewind"/> is called.
            </remarks>
            <typeparam name="T">The NativeList</typeparam>
            <param name="capacity">The number of items the list can hold.</param>
            <returns>Returns the NativeList</returns>
        </member>
        <member name="T:Unity.Entities.Scratchpad">
            <summary>
            A scratch pad that contains multiple scratch pad allocators.  User can can get a scratch pad allocator from the pad
            corresponding to its thread index.  It automatically invalidates all allocations made from it, when "rewound" by the user.
            </summary>
        </member>
        <member name="M:Unity.Entities.Scratchpad.GetScratchpadAllocator">
            <summary>
            Retrieve the ScratchpadAllocator from the Scratchpad with index corresponding to the running thread index.
            </summary>
            <returns>Returns reference to the ScratchpadAllocator for the running thread.</returns>
        </member>
        <member name="M:Unity.Entities.Scratchpad.GetScratchpadAllocator(System.Int32)">
            <summary>
            Retrieve the ScratchpadAllocator from the Scratchpad with index corresponding to the running thread index.
            </summary>
            <param name="threadIndex">Index of the running thread.</param>
            <returns>Returns reference to the ScratchpadAllocator for the running thread.</returns>
        </member>
        <member name="M:Unity.Entities.Scratchpad.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Create a Scratchpad.
            </summary>
            <param name="isGlobal">Flag indicating if the allocator is a global allocator.</param>
            <param name="globalIndex">Base index into the global function table of the allocator to be created.</param>
            <param name="numScratchpadAllocators">The number of ScratchpadAllocators the created Scratchpad should contain.</param>
            <param name="initialSizeInBytes">The initial size of the Scratchpad in bytes. Set to 32,768 by default.</param>
        </member>
        <member name="M:Unity.Entities.Scratchpad.Initialize(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initialize a Scratchpad.
            </summary>
            <param name="numScratchpadAllocators">The number of ScratchpadAllocators the created Scratchpad should contain.</param>
            <param name="isGlobal">Flag indicating if the allocator is a global allocator.</param>
            <param name="globalIndex">Base index into the global function table of the allocator to be created.</param>
            <param name="initialSizeInBytes">The initial size of the Scratchpad in bytes. Set to 32,768 by default.</param>
        </member>
        <member name="M:Unity.Entities.Scratchpad.Dispose">
            <summary>
            Dispose the Scratchpad. This must be called to unregister and free the ScratchpadAllocators this Scratchpad contains.
            </summary>
        </member>
        <member name="M:Unity.Entities.Scratchpad.Rewind">
            <summary>
            Rewind the Scratchpad; rewinds all ScratchpadAllocator invalidate all allocations made from it, and potentially also free memory blocks
            it has allocated from the system.
            </summary>
        </member>
        <member name="T:Unity.Entities.GlobalScratchpad">
            <summary>
            A global scratchpad.
            </summary>
        </member>
        <member name="F:Unity.Entities.GlobalScratchpad.BlockSize">
            <summary>
            Pre-allocated memory size in bytes.
            </summary>
            <remarks>This is the total number of memory in bytes that can be allocated by a global scratchpad allocator.</remarks>
        </member>
        <member name="F:Unity.Entities.GlobalScratchpad.IsInstalled">
            <summary>
            A flag indicating whether the global scratchpad is initialized.
            </summary>
        </member>
        <member name="F:Unity.Entities.GlobalScratchpad.ThreadIndex">
            <summary>
            A thread index which is used to for each individual thread to its scratchpad allocator.
            </summary>
        </member>
        <member name="F:Unity.Entities.GlobalScratchpad.Pad">
            <summary>
            A shared static to hold the global scratchpad allocators.
            </summary>
        </member>
        <member name="M:Unity.Entities.GlobalScratchpad.Initialize">
            <summary>
            Initialize the global scratchpad, create and register all the global scratchpad allocators.
            </summary>
        </member>
        <member name="M:Unity.Entities.GlobalScratchpad.GetAllocator">
            <summary>
            Retrieve a global scratchpad allocator.
            </summary>
            <returns>Returns the global scratchpad allocator.</returns>
        </member>
        <member name="M:Unity.Entities.GlobalScratchpad.Rewind">
            <summary>
            Rewind the Scratchpad; rewinds all ScratchpadAllocator invalidate all allocations made from it, and potentially also free memory blocks
            it has allocated from the system.
            </summary>
        </member>
        <member name="M:Unity.Entities.GlobalScratchpad.Dispose">
            <summary>
            Dispose the GlobalScratchpad.
            </summary>
        </member>
        <member name="M:Unity.Entities.BlockAllocator.Allocate(System.Int32,System.Int32)">
            <summary>
            Allocates memory out of a block.
            </summary>
            <remarks>
            Not all allocation sizes and alignment combinations are valid. The maximum value bytesToAllocate can be is
            (ms_BlockSize - (alignment - 1)).
            </remarks>
            <param name="bytesToAllocate">Bytes to allocate.</param>
            <param name="alignment">Alignment in bytes for the allocation.</param>
            <returns>Pointer to allocation.</returns>
        </member>
        <member name="T:Unity.Entities.EntityStorageInfo">
            <summary>
            Contains information about where an Entity is stored. To retrieve this information, use <see cref="T:Unity.Entities.EntityStorageInfoLookup"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityStorageInfo.Chunk">
            <summary>
            The chunk containing the specified Entity.
            </summary>
            <remarks>
            Users should be extremely careful when accessing this field from job code. Specifically, multiple threads
            must not modify the same <see cref="T:Unity.Entities.ArchetypeChunk"/>. The type is not thread-safe, and parallel writes will
            result in race conditions and unpredictable behavior.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityStorageInfo.IndexInChunk">
            <summary>
            The index of the specified Entity within the entities in <see cref="F:Unity.Entities.EntityStorageInfo.Chunk"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.StorageInfoFromEntity">
            <summary> Obsolete. Use <see  cref="T:Unity.Entities.BufferLookup`1"/> instead.</summary>
        </member>
        <member name="T:Unity.Entities.EntityStorageInfoLookup">
             <summary>
             A [NativeContainer] that provides access to information about how Entities are stored. <see cref="T:Unity.Entities.Entity"/>.
             </summary>
             <remarks>
             EntityStorageInfoLookup is a native container that provides access to information about how Entities are stored.
             You can use EntityStorageInfoLookup to look up data associated with one entity while iterating over a
             different set of entities.
            
             To get a EntityStorageInfoLookup, call <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityStorageInfoLookup"/>.
            
             Pass a EntityStorageInfoLookup container to a job by defining a public field of the appropriate type
             in your IJob implementation. You can safely read from EntityStorageInfoLookup in any job, and the EntityStorageInfoLookup
             will never write data.
            
             If you would like to access an entity's storage information outside of a job, consider using the
             <see cref="T:Unity.Entities.EntityManager"/> methods <see cref="M:Unity.Entities.EntityManager.GetStorageInfo(Unity.Entities.Entity)"/> instead, to avoid the overhead
             of creating a EntityStorageInfoLookup object.
            
             [NativeContainer]: https://docs.unity3d.com/ScriptReference/Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute
             [NativeContainerIsReadOnly]: https://docs.unity3d.com/ScriptReference/Unity.Collections.LowLevel.Unsafe.NativeContainerIsReadOnlyAttribute.html
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityStorageInfoLookup.Update(Unity.Entities.SystemBase)">
            <summary>
            When a EntityStorageInfoLookup is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            object safe to use.
            </summary>
            <param name="system">The system in which this object is used.</param>
        </member>
        <member name="M:Unity.Entities.EntityStorageInfoLookup.Update(Unity.Entities.SystemState@)">
            <summary>
            When a EntityStorageInfoLookup is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            object safe to use.
            </summary>
            <param name="systemState">The SystemState of the system in which this object is used.</param>
        </member>
        <member name="M:Unity.Entities.EntityStorageInfoLookup.Exists(Unity.Entities.Entity)">
            <summary>
            Reports whether the specified <see cref="T:Unity.Entities.Entity"/> instance still refers to a valid entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>True if the entity exists and is valid, and returns false if
            the Entity instance refers to an entity that has been destroyed.</returns>
        </member>
        <member name="P:Unity.Entities.EntityStorageInfoLookup.Item(Unity.Entities.Entity)">
            <summary>
            Gets an <see cref="T:Unity.Entities.EntityStorageInfo"/> for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentException">Thrown if T is zero-size.</exception>
        </member>
        <member name="T:Unity.Entities.EntitiesProfiler.ArchetypeData">
            <summary>
            Struct used to store per archetype information.
            The total size is 1024 bytes, which leaves enough room to store up to 111 component types.
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.EntityPrefabReference">
            <summary>
            Weak reference to entity prefab. Entity prefabs are GameObjects that have been fully converted into entity data during the import/build process.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.op_Equality(Unity.Entities.Serialization.EntityPrefabReference,Unity.Entities.Serialization.EntityPrefabReference)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.op_Inequality(Unity.Entities.Serialization.EntityPrefabReference,Unity.Entities.Serialization.EntityPrefabReference)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.#ctor(Unity.Entities.Hash128)">
            <summary>
            Construct an EntityPrefabReference from a GUID.
            </summary>
            <param name="guid">The prefab asset GUID.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.#ctor(UnityEngine.GameObject)">
            <summary>
            Construct an EntityPrefabReference from a GameObject.
            </summary>
            <param name="prefab">The prefab to construct from.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.Equals(Unity.Entities.Serialization.EntityPrefabReference)">
            <summary>
            Checks if this reference holds the same asset GUID as the other reference.
            </summary>
            <param name="other">The other weak reference object to compare to.</param>
            <returns>True if the asset GUID of both are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.Equals(System.Object)">
            <summary>
            Overrides the default Object.Equals method.
            </summary>
            <param name="obj">An object to compare for equality.</param>
            <returns>True if this EntityPrefabReference and the object are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.EntityPrefabReference.GetHashCode">
            <summary>
            Overrides the default Object.GetHashCode method.
            </summary>
            <returns>The hash code of this EntityPrefabReference.</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.EntitySceneReference">
            <summary>
            Encapsulates a serializable reference to a Scene asset.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.EntitySceneReference.#ctor(Unity.Entities.Hash128,System.Int32)">
            <summary>
            Initializes and returns an instance of EntitySceneReference.
            </summary>
            <param name="guid">The guid of the scene asset.</param>
            <param name="sectionIndex">The subscene section index.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.EntitySceneReference.#ctor(UnityEditor.SceneAsset)">
            <summary>
            Initializes and returns an instance of EntitySceneReference.
            </summary>
            <param name="sceneAsset">The referenced <see cref="T:UnityEditor.SceneAsset"/>.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.EntitySceneReference.Equals(Unity.Entities.Serialization.EntitySceneReference)">
            <summary>
            Checks if this reference holds the same asset GUID as the other reference.
            </summary>
            <param name="other">The other weak reference object to compare to.</param>
            <returns>True if the asset GUID of both are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.EntitySceneReference.Equals(System.Object)">
            <summary>
            Overrides the default Object.Equals method.
            </summary>
            <param name="obj">An object to compare for equality.</param>
            <returns>True if this EntitySceneReference and the object are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.EntitySceneReference.GetHashCode">
            <summary>
            Overrides the default Object.GetHashCode method.
            </summary>
            <returns>The hash code of this EntitySceneReference.</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.ManagedObjectBinaryWriter">
            <summary>
            Writer to write managed objects to a <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer"/> stream.
            </summary>
            <remarks>
            This is used as a wrapper around <see cref="T:Unity.Serialization.Binary.BinarySerialization"/> with a custom layer for <see cref="T:UnityEngine.Object"/>.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryWriter.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer*)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Serialization.ManagedObjectBinaryWriter"/> which can be used to write managed objects to the given stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryWriter.AddAdapter(Unity.Serialization.Binary.IBinaryAdapter)">
            <summary>
            Adds a custom adapter to the writer.
            </summary>
            <param name="adapter">The custom adapter to add.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryWriter.GetUnityObjects">
            <summary>
            Gets all <see cref="T:UnityEngine.Object"/> types encountered during serialization.
            </summary>
            <returns>A set of all <see cref="T:UnityEngine.Object"/> types encountered during serialization</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryWriter.WriteObject(System.Object)">
            <summary>
            Writes the given boxed object to the binary stream.
            </summary>
            <remarks>
            Any <see cref="T:UnityEngine.Object"/> references are added to the object table and can be retrieved by calling <see cref="M:Unity.Entities.Serialization.ManagedObjectBinaryWriter.GetUnityObjects"/>.
            </remarks>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="T:Unity.Entities.Serialization.ManagedObjectBinaryReader">
            <summary>
            Reader to read managed objects from a <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader"/> stream.
            </summary>
            <remarks>
            This is used as a wrapper around <see cref="T:Unity.Serialization.Binary.BinarySerialization"/> with a custom layer for <see cref="T:UnityEngine.Object"/>.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryReader.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader*,UnityEngine.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Serialization.ManagedObjectBinaryReader"/> which can be used to read managed objects from the given stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="unityObjects">The table containing all <see cref="T:UnityEngine.Object"/> references. This is produce by the <see cref="T:Unity.Entities.Serialization.ManagedObjectBinaryWriter"/>.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryReader.AddAdapter(Unity.Serialization.Binary.IBinaryAdapter)">
            <summary>
            Adds a custom adapter to the reader.
            </summary>
            <param name="adapter">The custom adapter to add.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.ManagedObjectBinaryReader.ReadObject(System.Type)">
            <summary>
            Reads from the binary stream and returns the next object.
            </summary>
            <remarks>
            The type is given as a hint to the serializer to avoid writing root type information.
            </remarks>
            <param name="type">The root type.</param>
            <returns>The deserialized object value.</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.RuntimeGlobalObjectId">
            <summary>
            Runtime version of the editor type <seealso cref="T:UnityEditor.GlobalObjectId"/>.  These types need to be binary compatible.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.RuntimeGlobalObjectId.SceneObjectIdentifier0">
            <summary>
            Unique identifier within a scene
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.RuntimeGlobalObjectId.SceneObjectIdentifier1">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.RuntimeGlobalObjectId.AssetGUID">
            <summary>
            Asset GUID.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.RuntimeGlobalObjectId.IdentifierType">
            <summary>
            Identifier type.
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.RuntimeGlobalObjectId.IsValid">
            <summary>
            True if the id is valid.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.RuntimeGlobalObjectId.CompareTo(Unity.Entities.Serialization.RuntimeGlobalObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.RuntimeGlobalObjectId.Equals(Unity.Entities.Serialization.RuntimeGlobalObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.RuntimeGlobalObjectId.GetHashCode">
            <summary>
            Returns the hash code of this id.
            </summary>
            <returns>The hash code of this id.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.RuntimeGlobalObjectId.ToString">
            <summary>
            Converts the id to a string representation.".
            </summary>
            <returns>The string representation of the id in the form $"{AssetGUID}:{SceneObjectIdentifier0}.</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.SerializeUtility">
            <summary>
            Utility class to serialize and deserialize <see cref="T:Unity.Entities.World"/> objects.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.SerializeWorldIntoYAML(Unity.Entities.EntityManager,System.IO.StreamWriter,System.Boolean)">
            <summary>
            Serialize the given World to a YAML file, for logging and analysis purpose
            </summary>
            <param name="entityManager">Entity Manager of the World to serialize</param>
            <param name="writer">The stream we will write the data to</param>
            <param name="dumpChunkRawData">If <value>true</value> the binary data of each chunk section (header, component data of each entity) will be saved.
            This will increase the volume of data being written drastically, but you will be able to diff at the binary level
            </param>
            <remarks>
            Analysing a serialized sub-scene for instance is not easy because the data is raw binary. It is even harder if we want to compare two distinct serialization of the same sub-scene.
            This method will allow us to save the data of a given World in YAML.
            Note that so far the data being saved is not totally complete, it will improve over time.
            </remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.SerializeUtility.TypeDataExtractor">
            <summary>
            Helper class that will build for a given type a list of all its data fields with the required information for us to dump these fields data later on
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.SerializeUtility.Settings.SerializeComponentTypeNames">
            <summary>
            Serialize into the "Debug" Node a Node that contains the type name of each ComponentType
            </summary>
            <remarks>Set to true if you need a more accurate exception during the Deserialization about missing types</remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.SerializeUtility.ManagedObjectWriterAdapter">
            <summary>
            Custom adapter used during serialization to add special type handling for <see cref="T:Unity.Entities.Entity"/> and <see cref="T:Unity.Entities.BlobAssetReference`1"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.SerializeUtility.ManagedObjectWriterAdapter.m_EntityRemapInfo">
            <summary>
            Entity remapping which is applied during serialization.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.SerializeUtility.ManagedObjectWriterAdapter.m_BlobAssetMap">
            <summary>
            A map of <see cref="T:Unity.Entities.BlobAssetReferenceData"/> to index in the serialized batch.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.SerializeUtility.ManagedObjectWriterAdapter.m_BlobAssetOffsets">
            <summary>
            An array of absolute byte offsets for all blob assets within the serialized batch.
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.SerializeUtility.ManagedObjectReaderAdapter">
            <summary>
            Custom adapter used during de-serialization to add special type handling for <see cref="T:Unity.Entities.Entity"/> and <see cref="T:Unity.Entities.BlobAssetReference`1"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.SerializeUtility.CurrentFileFormatVersion">
            <summary>
            The version of the serialization file format.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.SerializeWorld(Unity.Entities.EntityManager,Unity.Entities.Serialization.BinaryWriter)">
            <summary>
            Uses a <see cref="T:Unity.Entities.Serialization.BinaryWriter"/> to serialize a <see cref="T:Unity.Entities.World"/>.
            </summary>
            <param name="entityManager">The <see cref="T:Unity.Entities.EntityManager"/> of the serialized world.</param>
            <param name="writer">The serialization object.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.SerializeWorld(Unity.Entities.EntityManager,Unity.Entities.Serialization.BinaryWriter,System.Object[]@)">
            <summary>
            Uses a <see cref="T:Unity.Entities.Serialization.BinaryWriter"/> to serialize a <see cref="T:Unity.Entities.World"/>.
            </summary>
            <param name="entityManager">The <see cref="T:Unity.Entities.EntityManager"/> of the serialized world.</param>
            <param name="writer">The serialization object.</param>
            <param name="referencedObjects">The UnityEngine.Object references from the serialized world.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.SerializeWorld(Unity.Entities.EntityManager,Unity.Entities.Serialization.BinaryWriter,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
            <summary>
            Uses a <see cref="T:Unity.Entities.Serialization.BinaryWriter"/> to serialize a <see cref="T:Unity.Entities.World"/>.
            </summary>
            <param name="entityManager">The <see cref="T:Unity.Entities.EntityManager"/> of the serialized world.</param>
            <param name="writer">The serialization object.</param>
            <param name="entityRemapInfos">The Entity remapping to apply during serialization.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.SerializeWorld(Unity.Entities.EntityManager,Unity.Entities.Serialization.BinaryWriter,System.Object[]@,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
            <summary>
            Uses a <see cref="T:Unity.Entities.Serialization.BinaryWriter"/> to serialize a <see cref="T:Unity.Entities.World"/>.
            </summary>
            <param name="entityManager">The <see cref="T:Unity.Entities.EntityManager"/> of the serialized world.</param>
            <param name="writer">The serialization object.</param>
            <param name="referencedObjects">The UnityEngine.Object references from the serialized world.</param>
            <param name="entityRemapInfos">The entity remapping to apply during serialization.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.GetSceneSectionEntity(System.Int32,Unity.Entities.EntityManager,Unity.Entities.EntityQuery@,System.Boolean)">
            <summary>
            Gets the entity representing the scene section with the index passed in.
            If createIfMissing is true the section entity is created if it doesn't already exist.
            Metadata components added to this section entity will be serialized into the entity scene header.
            At runtime these components will be added to the scene section entities when the scene is resolved.
            Only struct IComponentData components without BlobAssetReferences or Entity members are supported.
            </summary>
            <param name="sectionIndex">The section index for which to get the scene section entity</param>
            <param name="manager">The entity manager to which the entity belongs</param>
            <param name="cachedSceneSectionEntityQuery">The EntityQuery used to find the entity. Initially an null query should be passed in,
            the same query can the be passed in for subsequent calls to avoid recreating the query</param>
            <param name="createIfMissing">If true the section entity is created if it doesn't already exist. If false Entity.Null is returned for missing section entities</param>
            <returns>The entity representing the scene section</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.SerializeUtility.DeserializeWorld(Unity.Entities.ExclusiveEntityTransaction,Unity.Entities.Serialization.BinaryReader,System.Object[])">
            <summary>
            Deserializes a <see cref="T:Unity.Entities.World"/> object.
            </summary>
            <param name="manager">The <see cref="T:Unity.Entities.ExclusiveEntityTransaction"/> object ensuring that the deserialization is atomic.</param>
            <param name="reader">The deserialization object.</param>
            <param name="unityObjects">The UnityEngine.Object references that are patched in during deserialization.</param>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerialization">
            <summary>
            Dots Serialization main class
            </summary>
            <remarks>
            Used as an entry point to create readers/writers and interact with the general Dots File format API
            </remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerialization.CreateWriter(Unity.Entities.Serialization.BinaryWriter,Unity.Entities.Hash128,Unity.Collections.FixedString64Bytes)">
            <summary>
            Create a Dots File Writer to serialize data to a DOTS file
            </summary>
            <param name="writer">Stream writer to use for the serialization</param>
            <param name="fileId">A unique ID identifying the file, used for identification purpose and possibly future cross file references</param>
            <param name="fileType">Type of the file, should be user level.</param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerialization.CreateReader(Unity.Entities.Serialization.BinaryReader)">
            <summary>
            Create a Dots File Reader to deserialize a file
            </summary>
            <param name="reader">The stream to use for reading the file's data</param>
            <returns>The reader object</returns>
            <remarks>
            This operation will check if the file is indeed a Dots File, load the nodes and metadata segments into memory
            </remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationWriter">
            <summary>
            Writer class, instances are retrieved through <see cref="M:Unity.Entities.Serialization.DotsSerialization.CreateWriter(Unity.Entities.Serialization.BinaryWriter,Unity.Entities.Hash128,Unity.Collections.FixedString64Bytes)"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationWriter.CreateNode``1(Unity.Entities.Hash128)">
            <summary>
            Create a Node of the given type, with an optional unique id
            </summary>
            <param name="id">Unique Id to identify the node</param>
            <typeparam name="T">.net type corresponding to the node to serialize</typeparam>
            <returns>Handle that will allow serialization of data</returns>
            <remarks>This node will be created as a child of the current parent node but will immediately become the current parent until <see cref="M:Unity.Entities.Serialization.DotsSerializationWriter.Dispose"/> is called.
            It is recommended to use the <code>using (var myNode = CreateNode()){ // Child node create here } pattern</code>
            </remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationWriter.WriterHandle`1">
            <summary>
            Expose a handle object that allows stream base writing to the node's raw data.
            </summary>
            <typeparam name="T">.net type of the Node</typeparam>
            <remarks>
            While you can use the <see cref="T:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1"/> APIs to write directly to the raw data segment, this type allow you to access a Stream object to perform stream based writes.
            Call <see cref="M:Unity.Entities.Serialization.DotsSerializationWriter.WriterHandle`1.Dispose"/> on the instance to go one level up in the hierarchy of nodes
            </remarks>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationWriter.WriterHandle`1.Writer">
            <summary>
            Access to the BinaryWriter object that must be used to serialize data in the raw data section
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationWriter.DeferredWriterHandle`1">
            <summary>
            Deferred Writer allows to combine dependent node serialization by deferring the write of the raw data upon dispose as opposed to immediate writing for <see cref="T:Unity.Entities.Serialization.DotsSerializationWriter.WriterHandle`1"/>.
            </summary>
            <typeparam name="T">Type of the node</typeparam>
            <remarks>
            This writer will expose a <see cref="T:Unity.Entities.Serialization.MemoryBinaryWriter"/> stream to capture data im memory and will serialize its content upon <see cref="M:Unity.Entities.Serialization.DotsSerializationWriter.DeferredWriterHandle`1.Dispose"/>
            </remarks>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationWriter.DeferredWriterHandle`1.IsValid">
            <summary>
            Determine if the handle is valid or not
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationWriter.DeferredWriterHandle`1.Writer">
            <summary>
            Access to the BinaryWriter object that must be used to serialize data in the raw section.
            </summary>
            <remarks>
            This writer is a memory one, data will be first stored in memory, then written to the Data Segment upon dispose.
            </remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1">
            <summary>
            Type handling a given Node being serialized
            </summary>
            <typeparam name="T">Type of the node being serialized</typeparam>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1.Dispose">
            <summary>
            Disposing the node will go one level up into the hierarchy, its parent becomes the new current node.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1.SetMetadata``1(Unity.Entities.BlobAssetReference{``0})">
            <summary>
            Set metadata associated to this node
            </summary>
            <param name="blobAssetReference">BlobAsset storing the metadata to set</param>
            <typeparam name="TB">BlobAsset type</typeparam>
            <returns>true if the call succeeded, false if the metadata was already set for this node.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1.WriteData(System.Void*,System.Int32)">
            <summary>
            Write data into the raw data section for this node
            </summary>
            <param name="data">Source buffer</param>
            <param name="dataLength">Length to write</param>
            <remarks>
            This API can be called multiple times, it will write data sequentially. Notice that you can't call it multiple times before AND after creating children nodes (i.e. create this node A, write data for A, create child B, write data for A) for the reason the raw data section has to be a contiguous segment of data and writing data for other node would break this contiguity.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1.GetWriterHandle">
            <summary>
            Access the Writer Handle to perform stream based access.
            </summary>
            <returns></returns>
            The purpose of this object is to perform stream based writes to the node raw data and to mark the write sequence completed when <see cref="M:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1.Dispose"/> is called.
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationWriter.NodeHandle`1.GetDeferredWriteHandle">
            <summary>
            Access the Deferred writer, to perform out of node sequence writes (multiple write operations across multiple node creation).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unity.Entities.Serialization.StringTableWriterHandle">
            <summary>
            This type allows a friendly API to the <see cref="T:Unity.Entities.Serialization.DotsSerialization.StringTableNode"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableWriterHandle.WriteString(System.String)">
            <summary>
            Write a string to the string table
            </summary>
            <param name="str">The string to write to</param>
            <returns>The index of the string into the string table</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableReaderHandle.GetString32(System.Int32)">
            <summary>
            Get the string as a FixedString32Bytes
            </summary>
            <param name="offset">Offset of the string into the String Table</param>
            <returns>The string</returns>
            <remarks>If the string is more than 29 bytes encoded as utf8, it will be truncated.</remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableReaderHandle.GetString64(System.Int32)">
            <summary>
            Get the string as a FixedString64Bytes
            </summary>
            <param name="offset">Offset of the string into the String Table</param>
            <returns>The string</returns>
            <remarks>If the string is more than 61 bytes encoded as utf8, it will be truncated.</remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableReaderHandle.GetString128(System.Int32)">
            <summary>
            Get the string as a FixedString128Bytes
            </summary>
            <param name="offset">Offset of the string into the String Table</param>
            <returns>The string</returns>
            <remarks>If the string is more than 125 bytes encoded as utf8, it will be truncated.</remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableReaderHandle.GetString512(System.Int32)">
            <summary>
            Get the string as a FixedString512Bytes
            </summary>
            <param name="offset">Offset of the string into the String Table</param>
            <returns>The string</returns>
            <remarks>If the string is more than 509 bytes encoded as utf8, it will be truncated.</remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableReaderHandle.GetString4096(System.Int32)">
            <summary>
            Get the string as a FixedString4096Bytes
            </summary>
            <param name="offset">Offset of the string into the String Table</param>
            <returns>The string</returns>
            <remarks>If the string is more than 4093 bytes encoded as utf8, it will be truncated.</remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.StringTableReaderHandle.GetStringLength(System.Int32)">
            <summary>
            Retrieve the length of the string
            </summary>
            <param name="offset"></param>
            <returns>Length in bytes</returns>
            <remarks>
            The returned length in not the string character count, the string is stored as UTF8 and the length is the number of bytes it takes to store the string.
            There is no null terminated character
            </remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationHelpers">
            <summary>
            Helper class to allow access to specific node type implemented in the package
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationHelpers.CreateStringTableNode(Unity.Entities.Serialization.DotsSerializationWriter,Unity.Entities.Hash128)">
            <summary>
            Create a StringTable node
            </summary>
            <param name="writer">The writer where the node is created in</param>
            <param name="id">Id of the node</param>
            <returns>The handle object of the string table</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationHelpers.OpenStringTableNode(Unity.Entities.Serialization.DotsSerializationReader,Unity.Entities.Serialization.DotsSerializationReader.NodeHandle)">
            <summary>
            Open a string table node from a reader
            </summary>
            <param name="reader">The reader the node is stored into</param>
            <param name="stringTableNode">Handle of the String Table node</param>
            <returns>String Table handle</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationReader">
            <summary>
            Reader of a Dots Serialization file, get instance using the <see cref="T:Unity.Entities.Serialization.DotsSerialization"/> class.
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.RootNode">
            <summary>
            Access to the root node of the file
            </summary>
            <remarks>
            The root is the top level node, the whole file content is store in its (in)direct children
            </remarks>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.Dispose">
            <summary>
            Free the reader, all memory associated to it will be released.
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationReader.ReaderHandle">
            <summary>
            Handle exposing a stream based access to the Node's Raw Data
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.ReaderHandle.Dispose">
            <summary>
            Release the node being read and the memory associated with it
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.ReaderHandle.Reader">
            <summary>
            Access to the stream exposing the raw data associated with the node
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle">
            <summary>
            Handle manipulating a given node as part of the reader
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.IsValid">
            <summary>
             Determine if the handle is valid or not
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.ChildrenCount">
            <summary>
            Count of direct children
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.NodeTypeHash">
            <summary>
            Node type
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.NodeDotNetType">
            <summary>
            .net type of the node
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.As``1">
            <summary>
            Cast the node to its node header type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.MoveToNextChild(Unity.Entities.Serialization.DotsSerializationReader.NodeHandle@)">
            <summary>
            Enumerate the direct children of a given node
            </summary>
            <param name="node">Handle of the node to enumerate the children from</param>
            <returns>true if the NodeHandle is valid and the enumeration completed, false otherwise</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.FindNode``1(System.Int32)">
            <summary>
            Find a node from given criteria
            </summary>
            <param name="nestedLevel">The number of nested levels the search has to be performed, 1 for direct children, 2 for direct children and their direct children, etc</param>
            <typeparam name="T">Type of the node to find</typeparam>
            <returns>Return a valid Node Handle if found, an invalid one otherwise</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.GetReaderHandle">
            <summary>
            Access the Reader Handle for this node
            </summary>
            <returns>The reader handle</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.FindNode(Unity.Entities.Hash128,System.Int32)">
            <summary>
            Find a node by id.
            </summary>
            <param name="id">The unique Id of the node</param>
            <param name="nestedLevel">The number of nested levels the search has to be performed, 1 for direct children, 2 for direct children and their direct children, etc</param>
            <returns>Valid node handle if found, invalid one otherwise</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.GetMetadata``1">
            <summary>
            Access the metadata associated to the node
            </summary>
            <typeparam name="T">Type of BlobAsset the metadata is stored with</typeparam>
            <returns>BlobAsset reference of the metadata</returns>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.HasMetadata">
            <summary>
            Determine if the node contains some metadata
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.DataStartingOffset">
            <summary>
            Offset of the raw data segment in the file
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.DotsSerializationReader.NodeHandle.DataSize">
            <summary>
            Size of the raw data associated to the node
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.WeakReferenceGenerationType">
            <summary>
            Enumeration of weak reference types.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.Unknown">
            <summary>
            Unknown generation type, this usually indicates that the <seealso cref="T:Unity.Entities.Serialization.UntypedWeakReferenceId"/> has not been initialized.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.UnityObject">
            <summary>
            Reference to an object derived from <seealso cref="T:UnityEngine.Object"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.Texture">
            <summary>
            Texture asset for DOTS Runtime.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.GameObjectScene">
            <summary>
            Reference to a GameObject based scene.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.EntityScene">
            <summary>
            Reference to an Entity based scene.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.EntityPrefab">
            <summary>
            Reference to a converted prefab.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.WeakReferenceGenerationType.SubSceneObjectReferences">
            <summary>
            Reference to a collection of referenced <seealso cref="T:UnityEngine.Object"/>s from a sub scene.
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.UntypedWeakReferenceId">
            <summary>
            Used to identify weakly referenced data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.UntypedWeakReferenceId.GlobalId">
            <summary>
            The global object id.  This matches the editor global id.
            </summary>
        </member>
        <member name="F:Unity.Entities.Serialization.UntypedWeakReferenceId.GenerationType">
            <summary>
            The type of reference this is.
            It is aliased to RuntimeGlobalObjectId.SceneObjectIdentifier1.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.#ctor(Unity.Entities.Serialization.RuntimeGlobalObjectId,Unity.Entities.Serialization.WeakReferenceGenerationType)">
            <summary>
            Construct a reference given the global id and generation type.
            </summary>
            <param name="globalObjId">The global object id.</param>
            <param name="genType">The generation type.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.#ctor(Unity.Entities.Hash128,System.Int64,System.Int32,Unity.Entities.Serialization.WeakReferenceGenerationType)">
            <summary>
            Construct new UntypedWeakReferenceId.
            </summary>
            <param name="guid">The asset guid.</param>
            <param name="localFileIdentifier">The object local identifier.</param>
            <param name="idType">The object type.</param>
            <param name="genType">The id generation type.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.Equals(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            Checks if this reference is equal to another reference.
            </summary>
            <param name="other">The id to compare to.</param>
            <returns>True if the GenerationType and GlobalId are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.ToString">
            <summary>
            Converts the id to a string.
            </summary>
            <returns>The string representation of this id.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.Equals(System.Object)">
            <summary>
            Checks if this reference is equal to another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the other object is an <seealso cref="T:Unity.Entities.Serialization.UntypedWeakReferenceId"/> and is equal.</returns>
        </member>
        <member name="P:Unity.Entities.Serialization.UntypedWeakReferenceId.IsValid">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.GetHashCode">
            <summary>
            Returns the hash code of this id.
            </summary>
            <returns>The hash code of this id.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.op_Equality(Unity.Entities.Serialization.UntypedWeakReferenceId,Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.op_Inequality(Unity.Entities.Serialization.UntypedWeakReferenceId,Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.CreateFromObjectInstance(UnityEngine.Object)">
            <summary>
            Get a weak reference from a Unity object reference.
            </summary>
            <param name="obj">The object to reference.</param>
            <returns>The ide if the reference.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.UntypedWeakReferenceId.GetEditorObject(Unity.Entities.Serialization.UntypedWeakReferenceId)">
            <summary>
            Gets an object from its id.
            </summary>
            <param name="id">The object id.</param>
            <returns>The object referenced by the id or null if the id is invalid.</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.YamlWriter">
            <summary>
            Small and efficient class to writer in the Yaml format
            </summary>
            <remarks>
            This does not provide all the feature to write YAMl, only what we need for the scope of World Yaml serialization
            </remarks>
        </member>
        <member name="T:Unity.Entities.Serialization.BinaryWriter">
            <summary>
            An interface that writes primitive types to a binary buffer.
            </summary>
            <seealso cref="T:Unity.Entities.Serialization.MemoryBinaryWriter"/>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriter.WriteBytes(System.Void*,System.Int32)">
            <summary>
            Writes the specified number of bytes.
            </summary>
            <param name="data">The data to be written.</param>
            <param name="bytes">The number of bytes to write.</param>
        </member>
        <member name="P:Unity.Entities.Serialization.BinaryWriter.Position">
            <summary>
            Gets or sets the current write position of the BinaryWriter.
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.BinaryWriterExtensions">
            <summary>
            Provides write methods for a BinaryWriter.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.Write(Unity.Entities.Serialization.BinaryWriter,System.Byte)">
            <summary>
            Writes a single byte.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="value">The data to write.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.Write(Unity.Entities.Serialization.BinaryWriter,System.Int32)">
            <summary>
            Writes a single int.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="value">The data to write.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.Write(Unity.Entities.Serialization.BinaryWriter,System.UInt64)">
            <summary>
            Writes a single ulong.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="value">The data to write.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.Write(Unity.Entities.Serialization.BinaryWriter,System.Byte[])">
            <summary>
            Writes a byte array.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="bytes">The data to write.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.WriteArray``1(Unity.Entities.Serialization.BinaryWriter,Unity.Collections.NativeArray{``0})">
            <summary>
            Writes data from a native array.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="data">The data to write.</param>
            <typeparam name="T">The type of data to write from the native array.</typeparam>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.WriteList``1(Unity.Entities.Serialization.BinaryWriter,Unity.Collections.NativeList{``0})">
            <summary>
            Writes data from a native list.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="data">The data to write.</param>
            <typeparam name="T">The type of data to write from the native list.</typeparam>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryWriterExtensions.WriteList``1(Unity.Entities.Serialization.BinaryWriter,Unity.Collections.NativeList{``0},System.Int32,System.Int32)">
            <summary>
            Writes the specified number of elements from a native list.
            </summary>
            <param name="writer">The BinaryReader to write to.</param>
            <param name="data">The data to write.</param>
            <param name="index">The index at which to start writing from.</param>
            <param name="count">The number of elements to write.</param>
            <typeparam name="T">The type of data to write from the native list.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the index is outside of the buffer range.</exception>
        </member>
        <member name="T:Unity.Entities.Serialization.BinaryReader">
            <summary>
            An interface that reads primitive types from a binary buffer.
            </summary>
            <seealso cref="T:Unity.Entities.Serialization.MemoryBinaryReader"/>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryReader.ReadBytes(System.Void*,System.Int32)">
            <summary>
            Reads the specified number of bytes.
            </summary>
            <param name="data">The read data.</param>
            <param name="bytes">The number of bytes to read.</param>
        </member>
        <member name="P:Unity.Entities.Serialization.BinaryReader.Position">
            <summary>
            Gets or sets the current read position of the BinaryReader.
            </summary>
        </member>
        <member name="T:Unity.Entities.Serialization.BinaryReaderExtensions">
            <summary>
            Provides additional read methods for the BinaryReader.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryReaderExtensions.ReadByte(Unity.Entities.Serialization.BinaryReader)">
            <summary>
            Reads a single byte.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
            <returns>The read data</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryReaderExtensions.ReadInt(Unity.Entities.Serialization.BinaryReader)">
            <summary>
            Reads a single int.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
            <returns>The read data.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryReaderExtensions.ReadULong(Unity.Entities.Serialization.BinaryReader)">
            <summary>
            Reads a single ulong.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
            <returns>The read data.</returns>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryReaderExtensions.ReadBytes(Unity.Entities.Serialization.BinaryReader,Unity.Collections.NativeArray{System.Byte},System.Int32,System.Int32)">
            <summary>
            Reads the specified number of elements from a native byte array.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
            <param name="elements">The native array to read of.</param>
            <param name="count">The number of elements to read.</param>
            <param name="offset">The offset at which to start reading.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.BinaryReaderExtensions.ReadArray``1(Unity.Entities.Serialization.BinaryReader,Unity.Collections.NativeArray{``0},System.Int32)">
            <summary>
            Reads the specified number of elements from a native array.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
            <param name="elements">The native array to read of.</param>
            <param name="count">The number of elements to read.</param>
            <typeparam name="T">The type of the elements in the native array.</typeparam>
        </member>
        <member name="T:Unity.Entities.Serialization.MemoryBinaryWriter">
            <summary>
            Provides a writer to write primitive types to a binary buffer in memory.
            </summary>
            <remarks>
            This class can be used to serialize, for example, blob assets.
            The resulting binary buffer is stored in memory.
            </remarks>
            <example><code>
            struct MyData
            {
                public float embeddedFloat;
                public BlobString str;
            }
            public void WriteBlobAsset()
            {
                unsafe
                {
                    var writer = new MemoryBinaryWriter();
                    var blobBuilder = new BlobBuilder(Allocator.Temp);
                    ref var root = ref blobBuilder.ConstructRoot&lt;MyData&gt;();
                    builder.AllocateString(ref root.str, "Hello World!");
                    root.embeddedFloat = 4;
                    BlobAssetReference&lt;MyData>.Write(writer, blobBuilder, kVersion);
                }
            }
            </code></example>
        </member>
        <member name="P:Unity.Entities.Serialization.MemoryBinaryWriter.Data">
            <summary>
            A pointer to the data that has been written to memory.
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.MemoryBinaryWriter.Length">
            <summary>
            The total length of the all written data.
            </summary>
        </member>
        <member name="P:Unity.Entities.Serialization.MemoryBinaryWriter.Position">
            <summary>
            Gets or sets the current write position of the MemoryBinaryWriter.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.MemoryBinaryWriter.Dispose">
            <summary>
            Disposes the MemoryBinaryWriter.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.MemoryBinaryWriter.WriteBytes(System.Void*,System.Int32)">
            <summary>
            Writes the specified number of bytes and advances the current write position by that number of bytes.
            </summary>
            <param name="data">The data to write.</param>
            <param name="bytes">The number of bytes to write.</param>
        </member>
        <member name="T:Unity.Entities.Serialization.MemoryBinaryReader">
             <summary>
             Provides a reader to read primitive types from a binary buffer in memory.
             </summary>
             <remarks>
             This class can be used to deserialize, for example, blob assets.
            
             By default, the MemoryBinaryReader can't be Burst-compiled. It can be cast into
             <see cref="T:Unity.Entities.Serialization.BurstableMemoryBinaryReader"/> in order to be used in a burst compiled context.
             </remarks>
             <example><code>
             struct MyData
             {
                 public float embeddedFloat;
                 public BlobString str;
             }
             public void ReadBlobAsset(void* buffer, int length, int version)
             {
                 unsafe
                 {
                     var reader = new MemoryBinaryReader(writer.Data, writer.Length);
                     var result = BlobAssetReference&lt;MyData>.TryRead(reader, version, out var blobResult);
                     ref MyData value = ref blobResult.Value;
                     Debug.Log($"blob float = {value.embeddedFloat}");
                     blobResult.Dispose();
                 }
             }
             </code></example>
        </member>
        <member name="P:Unity.Entities.Serialization.MemoryBinaryReader.Position">
            <summary>
            Gets or sets the current read position of the MemoryBinaryReader.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.MemoryBinaryReader.#ctor(System.Byte*,System.Int64)">
            <summary>
            Initializes and returns an instance of MemoryBinaryReader.
            </summary>
            <param name="content">A pointer to the data to read.</param>
            <param name="length">The length of the data to read.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.MemoryBinaryReader.Dispose">
            <summary>
            Disposes the MemoryBinaryReader.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.MemoryBinaryReader.ReadBytes(System.Void*,System.Int32)">
            <summary>
            Reads the specified number of bytes and advances the current read position by that number of bytes.
            </summary>
            <param name="data">The read data.</param>
            <param name="bytes">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentException">Thrown if attempting read beyond the end of the memory block.</exception>
        </member>
        <member name="M:Unity.Entities.Serialization.MemoryBinaryReader.op_Explicit(Unity.Entities.Serialization.MemoryBinaryReader)~Unity.Entities.Serialization.BurstableMemoryBinaryReader">
            <summary>
            Converts this MemoryBinaryReader into a BurstableMemoryBinaryReader.
            </summary>
            <param name="src">The source MemoryBinaryReader.</param>
            <returns>The BurstableMemoryBinaryReader.</returns>
        </member>
        <member name="T:Unity.Entities.Serialization.BurstableMemoryBinaryReader">
            <summary>
            Provides a reader compatible with the Burst compiler that can read primitive types from a binary buffer in memory.
            </summary>
            <seealso cref="T:Unity.Entities.Serialization.MemoryBinaryReader"/>
        </member>
        <member name="P:Unity.Entities.Serialization.BurstableMemoryBinaryReader.Position">
            <summary>
            Gets or sets the current read position of the BurstableMemoryBinaryReader.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.BurstableMemoryBinaryReader.#ctor(System.Byte*,System.Int64)">
            <summary>
            Initializes and returns an instance of BurstableMemoryBinaryReader.
            </summary>
            <param name="content">A pointer to the data to read.</param>
            <param name="length">The length of the data to read.</param>
        </member>
        <member name="M:Unity.Entities.Serialization.BurstableMemoryBinaryReader.Dispose">
            <summary>
            Disposes the MemoryBinaryReader.
            </summary>
        </member>
        <member name="M:Unity.Entities.Serialization.BurstableMemoryBinaryReader.ReadByte">
            <summary>
            Reads a byte and advances the current read position by a byte.
            </summary>
            <returns>The read data.</returns>
            <exception cref="T:System.ArgumentException">Thrown if attempting read beyond the end of the memory block.</exception>
        </member>
        <member name="M:Unity.Entities.Serialization.BurstableMemoryBinaryReader.ReadInt">
            <summary>
            Reads an int and advances the current read position by the number of bytes in an int.
            </summary>
            <returns>The read data.</returns>
            <exception cref="T:System.ArgumentException">Thrown if attempting read beyond the end of the memory block.</exception>
        </member>
        <member name="M:Unity.Entities.Serialization.BurstableMemoryBinaryReader.ReadULong">
            <summary>
            Reads an ulong and advances the current read position by the number of bytes in an ulong.
            </summary>
            <returns>The read data.</returns>
            <exception cref="T:System.ArgumentException">Thrown if attempting read beyond the end of the memory block.</exception>
        </member>
        <member name="M:Unity.Entities.Serialization.BurstableMemoryBinaryReader.ReadBytes(System.Void*,System.Int32)">
            <summary>
            Reads the specified number of bytes and advances the current read position by that number of bytes.
            </summary>
            <param name="data">The read data.</param>
            <param name="bytes">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentException">Thrown if attempting read beyond the end of the memory block.</exception>
        </member>
        <member name="T:Unity.Entities.EntityDiffer">
             <summary>
             The <see cref="T:Unity.Entities.EntityDiffer"/> is used to build a set of changes between two worlds.
             </summary>
             <remarks>
             This class can be used to determine both forward and/or reverse changes between the worlds.
            
             This class relies on the <see cref="T:Unity.Entities.EntityGuid"/> to uniquely identify entities, and expects that each entity
             will have a unique value for this component. If any duplicate <see cref="T:Unity.Entities.EntityGuid"/> values are encountered
             a <see cref="T:Unity.Entities.DuplicateEntityGuidException"/> will be thrown.
            
             <seealso cref="T:Unity.Entities.EntityManagerDiffer"/> for tracking changes over time.
             </remarks>
        </member>
        <member name="T:Unity.Entities.EntityDiffer.CachedComponentChanges">
            <summary>
            CachedComponentChanges are used to not reallocate the data between each GetChanges call as this can cause big
            performance problems in cases where there is lots of changes happening.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityDiffer.GetChanges(Unity.Entities.EntityDiffer.CachedComponentChanges@,Unity.Entities.EntityManager,Unity.Entities.EntityManager,Unity.Entities.EntityManagerDifferOptions,Unity.Entities.EntityQueryDesc,Unity.Entities.BlobAssetCache,Unity.Collections.Allocator)">
            <summary>
            Generates a detailed change set between <see cref="!:srcEntityManager"/> and <see cref="!:dstEntityManager"/>.
            All entities to be considered must have the <see cref="T:Unity.Entities.EntityGuid"/> component with a unique value.
            The resulting <see cref="T:Unity.Entities.EntityChanges"/> must be disposed when no longer needed.
            </summary>
            <remarks>
            When using the <see cref="F:Unity.Entities.EntityManagerDifferOptions.FastForwardShadowWorld"/> the destination world must be a direct ancestor to
            the source world, and must only be updated using this call or similar methods. There should be no direct changes to destination world.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityDiffer.CombineDependencies(Unity.Jobs.JobHandle,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle)">
            <summary>
            @TODO NET_DOTS does not support JobHandle.CombineDependencies with 3 arguments.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.ArchetypeChunkChangeFlags.Cloned">
            <summary>
            This chunk exists in both worlds, change version comparisons can be done.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.ArchetypeChunkChanges.CreatedSrcChunks">
            <summary>
            A set of all chunks in the SrcWorld that have been created.
            </summary>
            <remarks>
            This includes modified chunks that are being re-created.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.ArchetypeChunkChanges.DestroyedDstChunks">
            <summary>
            A set of all chunks in the DstWorld that have be destroyed from the SrcWorld.
            </summary>
            <remarks>
            This includes modified chunks that are being re-created.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.ArchetypeChunkChangeSet.Chunks">
            <summary>
            A set of changed chunks within a given world.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.ArchetypeChunkChangeSet.Flags">
            <summary>
            Change flags for each chunk matched by index.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.ArchetypeChunkChangeSet.EntityCounts">
            <summary>
            An array containing the cumulative count of entities per chunk.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityDiffer.ArchetypeChunkChangeSet.TotalEntityCount">
            <summary>
            The total number of entities for all changed chunks.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityDiffer.BuildChunkSequenceNumberMap">
            <summary>
            Builds a mapping of <see cref="F:Unity.Entities.Chunk.SequenceNumber"/> to it's <see cref="T:Unity.Entities.ArchetypeChunk"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityDiffer.GatherArchetypeChunkChanges">
             <summary>
             Builds a set of chunks which have been created or destroyed.
            
             Created chunks point to the srcWorld while Destroyed chunks point to the dstWorld.
             </summary>
        </member>
        <member name="M:Unity.Entities.EntityDiffer.GetArchetypeChunkChanges(Unity.Collections.NativeList{Unity.Entities.ArchetypeChunk},Unity.Collections.NativeList{Unity.Entities.ArchetypeChunk},System.Int32,Unity.Collections.Allocator,Unity.Jobs.JobHandle@,Unity.Jobs.JobHandle)">
            <summary>
            Constructs a set of changes between the given src and dst chunks.
            </summary>
            <remarks>
            A chunk is considered unchanged if the <see cref="F:Unity.Entities.Chunk.SequenceNumber"/> matches and all type change versions match.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityDiffer.GatherComponentChanges.BlobAssetHashesAreDifferent(Unity.Entities.TypeManager.TypeInfo*,System.Byte*,System.Byte*,System.Int32)">
            <summary>
            IMPORTANT. This function does *NO* validation. It is assumed to be called after a memcmp == 0
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityDiffer.GatherComponentChangesReadOnlyData.UseReferentialEquivalence">
            <summary>
            If set, components are not compared bit-wise. Bit-wise comparison implies that two components that
            have references to entities that have the same GUID but different indices/versions are different.
            Similarly blob asset references to blob assets that have the same hash but live at different addresses
            will be considered different as well. This is often not desirable. For these cases, it is more apt to
            check that GUIDs and hashes match.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityDiffer.GetEntityNames(Unity.Collections.NativeList{Unity.Entities.EntityDiffer.CreatedEntity},Unity.Collections.NativeList{Unity.Entities.EntityDiffer.DestroyedEntity},Unity.Collections.NativeList{Unity.Entities.EntityDiffer.NameModifiedEntity},Unity.Entities.EntityManager,Unity.Entities.EntityManager,Unity.Collections.Allocator)">
            <summary>
            This method returns all entity names for the given array of entityGuid components.
            </summary>
            <remarks>
            This method relies on the source buffers the entityGuids was built from. While this could technically be done
            while building the entityGuid set, it's a bit more isolated this way so we can remove it easily in the future.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Archetype.EmptySlotTrackingRemoveChunk(Unity.Entities.Chunk*)">
            <summary>
            Remove chunk from archetype tracking of chunks with available slots.
            - Does not check if chunk has space.
            - Does not check if chunk is locked.
            </summary>
            <param name="chunk"></param>
        </member>
        <member name="M:Unity.Entities.Archetype.EmptySlotTrackingAddChunk(Unity.Entities.Chunk*)">
            <summary>
            Add chunk to archetype tracking of chunks with available slots.
            - Does not check if chunk has space.
            - Does not check if chunk is locked.
            </summary>
            <param name="chunk"></param>
        </member>
        <member name="M:Unity.Entities.EntityComponentStore.GetEnabledRawRW(Unity.Entities.Entity,Unity.Entities.TypeIndex,Unity.Entities.LookupCache@,System.UInt32,System.Int32@,System.Int32*@)">
            <summary>
            Get a pointer to the component type index enabled bits of the chunk the entity is part of.
            Also returns a pointer to the chunk's disable counter.
            Will update the chunk version
            </summary>
            <param name="entity"></param>
            <param name="typeIndex"></param>
            <param name="typeLookupCache"></param>
            <param name="globalSystemVersion"></param>
            <param name="indexInBitField"></param>
            <param name="ptrChunkDisabledCount"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityComponentStore.GetEnabledRawRO(Unity.Entities.Entity,Unity.Entities.TypeIndex,Unity.Entities.LookupCache@,System.Int32@,System.Int32*@)">
            <summary>
            Get a pointer to the component type index enabled bits of the chunk the entity is part of.
            Also returns a pointer to the chunk's disable counter
            </summary>
            <param name="entity"></param>
            <param name="typeIndex"></param>
            <param name="typeLookupCache"></param>
            <param name="indexInBitField"></param>
            <param name="ptrChunkDisabledCount"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityComponentStore.Move(Unity.Entities.EntityBatchInChunk@,Unity.Entities.Chunk*)">
            <summary>
            Move subset of chunk data into another chunk.
            </summary>
            <remarks>
            Chunks can be of same archetype (but differ by shared component values).
            </remarks>
            <returns>Returns the number moved. Caller handles if less than indicated in srcBatch.</returns>
        </member>
        <member name="T:Unity.Entities.IECBSingleton">
            <summary>
            Interface for use with EntityCommandBufferSystems to store the list of pending buffers,
            which can be accessed from a bursted ISystem. You should implement a singleton with this interface
            every time you inherit from EntityCommandBufferSystem.
            </summary>
        </member>
        <member name="M:Unity.Entities.IECBSingleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>
            This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with `CreateCommandBuffer` are automatically added to
            the system's list of pending buffers to play back.
            </remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.IECBSingleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="T:Unity.Entities.EntityCommandBufferSystem">
             <summary>
             A system that provides <seealso cref="T:Unity.Entities.EntityCommandBuffer"/> objects for other systems.
             </summary>
             <remarks>
             Each system that uses the EntityCommandBuffer provided by a command buffer system must call
             <see cref="M:Unity.Entities.EntityCommandBufferSystem.CreateCommandBuffer"/> to create its own command buffer instance. This buffer system executes each of
             these separate command buffers in the order that you created them. The commands are executed during this system's
             <see cref="M:Unity.Entities.EntityCommandBufferSystem.OnUpdate"/> function.
            
             When you write to a command buffer from a Job, you must add the <see cref="T:Unity.Jobs.JobHandle"/> of that Job to the buffer
             system's dependency list with <see cref="M:Unity.Entities.EntityCommandBufferSystem.AddJobHandleForProducer(Unity.Jobs.JobHandle)"/>.
            
             If you write to a command buffer from a Job that runs in
             parallel (and this includes both <see cref="T:Unity.Entities.IJobEntity"/> and <see cref="T:Unity.Entities.IJobChunk"/>), you must use the
             concurrent version of the command buffer (<seealso cref="M:Unity.Entities.EntityCommandBuffer.AsParallelWriter"/>).
            
             Executing the commands in an EntityCommandBuffer invokes the corresponding functions of the
             <see cref="T:Unity.Entities.EntityManager"/>. Any structural change, such as adding or removing entities, adding or removing
             components from entities, or changing shared component values, creates a sync-point in your application.
             At a sync point, all Jobs accessing entity components must complete before new Jobs can start. Such sync points
             make it difficult for the Job scheduler to fully utilize available computing power. To avoid sync points,
             you should use as few entity command buffer systems as possible.
            
             The default ECS <see cref="T:Unity.Entities.World"/> code creates a <see cref="T:Unity.Entities.ComponentSystemGroup"/> setup with
             three main groups, <see cref="T:Unity.Entities.InitializationSystemGroup"/>, <see cref="T:Unity.Entities.SimulationSystemGroup"/>, and
             <see cref="T:Unity.Entities.PresentationSystemGroup"/>. Each of these main groups provides an existing EntityCommandBufferSystem
             executed at the start and the end of other, child systems.
            
             Note that unused command buffers systems do not create sync points because there are no commands to execute and
             thus no structural changes created.
            
             The EntityCommandBufferSystem class is abstract, so you must implement a subclass to create your own
             entity command buffer system. However, none of its methods are abstract, so you do not need to implement
             your own logic. Typically, you create an EntityCommandBufferSystem subclass to create a named buffer system
             for other systems to use and update it at an appropriate place in a custom <see cref="T:Unity.Entities.ComponentSystemGroup"/>
             setup.</remarks>
            
        </member>
        <member name="F:Unity.Entities.EntityCommandBufferSystem.m_PendingBuffers">
            <summary>
            List of command buffers that this system has allocated, which are played back and disposed of when the system updates.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.CreateCommandBuffer">
             <summary>
             Creates an <seealso cref="T:Unity.Entities.EntityCommandBuffer"/> and adds it to this system's list of command buffers.
             </summary>
             <remarks>
             This buffer system executes its list of command buffers during its <see cref="M:Unity.Entities.EntityCommandBufferSystem.OnUpdate"/> function in the
             order you created the command buffers.
            
             If you write to a command buffer in a Job, you must add the
             Job as a dependency of this system by calling <see cref="M:Unity.Entities.EntityCommandBufferSystem.AddJobHandleForProducer(Unity.Jobs.JobHandle)"/>. The dependency ensures
             that the buffer system waits for the Job to complete before executing the command buffer.
            
             If you write to a command buffer from a parallel Job, such as <see cref="T:Unity.Entities.IJobEntity"/> or
             <see cref="T:Unity.Entities.IJobChunk"/>, you must use the concurrent version of the command buffer, provided by
             <see cref="T:Unity.Entities.EntityCommandBuffer.ParallelWriter"/>.
             </remarks>
             <returns>A command buffer that will be executed by this system.</returns>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.AddJobHandleForProducer(Unity.Jobs.JobHandle)">
            <summary>
            Adds the specified JobHandle to this system's list of dependencies.
            </summary>
            <remarks>
            When you write to an <see cref="T:Unity.Entities.EntityCommandBuffer"/> from a Job, you must add the <see cref="T:Unity.Jobs.JobHandle"/> of that Job to this
            <see cref="T:Unity.Entities.EntityCommandBufferSystem"/>'s input dependencies by calling this function. Otherwise, this system
            could attempt to execute the command buffer contents while the writing Job is still running, causing a race condition.
            </remarks>
            <param name="producerJob">The JobHandle of a Job which this buffer system should wait for before playing back its
            pending command buffers.</param>
            <example>
            The following example illustrates how to use one of the default <see cref="T:Unity.Entities.EntityCommandBufferSystem"/>s.
            The code selects all entities that have one custom component, in this case, `AsyncProcessInfo`, and
            processes each entity in the `Execute()` function of an <see cref="T:Unity.Entities.IJobEntity"/> Job. After processing, the Job
            uses a <see cref="T:Unity.Entities.EntityCommandBuffer"/> to remove the `ProcessInfo` component and add a `ProcessCompleteTag`
            component. Another system could use the `ProcessCompleteTag` to find entities that represent the end
            results of the process.
            <code source="../DocCodeSamples.Tests/EntityCommandBuffers.cs" region="ecb_addjobhandleforproducer" title="AddJobHandleForProducer Example" language="csharp"/>
            </example>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.OnCreate">
            <summary>
            Initializes this command buffer system.
            </summary>
            <remarks>If you override this method, you should call `base.OnCreate()` to retain the default
            initialization logic.</remarks>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.OnDestroy">
            <summary>
            Destroys this system, executing any pending command buffers first.
            </summary>
            <remarks>If you override this method, you should call `base.OnDestroy()` to retain the default
            destruction logic.</remarks>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.OnUpdate">
            <summary>
            Executes the command buffers in this system in the order they were created.
            </summary>
            <remarks>If you override this method, you should call `base.OnUpdate()` to retain the default
            update logic.</remarks>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.CreateCommandBuffer(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@,Unity.Collections.Allocator,Unity.Entities.WorldUnmanaged)">
            <summary>
            Creates a command buffer, sets it up, and appends it to a list of command buffers.
            </summary>
            <param name="pendingBuffers">The list of command buffers to append to</param>
            <param name="allocator">The allocator to allocate from, when building the command buffer</param>
            <param name="world">The world that this command buffer buffers changes for</param>
            <returns>Returns the command buffer</returns>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferSystem.CreateCommandBuffer(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@,Unity.Entities.WorldUnmanaged)">
            <summary>
            Creates a command buffer that allocates from a World's Update Allocator, sets it up,
            and appends it to a list of command buffers.
            </summary>
            <param name="pendingBuffers">The list of command buffers to append to</param>
            <param name="world">The world that this command buffer buffers changes for</param>
            <returns>Returns the command buffer</returns>
        </member>
        <member name="T:Unity.Entities.ECBExtensionMethods">
            <summary>
            Extension methods for EntityCommandBufferSystem.
            </summary>
        </member>
        <member name="M:Unity.Entities.ECBExtensionMethods.RegisterSingleton``1(Unity.Entities.EntityCommandBufferSystem,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@,Unity.Entities.WorldUnmanaged)">
            <summary>
            Every unmanaged Singleton that implements IECBSingleton must be registered by this function, at the end of
            its owner's EntityCommandBufferSystem.OnCreate method, in order to prepare the Singleton with the
            unmanaged data necessary for it to work from unmanaged code, without holding a managed reference to the
            EntityCommandBufferSystem. This Singleton component will be added to the system entity for this
            EntityCommandBufferSystem derived type.
            </summary>
            <param name="system">The managed EntityCommandBufferSystem that owns the Singleton</param>
            <param name="pendingBuffers">The list of command buffers in the managed System to append to</param>
            <param name="world">The world that this command buffer buffers changes for</param>
            <typeparam name="T">
            The unmanaged Singleton type, that corresponds to the managed EntityCommandBufferSystem subclass
            </typeparam>
        </member>
        <member name="M:Unity.Entities.ECBExtensionMethods.RegisterSingleton``1(Unity.Entities.EntityCommandBufferSystem,Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@,Unity.Entities.WorldUnmanaged,System.String)">
            <summary>Obsolete. System entities are used for ECB component data, rather than entityName.</summary>
            <param name="system">The managed EntityCommandBufferSystem that owns the Singleton</param>
            <param name="pendingBuffers">The list of command buffers in the managed System to append to</param>
            <param name="world">The world that this command buffer buffers changes for</param>
            <param name="entityName">The name of the entity.</param>
            <typeparam name="T">
            The unmanaged Singleton type, that corresponds to the managed EntityCommandBufferSystem subclass
            </typeparam>
        </member>
        <member name="T:Unity.Entities.DOTSCompilerPatchedMethodAttribute">
            <summary>
            Attribute to mark a compiler generated method for method body copying.
            Intended only for use by internal Unity codegen.
            </summary>
        </member>
        <member name="M:Unity.Entities.DOTSCompilerPatchedMethodAttribute.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:Unity.Entities.DOTSCompilerPatchedMethodAttribute"/>.
            </summary>
            <param name="targetMethodName">Original method to copy method body into.</param>
        </member>
        <member name="T:Unity.Entities.DOTSCompilerPatchedPropertyAttribute">
            <summary>
            Attribute to mark a compiler generated method for property body copying.
            Intended only for use by internal Unity codegen.
            </summary>
        </member>
        <member name="M:Unity.Entities.DOTSCompilerPatchedPropertyAttribute.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:Unity.Entities.DOTSCompilerPatchedMethodAttribute"/>.
            </summary>
            <param name="targetPropertyName">Original property to copy property body into.</param>
        </member>
        <member name="T:Unity.Entities.ComponentDataFromEntity`1">
            <summary> Obsolete. Use <see cref="T:Unity.Entities.ComponentLookup`1"/> instead.</summary>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IComponentData"/> to access.</typeparam>
        </member>
        <member name="T:Unity.Entities.ComponentLookup`1">
             <summary>
             A [NativeContainer] that provides access to all instances of components of type T, indexed by <see cref="T:Unity.Entities.Entity"/>.
             </summary>
             <typeparam name="T">The type of <see cref="T:Unity.Entities.IComponentData"/> to access.</typeparam>
             <remarks>
             ComponentLookup is a native container that provides array-like access to components of a specific
             type. You can use ComponentLookup to look up data associated with one entity while iterating over a
             different set of entities. For example, Unity.Transforms stores the <see cref="T:Unity.Entities.Entity"/> object of parent entities
             in a Parent component and looks up the parent's LocalToWorld matrix using
             ComponentLookup&lt;LocalToWorld&gt; when calculating the world positions of child entities.
            
             To get a ComponentLookup, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentLookup``1(System.Boolean)"/>.
            
             Pass a ComponentLookup container to a job by defining a public field of the appropriate type
             in your IJob implementation. You can safely read from ComponentLookup in any job, but by
             default, you cannot write to components in the container in parallel jobs (including
             <see cref="T:Unity.Entities.IJobEntity"/>, Entities.Foreach and <see cref="T:Unity.Entities.IJobChunk"/>). If you know that two instances of a parallel
             job can never write to the same index in the container, you can disable the restriction on parallel writing
             by adding [NativeDisableParallelForRestrictionAttribute] to the ComponentLookup field definition in the job struct.
            
             If you would like to access an entity's components outside of a job, consider using the <see cref="T:Unity.Entities.EntityManager"/> methods
             <see cref="M:Unity.Entities.EntityManager.GetComponentData``1(Unity.Entities.Entity)"/> and <see cref="M:Unity.Entities.EntityManager.SetComponentData``1(Unity.Entities.Entity,``0)"/>
             instead, to avoid the overhead of creating a ComponentLookup object.
            
             [NativeContainer]: https://docs.unity3d.com/ScriptReference/Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute
             [NativeDisableParallelForRestrictionAttribute]: https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeDisableParallelForRestrictionAttribute.html
             </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.Update(Unity.Entities.SystemBase)">
            <summary>
            When a ComponentLookup is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.Update(Unity.Entities.SystemState@)">
            <summary>
            When a ComponentLookup is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="systemState">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.HasComponent(Unity.Entities.Entity)">
            <summary>
            Reports whether the specified <see cref="T:Unity.Entities.Entity"/> instance still refers to a valid entity and that it has a
            component of type T.
            </summary>
            <param name="entity">The entity.</param>
            <returns>True if the entity has a component of type T, and false if it does not. Also returns false if
            the Entity instance refers to an entity that has been destroyed.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.HasComponent(Unity.Entities.SystemHandle)">
            <summary>
            Reports whether the specified <see cref="T:Unity.Entities.SystemHandle"/> associated <see cref="T:Unity.Entities.Entity"/> is valid and contains a
            component of type T.
            </summary>
            <param name="system">The system handle.</param>
            <returns>True if the entity associated with the system has a component of type T, and false if it does not. Also returns false if
            the system handle refers to a system that has been destroyed.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.TryGetComponent(Unity.Entities.Entity,`0@)">
            <summary>
            Retrieves the component associated with the specified <see cref="T:Unity.Entities.Entity"/>, if it exists. Then reports if the instance still refers to a valid entity and that it has a
            component of type T.
            </summary>
            <param name="entity">The entity.</param>
            /// <param name="componentData">The component of type T for the given entity, if it exists.</param>
            <returns>True if the entity has a component of type T, and false if it does not.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.DidChange(Unity.Entities.Entity,System.UInt32)">
            <summary>
            Reports whether any of IComponentData components of the type T, in the chunk containing the
            specified <see cref="T:Unity.Entities.Entity"/>, could have changed.
            </summary>
            <remarks>
            Note that for efficiency, the change version applies to whole chunks not individual entities. The change
            version is incremented even when another job or system that has declared write access to a component does
            not actually change the component value.</remarks>
            <param name="entity">The entity.</param>
            <param name="version">The version to compare. In a system, this parameter should be set to the
            current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
            scheduled.</param>
            <returns>True, if the version number stored in the chunk for this component is more recent than the version
            passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="P:Unity.Entities.ComponentLookup`1.Item(Unity.Entities.Entity)">
             <summary>
             Gets the <see cref="T:Unity.Entities.IComponentData"/> instance of type T for the specified entity.
             </summary>
             <param name="entity">The entity.</param>
             <returns>An <see cref="T:Unity.Entities.IComponentData"/> type.</returns>
             <remarks>
             Normally, you cannot write to components accessed using a ComponentLookup instance
             in a parallel Job. This restriction is in place because multiple threads could write to the same component,
             leading to a race condition and nondeterministic results. However, when you are certain that your algorithm
             cannot write to the same component from different threads, you can manually disable this safety check
             by putting the [NativeDisableParallelForRestrictions] attribute on the ComponentLookup field in the Job.
            
             [NativeDisableParallelForRestrictionAttribute]: https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeDisableParallelForRestrictionAttribute.html
             </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentLookup`1.Item(Unity.Entities.SystemHandle)">
             <summary>
             Gets the <see cref="T:Unity.Entities.IComponentData"/> instance of type T for the specified system's associated entity.
             </summary>
             <param name="system">The system handle.</param>
             <returns>An <see cref="T:Unity.Entities.IComponentData"/> type.</returns>
             <remarks>
             Normally, you cannot write to components accessed using a ComponentDataFromEntity instance
             in a parallel Job. This restriction is in place because multiple threads could write to the same component,
             leading to a race condition and nondeterministic results. However, when you are certain that your algorithm
             cannot write to the same component from different threads, you can manually disable this safety check
             by putting the [NativeDisableParallelForRestrictions] attribute on the ComponentDataFromEntity field in the Job.
            
             [NativeDisableParallelForRestrictionAttribute]: https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeDisableParallelForRestrictionAttribute.html
             </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.Entity)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IComponentData"/> of type T is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.SystemHandle)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IComponentData"/> of type T is enabled on the specified system using a <see cref="T:Unity.Entities.SystemHandle"/>.
            For the purposes of EntityQuery matching, a system with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <param name="systemHandle">The system whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.SystemHandle,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.SystemHandle,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IComponentData"/> of type T on the specified system using a <see cref="T:Unity.Entities.SystemHandle"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, a system with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <param name="systemHandle">The system whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.SystemHandle)"/>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IComponentData"/> of type T on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetRefRW(Unity.Entities.SystemHandle)">
            <summary>
            Gets a safe reference to the component data.
            </summary>
            <param name="system">The system handle with the referenced entity</param>
            <returns>Returns a safe reference to the component data. Throws an
            exception if the component doesn't exist.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetRefRW(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Gets a safe reference to the component data.
            </summary>
            <param name="entity">The referenced entity</param>
            <param name="isReadOnly">True if you only want to read from the returned component; false if you also want to write to it</param>
            <returns>Returns a safe reference to the component data. Throws an
            exception if the component doesn't exist.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetRefRO(Unity.Entities.Entity)">
            <summary>
            Gets a safe reference to the component data.
            </summary>
            <param name="entity">The referenced entity</param>
            <returns>Returns a safe reference to the component data. Throws an
            exception if the component doesn't exist.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetRefRWOptional(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Gets a safe reference to the component data and a default RefRW (RefRW.IsValid == false).
            /// </summary>
            <param name="entity">The referenced entity</param>
            <param name="isReadOnly">True if you only want to read from the returned component; false if you also want to write to it</param>
            <returns>Returns a safe reference to the component data and a default RefRW.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetRefROOptional(Unity.Entities.Entity)">
            <summary>
            Gets a safe reference to the component data and
            a default RefRO (RefRO.IsValid == false).
            </summary>
            <param name="entity">The referenced entity</param>
            <returns>Returns a safe reference to the component data and a default RefRW.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetEnabledRefRW``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Gets a safe reference to the component enabled state.
            </summary>
            <typeparam name="T2">The component type</typeparam>
            <param name="entity">The referenced entity</param>
            <param name="isReadOnly">True if you only want to read from the returned component enabled state; false if you also want to write to it</param>
            <returns>Returns a safe reference to the component enabled state.
            Throws an exception if the component doesn't exist.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetComponentEnabledRefRWOptional``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Gets a safe reference to the component enabled state.
            </summary>
            <typeparam name="T2">The component type</typeparam>
            <param name="entity">The referenced entity</param>
            <param name="isReadOnly">True if you only want to read from the returned component enabled state; false if you also want to write to it</param>
            <returns>Returns a safe reference to the component enabled state. If the component
            doesn't exist, it returns a default ComponentEnabledRefRW.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetEnabledRefRO``1(Unity.Entities.Entity)">
            <summary>
            Gets a safe reference to the component enabled state.
            </summary>
            <typeparam name="T2">The component type</typeparam>
            <param name="entity">The referenced entity</param>
            <returns>Returns a safe reference to the component enabled state.
            Throws an exception if the component doesn't exist.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentLookup`1.GetComponentEnabledRefROOptional``1(Unity.Entities.Entity)">
            <summary>
            Gets a safe reference to the component enabled state.
            </summary>
            <typeparam name="T2">The component type</typeparam>
            <param name="entity">The referenced entity</param>
            <returns> Returns a safe reference to the component enabled state.
            If the component doesn't exist, returns a default ComponentEnabledRefRO.</returns>
        </member>
        <member name="T:Unity.Entities.DefaultWorldInitialization">
            <summary>
            Utilities to help initialize the default ECS <see cref="T:Unity.Entities.World"/>.
            </summary>
        </member>
        <member name="E:Unity.Entities.DefaultWorldInitialization.DefaultWorldInitialized">
            <summary>
            Invoked after the default World is initialized.
            </summary>
        </member>
        <member name="E:Unity.Entities.DefaultWorldInitialization.DefaultWorldDestroyed">
            <summary>
            Invoked after the Worlds are destroyed.
            </summary>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.CleanupWorldBeforeSceneLoad">
            <summary>
            Destroys Editor World when entering Play Mode without Domain Reload.
            RuntimeInitializeOnLoadMethod is called before the new scene is loaded, before Awake and OnEnable of MonoBehaviour.
            </summary>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.RegisterUnloadOrPlayModeChangeShutdown">
            <summary>
            Ensures the current World destruction on shutdown or when entering/exiting Play Mode or Domain Reload.
            1) When switching to Play Mode Editor World (if created) has to be destroyed:
                - after the current scene objects are destroyed and OnDisable/Destroy are called,
                - before game scene is loaded and Awake/OnEnable are called.
            2) When switching to Edit Mode Game World has to be destroyed:
                - after the current scene objects are destroyed and OnDisable/Destroy are called,
                - before backup scene is loaded and Awake/OnEnable are called.
            3) When Unloading Domain (as well as Editor/Player exit) Editor or Game World has to be destroyed:
                - after OnDisable/OnBeforeSerialize are called,
                - before AppDomain.DomainUnload.
            Point 1) is covered by RuntimeInitializeOnLoadMethod attribute.
            For points 2) and 3) there are no entry point in the Unity API and they have to be handled by a proxy MonoBehaviour
            which in OnDisable can drive the World cleanup for both Exit Play Mode and Domain Unload.
            </summary>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.Initialize(System.String,System.Boolean)">
            <summary>
            Initializes the default world or runs ICustomBootstrap if one is available.
            </summary>
            <param name="defaultWorldName">The name of the world that will be created. Unless there is a custom bootstrap.</param>
            <param name="editorWorld">Editor worlds by default only include systems with [WorldSystemFilter(WorldSystemFilterFlags.Editor)]. If editorWorld is true, ICustomBootstrap will not be used.</param>
            <returns>The initialized <see cref="T:Unity.Entities.World"/> object.</returns>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups(Unity.Entities.World,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds the collection of systems to the world by injecting them into the root level system groups
            (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup)
            </summary>
            <param name="world">The World in which the root-level system groups should be created.</param>
            <param name="systemTypes">The system types to create and add.</param>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups(Unity.Entities.World,System.Type[])">
            <summary>
            Adds the collection of systems to the world by injecting them into the root level system groups
            (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup)
            </summary>
            <param name="world">The World in which the root-level system groups should be created.</param>
            <param name="systemTypes">The system types to create and add.</param>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.AddSystemsToRootLevelSystemGroups(Unity.Entities.World,System.Collections.Generic.IReadOnlyList{System.Type})">
            <summary>
            Adds the collection of systems to the world by injecting them into the root level system groups
            (InitializationSystemGroup, SimulationSystemGroup and PresentationSystemGroup)
            </summary>
            <param name="world">The World in which the root-level system groups should be created.</param>
            <param name="systemTypes">The system types to create and add.</param>
        </member>
        <member name="T:Unity.Entities.DefaultWorldInitialization.IIdentifyRootGroups">
            <summary>
            This internal interface is used when adding systems to the default world to identify the root groups in your
            setup. They will then be skipped when we try to find the parent of each system (because they don't need a
            parent).
            </summary>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.DefaultLazyEditModeInitialize">
            <summary>
            Can be called when in edit mode in the editor to initialize a the default world.
            </summary>
        </member>
        <member name="M:Unity.Entities.DefaultWorldInitialization.GetAllSystems(Unity.Entities.WorldSystemFilterFlags,System.Boolean)">
            <summary>
            Calculates a list of all systems filtered with WorldSystemFilterFlags, [DisableAutoCreation] etc.
            </summary>
            <param name="filterFlags">The filter flags to search for.</param>
            <param name="requireExecuteInEditor">Optionally require that [WorldSystemFilter(WorldSystemFilterFlags.Editor)] is present on the system. This is used when creating edit mode worlds.</param>
            <returns>The list of filtered systems</returns>
        </member>
        <member name="T:Unity.Entities.IRefCounted">
            <summary>
            An interface for managed and unmanaged shared component types to inherit from. Whenever
            a IRefCounted shared component is added to a world, its Retain() method will be invoked. Similarly,
            when removed from a world, its Release() method will be invoked. This interface can be used to safely manage
            the lifetime of a shared component whose instance data is shared between multiple worlds.
            </summary>
        </member>
        <member name="T:Unity.Entities.IRefCounted.RefCountDelegate">
            <summary>
            Delegate method used for invoking Retain() and Release() member functions from Burst compiled code.
            </summary>
        </member>
        <member name="M:Unity.Entities.IRefCounted.Retain">
            <summary>
            Called when a world has a new instance of a IRefCounted type added to it.
            </summary>
        </member>
        <member name="M:Unity.Entities.IRefCounted.Release">
            <summary>
            Called when a world has the last instance of a IRefCounted type removed from it.
            </summary>
        </member>
        <member name="T:Unity.Entities.SafeBitRef">
            <summary>
            Pointer to a single bit, and a safety handle.
            </summary>
            <remarks>Do not store outside of stack</remarks>
        </member>
        <member name="M:Unity.Entities.SafeBitRef.#ctor(System.UInt64*,System.Int32,Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
            <summary>
            Build a safe pointer to a bit at address ptr + offsetInBits.
            </summary>
            <param name="ptr">Base memory address to the bit. In bytes.</param>
            <param name="offsetInBits">Offset in bits from the base memory address. in bits</param>
            <param name="safety">Safety handle for that memory space</param>
        </member>
        <member name="P:Unity.Entities.SafeBitRef.Null">
            <summary>
            An invalid pointer.
            </summary>
        </member>
        <member name="M:Unity.Entities.SafeBitRef.Offset(System.Int32)">
            <summary>
            Create a new pointer at a bit offset from this bit pointer
            </summary>
            <param name="offsetInBits">offset in bit for the new pointer to return</param>
            <returns>A new SafeBitRef pointing at the offset in bits</returns>
        </member>
        <member name="P:Unity.Entities.SafeBitRef.IsValid">
            <summary>
            Test if this pointer is valid (not null).
            </summary>
        </member>
        <member name="M:Unity.Entities.SafeBitRef.GetBit">
            <summary>
            Get the bool value of the bit pointed at.
            </summary>
            <returns>The bool value of the bit pointed at.</returns>
        </member>
        <member name="M:Unity.Entities.SafeBitRef.SetBit(System.Boolean)">
            <summary>
            Set the bool value of the bit pointed at
            </summary>
            <param name="value">The value to write to the pointed bit</param>
        </member>
        <member name="T:Unity.Entities.EnabledMask">
            <summary>
            Safe pointer to a bit buffer first bit, and a
            pointer to the chunk's component disabled count, which is updated
            when the bits are written to.
            </summary>
            <remarks>Do not store outside of stack</remarks>
        </member>
        <member name="M:Unity.Entities.EnabledMask.#ctor(Unity.Entities.SafeBitRef,System.Int32*)">
            <summary>
            Interpret the memory at <see cref="T:Unity.Entities.SafeBitRef"/> as an <see cref="T:Unity.Entities.EnabledMask"/>.
            </summary>
            <param name="enableBitRef">First bit to the buffer</param>
            <param name="ptrChunkDisabledCount">pointer to the disabled count int associated with the chunk the enabled-bit is part of</param>
        </member>
        <member name="P:Unity.Entities.EnabledMask.EnableBit">
            <summary>
            First bit of the EnabledMask buffer
            </summary>
        </member>
        <member name="P:Unity.Entities.EnabledMask.Item(System.Int32)">
            <summary>
            Access the bit at bit-memory-address (first bit) + index
            </summary>
            <param name="index">Index of the bit to access</param>
            <returns>true if bit is set</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the EnabledMask is missing a pointer to the ChunkDisabledCount</exception>
        </member>
        <member name="M:Unity.Entities.EnabledMask.GetBit(System.Int32)">
            <summary>
            Retrieve the value of the bit from bit-memory-address (first bit) + index
            </summary>
            <param name="index">index in the array of bits to retreive the value from</param>
            <returns>The value of the bit from bit-memory-address (first bit) + index</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the EnabledMask is missing a pointer to the ChunkDisabledCount</exception>
        </member>
        <member name="M:Unity.Entities.EnabledMask.GetEnabledRefRW``1(System.Int32)">
            <summary>
            Get a <see cref="T:Unity.Entities.EnabledRefRW`1"/> reference to the enabled bit at index.
            </summary>
            <remarks>This method is called by the code generated by the Aspect source generator.</remarks>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index to the enabled bit in the chunk.</param>
            <returns>A reference to the enabled bit for the component at the specified index.</returns>
        </member>
        <member name="M:Unity.Entities.EnabledMask.GetEnabledRefRO``1(System.Int32)">
            <summary>
            Get a <see cref="T:Unity.Entities.EnabledRefRO`1"/> reference to the enabled bit at index.
            </summary>
            <remarks>This method is called by the code generated by the Aspect source generator.</remarks>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index to the enabled bit in the chunk.</param>
            <returns>A reference to the enabled bit for the component at the specified index.</returns>
        </member>
        <member name="M:Unity.Entities.EnabledMask.GetOptionalEnabledRefRW``1(System.Int32)">
            <summary>
            Get a <see cref="T:Unity.Entities.EnabledRefRW`1"/> reference to the enabled bit at index.
            Returns EnabledRefRORW&lt;T&gt;.Null if this EnabledMask is not valid.
            </summary>
            <remarks>This method is called by the code generated by the Aspect source generator.</remarks>
            <typeparam name="T">The component type.</typeparam>
            <param name="index">The index to the enabled bit in the chunk.</param>
            <returns>A reference to the enabled bit for the component at the specified index or <see cref="P:Unity.Entities.EnabledRefRW`1.Null"/> if this <see cref="T:Unity.Entities.EnabledMask"/> is not valid.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the EnabledMask is missing a pointer to the ChunkDisabledCount</exception>
        </member>
        <member name="M:Unity.Entities.EnabledMask.GetOptionalEnabledRefRO``1(System.Int32)">
            <summary>
            Get a <see cref="T:Unity.Entities.EnabledRefRO`1"/> reference to the enabled bit at index.
            </summary>
            <remarks>This method is called by the code generated by the Aspect source generator.</remarks>
            <typeparam name="T">Type of the IEnableableComponent component</typeparam>
            <param name="index">The index to the enabled bit in the chunk.</param>
            <returns>null if the buffer is not valid.</returns>
            <returns>A read-only reference to the enabled bit for the component at the specified index or <see cref="P:Unity.Entities.EnabledRefRO`1.Null"/> if this <see cref="T:Unity.Entities.EnabledMask"/> is not valid.</returns>
        </member>
        <member name="T:Unity.Entities.TypeManager">
            <summary>
            The TypeManager registers all Components and Systems available at runtime. Information about components and systems
            can be retrieved at runtime via static methods on TypeManager. The Initialize() method must be invoked before the
            TypeManager can be used.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetAllAspectTypes">
            <summary>
            Retrieve all managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.
            </summary>
            <returns>An array of all managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetAspectType(System.Int32)">
            <summary>
            Retrieve managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/> from its type index.
            </summary>
            <param name="typeIndex">The type index of the aspect type.</param>
            <returns>The managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetAspectTypeIndex(System.Type)">
            <summary>
            Retrieve the type index of the managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.
            </summary>
            <param name="type">The managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</param>
            <returns>The type index of the managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetAspectTypeIndex``1">
            <summary>
            Retrieve the type index of the managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.
            </summary>
            <typeparam name="T">The managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</typeparam>
            <returns>The type index of the managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.ConstructSystem(System.Type)">
            <summary>
            Construct a System from a Type. Uses the same list in <see cref="M:Unity.Entities.TypeManager.GetSystems(Unity.Entities.WorldSystemFilterFlags,Unity.Entities.WorldSystemFilterFlags)"/>.
            </summary>
            <param name="systemType">The system type.</param>
            <returns>Returns the new system.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.ConstructSystem``1">
            <summary>
            Creates an instance of a system of type T.
            </summary>
            <typeparam name="T">System type to create</typeparam>
            <returns>Returns the newly created system instance</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.ConstructSystem``1(System.Type)">
            <summary>
            Creates an instance of a system of System.Type.
            </summary>
            <typeparam name="T">System type to create</typeparam>
            <param name="systemType">System type to create</param>
            <returns>Returns the newly created system instance</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetSystems(Unity.Entities.WorldSystemFilterFlags,Unity.Entities.WorldSystemFilterFlags)">
            <summary>
            Return an array of all System types available to the runtime matching the WorldSystemFilterFlags. By default,
            all systems available to the runtime is returned.
            </summary>
            <param name="filterFlags">Flags the returned systems can have</param>
            <param name="requiredFlags">Flags the returned systems must have</param>
            <returns>Returns a list of systems meeting the flag requirements provided</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsSystemType(System.Type)">
            <summary>
            Determines if a given type is a System type (e.g. ISystem, SystemBase).
            </summary>
            <param name="type">Type to check</param>
            <returns>Returns true if the input type is a System. False otherwise</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetSystemName(System.Type)">
            <summary>
            Retrieve the name of a system via its type.
            </summary>
            <param name="type">Input type</param>
            <returns>System name for the type</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetSystemName(System.Int32)">
            <summary>
            Retrives the name of a system via its system index.
            </summary>
            <param name="systemIndex">System index to lookup the name for</param>
            <returns>Returns the name of the system. Otherwise an empty string</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetSystemTypeIndex``1">
            <summary>
            Returns the system index for System T.
            </summary>
            <typeparam name="T">System type</typeparam>
            <returns>Returns the System index for the input type T</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsSystemAGroup(System.Type)">
            <summary>
            Check if the provided type is a SystemGroup.
            </summary>
            <param name="type">Type to check</param>
            <returns>Returns true if the provided type is a SystemGroup (inherits from  <see cref="T:Unity.Entities.ComponentSystemGroup"/> or a sub-class of <see cref="T:Unity.Entities.ComponentSystemGroup"/>)</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsSystemManaged(System.Type)">
            <summary>
            Check if the provided type is a managed system.
            </summary>
            <param name="type">Type to check</param>
            <returns>Returns true if the system type is managed. Otherwise false.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetSystemTypeFlags(System.Int32)">
            <summary>
            Retrieve type flags for a system index.
            </summary>
            <param name="systemTypeIndex">System index to use for flag lookup</param>
            <returns>System type flags</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetSystemAttributes(System.Type,System.Type)">
            <summary>
            Get all the attribute objects of Type attributeType for a System.
            </summary>
            <param name="systemType">System type</param>
            <param name="attributeType">Attribute type to return</param>
            <returns>Returns all attributes of type attributeType decorating systemType</returns>
        </member>
        <member name="T:Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute">
            <summary>
            Attribute to force the <see cref="F:Unity.Entities.TypeManager.TypeInfo.MemoryOrdering"/> for a component to a specific value.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.#ctor(System.UInt64)">
            <summary>
            Force the <see cref="F:Unity.Entities.TypeManager.TypeInfo.MemoryOrdering"/> for the component to a specific value.
            </summary>
            <param name="ordering">Value to force the MemoryOrdering to</param>
        </member>
        <member name="F:Unity.Entities.TypeManager.ForcedMemoryOrderingAttribute.MemoryOrdering">
            <summary>
            The forced MemoryOrdering value
            </summary>
        </member>
        <member name="T:Unity.Entities.TypeManager.TypeOverridesAttribute">
            <summary>
            [TypeOverrides] can be applied to a component that is known to contain no Entity or Blob references,
            in order to reduce time taken during serialization operations.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeOverridesAttribute.HasNoEntityReferences">
            <summary>
            Force the component's <see cref="P:Unity.Entities.TypeIndex.HasEntityReferences"/> to be false if set to true here.
            Otherwise, the value will only be false if the component actually has no entity references.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeOverridesAttribute.HasNoBlobReferences">
            <summary>
            Force the component's <see cref="F:Unity.Entities.TypeManager.TypeInfo.BlobAssetRefOffsetCount"/> to be zero if set to false.
            Otherwise, the value will only be zero if the component actually has a blob reference.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.TypeOverridesAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:Unity.Entities.TypeManager.TypeOverridesAttribute"/>
            </summary>
            <param name="hasNoEntityReferences">Set to true to ignore entity references in type.</param>
            <param name="hasNoBlobReferences">Set to true to ignore blob asset references in type.</param>
        </member>
        <member name="T:Unity.Entities.TypeManager.TypeVersionAttribute">
            <summary>
            TypeVersion allows you to override the <see cref="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash"/> for a component type
            to a specific value rather than using the default generated hash.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.TypeVersionAttribute.#ctor(System.Int32)">
            <summary>
            Override the StableTypeHash for the component type.
            </summary>
            <param name="version">The version to override the StableTypeHash.</param>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeVersionAttribute.TypeVersion">
            <summary>
            The StableTypeHash override
            </summary>
        </member>
        <member name="T:Unity.Entities.TypeManager.TypeCategory">
            <summary>
            Specifies categories of types the TypeManager manages.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeCategory.ComponentData">
            <summary>
            Implements IComponentData (can be either a struct or a class)
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeCategory.BufferData">
            <summary>
            Implements IBufferElementData (struct only)
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeCategory.ISharedComponentData">
            <summary>
            Implement ISharedComponentData (struct only)
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeCategory.EntityData">
            <summary>
            Is an Entity
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeCategory.UnityEngineObject">
            <summary>
            Inherits from UnityEngine.Object (class only)
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.HasNativeContainerFlag">
            <summary>
            Bitflag set for component types with NativeContainer data <seealso cref="T:Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.IEquatableTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:System.IEquatable`1"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.BakingOnlyTypeFlag">
            <summary>
            Bitflag set for component types decorated with the <seealso cref="T:Unity.Entities.BakingTypeAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TemporaryBakingTypeFlag">
            <summary>
            Bitflag set for component types decorated with the <seealso cref="T:Unity.Entities.TemporaryBakingTypeAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.IRefCountedComponentFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.IRefCounted"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.EnableableComponentFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.IEnableableComponent"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.HasNoEntityReferencesFlag">
            <summary>
            Bitflag set for component types that do not contain an <seealso cref="T:Unity.Entities.Entity"/> member.
            Entity members found in nested member types will cause this bitflag to not be set.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SystemStateTypeFlag">
            <summary>
            Obsolete. Use <see cref="F:Unity.Entities.TypeManager.CleanupComponentTypeFlag"/> instead.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.CleanupComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.ISystemStateComponentData"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.BufferComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.IBufferElementData"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SharedComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.ISharedComponentData"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ManagedComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.IComponentData"/> and requiring managed
            storage due to being a class type and/or containing managed references.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ChunkComponentTypeFlag">
            <summary>
            Bitflag set for component types converted into Chunk Components.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ZeroSizeInChunkTypeFlag">
            <summary>
            Bitflag set for component types which allocate 0 bytes in Chunk storage
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SystemStateSharedComponentTypeFlag">
            <summary>
            Obsolete. Use <see cref="F:Unity.Entities.TypeManager.CleanupSharedComponentTypeFlag"/>instead.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.CleanupSharedComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.ICleanupSharedComponentData"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.CleanupBufferComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.ICleanupBufferElementData"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ManagedSharedComponentTypeFlag">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.ISharedComponentData"/> and requiring managed
            storage due to containing managed references.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ClearFlagsMask">
            <summary>
            Bit mask to clear all flag bits from a <seealso cref="T:Unity.Entities.TypeIndex"/> />
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.MaximumChunkCapacity">
            <summary>
            Maximum number of <seealso cref="T:Unity.Entities.Entity"/> instances stored in a given <seealso cref="T:Unity.Entities.Chunk"/>/>
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.MaximumSupportedAlignment">
            <summary>
            Maximum platform alignment supported when aligning component data in a <seealso cref="T:Unity.Entities.Chunk"/>/>
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.MaximumTypesCount">
            <summary>
            Maximum number of unique component types supported by the <seealso cref="T:Unity.Entities.TypeManager"/>/>
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.DefaultBufferCapacityNumerator">
            <summary>
            BufferCapacity is by default calculated as DefaultBufferCapacityNumerator / sizeof(BufferElementDataType)
            thus for a 1 byte component, the maximum number of elements possible to be stored in chunk memory before
            the buffer is allocated separately from chunk data, is DefaultBufferCapacityNumerator elements.
            For a 2 byte sized component, (DefaultBufferCapacityNumerator / 2) elements can be stored, etc...
            </summary>
        </member>
        <member name="T:Unity.Entities.TypeManager.SharedComponentFnPtrs">
            <summary>
            Used by codegen. Function pointer wrapper for unmanaged <seealso cref="T:Unity.Entities.ISharedComponentData"/> method overloads
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SharedComponentFnPtrs.RetainFn">
            <summary>
            Used by codegen. FunctionPointer to a shared component's Retain method
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SharedComponentFnPtrs.ReleaseFn">
            <summary>
            Used by codegen. FunctionPointer to a shared component's Release method
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SharedComponentFnPtrs.EqualsFn">
            <summary>
            Used by codegen. FunctionPointer to a shared component's Equals method
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.SharedComponentFnPtrs.GetHashCodeFn">
            <summary>
            Used by codegen. FunctionPointer to a shared component's GetHashCode method
            </summary>
        </member>
        <member name="T:Unity.Entities.TypeManager.ManagedSharedComponentFnPtrs">
            <summary>
            Used by codegen. Function pointer wrapper for managed <seealso cref="T:Unity.Entities.ISharedComponentData"/> method overloads
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ManagedSharedComponentFnPtrs.RetainFn">
            <summary>
            Used by codegen. Delegate to a managed shared component's Retain method
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ManagedSharedComponentFnPtrs.ReleaseFn">
            <summary>
            Used by codegen. Delegate to a managed shared component's Release method
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ManagedSharedComponentFnPtrs.EqualsFn">
            <summary>
            Used by codegen. Delegate to a managed shared component's Equals method
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ManagedSharedComponentFnPtrs.GetHashCodeFn">
            <summary>
            Used by codegen. Delegate to a managed shared component's GetHashCode method
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.AllTypes">
            <summary>
            Enumerable list of all component <see cref="T:Unity.Entities.TypeManager.TypeInfo"/> values.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.ObjectOffset">
            <summary>
            Offset into managed objects to read instance data
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.RegisterUnityEngineObjectType(System.Type)">
            <summary>
            Register a UnityEngine.Object type with the TypeManager.
            </summary>
            <param name="type">The type to register</param>
            <exception cref="T:System.ArgumentException">Thrown if the type does not inherit from UnityEngine.Object.</exception>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetAllTypes">
            <summary>
            Array of all component <see cref="T:Unity.Entities.TypeManager.TypeInfo"/> values.
            </summary>
            <returns>Array of TypeInfos for all components</returns>
        </member>
        <member name="T:Unity.Entities.TypeManager.EntityOffsetInfo">
            <summary>
            Stores the byte offset into a component where an <see cref="T:Unity.Entities.Entity"/> member is stored.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.EntityOffsetInfo.Offset">
            <summary>
            Byte offset into a component's instance data where an Entity member field begins.
            </summary>
        </member>
        <member name="T:Unity.Entities.TypeManager.TypeInfo">
            <summary>
            Provides information about component types such as their runtime size, how much space they use in <seealso cref="T:Unity.Entities.Chunk"/> storage,
            their <see cref="F:Unity.Entities.TypeManager.TypeInfo.TypeIndex"/>, how many entity references they contain, and more.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.TypeInfo.#ctor(System.Int32,Unity.Entities.TypeManager.TypeCategory,System.Int32,System.Int32,System.UInt64,System.UInt64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Used internally to construct a TypeInfo.
            </summary>
            <param name="typeIndex">TypeIndex to use</param>
            <param name="category">TypeCategory the component belongs to</param>
            <param name="entityOffsetCount">How many entity references a component contains (recursively)</param>
            <param name="entityOffsetStartIndex">Index into the entity offset array where this component's entity offset data begins</param>
            <param name="memoryOrdering">The memory order for this component</param>
            <param name="stableTypeHash">The stable type hash for this component</param>
            <param name="bufferCapacity">Number of elements that can be stored in chunk memory before falling back to a native allocation</param>
            <param name="sizeInChunk">Number of bytes the component requires in a chunk</param>
            <param name="elementSize">Size of the component. For Buffer components, this is the size of the element type</param>
            <param name="alignmentInBytes">Alignment of the component</param>
            <param name="maximumChunkCapacity">Max number of instances of this component to allow in a single chunk</param>
            <param name="writeGroupCount">Number of write groups targeting this component</param>
            <param name="writeGroupStartIndex">Index into the write group array where this component's write group info begins</param>
            <param name="hasBlobRefs">Value for if this component has any blob references (in case we force this value true/false)</param>
            <param name="blobAssetRefOffsetCount">Number of blob asset references the component really contains</param>
            <param name="blobAssetRefOffsetStartIndex">Index into the blob asset reference array where this component's blob asset reference data begins</param>
            <param name="weakAssetRefOffsetCount">Number of weak asset references this component contains</param>
            <param name="weakAssetRefOffsetStartIndex">Index into the weak asset reference array where this component's weak asset reference data begins</param>
            <param name="typeSize">Size of the component type</param>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.TypeIndex">
            <summary>
            <seealso cref="F:Unity.Entities.TypeManager.TypeInfo.TypeIndex"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.SizeInChunk">
            <summary>
            The number of bytes used in a <seealso cref="T:Unity.Entities.Chunk"/> to store an instance of this component.
            </summary>
            <remarks>Note that this includes internal capacity and header overhead for buffers. Also, note
            that components with no member variables will have a SizeInChunk of 0, but will have a
            <seealso cref="F:Unity.Entities.TypeManager.TypeInfo.TypeSize"/> of GREATER than 0 (since C# does not allow for zero-sized types).</remarks>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.ElementSize">
            <summary>
            The size of an element store in buffer components. For non-buffer component types, this is the same as <see cref="F:Unity.Entities.TypeManager.TypeInfo.SizeInChunk"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.BufferCapacity">
            <summary>
            The maximum number of elements that can be stored in a buffer component instance.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.MemoryOrdering">
            <summary>
            Sort order for component types in <see cref="T:Unity.Entities.Chunk"/> storage. By default this is equivalent to <seealso cref="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash"/>.
            Order is sorted from lowest to highest.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash">
            <summary>
            Hash used to uniquely identify a component based on its runtime memory footprint.
            </summary>
            <remarks>
            This value is deterministic across builds provided that the underlying type layout
            of the component hasn't changed. For example, renaming a member doesn't affect things,
            however changing a member's type causes the parent StableTypeHash to change).
            </remarks>
            <seealso cref="T:Unity.Entities.TypeHash"/>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.AlignmentInBytes">
            <summary>
            The alignment requirement for the component. For buffer types, this is the alignment requirement of the element type.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.Category">
            <summary>
            <seealso cref="T:Unity.Entities.TypeManager.TypeCategory"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.EntityOffsetCount">
            <summary>
            Number of <seealso cref="T:Unity.Entities.Entity"/> references this component can store.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.BlobAssetRefOffsetCount">
            <summary>
            Number of <seealso cref="T:Unity.Entities.BlobAssetReference`1"/>s this component can store.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.WeakAssetRefOffsetCount">
            <summary>
            Number of <seealso cref="T:System.WeakReference`1"/>s this component can store.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.WriteGroupCount">
            <summary>
            Number of components which specify this component as the target type in a <seealso cref="T:Unity.Entities.WriteGroupAttribute"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.MaximumChunkCapacity">
            <summary>
            Maximum number of instances of this component allowed to be stored in a <seealso cref="T:Unity.Entities.Chunk"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeManager.TypeInfo.TypeSize">
            <summary>
            Blittable size of the component type.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.AlignmentInChunkInBytes">
            <summary>
            Alignment of this type in a chunk.  Normally the same as AlignmentInBytes, but that
            might be less than this value for buffer elements, whereas the buffer itself must be aligned to <seealso cref="F:Unity.Entities.TypeManager.MaximumSupportedAlignment"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.TemporaryBakingType">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsTemporaryBakingType"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.BakingOnlyType">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsBakingOnlyType"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.EnableableType">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsEnableable"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.IsZeroSized">
            <summary>
            Returns true if the component does not require space in <seealso cref="T:Unity.Entities.Chunk"/> memory
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.HasWriteGroups">
            <summary>
            Returns true if a component with a <seealso cref="T:Unity.Entities.WriteGroupAttribute"/> specifies this component as it's targetType
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.HasBlobAssetRefs">
            <summary>
            For struct IComponentData, a value of true gurantees that there are <seealso cref="T:Unity.Entities.BlobAssetReference`1"/> fields in this component.
            For class based IComponentData, a value of true means it is possible, but not guaranteed, that there are blob asset references. (Polymorphic <seealso cref="T:Unity.Entities.BlobAssetReference`1"/> members can not be proven statically)
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.HasWeakAssetRefs">
            <summary>
            For struct IComponentData, a value of true gurantees that there are <seealso cref="T:System.WeakReference`1"/> fields in this component.
            For class based IComponentData, a value of true means it is possible, but not guaranteed, that there are WeakReferences. (Polymorphic <seealso cref="T:System.WeakReference`1"/> members can not be proven statically)
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.Type">
            <summary>
            Returns the System.Type for the component this <seealso cref="T:Unity.Entities.TypeManager.TypeInfo"/> is describing.
            </summary>
            <remarks>Unlike other properties, this property performs a lookup in order to not store managed data in <seealso cref="T:Unity.Entities.TypeManager.TypeInfo"/> as that would prevent Burst compilation.</remarks>
        </member>
        <member name="P:Unity.Entities.TypeManager.TypeInfo.DebugTypeName">
            <summary>
            Provides a HPC# / Burst compatible name of the component type when building with DEBUG defined. Otherwise the name is empty.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetEntityOffsets(Unity.Entities.TypeIndex,System.Int32@)">
            <summary>
            Gets a pointer to entity offsets for a given type index.
            </summary>
            <remarks>
            This always returns a pointer even if the given type has
            no entity offsets. Always check and iterate over the returned pointer using the
            returned count.
            </remarks>
            <param name="typeIndex">The TypeIndex to review.</param>
            <param name="count"></param>
            <returns>Returns a pointer to the entity offsets.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetWriteGroups(Unity.Entities.TypeManager.TypeInfo@)">
            <summary>
            Retrieves a pointer to an array of WriteGroups for the provided TypeInfo.
            </summary>
            <param name="typeInfo">TypeInfo for the component with a WriteGroup attribute</param>
            <returns>Returns a pointer to an array of WriteGroups for the provided TypeInfo.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetTypeInfo(Unity.Entities.TypeIndex)">
            <summary>
            Retrieve the TypeInfo for the <see cref="T:Unity.Entities.TypeIndex"/>.
            </summary>
            <param name="typeIndex">TypeIndex to review the TypeInfo for</param>
            <returns>Returns the TypeInfo for the component corresponding to the TypeInfo.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetTypeInfo``1">
            <summary>
            Retrieve the TypeInfo for the component T.
            </summary>
            <typeparam name="T">Component type to get TypeInfo fo</typeparam>
            <returns>The TypeInfo for the component corresponding to type T.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetType(Unity.Entities.TypeIndex)">
            <summary>
            Gets the System.Type for the component represented by <see cref="T:Unity.Entities.TypeIndex"/>.
            </summary>
            <param name="typeIndex">TypeIndex for a component type</param>
            <returns>The System.Type for the component.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetTypeCount">
            <summary>
            Gets the total number of components managed by the <seealso cref="T:Unity.Entities.TypeManager"/>.
            </summary>
            <returns>Returns the total number of components managed by the <seealso cref="T:Unity.Entities.TypeManager"/>.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsBuffer(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsBuffer"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component is a buffer component</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsSystemStateComponent(Unity.Entities.TypeIndex)">
            <summary>
            Obsolete. Use <see cref="P:Unity.Entities.TypeIndex.IsCleanupComponent"/> instead.
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component is a cleanup component</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsCleanupComponent(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsCleanupComponent"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component is a cleanup component</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsSystemStateSharedComponent(Unity.Entities.TypeIndex)">
            <summary>
            Obsolete. Use <see cref="P:Unity.Entities.TypeIndex.IsCleanupSharedComponent"/> instead.
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component is a cleanup shared component</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsCleanupSharedComponent(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsCleanupSharedComponent"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component is a cleanup shared component</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsSharedComponentType(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsSharedComponentType"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>If the component is a shared component</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsIEquatable(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsIEquatable"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component inherits from <seealso cref="T:System.IEquatable`1"/></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsManagedComponent(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsManagedComponent"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type <seealso cref="P:Unity.Entities.TypeIndex.IsManagedType"/> and inherits from <seealso cref="T:Unity.Entities.IComponentData"/></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsManagedSharedComponent(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsManagedSharedComponent"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type <seealso cref="P:Unity.Entities.TypeIndex.IsManagedType"/> and inherits from <seealso cref="T:Unity.Entities.ISharedComponentData"/></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsManagedType(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsManagedType"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type requires managed storage due to being a class type, and/or contains reference types</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsZeroSized(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsZeroSized"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type does not require space in <seealso cref="T:Unity.Entities.Chunk"/> memory.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsChunkComponent(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsChunkComponent"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type is used as a chunk component (a component mapped to a Chunk rather than <seealso cref="T:Unity.Entities.Entity"/>)</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsEnableable(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsEnableable"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type inherits from <seealso cref="T:Unity.Entities.IEnableableComponent"/></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.HasEntityReferences(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.HasEntityReferences"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type contains any member fields that are of type <seealso cref="T:Unity.Entities.Entity"/></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsTemporaryBakingType(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsTemporaryBakingType"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type is decorated with the <seealso cref="T:Unity.Entities.TemporaryBakingTypeAttribute"/> attribute.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsEnableableType(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsEnableable"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type is decorated with the <seealso cref="F:Unity.Entities.TypeManager.EnableableComponentFlag"/> attribute.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsBakingOnlyType(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="P:Unity.Entities.TypeIndex.IsBakingOnlyType"/>
            </summary>
            <param name="typeIndex">TypeIndex for a component</param>
            <returns>Returns if the component type is decorated with the <seealso cref="T:Unity.Entities.BakingTypeAttribute"/> attribute.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.MakeChunkComponentTypeIndex(Unity.Entities.TypeIndex)">
            <summary>
            Creates a new TypeIndex that allows the passed in 'typeindex' to be used as a chunk component.
            </summary>
            <param name="typeIndex">The TypeIndex to use as a chunk component.</param>
            <returns>Returns the new TypeIndex.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsDescendantOf(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            Used to determine if a component inherits from another component type
            </summary>
            <param name="typeIndex">Child type to test if it inherits from baseTypeIndex</param>
            <param name="baseTypeIndex">Parent type typeIndex may have inherited from</param>
            <returns>Returns if child is a subclass of the parent component type</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetDescendantCount(Unity.Entities.TypeIndex)">
            <summary>
            Returns how many component types are known to the <see cref="T:Unity.Entities.TypeManager"/> that inherit from a given component type
            </summary>
            <param name="typeIndex">Parent type</param>
            <returns>Returns count of component types inheriting from typeIndex's component type</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.HasDescendants(Unity.Entities.TypeIndex)">
            <summary>
            Returns if any component inherits from the provided <seealso cref="T:Unity.Entities.TypeIndex"/>
            </summary>
            <param name="baseTypeIndex">Parent type</param>
            <returns>Returns if any component inherits from baseTypeIndex</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.CalculateFullNameHash(System.String)">
            <summary>
            Calculate a hash for a component's full type name. Used at TypeManager initialization internally.
            </summary>
            <param name="fullName">Type.FullName of a component type</param>
            <returns>Hash of component type name</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetFullNameHash(Unity.Entities.TypeIndex)">
            <summary>
            Retrieves a pre-calculated hash for a component's full type name.
            </summary>
            <param name="typeIndex">TypeIndex for the component to lookup</param>
            <returns>Hash of component type name</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.Initialize">
            <summary>
            Initializes the TypeManager with all ECS type information. May be called multiple times; only the first call
            will do any work. Always must be called from the main thread.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.Shutdown">
            <summary>
            Removes all ECS type information and any allocated memory. May only be called once globally, and must be
            called from the main thread.
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetTypeIndex``1">
            <summary>
            Fetches the TypeIndex for a given T.
            </summary>
            <typeparam name="T">A component type</typeparam>
            <returns>Returns the TypeIndex for the corresponding T component type. Otherwise <seealso cref="P:Unity.Entities.TypeIndex.Null"/> is returned.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetTypeIndex(System.Type)">
            <summary>
            Fetches the TypeIndex for a given System.Type.
            </summary>
            <param name="type">A component type</param>
            <returns>Returns the TypeIndex for the corresponding System.Type component type. Otherwise <seealso cref="P:Unity.Entities.TypeIndex.Null"/> is returned.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.Equals``1(``0@,``0@)">
            <summary>
            Compares two component instances to one another
            </summary>
            <typeparam name="T">Type of the component instances</typeparam>
            <param name="left">Left-hand side of the comparison</param>
            <param name="right">Right-hand side of the comparison</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.Equals(System.Void*,System.Void*,Unity.Entities.TypeIndex)">
            <summary>
            Compares two component instances to one another
            </summary>
            <param name="left">Left-hand side of the comparison</param>
            <param name="right">Right-hand side of the comparison</param>
            <param name="typeIndex">TypeIndex for the two instances being compared</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsBursted">
            <summary>
            Used internally to determine if Burst is compiling the code path calling this function
            </summary>
            <returns>Returns true if Burst compiled this method</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.SharedComponentEquals(System.Void*,System.Void*,Unity.Entities.TypeIndex)">
            <summary>
            Compares two shared component instances to one another
            </summary>
            <param name="left">Left-hand side of the comparison</param>
            <param name="right">Right-hand side of the comparison</param>
            <param name="typeIndex">TypeIndex for the two instances being compared</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.SharedComponentGetHashCode(System.Void*,Unity.Entities.TypeIndex)">
            <summary>
            Generates a hash for a given shared component instance
            </summary>
            <param name="data">Pointer to component instance to hash</param>
            <param name="typeIndex">TypeIndex for the component</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.Equals(System.Object,System.Object,Unity.Entities.TypeIndex)">
            <summary>
            Compares two component instances to one another
            </summary>
            <param name="left">Left-hand side of the comparison</param>
            <param name="right">Right-hand side of the comparison</param>
            <param name="typeIndex">TypeIndex for the two instances being compared</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.Equals(System.Object,System.Void*,Unity.Entities.TypeIndex)">
            <summary>
            Compares two component instances to one another
            </summary>
            <param name="left">Left-hand side of the comparison</param>
            <param name="right">Right-hand side of the comparison</param>
            <param name="typeIndex">TypeIndex for the two instances being compared</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetHashCode``1(``0@)">
            <summary>
            Generates a hash for a given component instance
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="val">Component instance to hash</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetHashCode(System.Void*,Unity.Entities.TypeIndex)">
            <summary>
            Generates a hash for a given component instance
            </summary>
            <param name="val">Pointer to component instance to hash</param>
            <param name="typeIndex">TypeIndex for the component</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetHashCode(System.Object,Unity.Entities.TypeIndex)">
            <summary>
            Generates a hash for a given component instance
            </summary>
            <param name="val">Component instance to hash</param>
            <param name="typeIndex">TypeIndex for the component</param>
            <returns>Returns true if the types are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.SetIEquatable_EqualsFn(System.Int32,System.Delegate,System.Boolean)">
            <summary>
            Used by codegen
            </summary>
            <param name="indexInTypeArray">TypeIndex.Index</param>
            <param name="fn">Equals function</param>
            <param name="burstCompile">Is burst enabled</param>
        </member>
        <member name="M:Unity.Entities.TypeManager.SetIEquatable_GetHashCodeFn(System.Int32,System.Delegate,System.Boolean)">
            <summary>
            Used by codegen
            </summary>
            <param name="indexInTypeArray">TypeIndex.Index</param>
            <param name="fn">GetHashCode function</param>
            <param name="burstCompile">Is burst enabled</param>
        </member>
        <member name="M:Unity.Entities.TypeManager.SetIRefCounted_RetainFn(System.Int32,Unity.Entities.IRefCounted.RefCountDelegate,System.Boolean)">
            <summary>
            Used by codegen
            </summary>
            <param name="indexInTypeArray">TypeIndex.Index</param>
            <param name="fn">Retain function</param>
            <param name="burstCompile">Is burst enabled</param>
        </member>
        <member name="M:Unity.Entities.TypeManager.SetIRefCounted_ReleaseFn(System.Int32,Unity.Entities.IRefCounted.RefCountDelegate,System.Boolean)">
            <summary>
            Used by codegen
            </summary>
            <param name="indexInTypeArray">TypeIndex.Index</param>
            <param name="fn">Release function</param>
            <param name="burstCompile">Is burst enabled</param>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetIEquatable_EqualsFn(Unity.Entities.TypeIndex)">
            <summary>
            Used by codegen
            </summary>
            <param name="typeIndex">Component type index</param>
            <returns>FunctionPointer</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetIEquatable_GetHashCodeFn(Unity.Entities.TypeIndex)">
            <summary>
            Used by codegen
            </summary>
            <param name="typeIndex">Component type index</param>
            <returns>FunctionPointer</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.CallIRefCounted_Retain(Unity.Entities.TypeIndex,System.IntPtr)">
            <summary>
            Used by codegen
            </summary>
            <param name="typeIndex">Component type index</param>
            <param name="data">Component instance</param>
        </member>
        <member name="M:Unity.Entities.TypeManager.CallIRefCounted_Release(Unity.Entities.TypeIndex,System.IntPtr)">
            <summary>
            Used by codegen
            </summary>
            <param name="typeIndex">Component type index</param>
            <param name="data">Component instance</param>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetTypeIndexFromStableTypeHash(System.UInt64)">
            <summary>
            Returns the TypeIndex for a given <seealso cref="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash"/>
            </summary>
            <param name="stableTypeHash">Component <seealso cref="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash"/></param>
            <returns>Component TypeIndex, otherwise <seealso cref="P:Unity.Entities.TypeIndex.Null"/></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.ConstructComponentFromBuffer(Unity.Entities.TypeIndex,System.Void*)">
            <summary>
            Used by codegen. Create an instance of a component type from a given buffer of data
            </summary>
            <param name="typeIndex">Component type index</param>
            <param name="data">Component instance data</param>
            <returns>Boxed component instance</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.GetWriteGroupTypes(Unity.Entities.TypeIndex)">
            <summary>
            Used by codegen. Returns list of all type indices for components who have a WriteGroup on the provided type
            </summary>
            <param name="typeIndex">Component type index</param>
            <returns>List of type indices</returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.CalculateAlignmentInChunk(System.Int32)">
            <summary>
            Our alignment calculations for types are taken from the perspective of the alignment of the type _specifically_ when
            stored in chunk memory. This means a type's natural alignment may not match the AlignmentInChunk value. Our current scheme is such that
            an alignment of 'MaximumSupportedAlignment' is assumed unless the size of the type is smaller than 'MaximumSupportedAlignment' and is a power of 2.
            In such cases we use the type size directly, thus if you have a type that naturally aligns to 4 bytes and has a size of 8, the AlignmentInChunk will be 8
            as long as 8 is less than 'MaximumSupportedAlignment'.
            </summary>
            <param name="sizeOfTypeInBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.TypeManager.IsAssemblyReferencingEntities(System.Reflection.Assembly)">
            <summary>
            Determines if an assembly refers to Unity.Entities.dll
            </summary>
            <param name="assembly">An Assembly</param>
            <returns>Returns if assembly refers to Unity.Entities.dll</returns>
        </member>
        <member name="T:Unity.Entities.ComponentSystemBase">
            <summary>
            A system provides behavior in an ECS architecture.
            </summary>
            <remarks>
            System implementations should inherit <see cref="T:Unity.Entities.SystemBase"/>, which is a subclass of ComponentSystemBase.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.#ctor">
            <summary>
            Initializes and returns an instance of a system.
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.Enabled">
            <summary>
            Controls whether this system executes when its OnUpdate function is called.
            </summary>
            <value>True, if the system is enabled.</value>
            <remarks>The Enabled property is intended for debugging so that you can easily turn on and off systems
            from the Entity Debugger window. A system with Enabled set to false will not update, even if its
            <see cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/> function returns true. </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.EntityQueries">
            <summary>
            The query objects cached by this system.
            </summary>
            <remarks>A system caches any queries it implicitly creates through the IJob interfaces or
            <see cref="T:Unity.Entities.EntityQueryBuilder"/>, that you create explicitly by calling <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Entities.ComponentType[])"/>, or
            that you add to the system as a required query with <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)"/>.
            Implicit queries may be created lazily and not exist before a system has run for the first time. </remarks>
            <value>A read-only array of the cached <see cref="T:Unity.Entities.EntityQuery"/> objects.</value>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion">
            <summary>
            The current change version number in this <see cref="P:Unity.Entities.ComponentSystemBase.World"/>.
            </summary>
            <remarks>The system updates the component version numbers inside any <see cref="T:Unity.Entities.ArchetypeChunk"/> instances
            that this system accesses with write permissions to this value. </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.LastSystemVersion">
             <summary>
             The current version of this system.
             </summary>
             <remarks>
             LastSystemVersion is updated to match the <see cref="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion"/> whenever a system runs.
            
             When you use <seealso cref="M:Unity.Entities.EntityQuery.SetChangedVersionFilter(Unity.Entities.ComponentType)"/>
             or <seealso cref="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicComponentTypeHandle@,System.UInt32)"/>, LastSystemVersion provides the basis for determining
             whether a component could have changed since the last time the system ran.
            
             When a system accesses a component and has write permission, it updates the change version of that component
             type to the current value of LastSystemVersion. The system updates the component type's version whether or not
             it actually modifies data in any instances of the component type -- this is one reason why you should
             specify read-only access to components whenever possible.
            
             For efficiency, ECS tracks the change version of component types by chunks, not by individual entities. If a system
             updates the component of a given type for any entity in a chunk, then ECS assumes that the components of all
             entities in that chunk could have been changed. Change filtering allows you to save processing time by
             skipping all entities in an unchanged chunk, but does not support skipping individual entities in a chunk
             that does contain changes.
             </remarks>
             <value>The <see cref="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion"/> the last time this system ran.</value>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.EntityManager">
            <summary>
            The EntityManager object of the <see cref="P:Unity.Entities.ComponentSystemBase.World"/> in which this system exists.
            </summary>
            <value>The EntityManager for this system.</value>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.World">
            <summary>
            The World in which this system exists.
            </summary>
            <value>The World of this system.</value>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.SystemHandle">
            <summary>
            The SystemHandle of this system.
            </summary>
            <returns>
            If the system state is valid, the untyped system's handle, otherwise default.
            </returns>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.SystemHandleUntyped">
             <summary>Obsolete. Use <see cref="P:Unity.Entities.ComponentSystemBase.SystemHandle"/> instead.</summary>
             <remarks>**Obsolete.** Use <see cref="P:Unity.Entities.ComponentSystemBase.SystemHandle"/> instead.
            
             The SystemHandleUntyped of this system.
             </remarks>
             <returns>
             If the system state is valid, the untyped system's handle, otherwise default.
             </returns>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.Time">
             <summary>
             Obsolete. Use <see cref="P:Unity.Entities.SystemAPI.Time"/> or <see cref="P:Unity.Entities.World.Time"/> instead.
             </summary>
             <remarks> **Obsolete.** Use <see cref="P:Unity.Entities.SystemAPI.Time"/> or <see cref="P:Unity.Entities.World.Time"/> instead.
            
             The current Time data for this system's world. </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.WorldUpdateAllocator">
            <summary>
            Retrieve world update allocator from system state.
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentSystemBase.WorldRewindableAllocator">
            <summary>
            Retrieve world rewindable allocator from system state.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.OnCreate">
             <summary>
             Called when this system is created.
             </summary>
             <remarks>
             Implement an OnCreate() function to set up system resources when it is created.
            
             OnCreate is invoked before the the first time <see cref="M:Unity.Entities.ComponentSystemBase.OnStartRunning"/> and OnUpdate are invoked.
             </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.OnStartRunning">
            <summary>
            Called before the first call to OnUpdate and when a system resumes updating after being stopped or disabled.
            </summary>
            <remarks>If the <see cref="T:Unity.Entities.EntityQuery"/> objects defined for a system do not match any existing entities
            then the system skips updates until a successful match is found. Likewise, if you set <see cref="P:Unity.Entities.ComponentSystemBase.Enabled"/>
            to false, then the system stops running. In both cases, <see cref="M:Unity.Entities.ComponentSystemBase.OnStopRunning"/> is
            called when a running system stops updating; OnStartRunning is called when it starts updating again.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.OnStopRunning">
            <summary>
            Called when this system stops running because no entities match the system's <see cref="T:Unity.Entities.EntityQuery"/>
            objects or because you change the system <see cref="P:Unity.Entities.ComponentSystemBase.Enabled"/> property to false.
            </summary>
            <remarks>If the <see cref="T:Unity.Entities.EntityQuery"/> objects defined for a system do not match any existing entities
            then the system skips updating until a successful match is found. Likewise, if you set <see cref="P:Unity.Entities.ComponentSystemBase.Enabled"/>
            to false, then the system stops running. In both cases, OnStopRunning is
            called when a running system stops updating; <see cref="M:Unity.Entities.ComponentSystemBase.OnStartRunning"/> is called when it starts updating again.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.OnDestroy">
            <summary>
            Called when this system is destroyed.
            </summary>
            <remarks>Systems are destroyed when the application shuts down, the World is destroyed, or you
            call <see cref="M:Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle)"/>. In the Unity Editor, system destruction occurs when you exit
            Play Mode and when scripts are reloaded.</remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.Update">
            <summary>
            Executes the system immediately.
            </summary>
            <remarks>The exact behavior is determined by this system's specific subclass. </remarks>
            <seealso cref="T:Unity.Entities.SystemBase"/>
            <seealso cref="T:Unity.Entities.ComponentSystemGroup"/>
            <seealso cref="T:Unity.Entities.EntityCommandBufferSystem"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem">
             <summary>
             Reports whether this system satisfies the criteria to update. This function is used
             internally to determine whether the system's OnUpdate function can be skipped.
             </summary>
             <remarks>
             <p>
             By default, systems will invoke OnUpdate every frame.
             </p>
             <p>
             If a system calls <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>
             or <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)"/>
             in OnCreate, it will only update if all of its required components exist and
             required queries match existing chunks. This check uses [IsEmptyIgnoreFilter], so the queries may
             still be empty if they use filters or [Enableable Components].
             </p>
             <p>
             If a system has the <see cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/> it will
             update if any EntityQuery it uses match existing chunks. This check also uses [IsEmptyIgnoreFilter],
             so all queries may still be empty if they use filters or [Enableable Components].
             </p>
             <p>
             Note: Other factors might prevent a system from updating, even if this method returns
             true. For example, a system will not be updated if its [Enabled] property is false.
             </p>
            
             [IsEmptyIgnoreFilter]: xref:Unity.Entities.EntityQuery.IsEmptyIgnoreFilter
             [Enableable Components]: xref:Unity.Entities.IEnableableComponent
             [Enabled]: xref:Unity.Entities.ComponentSystemBase.Enabled
             </remarks>
             <returns>True if the system should be updated, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)">
            <summary>
            Manually gets the run-time type information required to access an array of component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.ComponentTypeHandle`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <param name="isReadOnly">Whether the component data is only read, not written. Access components as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access component data stored in a
            chunk.</returns>
            <remarks>Pass an <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> instance to a job that has access to chunk data,
            such as an <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of component inside the job. </remarks>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetComponentTypeHandle``1(System.Boolean)"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)">
            <summary>
            Manually gets the run-time type information required to access an array of component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.DynamicComponentTypeHandle.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <param name="componentType">Type of the component</param>
            <returns>An object representing the type information required to safely access component data stored in a
            chunk.</returns>
            <remarks>Pass an DynamicComponentTypeHandle instance to a job that has access to chunk data, such as an
            <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of component inside the job. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)">
            <summary>
            Manually gets the run-time type information required to access an array of buffer components in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.BufferTypeHandle`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IBufferElementData"/>.</typeparam>
            <returns>An object representing the type information required to safely access buffer components stored in a
            chunk.</returns>
            <remarks>Pass a BufferTypeHandle instance to a job that has access to chunk data, such as an
            <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of buffer component inside the job. </remarks>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetBufferTypeHandle``1(System.Boolean)"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1">
            <summary>
            Manually gets the run-time type information required to access a shared component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.SharedComponentTypeHandle`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.ISharedComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access shared component data stored in a
            chunk.</returns>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetSharedComponentTypeHandle``1"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)">
            <summary>
            Manually gets the run-time type information required to access a shared component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.DynamicSharedComponentTypeHandle.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <param name="componentType">The component type to get access to.</param>
            <returns>An object representing the type information required to safely access shared component data stored in a
            chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetEntityTypeHandle">
            <summary>
            Manually gets the run-time type information required to access the array of <see cref="T:Unity.Entities.Entity"/> objects in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.EntityTypeHandle.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <returns>An object representing the type information required to safely access Entity instances stored in a
            chunk.</returns>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetEntityTypeHandle"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetComponentLookup``1(System.Boolean)">
            <summary>
            Manually gets a dictionary-like container containing all components of type T, keyed by Entity.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.ComponentLookup`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>All component data of type T.</returns>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetComponentLookup``1(System.Boolean)"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetComponentDataFromEntity``1(System.Boolean)">
             <summary>Obsolete. Use <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentLookup``1(System.Boolean)"/> instead.</summary>
             <remarks>
             **Obsolete.** Use <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentLookup``1(System.Boolean)"/> instead.
            
             Gets an dictionary-like container containing all components of type T, keyed by Entity.
             </remarks>
             <param name="isReadOnly">Whether the data is only read, not written. Access data as
             read-only whenever possible.</param>
             <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
             <returns>All component data of type T.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetBufferLookup``1(System.Boolean)">
            <summary>
            Manually gets a BufferLookup&lt;T&gt; object that can access a <seealso cref="T:Unity.Entities.DynamicBuffer`1"/>.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.BufferLookup`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <remarks>Assign the returned object to a field of your Job struct so that you can access the
            contents of the buffer in a Job. </remarks>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
            <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
            <seealso cref="T:Unity.Entities.ComponentLookup`1"/>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetBufferLookup``1(System.Boolean)"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetBufferFromEntity``1(System.Boolean)">
             <summary>Obsolete. Use <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferLookup``1(System.Boolean)"/> instead.</summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferLookup``1(System.Boolean)"/> instead.
            
             Gets a BufferFromEntity&lt;T&gt; object that can access a <seealso cref="T:Unity.Entities.DynamicBuffer`1"/>.
             Assign the returned object to a field of your Job struct so that you can access the
             contents of the buffer in a Job. </remarks>
             <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
             a read-only fashion whenever possible.</param>
             <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
             <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
             <seealso cref="T:Unity.Entities.ComponentDataFromEntity`1"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetEntityStorageInfoLookup">
            <summary>
            Manually gets an EntityStorageInfoLookup object that can access a <seealso cref="T:Unity.Entities.EntityStorageInfo"/>.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.EntityStorageInfoLookup.Update(Unity.Entities.SystemBase)"/>. </remarks>
            <remarks>Assign the returned object to a field of your Job struct so that you can access the
            contents in a Job. </remarks>
            <returns>An dictionary-like object that provides access to information about how Entities are stored,
            indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
            <seealso cref="T:Unity.Entities.EntityStorageInfoLookup"/>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetEntityStorageInfoLookup"/> as it will cache in OnCreate for you
            and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetStorageInfoFromEntity">
             <summary> Obsolete. Use <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityStorageInfoLookup"/> instead.</summary>
             <remarks> **Obsolete.** Use <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityStorageInfoLookup"/> instead.
            
             Gets a StorageInfoFromEntity object that can access a <seealso cref="T:Unity.Entities.EntityStorageInfo"/>.
             Assign the returned object to a field of your Job struct so that you can access the
             contents in a Job. </remarks>
             <returns>An dictionary-like object that provides access to information about how Entities are stored,
             indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
             <seealso cref="T:Unity.Entities.StorageInfoFromEntity"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)">
            <summary>
            Adds a query that must match entities for the system to run. You can add multiple required queries to a
            system; all of them must match at least one entity for the system to run.
            </summary>
            <param name="query">A query that must match entities this frame in order for this system to run.</param>
            <remarks>Any queries added through RequireForUpdate override all other queries cached by this system.
            In other words, if any required query does not find matching entities, the update is skipped even
            if another query created for the system (either explicitly or implicitly) does match entities and
            vice versa. </remarks>
            <remarks>Note that query filters are ignored so for components that implement <see cref="T:Unity.Entities.IEnableableComponent"/>
            this method ignores whether the component is enabled or not, it only checks whether it exists. </remarks>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>
            <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.RequireAnyForUpdate(Unity.Entities.EntityQuery[])">
             <summary>
             Provide a set of queries, one of which must match entities for the system to run.
             </summary>
             <param name="queries">A set of queries, one of which must match entities this frame in order for
             this system to run.</param>
             <remarks>
             This method can only be called from a system's OnCreate method.
            
             You can call this method multiple times from the same system to add multiple sets of required
             queries. Each set must have at least one query that matches an entity for the system to run.
            
             Any queries added through RequireAnyForUpdate and [RequireForUpdate] override all other queries
             created by this system for the purposes of deciding whether to update. In other words, if any set
             of required queries does not find matching entities, the update is skipped even if another query
             created for the system (either explicitly or implicitly) does match entities and vice versa.
            
             [EntityQueries]: xref:Unity.Entities.EntityQuery
             [enableable components]: xref:T:Unity.Entities.IEnableableComponent
             </remarks>
             <seealso cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/>
             <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.RequireAnyForUpdate(Unity.Collections.NativeArray{Unity.Entities.EntityQuery})">
             <summary>
             Provide a set of queries, one of which must match entities for the system to run.
             </summary>
             <param name="queries">A set of queries, one of which must match entities this frame in order for
             this system to run.</param>
             <remarks>
             This method can only be called from a system's OnCreate method.
            
             You can call this method multiple times from the same system to add multiple sets of required
             queries. Each set must have at least one query that matches an entity for the system to run.
            
             Any queries added through RequireAnyForUpdate and [RequireForUpdate] override all other queries
             created by this system for the purposes of deciding whether to update. In other words, if any set
             of required queries does not find matching entities, the update is skipped even if another query
             created for the system (either explicitly or implicitly) does match entities and vice versa.
            
             [EntityQueries]: xref:Unity.Entities.EntityQuery
             [enableable components]: xref:T:Unity.Entities.IEnableableComponent
             </remarks>
             <seealso cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/>
             <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1">
            <summary>
            Require that a specific component exist for this system to run.
            Also includes any components added to a system.
            See <see cref="T:Unity.Entities.SystemHandle"/> for more info on that.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the component.</typeparam>
            <remarks>Note that for components that implement <see cref="T:Unity.Entities.IEnableableComponent"/>
            this method ignores whether the component is enabled or not, it only checks whether it exists. </remarks>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)"/>
            <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.RequireSingletonForUpdate``1">
             <summary>Obsolete. Use <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/> instead.</summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/> instead.
            
             Require that a specific singleton component exist for this system to run.
             </remarks>
             <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.</typeparam>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.HasSingleton``1">
            <summary>
            Checks whether a singleton component of the specified type exists.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>True, if a singleton of the specified type exists in the current <see cref="P:Unity.Entities.ComponentSystemBase.World"/>.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetSingleton``1">
            <summary>
            Gets the value of a singleton component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingletonRW``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
            <remarks>
            For managed components, put 'this.' in front to use <see cref="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingleton``1(Unity.Entities.ComponentSystemBase)"/>
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetSingletonRW``1">
            <summary>
            Gets a reference to the singleton component, for read/write access.
            </summary>
            <remarks>
            NOTE: this reference refers directly to the singleton's component memory.
            Structural changes to the chunk where the singleton resides can invalidate this reference
            and result in crashes or undefined behaviour if the reference is used after structural changes.
            </remarks>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
            <remarks>
            For managed components, put 'this.' in front to use <see cref="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingletonRW``1(Unity.Entities.ComponentSystemBase)"/>
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetSingletonBuffer``1(System.Boolean)">
            <summary>
            Gets the value of a singleton buffer component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> subtype of the singleton component buffer element.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="isReadOnly">True if the caller only requires read-only access to this data.</param>
            <returns>The buffer.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <remarks>
            For managed components, put 'this.' in front to use <see cref="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingleton``1(Unity.Entities.ComponentSystemBase)"/>
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.TryGetSingleton``1(``0@)">
            <summary>
            Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The component. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/>, this is assigned a default value</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/> with the provided component type.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.TryGetSingletonBuffer``1(Unity.Entities.DynamicBuffer{``0}@)">
            <summary>
            Gets the value of a singleton buffer component, and returns whether or not a singleton buffer component of the specified type exists in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> subtype of the singleton buffer component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The buffer. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/>, this is assigned a default value</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/> with the provided component type.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.SetSingleton``1(``0)">
            <summary>
            Sets the value of a singleton component.
            </summary>
            <param name="value">A component containing the value to assign to the singleton.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <seealso cref="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)"/>
            <remarks>
            For managed components, put 'this.' in front to use <see cref="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.SetSingleton``1(Unity.Entities.ComponentSystemBase,``0)"/>
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetSingletonEntity``1">
            <summary>
            Gets the Entity instance for a singleton.
            </summary>
            <typeparam name="T">The Type of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The entity associated with the specified singleton component.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.TryGetSingletonEntity``1(Unity.Entities.Entity@)">
            <summary>
            Gets the singleton Entity, and returns whether or not a singleton <see cref="T:Unity.Entities.Entity"/> of the specified type exists in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The <see cref="T:Unity.Entities.Entity"/> associated with the specified singleton component.
             If a singleton of the specified types does not exist in the current <see cref="P:Unity.Entities.ComponentSystemBase.World"/>, this is set to Entity.Null</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="P:Unity.Entities.ComponentSystemBase.World"/> with the provided component type.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Entities.ComponentType[])">
            <summary>
            Gets the cached query for the specified component types, if one exists; otherwise, creates a new query
            instance and caches it.
            </summary>
            <param name="componentTypes">An array or comma-separated list of component types.</param>
            <returns>The new or cached query.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Collections.NativeArray{Unity.Entities.ComponentType})">
            <summary>
            Gets the cached query for the specified component types, if one exists; otherwise, creates a new query
            instance and caches it.
            </summary>
            <param name="componentTypes">An array of component types.</param>
            <returns>The new or cached query.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Entities.EntityQueryDesc[])">
            <summary>
            Combines an array of query description objects into a single query.
            </summary>
            <remarks>This function looks for a cached query matching the combined query descriptions, and returns it
            if one exists; otherwise, the function creates a new query instance and caches it. </remarks>
            <returns>The new or cached query.</returns>
            <param name="queryDesc">An array of query description objects to be combined to define the query.</param>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Entities.EntityQueryBuilder@)">
            <summary>
            Create an entity query from a query description builder.
            </summary>
            <remarks>This function looks for a cached query matching the combined query descriptions, and returns it
            if one exists; otherwise, the function creates a new query instance and caches it. </remarks>
            <returns>The new or cached query.</returns>
            <param name="builder">The description builder</param>
        </member>
        <member name="T:Unity.Entities.ComponentSystemBaseManagedComponentExtensions">
            <summary>
            Variants of <see cref="T:Unity.Entities.ComponentSystemBase"/> methods which support managed components.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingleton``1(Unity.Entities.ComponentSystemBase)">
            <summary>
            Gets the value of a singleton component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.</typeparam>
            <param name="sys">The system</param>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.GetSingletonRW``1(Unity.Entities.ComponentSystemBase)">
            <summary>
            Gets the value of a singleton component, for read/write access.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.</typeparam>
            <param name="sys">The system</param>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemBaseManagedComponentExtensions.SetSingleton``1(Unity.Entities.ComponentSystemBase,``0)">
            <summary>
            Sets the value of a singleton component.
            </summary>
            <param name="sys">The system</param>
            <param name="value">A component containing the value to assign to the singleton.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.</typeparam>
            <seealso cref="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)"/>
        </member>
        <member name="T:Unity.Entities.SystemAPI">
            <summary>
            Giving quick and consistent access to buffers, components, time, enumeration, singletons and more.
            This includes any <see cref="T:Unity.Entities.IAspect"/>, <see cref="T:Unity.Entities.IJobEntity"/>, <see cref="T:Unity.Entities.SystemBase"/>, and <see cref="T:Unity.Entities.ISystem"/>.
            Suggested usage is:
            ```cs
              using static Unity.Entities.SystemAPI;
              [...]
              partial struct SomeJob : IJobEntity { void Execute(ref EcsTestData e1) => e1.value += Time.deltaTime; }
            ```
            </summary>
        </member>
        <member name="M:Unity.Entities.SystemAPI.QueryBuilder">
            <summary>
            Gives a fluent API for constructing <see cref="T:Unity.Entities.EntityQuery"/>s similar to the <see cref="T:Unity.Entities.EntityQueryBuilder"/>. This API statically constructs the query as part of the system, and creates the query in the system's OnCreate.
            Calling this method should allow the construction of EntityQueries with almost no run-time performance overhead."
            </summary>
            <remarks>
            Gives a fluent API for constructing EntityQueries similar to the EntityQueryBuilder. This API statically constructs the query as part of the system, and creates the query in the system's OnCreate.
            Calling this method should allow for construction of EntityQueries with almost no run-time performance overhead."
            </remarks>
            <returns>An instance of `SystemAPIQueryBuilder`, which can be used to fluently construct queries.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``1">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects, RefRO, and RefRW of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``2">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T2">Aspect, RefRO, or RefRW parameter type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects, RefRO, and RefRW of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``3">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T2">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T3">Aspect, RefRO, or RefRW parameter type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``4">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T2">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T3">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T4">Aspect, RefRO, or RefRW parameter type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects, RefRO, and RefRW of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``5">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T2">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T3">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T4">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T5">Aspect, RefRO, or RefRW parameter type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects, RefRO, and RefRW of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``6">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T2">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T3">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T4">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T5">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T6">Aspect, RefRO, or RefRW parameter type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects, RefRO, and RefRW of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Query``7">
            <summary>
            Get Enumerable for iterating through Aspect, and Component types from inside a system
            </summary>
            <typeparam name="T1">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T2">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T3">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T4">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T5">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T6">Aspect, RefRO, or RefRW parameter type</typeparam>
            <typeparam name="T7">Aspect, RefRO, or RefRW type</typeparam>
            <returns>QueryEnumerable that allows enumerating over all Aspects, RefRO, and RefRW of a given type.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method has been called outside of a valid context.</exception>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="P:Unity.Entities.SystemAPI.Time">
            <summary>
            The current Time data for calling system's world.
            </summary>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetComponentLookup``1(System.Boolean)">
            <summary>
            Gets a dictionary-like container containing all components of type T, keyed by Entity.
            </summary>
            <param name="isReadOnly">Whether the data is only read, not written.
            Access data as read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>All component data of type T.</returns>
            <remarks>
            When you call this method this method gets replaced direct access to a cached <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            </remarks>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetComponent``1(Unity.Entities.Entity)">
             <summary>
             Look up the value of a component for an entity.
             </summary>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component to retrieve.</typeparam>
             <returns>A struct of type T containing the component value.</returns>
             <remarks>
             Use this method to look up data in another entity using its <see cref="T:Unity.Entities.Entity"/> object. For example, if you
             have a component that contains an Entity field, you can look up the component data for the referenced
             entity using this method.
            
             When iterating over a set of entities via <see cref="T:Unity.Entities.IJobEntity"/> or <see cref="M:Unity.Entities.SystemAPI.Query``1"/>, do not use this method to access data of the
             current entity in the set. This function is much slower than accessing the data directly (by passing the
             component containing the data to your lambda iteration function as a parameter).
            
             When you call this method it gets replaced with component access methods through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             This lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.SetComponent``1(Unity.Entities.Entity,``0)">
             <summary>
             Sets the value of a component of an entity.
             </summary>
             <param name="entity">The entity.</param>
             <param name="component">The data to set.</param>
             <typeparam name="T">The component type.</typeparam>
             <remarks>
             Use this method to look up and set data in another entity using its <see cref="T:Unity.Entities.Entity"/> object. For example, if you
             have a component that contains an Entity field, you can update the component data for the referenced
             entity using this method.
            
             When iterating over a set of entities via <see cref="T:Unity.Entities.IJobEntity"/> or <see cref="M:Unity.Entities.SystemAPI.Query``1"/>, do not use this method to update data of the
             current entity in the set. This function is much slower than accessing the data directly (by passing the
             component containing the data to your lambda iteration function as a parameter).
            
             When you call this method gets replaced with component access methods through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.HasComponent``1(Unity.Entities.Entity)">
             <summary>
             Checks whether an entity has a specific type of component.
             </summary>
             <param name="entity">The Entity object.</param>
             <typeparam name="T">The data type of the component.</typeparam>
             <remarks>
             Always returns false for an entity that has been destroyed.
            
             Use this method to check if another entity has a given type of component using its <see cref="T:Unity.Entities.Entity"/>
             object. For example, if you have a component that contains an Entity field, you can check whether the
             referenced entity has a specific type of component using this method. (Entities in the set always have
             required components, so you don’t need to check for them.)
            
             When iterating over a set of entities via <see cref="T:Unity.Entities.IJobEntity"/> or <see cref="M:Unity.Entities.SystemAPI.Query``1"/>, avoid using this method with the
             current entity in the set. It is generally faster to change your entity query methods to avoid
             optional components; this may require a different construction to handle each combination of optional and non-optional components.
            
             When you call this method this method gets replaced with component access methods through a cached <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             This lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups.
             </remarks>
             <returns>True, if the specified entity has the component.</returns>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.IsComponentEnabled``1(Unity.Entities.Entity)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IComponentData"/> of type T is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be checked.</param>
            <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.SystemAPI.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IComponentData"/> of type T on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            /// <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <seealso cref="M:Unity.Entities.SystemAPI.IsComponentEnabled``1(Unity.Entities.Entity)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetComponent``1(Unity.Entities.SystemHandle)">
             <summary>
             Gets the value of a component for an entity associated with a system.
             </summary>
             <param name="systemHandle">The system handle.</param>
             <typeparam name="T">The type of component to retrieve.</typeparam>
             <returns>A struct of type T containing the component value.</returns>
             <remarks>
             Use this method to look up data in another system owned entity using its <see cref="T:Unity.Entities.SystemHandle"/> object.
            
             When you call this method it gets replaced with component access methods through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetComponentRW``1(Unity.Entities.SystemHandle)">
             <summary>
             Gets a reference to a component for an entity associated with a system, for read/write access.
             </summary>
             <param name="systemHandle">The system handle.</param>
             <typeparam name="T">The type of component to retrieve.</typeparam>
             <returns>A struct of type T containing the component value.</returns>
             <remarks>
             Use this method to look up data in another system owned entity using its <see cref="T:Unity.Entities.SystemHandle"/> object.
            
             When you call this method it gets replaced with component access methods through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.SetComponent``1(Unity.Entities.SystemHandle,``0)">
             <summary>
             Sets the value of a component of an entity associated with a system.
             </summary>
             <param name="systemHandle">The system handle.</param>
             <param name="component">The data to set.</param>
             <typeparam name="T">The component type.</typeparam>
             <remarks>
             Use this method to look up and set data in another system owned entity using its <see cref="T:Unity.Entities.SystemHandle"/> object.
            
             When you call this method gets replaced with component access methods  through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.HasComponent``1(Unity.Entities.SystemHandle)">
             <summary>
             Checks whether an entity associated with a system has a specific type of component.
             </summary>
             <param name="systemHandle">The system handle.</param>
             <typeparam name="T">The data type of the component.</typeparam>
             <remarks>
             Always returns false for an system that has been destroyed.
            
             Use this method to check if another system owned entity has a given type of component using its <see cref="T:Unity.Entities.SystemHandle"/>
             object.
            
             When you call this method this method gets replaced with component access methods through a cached <see cref="T:Unity.Entities.ComponentLookup`1"/>.
             </remarks>
             <returns>True, if the specified system owned entity has the component.</returns>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.IsComponentEnabled``1(Unity.Entities.SystemHandle)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IComponentData"/> of type T is enabled on the specified system using a <see cref="T:Unity.Entities.SystemHandle"/>.
            For the purposes of EntityQuery matching, a system with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <param name="systemHandle">The system whose component should be checked.</param>
            <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.SystemAPI.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IComponentData"/> of type T on the specified system using a <see cref="T:Unity.Entities.SystemHandle"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, a system with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <param name="systemHandle">The system whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            /// <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <seealso cref="M:Unity.Entities.SystemAPI.IsComponentEnabled``1(Unity.Entities.Entity)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetBufferLookup``1(System.Boolean)">
            <summary>
            Gets a BufferLookup&lt;T&gt; object that can access a <see cref="T:Unity.Entities.DynamicBuffer`1"/>.
            </summary>
            <remarks>
            This method gets replaced direct with access to a cached <see cref="T:Unity.Entities.BufferLookup`1"/>.
            </remarks>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
            <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
            <seealso cref="T:Unity.Entities.ComponentLookup`1"/>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetBuffer``1(Unity.Entities.Entity)">
            <summary>
            Gets the dynamic buffer of an entity.
            </summary>
            <param name="entity">The entity.</param>
            <remarks>
            This method gets replaced with component access methods through a cached <see cref="T:Unity.Entities.BufferLookup`1"/>.
            </remarks>
            <typeparam name="T">The type of the buffer's elements.</typeparam>
            <returns>The DynamicBuffer object for accessing the buffer contents.</returns>
            <exception cref="T:System.ArgumentException">Thrown if T is an unsupported type.</exception>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.HasBuffer``1(Unity.Entities.Entity)">
             <summary>
             Checks whether an entity has a dynamic buffer of a specific IBufferElementData type.
             </summary>
             <param name="entity">The Entity object.</param>
             <typeparam name="T">The IBufferElementData type.</typeparam>
             <remarks>
             Always returns false for an entity that has been destroyed.
            
             Use this method to check if another entity has a dynamic buffer of a given IBufferElementData type using its <see cref="T:Unity.Entities.Entity"/>
             object.
            
             When iterating over a set of entities via <see cref="T:Unity.Entities.IJobEntity"/> or <see cref="M:Unity.Entities.SystemAPI.Query``1"/>, avoid using this method with the
             current entity in the set. It is generally faster to change your entity query methods to avoid
             optional components; this may require a different iteration construction to handle
             each combination of optional and non-optional components.
            
             this method gets replaced with component access methods through <see cref="T:Unity.Entities.BufferLookup`1"/>.
            
             In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
            
             </remarks>
             <returns>True, if the specified entity has the component.</returns>
             <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.IsBufferEnabled``1(Unity.Entities.Entity)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IBufferElementData"/> of type T is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be checked.</param>
            <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.SystemAPI.SetBufferEnabled``1(Unity.Entities.Entity,System.Boolean)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.SetBufferEnabled``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IBufferElementData"/> of type T on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            /// <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <seealso cref="M:Unity.Entities.SystemAPI.IsBufferEnabled``1(Unity.Entities.Entity)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetEntityStorageInfoLookup">
            <summary>
            Gets a EntityStorageInfoLookup object that can access a <seealso cref="T:Unity.Entities.EntityStorageInfo"/>.
            </summary>
            <returns>A dictionary-like object that provides access to information about how Entities are stored,
            indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
            <seealso cref="T:Unity.Entities.EntityStorageInfoLookup"/>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.Exists(Unity.Entities.Entity)">
            <summary>
            Checks if the entity exists inside this system's EntityManager.
            </summary>
            <remarks>
            This returns true for an entity that was destroyed with DestroyEntity, but still has a cleanup component.
            Prefer <see cref="M:Unity.Entities.ComponentLookup`1.TryGetComponent(Unity.Entities.Entity,`0@)"/> where applicable.
            Can be used inside of Entities.ForEach.
            </remarks>
            <param name="entity">The entity to check</param>
            <returns>True if the given entity exists or the entity has a Cleanup Component that is yet to be destroyed</returns>
            <seealso cref="M:Unity.Entities.EntityManager.Exists(Unity.Entities.Entity)"/>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetSingleton``1">
            <summary>
            Gets the value of a singleton component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingletonRW``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.TryGetSingleton``1(``0@)">
            <summary>
            Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The component. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="T:Unity.Entities.World"/>, this is assigned a default value</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetSingletonRW``1">
            <summary>
            Gets a reference to the singleton component, for read/write access.
            </summary>
            <remarks>
            NOTE: this reference refers directly to the singleton's component memory.
            Structural changes to the chunk where the singleton resides can invalidate this reference
            and result in crashes or undefined behaviour if the reference is used after structural changes.
            </remarks>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.TryGetSingletonRW``1(Unity.Entities.RefRW{``0}@)">
            <summary>
            Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The reference to the component. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="T:Unity.Entities.World"/>, this is assigned a default value</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.SetSingleton``1(``0)">
            <summary>
            Sets the value of a singleton component.
            </summary>
            <param name="value">A component containing the value to assign to the singleton.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <seealso cref="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetSingletonEntity``1">
            <summary>
            Gets the Entity instance for a singleton.
            </summary>
            <typeparam name="T">The Type of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The entity associated with the specified singleton component.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.TryGetSingletonEntity``1(Unity.Entities.Entity@)">
            <summary>
            Gets the singleton Entity, and returns whether or not a singleton <see cref="T:Unity.Entities.Entity"/> of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The <see cref="T:Unity.Entities.Entity"/> associated with the specified singleton component.
             If a singleton of the specified types does not exist in the current <see cref="T:Unity.Entities.World"/>, this is set to Entity.Null</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetSingletonBuffer``1(System.Boolean)">
            <summary>
            Gets the value of a singleton buffer component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> subtype of the singleton component buffer element.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <returns>The buffer.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.TryGetSingletonBuffer``1(Unity.Entities.DynamicBuffer{``0}@,System.Boolean)">
            <summary>
            Gets the value of a singleton buffer component, and returns whether or not a singleton buffer component of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> subtype of the singleton buffer component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The buffer. If an <see cref="T:Unity.Entities.Entity"/> with the specified type doesn't exist in the <see cref="T:Unity.Entities.World"/>, this is assigned a default value</param>
            <param name="isReadOnly">Whether the buffer data is read-only or not. Set to false by default.</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.HasSingleton``1">
            <summary>
            Checks whether a singleton component of the specified type exists.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>True, if a singleton of the specified type exists in the current <see cref="T:Unity.Entities.World"/>.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetAspectRW``1(Unity.Entities.Entity)">
            <summary>
            Look up an aspect for an entity with readwrite access.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of aspect to retrieve.</typeparam>
            <returns>An aspect struct of type T representing the aspect on the entity.</returns>
            <remarks>
            T must implement the <see cref="T:Unity.Entities.IAspect"/> interface.
            The given entity is assumed to have all the components required by the aspect type.
            </remarks>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetAspectRO``1(Unity.Entities.Entity)">
            <summary>
            Look up an aspect for an entity with readonly access.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of aspect to retrieve.</typeparam>
            <returns>An aspect struct of type T representing the aspect on the entity.</returns>
            <remarks>
            T must implement the <see cref="T:Unity.Entities.IAspect"/> interface.
            The given entity is assumed to have all the components required by the aspect type.
            </remarks>
            <remarks> Not working in IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetEntityTypeHandle">
            <summary>
            Gets the run-time type information required to access the array of <see cref="T:Unity.Entities.Entity"/> objects in a chunk.
            </summary>
            <returns>An object representing the type information required to safely access Entity instances stored in a
            chunk.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetComponentTypeHandle``1(System.Boolean)">
            <summary>
            Gets the run-time type information required to access an array of component data in a chunk.
            </summary>
            <param name="isReadOnly">Whether the component data is only read, not written. Access components as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access component data stored in a
            chunk.</returns>
            <remarks>Pass an <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> instance to a job that has access to chunk data,
            such as an <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of component inside the job.</remarks>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetBufferTypeHandle``1(System.Boolean)">
            <summary>
            Gets the run-time type information required to access an array of buffer components in a chunk.
            </summary>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IBufferElementData"/>.</typeparam>
            <returns>An object representing the type information required to safely access buffer components stored in a
            chunk.</returns>
            <remarks>Pass a BufferTypeHandle instance to a job that has access to chunk data, such as an
            <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of buffer component inside the job.</remarks>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.GetSharedComponentTypeHandle``1">
            <summary>
            Gets the run-time type information required to access a shared component data in a chunk.
            </summary>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.ISharedComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access shared component data stored in a
            chunk.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="T:Unity.Entities.SystemAPI.ManagedAPI">
            <summary>
            The managed half of <see cref="T:Unity.Entities.SystemAPI"/>. It's exactly what you'd expect.
            Managed versions of API found in SystemAPI, that only runs on main thread.
            You can use this in <see cref="T:Unity.Entities.ISystem"/> and <see cref="T:Unity.Entities.SystemBase"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.SystemAPI.ManagedAPI.UnityEngineComponent`1">
            <summary>
            Can be used inside <see cref="M:Unity.Entities.SystemAPI.Query``1"/> iteration to retrieve UnityEngine components like
            ScriptableObjects, MonoBehaviour and UnityEngine.Transform
            </summary>
            <typeparam name="T">Any ScriptableObject, MonoBehaviour or UnityEngine.Object like UnityEngine.Transform.</typeparam>
        </member>
        <member name="P:Unity.Entities.SystemAPI.ManagedAPI.UnityEngineComponent`1.Value">
            <summary>
            Gets you back the contained value
            </summary>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.UnityEngineComponent`1.#ctor(`0)">
            <summary>
            Constructs a UnityEngineComponent wrapper.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.GetComponent``1(Unity.Entities.Entity)">
             <summary>
             Look up the value of a component for an entity.
             </summary>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component to retrieve.</typeparam>
             <returns>A struct of type T containing the component value.</returns>
             <remarks>
             Use this method to look up data in another entity using its <see cref="T:Unity.Entities.Entity"/> object. For example, if you
             have a component that contains an Entity field, you can look up the component data for the referenced
             entity using this method.
            
             When iterating over a set of entities via <see cref="T:Unity.Entities.IJobEntity"/> or <see cref="M:Unity.Entities.SystemAPI.Query``1"/>, do not use this method to access data of the
             current entity in the set. This function is much slower than accessing the data directly (by passing the
             component containing the data to your lambda iteration function as a parameter).
            
             When you call this method gets replaced with component access methods through <see cref="M:Unity.Entities.EntityManager.GetComponentObject``1(Unity.Entities.Entity)"/>.
            
             This lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
            
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.HasComponent``1(Unity.Entities.Entity)">
             <summary>
             Checks whether an entity has a specific type of component.
             </summary>
             <param name="entity">The Entity object.</param>
             <typeparam name="T">The data type of the component.</typeparam>
             <remarks>
             Always returns false for an entity that has been destroyed.
            
             Use this method to check if another entity has a given type of component using its <see cref="T:Unity.Entities.Entity"/>
             object. For example, if you have a component that contains an Entity field, you can check whether the
             referenced entity has a specific type of component using this method. (Entities in the set always have
             required components, so you don’t need to check for them.)
            
             When iterating over a set of entities via <see cref="T:Unity.Entities.IJobEntity"/> or <see cref="M:Unity.Entities.SystemAPI.Query``1"/>, avoid using this method with the
             current entity in the set. It is generally faster to change your entity query methods to avoid
             optional components; this may require a different construction to handle each combination of optional and non-optional components.
            
             When you call this method this method gets replaced with component access methods through a cached <see cref="M:Unity.Entities.EntityManager.HasComponent``1(Unity.Entities.Entity)"/>.
            
             This lookup method results in a slower, indirect memory access. When possible, organize your data to minimize the need for indirect lookups.
             </remarks>
             <returns>True, if the specified entity has the component.</returns>
             <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.IsComponentEnabled``1(Unity.Entities.Entity)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IComponentData"/> of type T is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be checked.</param>
            <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.SystemAPI.ManagedAPI.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IComponentData"/> of type T on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            /// <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <seealso cref="M:Unity.Entities.SystemAPI.ManagedAPI.IsComponentEnabled``1(Unity.Entities.Entity)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.GetComponent``1(Unity.Entities.SystemHandle)">
             <summary>
             Gets the value of a component for an entity associated with a system.
             </summary>
             <param name="systemHandle">The system handle.</param>
             <typeparam name="T">The type of component to retrieve.</typeparam>
             <returns>A struct of type T containing the component value.</returns>
             <remarks>
             Use this method to look up data in another system owned entity using its <see cref="T:Unity.Entities.SystemHandle"/> object.
            
             When you call this method gets replaced with component access methods through <see cref="M:Unity.Entities.EntityManager.GetComponentObject``1(Unity.Entities.Entity)"/>.
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
             <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.HasComponent``1(Unity.Entities.SystemHandle)">
             <summary>
             Checks whether an entity associated with a system has a specific type of component.
             </summary>
             <param name="systemHandle">The system handle.</param>
             <typeparam name="T">The data type of the component.</typeparam>
             <remarks>
             Always returns false for an system that has been destroyed.
            
             Use this method to check if another system owned entity has a given type of component using its <see cref="T:Unity.Entities.SystemHandle"/>
             object.
            
             When you call this method this method gets replaced with component access methods through a cached <see cref="M:Unity.Entities.EntityManager.HasComponent``1(Unity.Entities.Entity)"/>.
             </remarks>
             <returns>True, if the specified system owned entity has the component.</returns>
             <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.IsComponentEnabled``1(Unity.Entities.SystemHandle)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IComponentData"/> of type T is enabled on the specified system using a <see cref="T:Unity.Entities.SystemHandle"/>.
            For the purposes of EntityQuery matching, a system with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <param name="systemHandle">The system whose component should be checked.</param>
            <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.SystemAPI.ManagedAPI.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IComponentData"/> of type T on the specified system using a <see cref="T:Unity.Entities.SystemHandle"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, a system with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <param name="systemHandle">The system whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            /// <typeparam name="T">An unmanaged IComponentData type</typeparam>
            <seealso cref="M:Unity.Entities.SystemAPI.ManagedAPI.IsComponentEnabled``1(Unity.Entities.Entity)"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects </remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.GetSingleton``1">
            <summary>
            Gets the value of a singleton component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The component.</returns>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingletonRW``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.TryGetSingleton``1(``0@)">
            <summary>
            Gets the value of a singleton component, and returns whether or not a singleton component of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The component. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="T:Unity.Entities.World"/>, this is assigned a default value</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.GetSingletonEntity``1">
            <summary>
            Gets the Entity instance for a singleton.
            </summary>
            <typeparam name="T">The Type of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>The entity associated with the specified singleton component.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.TryGetSingletonEntity``1(Unity.Entities.Entity@)">
            <summary>
            Gets the singleton Entity, and returns whether or not a singleton <see cref="T:Unity.Entities.Entity"/> of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The <see cref="T:Unity.Entities.Entity"/> associated with the specified singleton component.
             If a singleton of the specified types does not exist in the current <see cref="T:Unity.Entities.World"/>, this is set to Entity.Null</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.HasSingleton``1">
            <summary>
            Checks whether a singleton component of the specified type exists.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>True, if a singleton of the specified type exists in the current <see cref="T:Unity.Entities.World"/>.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.GetComponentTypeHandle``1(System.Boolean)">
            <summary>
            Gets the run-time type information required to access an array of component data in a chunk.
            </summary>
            <param name="isReadOnly">Whether the component data is only read, not written. Access components as
            read-only whenever possible.</param>
            <typeparam name="T">A class that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access component data stored in a
            chunk.</returns>
            <remarks>Pass an <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> instance to a job that has access to chunk data,
            such as an <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of component inside the job.</remarks>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.SystemAPI.ManagedAPI.GetSharedComponentTypeHandle``1">
            <summary>
            Gets the run-time type information required to access a shared component data in a chunk.
            </summary>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.ISharedComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access shared component data stored in a
            chunk.</returns>
            <remarks> Not working in Entities.ForEach, IJobEntity, Utility methods, and Aspects</remarks>
        </member>
        <member name="M:Unity.Entities.IBufferAllocator.Allocate">
            <summary>
            Allocates an index which corresponds to a buffer.
            </summary>
            <returns>Allocated index. If allocation fails, returned index is negative.</returns>
        </member>
        <member name="M:Unity.Entities.IBufferAllocator.Free(System.Int32)">
            <summary>
            Frees the buffer represented by the given index.
            </summary>
            <param name="index">Index to buffer.</param>
        </member>
        <member name="P:Unity.Entities.IBufferAllocator.Item(System.Int32)">
            <summary>
            Converts an index to a pointer.
            </summary>
            <param name="index">Index to a buffer.</param>
        </member>
        <member name="P:Unity.Entities.IBufferAllocator.BufferCapacity">
            <summary>
            Maximum number of buffers that can be allocated at once.
            </summary>
        </member>
        <member name="P:Unity.Entities.IBufferAllocator.IsEmpty">
            <summary>
            Checks if all the buffers in the allocator have been allocated.
            </summary>
        </member>
        <member name="M:Unity.Entities.BufferAllocator.#ctor(System.Int32,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Creates and initializes a BufferAllocator.
            </summary>
            <param name="budgetBytes">The budget for this allocator in bytes.</param>
            <param name="bufferBytes">The size of each buffer that will be allocated in bytes.</param>
            <param name="handle">The backing allocator to use for both internal BufferAllocator state and the buffers that will be allocated.</param>
        </member>
        <member name="M:Unity.Entities.BufferAllocator.Dispose">
            <summary>
            Disposes this allocator.
            </summary>
        </member>
        <member name="M:Unity.Entities.BufferAllocator.Allocate">
            <summary>
            Allocates an index which corresponds to a buffer.
            </summary>
            <returns>Allocated index. If allocation fails, returned index is negative.</returns>
        </member>
        <member name="M:Unity.Entities.BufferAllocator.Free(System.Int32)">
            <summary>
            Frees the buffer represented by the given index.
            </summary>
            <param name="index">Index to buffer.</param>
        </member>
        <member name="P:Unity.Entities.BufferAllocator.Item(System.Int32)">
            <summary>
            Converts an index to a pointer.
            </summary>
            <param name="index">Index to a buffer.</param>
        </member>
        <member name="P:Unity.Entities.BufferAllocator.BufferCapacity">
            <summary>
            Maximum number of buffers that can be allocated at once.
            </summary>
        </member>
        <member name="P:Unity.Entities.BufferAllocator.IsEmpty">
            <summary>
            Checks if all the buffers in the allocator have been allocated.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryImpl.SyncFilterTypes">
            <summary>
            Waits for any running jobs to complete which could affect which chunks/entities match this query.
            </summary>
            <remarks>
            If the query has an active change filter, this includes jobs writing to any types whose change version is being tracked.
            If the query includes any enableable components, this includes job writing to any of these types.
            It also includes a safety check to ensure that no unregistered jobs are writing to enableable types.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQueryImpl.GetSafetyHandle(System.Int32)">
            <summary>
                Gets safety handle to a ComponentType required by this EntityQuery.
            </summary>
            <param name="indexInEntityQuery">Index of a ComponentType in this EntityQuery's RequiredComponents list.</param>
            <returns>AtomicSafetyHandle for a ComponentType</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryImpl.GetBufferSafetyHandle(System.Int32)">
            <summary>
                Gets buffer safety handle to a ComponentType required by this EntityQuery.
            </summary>
            <param name="indexInEntityQuery">Index of a ComponentType in this EntityQuery's RequiredComponents list.</param>
            <returns>AtomicSafetyHandle for a buffer</returns>
        </member>
        <member name="F:Unity.Entities.Conversion.LiveConversionSettings.ConversionMode.AlwaysCleanConvert">
            <summary>
            All changes trigger a clean conversion.
            </summary>
        </member>
        <member name="F:Unity.Entities.Conversion.LiveConversionSettings.ConversionMode.IncrementalConversion">
            <summary>
            All changes are handled via incremental conversion, except when there are failures in which case we
            trigger a clean conversion.
            </summary>
        </member>
        <member name="F:Unity.Entities.Conversion.LiveConversionSettings.ConversionMode.IncrementalConversionWithDebug">
            <summary>
            Like pure incremental conversion, but also performs a clean conversion and diffs against that.
            </summary>
        </member>
        <member name="P:Unity.Entities.Conversion.LiveConversionSettings.TreatIncrementalConversionFailureAsError">
            <summary>
            When set to true, a failure during incremental conversion is treated as an error. Otherwise a failure leads
            to a clean conversion instead. This should only be enabled for testing purposes.
            </summary>
        </member>
        <member name="T:Unity.Entities.DuplicateEntityGuidException">
            <summary>
            The exception throw when encountering multiple entities with the same <see cref="T:Unity.Entities.EntityGuid"/> value.
            </summary>
        </member>
        <member name="P:Unity.Entities.DuplicateEntityGuidException.DuplicateEntityGuids">
            <summary>
            The duplicate guids found in during the diff and the counts of how many times they were duplicated.
            </summary>
        </member>
        <member name="M:Unity.Entities.DuplicateEntityGuidException.#ctor(Unity.Entities.DuplicateEntityGuid[])">
            <summary>
            Initialized a new instance of the <see cref="T:Unity.Entities.DuplicateEntityGuidException"/> class.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityManagerDifferOptions">
            <summary>
            Parameters used to configure the the execution of the differ.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.None">
            <summary>
            Shortcut for "no options required".
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.IncludeForwardChangeSet">
            <summary>
            If set; the resulting <see cref="T:Unity.Entities.EntityChanges"/> will include the forward change set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.IncludeReverseChangeSet">
             <summary>
             If set; the resulting <see cref="T:Unity.Entities.EntityChanges"/> will include the reverse change set.
            
             This can be applied to the world to reverse the changes (i.e. undo).
             </summary>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.FastForwardShadowWorld">
            <summary>
            If set; the shadow world will be updated with the latest changes.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.ClearMissingReferences">
             <summary>
             If set; all references to destroyed or missing entities will be set to Entity.Null before computing changes.
            
             When applying a change this is needed to patch references to restored entities (they were destroyed but are being brought back by the change set).
             </summary>
             <remarks>
             Performance scales with the total number of entities with the <see cref="T:Unity.Entities.EntityGuid"/> component in the source world.
             </remarks>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.ValidateUniqueEntityGuid">
            <summary>
            If this flag is set; the entire world is checks for duplicate <see cref="T:Unity.Entities.EntityGuid"/> components.
            </summary>
            <remarks>
            Performance scales with the number of created entities in the source world with the <see cref="T:Unity.Entities.EntityGuid"/> component.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.UseReferentialEquality">
            <summary>
            If set, components are not compared bit-wise. Bit-wise comparison implies that two components that
            have references to entities that have the same GUID but different indices/versions are different.
            Similarly blob asset references to blob assets that have the same hash but live at different addresses
            will be considered different as well. This is often not desirable. For these cases, it is more apt to
            check that GUIDs and hashes match.
            </summary>
            /// <remarks>
            This makes comparing components potentially more expensive.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityManagerDifferOptions.Default">
            <summary>
            The default set of options used by the <see cref="T:Unity.Entities.EntityDiffer"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.DestroyEntityDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entities">The NativeArray of entities to destroy</param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.DestroyEntitiesInChunksDuringStructuralChange(Unity.Entities.EntityQueryImpl*,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="queryImpl"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.DestroyEntityInternalDuringStructuralChange(Unity.Entities.Entity*,System.Int32,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entities"></param>
            <param name="count"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.CreateEntity(Unity.Entities.SystemHandle@)">
             <summary>
             Creates an entity with no components.
             </summary>
             <remarks>
             Creates the entity in the first available chunk with the archetype having no components.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before creating the entity and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <returns>The Entity object that you can use to access the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.CreateEntityDuringStructuralChange(Unity.Entities.EntityArchetype,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="archetype"></param>
            <exception cref="T:System.ArgumentException">Thrown if the archetype is null.</exception>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.CreateEntityDuringStructuralChange(Unity.Entities.EntityArchetype,Unity.Entities.Entity*,System.Int32,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="archetype"></param>
            <param name="outEntities"></param>
            <param name="count"></param>
            <exception cref="T:System.ArgumentException">Thrown if the archetype is null.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.CreateEntityDuringStructuralChange(Unity.Entities.EntityArchetype,Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="archetype"></param>
            <param name="entities"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddComponentDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="componentType"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if an entity does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the component type being added is Entity type.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component increases the shared component count of the entity's archetype to more than the maximum allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component causes the size of the archetype to exceed the size of a chunk.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddMultipleComponentsDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="typeSet"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if an entity does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the component type being added is Entity type.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component increases the shared component count of the entity's archetype to more than the maximum allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component causes the size of the archetype to exceed the size of a chunk.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddComponentToChunksDuringStructuralChange(Unity.Entities.EntityQueryImpl*,Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="queryImpl">The query to apply this operation to</param>
            <param name="componentType">The component type being added to the entities.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an entity in the query does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the component type being added is Entity type.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component increases the shared component count of the entity's archetype to more than the maximum allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component causes the size of the archetype to exceed the size of a chunk.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddComponentsToChunksDuringStructuralChange(Unity.Entities.EntityQueryImpl*,Unity.Entities.ComponentTypeSet@,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="queryImpl">The query to apply this operation to</param>
            <param name="typeSet">The component types being added to the entities.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an entity in the query does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if one of the component types being added is Entity type.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if one of the components increases the shared component count of the entity's archetype to more than the maximum allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if one of the components causes the size of the archetype to exceed the size of a chunk.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddComponentDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entities">The set of entities.</param>
            <param name="componentType">The component type added to the entities.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an entity in the native array does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if a component type being added is Entity type.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component increases the shared component count of the entity's archetype to more than the maximum allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component causes the size of the archetype to exceed the size of a chunk.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddMultipleComponentsDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entities">The set of entities.</param>
            <param name="componentTypeSet">The component types added to the entities.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an entity in the native array does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if a component type being added is Entity type.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component increases the shared component count of the entity's archetype to more than the maximum allowed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the component causes the size of the archetype to exceed the size of a chunk.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveMultipleComponentsDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entityArray"></param>
            <param name="componentTypeSet"></param>
            <exception cref="T:System.InvalidOperationException">Thrown if a componentType is Entity type.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveComponentDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveComponentDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="componentTypeSet"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveComponentFromChunksDuringStructuralChange(Unity.Entities.EntityQueryImpl*,Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="queryImpl"></param>
            <param name="componentType"></param>
            <exception cref="T:System.InvalidOperationException">Thrown if the componentType is Entity type.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveMultipleComponentsFromChunksDuringStructuralChange(Unity.Entities.EntityQueryImpl*,Unity.Entities.ComponentTypeSet@,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="queryImpl"></param>
            <param name="componentTypeSet"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveComponentDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk},Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="chunks"></param>
            <param name="componentType"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.RemoveComponentDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entityArray"></param>
            <param name="componentType"></param>
            <exception cref="T:System.ArgumentException">Thrown if componentType is Entity type.</exception>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddSharedComponentDataDuringStructuralChange_Managed``1(Unity.Entities.Entity,``0,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="componentData"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddSharedComponentDataDuringStructuralChange_Managed``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entities"></param>
            <param name="componentData"></param>
            <param name="originSystem"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddSharedComponentDataDuringStructuralChange(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk},System.Int32,Unity.Entities.ComponentType,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="chunks"></param>
            <param name="sharedComponentIndex"></param>
            <param name="componentType"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.AddSharedComponentDataBoxedDefaultMustBeNullDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Object,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="typeIndex"></param>
            <param name="hashCode"></param>
            <param name="componentData"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.GetCreatedAndDestroyedEntitiesAsync(Unity.Collections.NativeList{System.Int32},Unity.Collections.NativeList{Unity.Entities.Entity},Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Detects the created and destroyed entities compared to last time the method was called with the given state.
            </summary>
            <remarks>
            Entities must be fully destroyed, if cleanup components keep it alive it still counts as not yet destroyed.
            <see cref="T:Unity.Entities.EntityCommandBuffer"/> instances that have not been played back will have no effect on this until they are played back.
            </remarks>
            <param name="state">The same state list must be passed when you call this method, it remembers the entities that were already notified created and destroyed.</param>
            <param name="createdEntities">The entities that were created.</param>
            <param name="destroyedEntities">The entities that were destroyed.</param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.GetCreatedAndDestroyedEntities(Unity.Collections.NativeList{System.Int32},Unity.Collections.NativeList{Unity.Entities.Entity},Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Detects the created and destroyed entities compared to last time the method was called with the given state.
            </summary>
            <remarks>
            Entities must be fully destroyed, if cleanup components keep it alive it still counts as not yet destroyed.
            <see cref="T:Unity.Entities.EntityCommandBuffer"/> instances that have not been played back will have no effect on this until they are played back.
            </remarks>
            <param name="state">The same state list must be passed when you call this method, it remembers the entities that were already notified created and destroyed.</param>
            <param name="createdEntities">The entities that were created.</param>
            <param name="destroyedEntities">The entities that were destroyed.</param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.SetSharedComponentDataBoxedDefaultMustBeNullDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Object,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="entity"></param>
            <param name="typeIndex"></param>
            <param name="hashCode"></param>
            <param name="componentData"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.SetSharedComponentDataAddrDefaultMustBeNullDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Void*)">
            <summary>
            Sets an unmanaged shared component on an entity.
            </summary>
            <remarks>NOTE: This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).</remarks>
            <param name="entity">The target entity.</param>
            <param name="typeIndex">The type of the component.</param>
            <param name="hashCode">The new hash code of the component.</param>
            <param name="componentDataAddr">The unmanaged component data pointer.</param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.InstantiateInternalDuringStructuralChange(Unity.Entities.Entity,Unity.Entities.Entity*,System.Int32,Unity.Entities.SystemHandle@)">
            <summary>
            This function must be wrapped in BeginStructuralChanges() and EndStructuralChanges(ref EntityComponentStore.ArchetypeChanges changes).
            </summary>
            <param name="srcEntity"></param>
            <param name="outputEntities"></param>
            <param name="count"></param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.GetName(Unity.Entities.Entity)">
            <summary>
            Gets the name assigned to an entity.
            </summary>
            <remarks>For performance, entity names only exist when running in the Unity Editor.</remarks>
            <param name="entity">The Entity object of the entity of interest.</param>
            <returns>The entity name.</returns>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.SetName(Unity.Entities.Entity,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Sets the name of an entity.
            </summary>
            <remarks>For performance, entity names only exist when running in the Unity Editor.</remarks>
            <param name="entity">The Entity object of the entity to name.</param>
            <param name="name">The name to assign.</param>
        </member>
        <member name="M:Unity.Entities.EntityDataAccess.CompleteAllTrackedJobs">
            <summary>
            Waits for all tracked jobs to complete.
            </summary>
            <remarks>Calling <see cref="M:Unity.Entities.EntityDataAccess.CompleteAllTrackedJobs"/> blocks the main thread until all currently running tracked Jobs finish.</remarks>
            <remarks>Tracked JobHandles for this world include every systems' resulting JobHandle directly after their OnUpdate</remarks>
        </member>
        <member name="T:Unity.Entities.EntityGuid">
            <summary>
            This component is attached to converted Entities and is guaranteed to be unique within a World. It can be used
            to map back to the authoring GameObject from which it was converted. Note that an EntityGuid does not have
            enough information to be persistent across sessions.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityGuid.a">
            <summary>This field, when combined with `b`, is for working with EntityGuid as opaque bits (the packing may
            change again in the future, as there are still unused bits remaining).</summary>
        </member>
        <member name="F:Unity.Entities.EntityGuid.b">
            <summary>Use same as `a` field.</summary>
        </member>
        <member name="F:Unity.Entities.EntityGuid.Null">
            <summary>Static value that represents an invalid EntityGuid.</summary>
        </member>
        <member name="M:Unity.Entities.EntityGuid.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Entities.EntityGuid"/>.
            </summary>
            <param name="originatingId">Session-unique ID for the originating object. This is typically the authoring GameObject's InstanceID.</param>
            <param name="originatingSubId">Secondary session-unique ID for the originating object. This is typically the authoring Component's InstanceID.</param>
            <param name="namespaceId">A unique number to identify the namespace</param>
            <param name="serial">A unique number used to differentiate Entities associated with the same originating object and namespace</param>
        </member>
        <member name="P:Unity.Entities.EntityGuid.OriginatingId">
            <summary>Session-unique ID for originating object (typically the authoring GameObject's InstanceID).</summary>
        </member>
        <member name="P:Unity.Entities.EntityGuid.OriginatingSubId">
            <summary>Secondary session-unique ID for the originating object. This is typically the authoring Component's InstanceID.</summary>
        </member>
        <member name="P:Unity.Entities.EntityGuid.FullNamespaceId">
            <summary>A unique number to identify the namespace.</summary>
        </member>
        <member name="P:Unity.Entities.EntityGuid.Serial">
            <summary>A unique number used to differentiate Entities associated with the same originating object and namespace.</summary>
        </member>
        <member name="M:Unity.Entities.EntityGuid.op_Equality(Unity.Entities.EntityGuid@,Unity.Entities.EntityGuid@)">
            <summary>
            Checks if two EntityGuid instances are equal.
            </summary>
            <param name="lhs">An EntityGuid</param>
            <param name="rhs">Another EntityGuid</param>
            <returns>True, if both EntityGuid instances contain the same opaque bits.</returns>
        </member>
        <member name="M:Unity.Entities.EntityGuid.op_Inequality(Unity.Entities.EntityGuid@,Unity.Entities.EntityGuid@)">
            <summary>
            Checks if two EntityGuid instances aren't equal.
            </summary>
            <param name="lhs">An EntityGuid</param>
            <param name="rhs">Another EntityGuid</param>
            <returns>True, if any of the opaque bits contained in the EntityGuid instances is different.</returns>
        </member>
        <member name="M:Unity.Entities.EntityGuid.Equals(System.Object)">
            <summary>
            Checks if two objects are EntityGuid instances and if they are equal.
            </summary>
            <param name="obj">An object</param>
            <returns>True if <paramref name="obj"/> is an `EntityGuid` instance that contains the same opaque bits.</returns>
        </member>
        <member name="M:Unity.Entities.EntityGuid.Equals(Unity.Entities.EntityGuid)">
            <summary>
            Checks if two EntityGuid instances are equal.
            </summary>
            <param name="other">An EntityGuid to compare with</param>
            <returns>True if <paramref name="other"/> contains the same opaque bits.</returns>
        </member>
        <member name="M:Unity.Entities.EntityGuid.GetHashCode">
            <summary>
            Computes a hashcode to support hash-based collections.
            </summary>
            <returns>The computed hash.</returns>
        </member>
        <member name="M:Unity.Entities.EntityGuid.CompareTo(Unity.Entities.EntityGuid)">
            <summary>
            Compares an EntityGuid against a given one to find their sort order.
            </summary>
            <param name="other">The other EntityGuid to compare to</param>
            <returns>Returns -1 if this EntityGuid goes first in the sort order, or 1 if the other should goes first in the sort order. Otherwise returns 0 if they are equal.</returns>
        </member>
        <member name="M:Unity.Entities.EntityGuid.ToString">
            <summary>
            Converts this EntityGuid to a standard C# <see cref="T:System.String"/> representation.
            </summary>
            <returns>The C# string.</returns>
        </member>
        <member name="T:Unity.Entities.EntityChanges">
             <summary>
            Contains all the changes needed to convert and revert a world from one state to another.
             </summary>
             <remarks>Changes that convert a world from one state to another are called **forward changes**.
             Changes that revert the world from one state to another are called **reverse changes**. EntityChanges
             store the changes in unmanaged memory. Call <see cref="M:Unity.Entities.EntityChanges.Dispose"/> to free the used memory</remarks>
        </member>
        <member name="M:Unity.Entities.EntityChanges.#ctor(Unity.Entities.EntityChangeSet,Unity.Entities.EntityChangeSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Entities.EntityChanges"/>.
            </summary>
            <param name="forwardChangeSet">Changes to convert a World from a state 'A' to a state 'B'</param>
            <param name="reverseChangeSet">Changes to revert a World from a state 'B' to a state 'A'</param>
        </member>
        <member name="P:Unity.Entities.EntityChanges.AnyChanges">
            <summary>
            Checks if there is any forward or reverse change
            </summary>
            <returns>True if there is any change.</returns>
        </member>
        <member name="P:Unity.Entities.EntityChanges.HasForwardChangeSet">
            <summary>
            Checks if there is any forward change
            </summary>
            <returns>True if there is any forward change.</returns>
        </member>
        <member name="P:Unity.Entities.EntityChanges.HasReverseChangeSet">
            <summary>
            Checks if there is any reverse change
            </summary>
            <returns>True if there is any reverse change.</returns>
        </member>
        <member name="P:Unity.Entities.EntityChanges.ForwardChangeSet">
            <summary>
            Access to the forward change set
            </summary>
            <returns>Forward change set.</returns>
        </member>
        <member name="P:Unity.Entities.EntityChanges.ReverseChangeSet">
            <summary>
            Access to the reverse change set
            </summary>
            <returns>Reverse change set</returns>
        </member>
        <member name="M:Unity.Entities.EntityChanges.Dispose">
            <summary>
            Disposes the memory used by the change sets
            </summary>
        </member>
        <member name="T:Unity.Entities.PackedComponent">
            <summary>
            Represents a packed component within an <see cref="T:Unity.Entities.EntityChangeSet"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedComponent.PackedEntityIndex">
            <summary>
            Entity index in the packed entities array. <see cref="F:Unity.Entities.EntityChangeSet.Entities"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedComponent.PackedTypeIndex">
            <summary>
            Type index in the packed stableTypeHash array. <see cref="F:Unity.Entities.EntityChangeSet.TypeHashes"/>
            </summary>
        </member>
        <member name="T:Unity.Entities.PackedComponentDataChange">
            <summary>
            Represents a packed component data change within a <see cref="T:Unity.Entities.EntityChangeSet"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedComponentDataChange.Component">
            <summary>
            The entity and component this change is targeted.
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedComponentDataChange.Offset">
            <summary>
            The start offset for this data change.
            </summary>
            <remarks>
            This is the field offset and NOT the payload offset.
            </remarks>
        </member>
        <member name="F:Unity.Entities.PackedComponentDataChange.Size">
            <summary>
            The size of this data change. This is be the size in <see cref="F:Unity.Entities.EntityChangeSet.ComponentData"/> for this entry.
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedComponentDataChange.Enabled">
            <summary>
            If this component has a enable bit change. -1 = no change, 0 = false, 1 = true
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityReferenceChange">
             <summary>
             Represents an entity reference that was changed within a <see cref="T:Unity.Entities.EntityChangeSet"/>
            
             This structure references the entity by it's unique <see cref="T:Unity.Entities.EntityGuid"/>.
             </summary>
             <remarks>
             Multiple patches could exist for the same component with different offsets.
             </remarks>
        </member>
        <member name="F:Unity.Entities.EntityReferenceChange.Component">
            <summary>
            The entity and component this patched is targeted at.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityReferenceChange.Offset">
            <summary>
            The field offset for the <see cref="T:Unity.Entities.Entity"/> field.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityReferenceChange.Value">
            <summary>
            The entity that the field should reference. Identified by the unique <see cref="T:Unity.Entities.EntityGuid"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.BlobAssetReferenceChange">
            <summary>
            Represents a blob asset reference that was changed within a <see cref="T:Unity.Entities.EntityChangeSet"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.BlobAssetReferenceChange.Component">
            <summary>
            The entity and component this patched is targeted at.
            </summary>
        </member>
        <member name="F:Unity.Entities.BlobAssetReferenceChange.Offset">
            <summary>
            The field offset for the data.
            </summary>
        </member>
        <member name="F:Unity.Entities.BlobAssetReferenceChange.Value">
            <summary>
            The blob asset this component should point to in the batch.
            </summary>
        </member>
        <member name="T:Unity.Entities.BlobAssetChange">
            <summary>
            Header for a changed blob asset.
            </summary>
        </member>
        <member name="F:Unity.Entities.BlobAssetChange.Length">
            <summary>
            Byte length of this blob asset in the <see cref="F:Unity.Entities.EntityChangeSet.BlobAssetData"/> array.
            </summary>
        </member>
        <member name="F:Unity.Entities.BlobAssetChange.Hash">
            <summary>
            The content hash for this blob asset.
            </summary>
        </member>
        <member name="T:Unity.Entities.PackedSharedComponentDataChange">
            <summary>
            Represents a shared component data change in a packed format
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedSharedComponentDataChange.Component">
            <summary>
            Represents the entity and component the patch is targeted at.
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedSharedComponentDataChange.UnmanagedSharedValueDataOffsetWithManagedFlag">
            <summary>
            Represents the field offset of the shared component data for unmanaged components.
            </summary>
            <remarks>
            For managed components, this field contains the bit matching <see cref="F:Unity.Entities.PackedSharedComponentDataChange.kManagedFlag"/>) set to 1.
            </remarks>
        </member>
        <member name="F:Unity.Entities.PackedSharedComponentDataChange.kManagedFlag">
            <summary>
            Represents a bit mask that indicates if the share component data is managed.
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedSharedComponentDataChange.BoxedSharedValue">
            <summary>
            Represents the shared component value for managed components.
            </summary>
        </member>
        <member name="T:Unity.Entities.PackedManagedComponentDataChange">
            <summary>
            Represents a managed component data change in a packed format
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedManagedComponentDataChange.Component">
            <summary>
            Represents the entity and component this patch is targeted at.
            </summary>
        </member>
        <member name="F:Unity.Entities.PackedManagedComponentDataChange.BoxedValue">
            <summary>
            Managed component value
            </summary>
        </member>
        <member name="T:Unity.Entities.LinkedEntityGroupChange">
            <summary>
            Represents a linked entity group change
            </summary>
        </member>
        <member name="F:Unity.Entities.LinkedEntityGroupChange.RootEntityGuid">
            <summary>
            <see cref="T:Unity.Entities.EntityGuid"/> of the root entity for the linked entity group
            </summary>
        </member>
        <member name="F:Unity.Entities.LinkedEntityGroupChange.ChildEntityGuid">
            <summary>
            <see cref="T:Unity.Entities.EntityGuid"/> of a child entity for the linked entity group
            </summary>
        </member>
        <member name="T:Unity.Entities.ComponentTypeFlags">
            <summary>
            A flag to determine if a component type is a chunk component or not
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentTypeFlags.None">
            <summary>
            Not a chunk component type
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentTypeFlags.ChunkComponent">
            <summary>
            A chunk component type
            </summary>
        </member>
        <member name="T:Unity.Entities.ComponentTypeHash">
            <summary>
            Represents a hash of a component type.
            </summary>
            <remarks>This struct is mostly intended for internal use in the Entity differ and patcher code.</remarks>
        </member>
        <member name="F:Unity.Entities.ComponentTypeHash.StableTypeHash">
            <summary>
            The hash value.
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentTypeHash.Flags">
            <summary>
            Flags for this component type.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHash.Equals(Unity.Entities.ComponentTypeHash)">
            <summary>
            Checks if another ComponentTypeHash instance is equal to this one
            </summary>
            <param name="other">A ComponentTypeHash to compare with</param>
            <returns>True if <paramref name="other"/> contains the hash value and flags.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHash.Equals(System.Object)">
            <summary>
            Checks if a ComponentTypeHash equals some object which may or may not be a ComponentTypeHash
            </summary>
            <param name="obj">An object to compare with</param>
            <returns>True if <paramref name="obj"/> is a ComponentTypeHash, and contains the same hash value and flags.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHash.op_Equality(Unity.Entities.ComponentTypeHash,Unity.Entities.ComponentTypeHash)">
            <summary>
            Checks if two ComponentTypeHash instances are equal
            </summary>
            <param name="left">A ComponentTypeHash to compare</param>
            <param name="right">A ComponentTypeHash to compare</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHash.op_Inequality(Unity.Entities.ComponentTypeHash,Unity.Entities.ComponentTypeHash)">
            <summary>
            Checks if two ComponentTypeHash instances are not equal
            </summary>
            <param name="left">A ComponentTypeHash to compare</param>
            <param name="right">A ComponentTypeHash to compare</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHash.GetHashCode">
            <summary>
            Computes a hashcode to support hash-based collections.
            </summary>
            <returns>The computed hash.</returns>
        </member>
        <member name="T:Unity.Entities.EntityChangeSet">
            <summary>
            An atomic package of changes to entity and component data.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.CreatedEntityCount">
            <summary>
            Number of entities from the start of <see cref="F:Unity.Entities.EntityChangeSet.Entities"/> that should be considered as created.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.DestroyedEntityCount">
            <summary>
            Number of entities from the end of <see cref="F:Unity.Entities.EntityChangeSet.Entities"/> that should be considered as destroyed.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.NameChangedCount">
            <summary>
            Number of entities of which names changed in <see cref="F:Unity.Entities.EntityChangeSet.NameChangedEntityGuids"/> in this change-set,
            not including created and destroyed entities.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.Entities">
            <summary>
            A packed array of all entities in this change-set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.TypeHashes">
            <summary>
            A packed array of all types in this change-set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.Names">
            <summary>
            Changed names including created and destroyed entities in this change-set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.NameChangedEntityGuids">
            <summary>
            Entities of which names changed in this change-set, not including created and destroyed entities.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.AddComponents">
            <summary>
            A set of all component additions in this change-set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.RemoveComponents">
            <summary>
            A set of all component removals in this change-set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.SetComponents">
            <summary>
            A set of all component data modifications in this change-set.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.ComponentData">
            <summary>
            Data payload for all component changes specified in <see cref="F:Unity.Entities.EntityChangeSet.SetComponents"/>
            </summary>
            <remarks>
            Data changes are tightly packed. Use the <see cref="F:Unity.Entities.PackedComponentDataChange.Size"/> to read back.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.EntityReferenceChanges">
            <summary>
            A packed set of all entity references to patch.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.BlobAssetReferenceChanges">
            <summary>
            A packed set of all blob asset references to patch.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.SetManagedComponents">
            <summary>
            A set of all managed component data changes.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.SetSharedComponents">
            <summary>
            A set of all shared component data changes.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.UnmanagedSharedComponentData">
            <summary>
            All unmanaged shared data are stored here
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.LinkedEntityGroupAdditions">
            <summary>
            A set of all linked entity group additions.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.LinkedEntityGroupRemovals">
            <summary>
            A set of all linked entity group removals.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.CreatedBlobAssets">
            <summary>
            A set of all blob asset creations in this change set.
            </summary>
            <remarks>
            The <see cref="T:Unity.Entities.BlobAssetChange"/> is used to describe the payload within the <see cref="F:Unity.Entities.EntityChangeSet.BlobAssetData"/> array.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.DestroyedBlobAssets">
            <summary>
            A set of all blob assets destroyed in this change set. Identified by the content hash.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityChangeSet.BlobAssetData">
            <summary>
            The payload for all blob assets in this change set.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityChangeSet.#ctor(System.Int32,System.Int32,System.Int32,Unity.Collections.NativeArray{Unity.Entities.EntityGuid},Unity.Collections.NativeArray{Unity.Entities.ComponentTypeHash},Unity.Collections.NativeArray{Unity.Collections.FixedString64Bytes},Unity.Collections.NativeArray{Unity.Entities.EntityGuid},Unity.Collections.NativeArray{Unity.Entities.PackedComponent},Unity.Collections.NativeArray{Unity.Entities.PackedComponent},Unity.Collections.NativeArray{Unity.Entities.PackedComponentDataChange},Unity.Collections.NativeArray{System.Byte},Unity.Collections.NativeArray{Unity.Entities.EntityReferenceChange},Unity.Collections.NativeArray{Unity.Entities.BlobAssetReferenceChange},Unity.Entities.PackedManagedComponentDataChange[],Unity.Entities.PackedSharedComponentDataChange[],Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer,Unity.Collections.NativeArray{Unity.Entities.LinkedEntityGroupChange},Unity.Collections.NativeArray{Unity.Entities.LinkedEntityGroupChange},Unity.Collections.NativeArray{Unity.Entities.BlobAssetChange},Unity.Collections.NativeArray{System.UInt64},Unity.Collections.NativeArray{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Unity.Entities.EntityChangeSet"/>.
            </summary>
            <param name="createdEntityCount">Number of entities from the start of <see cref="F:Unity.Entities.EntityChangeSet.Entities"/> that should be considered as created.</param>
            <param name="destroyedEntityCount">Number of entities from the end of <see cref="F:Unity.Entities.EntityChangeSet.Entities"/> that should be considered as destroyed.</param>
            <param name="nameChangedCount">Number of entities of which names changed in <see cref="F:Unity.Entities.EntityChangeSet.NameChangedEntityGuids"/> in this change-set,
            not including created and destroyed entities.</param>
            <param name="entities">A packed array of all entities in this change-set.</param>
            <param name="typeHashes">A packed array of all types in this change-set.</param>
            <param name="names">Changed names including created and destroyed entities in this change-set.</param>
            <param name="nameChangedEntityGuids">Entities of which names changed in this change-set, not including created and destroyed entities.</param>
            <param name="addComponents">A set of all component additions in this change-set.</param>
            <param name="removeComponents">A set of all component removals in this change-set.</param>
            <param name="setComponents">A set of all component data modifications in this change-set.</param>
            <param name="componentData">Data payload for all component changes specified in <see cref="F:Unity.Entities.EntityChangeSet.SetComponents"/>.</param>
            <param name="entityReferenceChanges">A packed set of all entity references to patch.</param>
            <param name="blobAssetReferenceChanges">A packed set of all blob asset references to patch.</param>
            <param name="setManagedComponents">A set of all managed component data changes.</param>
            <param name="setSharedComponents">A set of all shared component data changes.</param>
            <param name="unmanagedSharedComponentData">All unmanaged shared data are stored here.</param>
            <param name="linkedEntityGroupAdditions">A set of all linked entity group additions.</param>
            <param name="linkedEntityGroupRemovals">A set of all linked entity group removals.</param>
            <param name="createdBlobAssets">A set of all blob asset creations in this change set.</param>
            <param name="destroyedBlobAssets">A set of all blob assets destroyed in this change set. Identified by the content hash.</param>
            <param name="blobAssetData">The payload for all blob assets in this change set.</param>
        </member>
        <member name="P:Unity.Entities.EntityChangeSet.IsCreated">
            <summary>
            Returns true if this object is allocated.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityChangeSet.HasChanges">
            <summary>
            Returns true if this object contains any change.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityChangeSet.Dispose">
            <summary>
            Disposes the memory used by the change set
            </summary>
        </member>
        <member name="T:Unity.Entities.DisableAutoCreationAttribute">
             <summary>
             Prevents a system from being automatically created and run.
             </summary>
             <remarks>
             By default, all systems (classes derived from <see cref="T:Unity.Entities.ComponentSystemBase"/> or <see cref="T:Unity.Entities.ISystem"/>) are automatically discovered,
             instantiated, and added to the default <see cref="T:Unity.Entities.World"/> when that World is created.
            
             Add this attribute to a system class that you do not want created automatically. Note that the attribute is not
             inherited by any subclasses.
            
             <code>
             using Unity.Entities;
            
             [DisableAutoCreation]
             public partial class CustomSystem : SystemBase
             { // Implementation... }
             </code>
            
             You can also apply this attribute to an entire assembly to prevent any system class in that assembly from being
             created automatically. This is useful for test assemblies containing many systems that expect to be tested
             in isolation.
            
             To declare an assembly attribute, place it in any C# file compiled into the assembly, outside the namespace
             declaration:
             <code>
             using Unity.Entities;
            
             [assembly: DisableAutoCreation]
             namespace Tests{}
             </code>
             </remarks>
        </member>
        <member name="T:Unity.Entities.WorldSystemFilterFlags">
            <summary>
            For internal use only.
            </summary>
            <remarks>Defines where internal Unity systems should be created. The existence of these flags and
            the specialized Worlds they represent are subject to change.</remarks>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.Default">
            <summary>
            When specifying the Default flag on a [WorldSystemFilter] the flag will be removed and expand to
            what was specified as ChildDefaultFilterFlags by the group the system is in. This means the Default
            flag will never be set when querying a system for its flags.
            If the system does not have a [UpdateInGroup] the system will be in the SimulationSystemGroup and
            get the ChildDefaultFilterFlags from that group.
            When creating a world - or calling GetSystems directly - default expands to LocalSimulation | Presentation
            to create a standard single player world.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.Disabled">
            <summary>
            Systems explicitly disabled via the [DisableAutoCreation] attribute are by default placed in this world.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.EntitySceneOptimizations">
            <summary>
            A specialized World created for optimizing scene rendering.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.ProcessAfterLoad">
            <summary>
            A specialized World created for processing a scene after load.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.Editor">
            <summary>
            The main World created when running in the Editor.
            Example: Editor LiveConversion system
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.BakingSystem">
            <summary>
            Baking systems running after the BakingSystem system responsible from baking GameObjects to entities.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.LocalSimulation">
            <summary>
            Worlds using local simulation, without any multiplayer client / server support.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.ServerSimulation">
            <summary>
            Worlds using server simulation.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.ClientSimulation">
            <summary>
            Worlds using client simulation.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.ThinClientSimulation">
            <summary>
            Worlds using thin client simulation. A thin client is a client running the bare minimum set of systems to connect to and communicate with a server. It does not run the full simulation and cannot generally present the simulation state.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.Presentation">
            <summary>
            Worlds presenting a rendered world.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.Streaming">
            <summary>
            Worlds supporting streaming
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterFlags.All">
            <summary>
            Flag to include all system groups defined above as well as systems decorated with [DisableAutoCreation].
            </summary>
        </member>
        <member name="T:Unity.Entities.WorldSystemFilterAttribute">
            <summary>
            For internal use only.
            </summary>
            <remarks>Defines where internal Unity systems should be created. The existence of these Worlds
            is subject to change.</remarks>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterAttribute.FilterFlags">
            <summary>
            The World the system belongs in.
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldSystemFilterAttribute.ChildDefaultFilterFlags">
            <summary>
            The World children of this system (group) should belong in by default.
            </summary>
        </member>
        <member name="M:Unity.Entities.WorldSystemFilterAttribute.#ctor(Unity.Entities.WorldSystemFilterFlags,Unity.Entities.WorldSystemFilterFlags)">
            <summary>For internal use only.</summary>
            <param name="flags">Defines where internal Unity systems should be created.</param>
            <param name="childDefaultFlags">Defines where children of this system group should be created if they do not have explicit filters. This parameter is only used for system groups, specifying it on a non-group system has no effect.</param>
        </member>
        <member name="T:Unity.Entities.EntityQueryDescValidationException">
            <summary>
            Exception type thrown if <see cref="T:Unity.Entities.EntityQueryDesc"/> validation fails.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryDescValidationException.#ctor(System.String)">
            <summary>
            Construct a new exception instance
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Unity.Entities.EntityQueryDesc">
             <summary>
             Describes a query to find archetypes in terms of required, optional, and excluded
             components.
             </summary>
             <remarks>
             Define an EntityQueryDesc object to describe complex queries. Inside a system,
             pass an EntityQueryDesc object to <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Entities.EntityQueryDesc[])"/>
             to create the <see cref="T:Unity.Entities.EntityQuery"/>.
            
             A query description combines the component types you specify in `All`, `Any`, and `None` sets according to the
             following rules:
            
             * All - Includes archetypes that have every component in this set
             * Any - Includes archetypes that have at least one component in this set
             * None - Excludes archetypes that have any component in this set, but includes entities which have the component disabled.
             * Disabled - Includes archetypes that have every component in this set, but only matches entities where the component is disabled.
             * Absent - Excludes archetypes that have any component in this set.
            
             For example, given entities with the following components:
            
             * Player has components: ObjectPosition, ObjectRotation, Player
             * Enemy1 has components: ObjectPosition, ObjectRotation, Melee
             * Enemy2 has components: ObjectPosition, ObjectRotation, Ranger
            
             The query description below matches all of the archetypes that:
             have any of [Melee or Ranger], AND have none of [Player], AND have all of [ObjectPosition and ObjectRotation]
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-description" title="Query Description"/>
             </example>
            
             In other words, the query created from this description selects the Enemy1 and Enemy2 entities, but not the Player entity.
             </remarks>
        </member>
        <member name="F:Unity.Entities.EntityQueryDesc.Any">
            <summary>
            Include archetypes that contain at least one (but possibly more) of the
            component types in the Any list.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryDesc.None">
            <summary>
            Include archetypes that do not contain these component types. For enableable component types, archetypes
            with these components will still be matched by the query, but only for entities with these components disabled.
            </summary>
            <remarks>Effectively, this list means "absent, or present (but disabled)".</remarks>
        </member>
        <member name="F:Unity.Entities.EntityQueryDesc.All">
            <summary>
            Include archetypes that contain all of the
            component types in the All list.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryDesc.Disabled">
            <summary>
            Include archetypes that contain these components, but only match entities where the component is disabled.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryDesc.Absent">
            <summary>
            Exclude archetypes that contain these component types.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryDesc.Options">
             <summary>
             Specialized query options.
             </summary>
             <remarks>
             You should not need to set these options for most queries.
            
             Options is a bit mask; use the bitwise OR operator to combine multiple options.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQueryDesc.Validate">
            <summary>
            Run consistency checks on a query description, and throw an exception if validation fails.
            </summary>
            <exception cref="T:Unity.Entities.EntityQueryDescValidationException">Thrown if the query fails validation. The exception
            message provides additional details.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQueryDesc.Equals(System.Object)">
            <summary>
            Compare to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if <paramref name="obj"/> is an equivalent query description, or false it not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryDesc.Equals(Unity.Entities.EntityQueryDesc)">
            <summary>
            Compare to another instance for equality.
            </summary>
            <param name="other">The other instance to compare.</param>
            <returns>True if the two instances are equal, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryDesc.op_Equality(Unity.Entities.EntityQueryDesc,Unity.Entities.EntityQueryDesc)">
            <summary>
            Compare two instance for equality.
            </summary>
            <param name="lhs">The left instance to compare</param>
            <param name="rhs">The right instance to compare</param>
            <returns>True if the two instances are equal, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryDesc.op_Inequality(Unity.Entities.EntityQueryDesc,Unity.Entities.EntityQueryDesc)">
            <summary>
            Compare two instance for inequality.
            </summary>
            <param name="lhs">The left instance to compare</param>
            <param name="rhs">The right instance to compare</param>
            <returns>False if the two instances are equal, or true if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryDesc.GetHashCode">
            <summary>
            Compute the hash code for this object
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="T:Unity.Entities.EntityQueryOptions">
            <summary>
            The bit flags to use for the <see cref="F:Unity.Entities.EntityQueryDesc.Options"/> field.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.Default">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.IncludePrefab">
            <summary>
            The query does not exclude entities with the special <see cref="T:Unity.Entities.Prefab"/> component.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.IncludeDisabledEntities">
            <summary>
            The query does not exclude entities with the special <see cref="T:Unity.Entities.Disabled"/> component.
            </summary>
            <remarks>
            To ignore the state of individual enableable components on an entity, use <see cref="F:Unity.Entities.EntityQueryOptions.IgnoreComponentEnabledState"/>.
            </remarks>
            <seealso cref="F:Unity.Entities.EntityQueryOptions.IgnoreComponentEnabledState"/>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.IncludeDisabled">
            <summary> Obsolete. Use <see cref="F:Unity.Entities.EntityQueryOptions.IncludeDisabledEntities"/> instead.</summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.FilterWriteGroup">
            <summary>
            The query filters selected entities based on the
            <see cref="T:Unity.Entities.WriteGroupAttribute"/> settings of the components specified in the query description.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.IgnoreComponentEnabledState">
            <summary>
            The query will match all entities in all the query's matching archetypes, regardless of whether any
            enableable components on those entities are enabled or disabled.
            </summary>
            <remarks>
            Specifically:
            - Entities with all required enableable components will be matched, even if the components are disabled.
            - Entities with any optional enableable components will be matched, even if the components are disabled.
            - Entities with any excluded enableable component will be matched, even if the components are enabled.
            - Entities missing a required component will NOT be matched; their archetype is not in the potentially matching set.
            - Entities missing all the optional components will NOT be matched; their archetype is not in the potentially matching set.
            </remarks>
        </member>
        <member name="F:Unity.Entities.EntityQueryOptions.IncludeSystems">
            <summary>
            The query does not exclude the special <see cref="T:Unity.Entities.SystemInstance"/> component.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityQueryMask">
             <summary>
             Provides an efficient test of whether a specific archetype is included in the set of archetypes matched by an
             EntityQuery.
             </summary>
             <remarks>
             Use a query mask to quickly identify whether an entity's archetype would be matched by an EntityQuery.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="entity-query-mask" title="Query Mask"/>
             </example>
            
             You can create up to 1024 unique EntityQueryMasks in an application.
             Note that EntityQueryMask only filters by Archetype. It doesn't support EntityQuery shared component,
             change filtering, or enableable components.
             </remarks>
             <seealso cref="M:Unity.Entities.EntityManager.GetEntityQueryMask(Unity.Entities.EntityQuery)"/>
        </member>
        <member name="M:Unity.Entities.EntityQueryMask.MatchesIgnoreFilter(Unity.Entities.Entity)">
            <summary>
            Reports whether an entity's archetype is in the set of archetypes matched by this query.
            </summary>
            <remarks>
            This function does not consider any chunk filtering settings on the query, or whether the entity has any of
            the relevant components disabled.
            </remarks>
            <param name="entity">The entity to check.</param>
            <returns>True if the entity would be returned by the EntityQuery (ignoring any filtering or enableable
            components), or false if it would not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryMask.Matches(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityQueryMask.MatchesIgnoreFilter(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The entity to check.</param>
            <returns>True if the entity would be returned by the EntityQuery (ignoring any filtering or enableable
            components), or false if it would not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryMask.MatchesIgnoreFilter(Unity.Entities.ArchetypeChunk)">
            <summary>
            Reports whether a chunk's archetype is in the set of archetypes matched by this query.
            </summary>
            <remarks>
            This function does not consider any chunk filtering settings on the query.
            </remarks>
            <param name="chunk">The chunk to check.</param>
            <returns>True if the chunk would be returned by the EntityQuery (ignoring any filtering), or false if it
            would not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryMask.Matches(Unity.Entities.ArchetypeChunk)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityQueryMask.MatchesIgnoreFilter(Unity.Entities.ArchetypeChunk)"/> instead.</summary>
            <param name="chunk">The chunk to check.</param>
            <returns>True if the chunk would be returned by the EntityQuery (ignoring any filtering), or false if it
            would not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryMask.Matches(Unity.Entities.EntityArchetype)">
            <summary>
            Reports whether the archetype would be selected by the EntityQuery instance used to create this entity query mask.
            </summary>
            <remarks>
            The match does not consider any filter settings of the EntityQuery.
            </remarks>
            <param name="archetype">The archetype to check.</param>
            <returns>True if the entity would be returned by the EntityQuery, false if it would not.</returns>
        </member>
        <member name="T:Unity.Entities.EntityQuery">
             <summary>
             Use an EntityQuery object to select entities with components that meet specific requirements.
             </summary>
             <remarks>
             An entity query defines the set of component types that an [archetype] must contain
             in order for its chunks and entities to be selected and specifies whether the components accessed
             through the query are read-only or read-write.
            
             For simple queries, you can create an EntityQuery based on an array of
             component types. The following example defines a EntityQuery that finds all entities
             with both Rotation and RotationSpeed components.
            
             <example>
             <code source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-from-list" title="EntityQuery Example"/>
             </example>
            
             The query uses [ComponentType.ReadOnly] instead of the simpler `typeof` expression
             to designate that the system does not write to RotationSpeed. Always specify read-only
             when possible, since there are fewer constraints on read-only access to data, which can help
             the Job scheduler execute your Jobs more efficiently.
            
             For more complex queries, you can use an <see cref="T:Unity.Entities.EntityQueryDesc"/> object to create the entity query.
             A query description provides a flexible query mechanism to specify which archetypes to select
             based on the following sets of components:
            
             * `All` = All component types in this array must exist in the archetype
             * `Any` = At least one of the component types in this array must exist in the archetype
             * `None` = None of the component types in this array can exist in the archetype
            
             For example, the following query includes archetypes containing Rotation and
             RotationSpeed components, but excludes any archetypes containing a Static component:
            
             <example>
             <code source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-from-description" title="EntityQuery Example"/>
             </example>
            
             **Note:** Do not include completely optional components in the query description. To handle optional
             components, use <see cref="T:Unity.Entities.IJobChunk"/> and the [ArchetypeChunk.Has()] method to determine whether a chunk contains the
             optional component or not. Since all entities within the same chunk have the same components, you
             only need to check whether an optional component exists once per chunk -- not once per entity.
            
             Within a system class, use the [ComponentSystemBase.GetEntityQuery()] function
             to get a EntityQuery instance.
            
             You can filter entities based on
             whether they have [changed] or whether they have a specific value for a [shared component].
             Once you have created an EntityQuery object, you can
             [reset] and change the filter settings, but you cannot modify the base query.
            
             Use an EntityQuery for the following purposes:
            
             * To get a [native array] of a the values for a specific <see cref="T:Unity.Entities.IComponentData"/> type for all entities matching the query
             * To get an [native array] of the <see cref="T:Unity.Entities.ArchetypeChunk"/> objects matching the query
             * To schedule an <see cref="T:Unity.Entities.IJobChunk"/> job
             * To control whether a system updates using [ComponentSystemBase.RequireForUpdate(query)]
            
             Note that [Entities.ForEach] defines an entity query implicitly based on the methods you call. You can
             access this implicit EntityQuery object using [Entities.WithStoreEntityQueryInField]. However, you cannot
             create an [Entities.ForEach] construction based on an existing EntityQuery object.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             [Entities.WithStoreEntityQueryInField]: xref:Unity.Entities.SystemBase.Entities
             [ComponentSystemBase.GetEntityQuery()]: xref:Unity.Entities.ComponentSystemBase.GetEntityQuery*
             [ComponentType.ReadOnly]: xref:Unity.Entities.ComponentType.ReadOnly``1
             [ComponentSystemBase.RequireForUpdate()]: xref:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)
             [ArchetypeChunk.Has()]: xref:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.ComponentTypeHandle{``0})
             [archetype]: xref:Unity.Entities.EntityArchetype
             [changed]: xref:Unity.Entities.EntityQuery.SetChangedVersionFilter*
             [shared component]: xref:Unity.Entities.EntityQuery.SetSharedComponentFilter*
             [reset]: xref:Unity.Entities.EntityQuery.ResetFilter*
             [native array]: https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeArray_1.html
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.Equals(Unity.Entities.EntityQuery)">
            <summary>
            Compare two queries for equality.
            </summary>
            <param name="other">The other query</param>
            <returns>True if the two queries are equivalent, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.Equals(System.Object)">
            <summary>
            Compare a query to another object (assumed to be a boxed EntityQuery).
            </summary>
            <param name="obj">The other query.</param>
            <returns>True if <paramref name="obj"/> is an equivalent query, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetHashCode">
            <summary>
            Compute the hash code for this query
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="P:Unity.Entities.EntityQuery.IsEmpty">
            <summary>
            Reports whether this query would currently select zero entities.
            </summary>
            <returns>True, if this EntityQuery matches zero existing entities. False, if it matches one or more entities.</returns>
        </member>
        <member name="P:Unity.Entities.EntityQuery.IsEmptyIgnoreFilter">
            <summary>
            Reports whether this query would currently select zero entities. This will ignore any filters set on the EntityQuery.
            </summary>
            <returns>True, if this EntityQuery matches zero existing entities. False, if it matches one or more entities.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetQueryTypes">
            <summary>
            Gets the array of <see cref="T:Unity.Entities.ComponentType"/> objects included in this EntityQuery.
            </summary>
            <returns>An array of ComponentType objects</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetReadAndWriteTypes">
            <summary>
                Packed array of this EntityQuery's ReadOnly and writable ComponentTypes.
                ReadOnly ComponentTypes come before writable types in this array.
            </summary>
            <returns>Array of ComponentTypes</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.Dispose">
            <summary>
            Disposes this EntityQuery instance.
            </summary>
            <remarks>Do not dispose EntityQuery instances accessed using
            <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityQuery(Unity.Entities.ComponentType[])"/>. Systems automatically dispose of
            their own entity queries.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if you attempt to dispose an EntityQuery
            belonging to a system.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetSafetyHandle(System.Int32)">
            <summary>
                Gets safety handle to a ComponentType required by this EntityQuery.
            </summary>
            <param name="indexInEntityQuery">Index of a ComponentType in this EntityQuery's RequiredComponents list.</param>
            <returns>AtomicSafetyHandle for a ComponentType</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetBufferSafetyHandle(System.Int32)">
            <summary>
                Gets buffer safety handle to a ComponentType required by this EntityQuery.
            </summary>
            <param name="indexInEntityQuery">Index of a ComponentType in this EntityQuery's RequiredComponents list.</param>
            <returns>AtomicSafetyHandle for a buffer</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateEntityCount">
            <summary>
            Calculates the number of entities selected by this EntityQuery.
            </summary>
            <remarks>
            The EntityQuery must execute and apply any filters to calculate the entity count. If you are checking for whether the entity count equals zero, consider the more efficient IsEmpty property.
            </remarks>
            <returns>The number of entities based on the current EntityQuery properties.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateEntityCountWithoutFiltering">
            <summary>
            Calculates the number of entities selected by this EntityQuery, ignoring any set filters.
            </summary>
            <remarks>
            The EntityQuery must execute to calculate the entity count. If you are checking for whether the entity count equals zero, consider the more efficient IsEmptyIgnoreFilter property.
            </remarks>
            <returns>The number of entities based on the current EntityQuery properties.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateChunkCount">
            <summary>
            Calculates the number of chunks that match this EntityQuery, taking into account all active query filters and enabled components.
            </summary>
            <remarks>
            This count will not include chunks that do not pass any active chunk-level filters
            (e.g. <see cref="M:Unity.Entities.EntityQuery.SetSharedComponentFilter``1(``0)"/>), nor any chunks where zero entities have all
            the required components enabled.
            </remarks>
            <returns>The number of chunks based on the current EntityQuery properties.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering">
            <summary>
            Calculates the number of chunks that match this EntityQuery, ignoring any set filters.
            </summary>
            <remarks>
            The EntityQuery must execute to calculate the chunk count.
            </remarks>
            <returns>The number of chunks based on the current EntityQuery properties.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateFilteredChunkIndexArray(Unity.Collections.Allocator)">
             <summary>
             Generates an array which gives the index of each chunk relative to the set of chunks that currently match
             the query, after taking all active filtering into account.
             </summary>
             <param name="allocator">The allocator used to allocate the output array.</param>
             <returns>An array of integers, where array[N] is the index of chunk N among the list of
             chunks that match this query, once all chunk- and entity-level filtering has been applied.
             If chunk N is filtered out of the query, array[N] will be -1.
             The size of this array is given by <see cref="M:Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering"/>.</returns>
             <remarks>
             Note that the chunk index used to access the output array's elements should be relative to the full,
             unfiltered list of chunks matched by this query. Most commonly, this is the chunkIndex parameter available
             within <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>. For queries with no chunk filtering and no enableable components,
             array[N] will equal N.
            
             This function will automatically block until any running jobs which could affect its output have completed.
             For a non-blocking implementation, use <see cref="M:Unity.Entities.EntityQuery.CalculateFilteredChunkIndexArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/>.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateFilteredChunkIndexArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
             <summary>
             Asynchronously generates an array which gives the index of each chunk relative to the set of chunks that
             currently match the query, after taking all active filtering into account.
             </summary>
             <param name="allocator">The allocator used to allocate the output array.</param>
             <param name="additionalInputDep">A job handle which the newly scheduled job will depend upon, in addition to
             the dependencies automatically determined by the component safety system.</param>
             <param name="outJobHandle">An `out` parameter assigned the handle to the internal job that populates the
             output array.</param>
             <returns>An array of integers, where array[N] is the index of chunk N among the list of
             chunks that match this query, once all chunk- and entity-level filtering has been applied.
             If chunk N is filtered out of the query, array[N] will be -1.
             The size of this array is given by <see cref="M:Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering"/>. This array's contents
             must not be accessed until <paramref name="outJobHandle"/> has been completed.</returns>
             <remarks>
             Note that the chunk index used to access the output array's elements should be relative to the full,
             unfiltered list of chunks matched by this query. Most commonly, this is the chunkIndex parameter available
             within <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>. For queries with no chunk filtering and no enableable components,
             array[N] will equal N.
            
             This function will automatically insert dependencies any running jobs which could affect its output.
             For a blocking implementation, use <see cref="M:Unity.Entities.EntityQuery.CalculateFilteredChunkIndexArray(Unity.Collections.Allocator)"/>.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateBaseEntityIndexArray(Unity.Collections.Allocator)">
             <summary>
             Generates an array containing the index of the first entity within each chunk, relative to the list of
             entities that match this query.
             </summary>
             <param name="allocator">The allocator used to allocate the output array.</param>
             <returns>An array of integers, where array[N] is the index of the first entity in chunk N among the list of
             entities that match this query. The size of this array is given by
             <see cref="M:Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering"/>.</returns>
             <remarks>
             Note that the chunk index used to access the output array's elements should be relative to the full,
             unfiltered list of chunks matched by this query. Most commonly, this is the chunkIndex parameter available
             within <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.
            
             This function will automatically block until any running jobs which could affect its output have completed.
             For a non-blocking implementation, use <see cref="M:Unity.Entities.EntityQuery.CalculateBaseEntityIndexArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/>.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CalculateBaseEntityIndexArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
             <summary>
             Asynchronously generates an array containing the index of the first entity within each chunk, relative to the
             list of entities that match this query.
             </summary>
             <param name="allocator">The allocator used to allocate the output array.</param>
             <param name="additionalInputDep">A job handle which the newly scheduled job will depend upon, in addition to
             the dependencies automatically determined by the component safety system.</param>
             <param name="outJobHandle">An `out` parameter assigned the handle to the internal job that populates the
             output array.</param>
             <returns>An array of integers, where array[N] is the index of the first entity in chunk N among the list of
             entities that match this query. The size of this array is given by
             <see cref="M:Unity.Entities.EntityQuery.CalculateChunkCountWithoutFiltering"/>. This array's contents must not be accessed until
             <paramref name="outJobHandle"/> has been completed.</returns>
             <remarks>
             Note that the chunk index used to access the output array's elements should be relative to the full,
             unfiltered list of chunks matched by this query. Most commonly, this is the chunkIndex parameter available
             within <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.
            
             This function will automatically insert dependencies any running jobs which could affect its output.
             For a blocking implementation, use <see cref="M:Unity.Entities.EntityQuery.CalculateBaseEntityIndexArray(Unity.Collections.Allocator)"/>.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetIndexInEntityQuery(Unity.Entities.TypeIndex)">
             <summary>
                 Index of a ComponentType in this EntityQuery's RequiredComponents list.
                 For example, you have a EntityQuery that requires these ComponentTypes: ObjectPosition, ObjectVelocity, and Color.
            
                 These are their type indices (according to the TypeManager):
                     Position.TypeIndex == 3
                     Velocity.TypeIndex == 5
                        Color.TypeIndex == 17
            
                 RequiredComponents: [Position -> Velocity -> Color] (a linked list)
                 Given Velocity's TypeIndex (5), the return value would be 1, since Velocity is in slot 1 of RequiredComponents.
             </summary>
             <param name="componentType">Index of a ComponentType in the TypeManager</param>
             <returns>An index into RequiredComponents.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CreateArchetypeChunkArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> instead.
             </summary>
             <remarks>
             **Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> instead.
            
             Use <paramref name="outJobHandle"/> as a dependency for jobs that use the returned chunk array.
             <seealso cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkArray(Unity.Collections.Allocator)"/>.</remarks>
             <param name="allocator">Allocator to use for the array.</param>
             <param name="outJobHandle">An `out` parameter assigned the handle to the internal job
             that gathers the chunks matching this EntityQuery.
             </param>
             <returns>NativeArray of all the chunks containing entities matching this query.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToArchetypeChunkListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)">
            <summary>
            Asynchronously creates a list of the chunks containing entities matching this EntityQuery.
            </summary>
            <remarks>
            Use <paramref name="outJobHandle"/> as a dependency for jobs that use the returned chunk array.
            <seealso cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkArray(Unity.Collections.Allocator)"/>.</remarks>
            <param name="allocator">Allocator to use for the list.</param>
            <param name="outJobHandle">An `out` parameter assigned the handle to the internal job
            that gathers the chunks matching this EntityQuery.
            </param>
            <returns>A list containing all the chunks selected by the query. The contents of this list (including
            the list's `Length` property) must not be accessed before <paramref name="outJobHandle"/> has been completed. To pass this list to a job
            that expects a <see cref="T:Unity.Collections.NativeArray`1"/>, use <see cref="M:Unity.Collections.NativeList`1.AsDeferredJobArray"/>.</returns>
            <seealso cref="T:Unity.Jobs.IJobParallelForDefer"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToArchetypeChunkListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
            <summary>
            Asynchronously creates a list of the chunks containing entities matching this EntityQuery.
            </summary>
            <remarks>
            Use <paramref name="outJobHandle"/> as a dependency for jobs that use the returned chunk array.
            <seealso cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkArray(Unity.Collections.Allocator)"/>. If the query contains enableable
            components, chunks that contain zero entities with all relevant components enabled will not be included
            in the output list.</remarks>
            <param name="allocator">Allocator to use for the list.</param>
            <param name="additionalInputDep">A job handle which the newly scheduled job will depend upon, in addition to
            the dependencies automatically determined by the component safety system.</param>
            <param name="outJobHandle">An `out` parameter assigned the handle to the internal job
            that gathers the chunks matching this EntityQuery.
            </param>
            <returns>A list containing all the chunks matched by the query. The contents of this list (including
            the list's `Length` property) must not be accessed before <paramref name="outJobHandle"/> has been completed. To pass this list to a job
            that expects a <see cref="T:Unity.Collections.NativeArray`1"/>, use <see cref="M:Unity.Collections.NativeList`1.AsDeferredJobArray"/>.</returns>
            <seealso cref="T:Unity.Jobs.IJobParallelForDefer"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToArchetypeChunkArray(Unity.Collections.Allocator)">
            <summary>
            Synchronously creates an array of the chunks containing entities matching this EntityQuery.
            </summary>
            <remarks>This method blocks until the internal job that performs the query completes.
            <seealso cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/>. If the query contains enableable
            components, chunks that contain zero entities with all relevant components enabled will not be included
            in the output list.</remarks>
            <param name="allocator">Allocator to use for the array.</param>
            <returns>A NativeArray of all the chunks in this matched by this query.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CreateArchetypeChunkArray(Unity.Collections.Allocator)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.ToArchetypeChunkArray(Unity.Collections.Allocator)"/> instead.</summary>
            <param name="allocator">Allocator to use for the array.</param>
            <returns>A NativeArray of all the chunks in this matched by this query.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToEntityArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.ToEntityListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.ToEntityListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> instead.
            
             Creates (and asynchronously populates) a NativeArray containing the selected entities.</remarks>
             <param name="allocator">The type of memory to allocate.</param>
             <param name="jobhandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
             that uses the output data.</param>
             <returns>An array containing all the entities selected by the query. The contents of this array must not be
             accessed before <paramref name="jobhandle"/> has been completed..</returns>
             <exception cref="T:System.InvalidOperationException">Thrown in the query contains any enableable components.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToEntityListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)">
            <summary>
            Creates (and asynchronously populates) a NativeList containing the selected entities. Since the exact number of entities matching
            the query won't be known until the job runs, this method returns a <see cref="T:Unity.Collections.NativeList`1"/>.
            </summary>
            <param name="allocator">The type of memory to allocate.</param>
            <param name="outJobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
            that uses the output data.</param>
            <remarks>The job scheduled by this call will automatically use the component safety system to determine its input dependencies,
            to avoid the most common race conditions. If additional input dependencies are required beyond what the component safety system
            knows about, use <see cref="M:Unity.Entities.EntityQuery.ToEntityListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/>.</remarks>
            <returns>A list containing all the entities selected by the query. The contents of this list (including
            the list's `Length` property) must not be accessed before <paramref name="outJobHandle"/> has been completed. To pass this list to a job
            that expects a <see cref="T:Unity.Collections.NativeArray`1"/>, use <see cref="M:Unity.Collections.NativeList`1.AsDeferredJobArray"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToEntityListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
            <summary>
            Creates (and asynchronously populates) a NativeList containing the selected entities. Since the exact number of entities matching
            the query won't be known until the job runs, this method returns a <see cref="T:Unity.Collections.NativeList`1"/>.
            </summary>
            <param name="allocator">The type of memory to allocate.</param>
            <param name="additionalInputDep">A job handle which the newly scheduled job will depend upon, in addition to
            the dependencies automatically determined by the component safety system.</param>
            <param name="outJobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
            that uses the output data.</param>
            <returns>A list containing all the entities selected by the query. The contents of this list (including
            the list's `Length` property) must not be accessed before <paramref name="outJobHandle"/> has been completed. To pass this list to a job
            that expects a <see cref="T:Unity.Collections.NativeArray`1"/>, use <see cref="M:Unity.Collections.NativeList`1.AsDeferredJobArray"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToEntityArray(Unity.Collections.Allocator)">
            <summary>
            Creates a NativeArray containing the selected entities.
            </summary>
            <remarks>This version of the function blocks on all registered jobs against the relevant query components.
            For a non-blocking variant, see <see cref="M:Unity.Entities.EntityQuery.ToEntityListAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/></remarks>
            <param name="allocator">The type of memory to allocate.</param>
            <returns>An array containing all the entities selected by the EntityQuery.</returns>
        </member>
        <member name="T:Unity.Entities.EntityQuery.GatherEntitiesResult">
            <summary>
            This struct should be treated as internal for practical purposes, but must be in the public API to be used by source generators.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQuery.GatherEntitiesResult.StartingOffset">
             <summary>
            
             </summary>
        </member>
        <member name="F:Unity.Entities.EntityQuery.GatherEntitiesResult.EntityCount">
             <summary>
            
             </summary>
        </member>
        <member name="F:Unity.Entities.EntityQuery.GatherEntitiesResult.EntityBuffer">
             <summary>
            
             </summary>
        </member>
        <member name="F:Unity.Entities.EntityQuery.GatherEntitiesResult.EntityArray">
             <summary>
            
             </summary>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToComponentDataArrayAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> instead.
             </summary>
             <remarks> **Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> instead.
            
             Creates (and asynchronously populates) a NativeArray containing the value of component <typeparamref name="T"/>
             for the selected entities.</remarks>
             <param name="allocator">The type of memory to allocate.</param>
             <param name="jobhandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
             that uses the output data.</param>
             <typeparam name="T">The component type.</typeparam>
             <returns>An array containing all the values of component type <typeparamref name="T"/> selected by the query.
             The contents of this array must not be accessed before <paramref name="jobhandle"/> has been completed.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown in the query contains any enableable components.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)">
            <summary>
            Creates (and asynchronously populates) a NativeList containing the value of component <typeparamref name="T"/>
            for the selected entities. Since the exact number of entities matching the query won't be known until the
            job runs, this method returns a <see cref="T:Unity.Collections.NativeList`1"/>.
            </summary>
            <param name="allocator">The type of memory to allocate.</param>
            <param name="outJobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
            that uses the output data.</param>
            <typeparam name="T">The component type.</typeparam>
            <remarks>The job scheduled by this call will automatically use the component safety system to determine its input dependencies,
            to avoid the most common race conditions. If additional input dependencies are required beyond what the component safety system
            knows about, use <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/>.</remarks>
            <returns>A list containing all the values of component type <typeparamref name="T"/> selected by the query. The contents of this list (including
            the list's `Length` property) must not be accessed before <paramref name="outJobHandle"/> has been completed. To pass this list to a job
            that expects a <see cref="T:Unity.Collections.NativeArray`1"/>, use <see cref="M:Unity.Collections.NativeList`1.AsDeferredJobArray"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
            <summary>
            Creates (and asynchronously populates) a NativeList containing the value of component <typeparamref name="T"/>
            for the selected entities. Since the exact number of entities matching the query won't be known until the
            job runs, this method returns a <see cref="T:Unity.Collections.NativeList`1"/>.
            </summary>
            <param name="allocator">The type of memory to allocate.</param>
            <param name="additionalInputDep">A job handle which the newly scheduled job will depend upon, in addition to
            the dependencies automatically determined by the component safety system.</param>
            <param name="outJobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
            that uses the output data.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>A list containing all the values of component type <typeparamref name="T"/> selected by the query. The contents of this list (including
            the list's `Length` property) must not be accessed before <paramref name="outJobHandle"/> has been completed. To pass this list to a job
            that expects a <see cref="T:Unity.Collections.NativeArray`1"/>, use <see cref="M:Unity.Collections.NativeList`1.AsDeferredJobArray"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToComponentDataArray``1(Unity.Collections.Allocator)">
            <summary>
            Creates a NativeArray containing the components of type T for the selected entities.
            </summary>
            <param name="allocator">The type of memory to allocate.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>An array containing the specified component for all the entities selected
            by the EntityQuery.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if you request a component that is not part of
            the group.</exception>
            <remarks>This version of the function blocks on all registered jobs against the relevant query components.
            For a non-blocking variant, see <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/></remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ToComponentDataArray``1">
            <summary>
            Creates a managed array containing the components of type T for the selected entities.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>A managed array containing the specified component for all the entities selected
            by the EntityQuery.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if you request a component that is not part of
            the group.</exception>
            <remarks>This version of the function blocks on all registered jobs against the relevant query components.
            For a non-blocking variant, see <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/></remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CopyFromComponentDataArray``1(Unity.Collections.NativeArray{``0})">
            <summary>
            Copies the values of component type <typeparamref name="T"/> in a NativeArray into the entities matched by this query.
            </summary>
            <param name="componentDataArray">The values to copy into the matching entities.</param>
            <typeparam name="T">The component type.</typeparam>
            <remarks>This version of the function blocks on all registered jobs that access any of the query components.
            For a non-blocking variant, see <see cref="M:Unity.Entities.EntityQuery.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle@)"/></remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CopyFromComponentDataArrayAsync``1(Unity.Collections.NativeArray{``0},Unity.Jobs.JobHandle@)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle@)"/> instead. </summary>
             <param name="componentDataArray">The values to copy into the matching entities.</param>
             <param name="jobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
             that should happen after this operation completes.</param>
             <typeparam name="T">The component type.</typeparam>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle@)"/> instead.
            
             Asynchronously copies the values of component type <typeparamref name="T"/> in a NativeArray into the entities
             matched by this query.
             This method is generally used in conjunction with <see cref="M:Unity.Entities.EntityQuery.ToComponentDataArrayAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> to extract component values,
             pass them into some code that expects a flat array of values, and then scatter the updated values back to entities.</remarks>
             <exception cref="T:System.InvalidOperationException">Thrown in the query contains any enableable components.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle@)">
            <summary>
            Asynchronously copies the values of component type <typeparamref name="T"/> in a NativeList into the entities
            matched by this query.</summary>
            <param name="componentDataList">The values to copy into the matching entities.</param>
            <param name="outJobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
            that should happen after this operation completes.</param>
            <typeparam name="T">The component type.</typeparam>
            <remarks>The job scheduled by this call will automatically use the component safety system to determine its input dependencies,
            to avoid the most common race conditions. If additional input dependencies are required beyond what the component safety system
            knows about, use <see cref="M:Unity.Entities.EntityQuery.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/>.</remarks>
            <remarks>This method is generally used in conjunction with <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle@)"/> to extract component values,
            pass them into some code that expects a flat array of values, and then scatter the updated values back to entities.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
            <summary>
            Asynchronously copies the values of component type <typeparamref name="T"/> in a NativeList into the entities
            matched by this query.</summary>
            <param name="componentDataList">The values to copy into the matching entities.</param>
            <param name="additionalInputDep">A job handle which the newly scheduled job will depend upon, in addition to
            the dependencies automatically determined by the component safety system.</param>
            <param name="outJobHandle">An `out` parameter assigned a handle that you can use as a dependency for a Job
            that should happen after this operation completes.</param>
            <typeparam name="T">The component type.</typeparam>
            <remarks>This method is generally used in conjunction with <see cref="M:Unity.Entities.EntityQuery.ToComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> to extract component values,
            pass them into some code that expects a flat array of values, and then scatter the updated values back to entities.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <typeparamref name="T"/> is not part of the query.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetSingletonEntity">
            <summary>
            Attempts to retrieve the single entity that this query matches.
            </summary>
            <returns>The only entity matching this query.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the number of entities that match this query is not exactly one.</exception>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetSingleton``1">
            <summary>
            Gets the value of a singleton component. Note that if querying a singleton component from a system-associated entity,
            the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <remarks>A singleton component is a component of which only one instance exists that satisfies this query.</remarks>
            <typeparam name="T">The component type.</typeparam>
            <returns>A copy of the singleton component.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <seealso cref="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonBuffer``1(System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetSingletonRW``1">
            <summary>
            Gets the value of a singleton component. Note that if querying a singleton component from a system-associated entity,
            the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <remarks>A singleton component is a component of which only one instance exists that satisfies this query.</remarks>
            <typeparam name="T">The component type.</typeparam>
            <returns>A copy of the singleton component.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <seealso cref="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonBuffer``1(System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.TryGetSingleton``1(``0@)">
            <summary>
            Gets the value of a singleton component, and returns whether or not a singleton component of the specified type matches inside the <see cref="T:Unity.Entities.EntityQuery"/>.
            Note that if querying a singleton component from a system-associated entity, the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The component. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="T:Unity.Entities.World"/>, this is assigned a default value</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> exists in the <see cref="T:Unity.Entities.World"/> with the provided component type.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.TryGetSingletonRW``1(Unity.Entities.RefRW{``0}@)">
            <summary>
            Gets a reference to the value of a singleton component, and returns whether or not a singleton component of the specified type matches inside the <see cref="T:Unity.Entities.EntityQuery"/>.
            Note that if querying a singleton component from a system-associated entity, the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <remarks>A singleton component is a component of which only one instance exists that satisfies this query.</remarks>
            <typeparam name="T">The component type.</typeparam>
            <param name="value">The reference of the component</param>
            <returns>A reference to the singleton component.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonRW``1"/>
            <seealso cref="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonBuffer``1(System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.HasSingleton``1">
            <summary>
            Checks whether a singelton component of the specified type exists. Note that if querying a singleton component from a system-associated entity,
            the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <returns>True, if a singleton is found to match exactly once with the specified type<see cref="T:Unity.Entities.EntityQuery"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.TryGetSingletonBuffer``1(Unity.Entities.DynamicBuffer{``0}@,System.Boolean)">
            <summary>
            Gets the value of a singleton buffer component, and returns whether or not a singleton buffer component of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            Note that if querying a singleton buffer component from a system-associated entity, the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> subtype of the singleton buffer component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The buffer. if an <see cref="T:Unity.Entities.Entity"/> with the specified type does not exist in the <see cref="T:Unity.Entities.World"/>, this is assigned a default value</param>
            <param name="isReadOnly">Whether the buffer data is read-only or not. Set to false by default.</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> matches the <see cref="T:Unity.Entities.EntityQuery"/> with the provided component type.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.TryGetSingletonEntity``1(Unity.Entities.Entity@)">
            <summary>
            Gets the singleton Entity, and returns whether or not a singleton <see cref="T:Unity.Entities.Entity"/> of the specified type exists in the <see cref="T:Unity.Entities.World"/>.
            </summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.
            This component type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/></typeparam>
            <param name="value">The <see cref="T:Unity.Entities.Entity"/> associated with the specified singleton component.
             If a singleton of the specified types does not exist in the current <see cref="T:Unity.Entities.World"/>, this is set to Entity.Null</param>
            <returns>True, if exactly one <see cref="T:Unity.Entities.Entity"/> matches the <see cref="T:Unity.Entities.EntityQuery"/> with the provided component type.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetSingletonBuffer``1(System.Boolean)">
            <summary>
            Gets the value of a singleton buffer component. Note that if querying a singleton buffer component from a system-associated entity,
            the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
            </summary>
            <remarks>A singleton buffer component is a component of which only one instance exists that satisfies this query.
            There is no SetSingletonBuffer(); to change the contents of a singleton buffer, pass isReadOnly=false to GetSingletonBuffer()
            and then modify the contents directly.</remarks>
            <typeparam name="T">The buffer element type.</typeparam>
            <param name="isReadOnly">If the caller does not need to modify the buffer contents, pass true here.</param>
            <returns>The singleton buffer.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetSingleton``1(``0)">
             <summary>
             Sets the value of a singleton component. Note that if querying a singleton component from a system-associated entity,
             the query must include either EntityQueryOptions.IncludeSystems or the SystemInstance component.
             </summary>
             <remarks>
             For a component to be a singleton, there can be only one instance of that component
             that satisfies this query.
            
             **Note:** singletons are otherwise normal entities. The EntityQuery and <see cref="T:Unity.Entities.ComponentSystemBase"/>
             singleton functions add checks that you have not created two instances of a
             type that can be accessed by this singleton query, but other APIs do not prevent such accidental creation.
            
             To create a singleton, create an entity with the singleton component.
            
             For example, if you had a component defined as:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="singleton-type-example" title="Singleton"/>
             </example>
            
             You could create a singleton as follows:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="create-singleton" title="Create Singleton"/>
             </example>
            
             To update the singleton component after creation, you can use an EntityQuery object that
             selects the singleton entity and call this `SetSingleton()` function:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="set-singleton" title="Set Singleton"/>
             </example>
            
             You can set and get the singleton value from a system: see <seealso cref="M:Unity.Entities.ComponentSystemBase.SetSingleton``1(``0)"/>
             and <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>.
             </remarks>
             <param name="value">An instance of type T containing the values to set.</param>
             <typeparam name="T">The component type.</typeparam>
             <exception cref="T:System.InvalidOperationException">Thrown if more than one instance of this component type
             exists in the world or the component type appears in more than one archetype.</exception>
             <seealso cref="M:Unity.Entities.EntityQuery.GetSingleton``1"/>
             <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetEnabledBitsOnAllChunks``1(System.Boolean)">
            <summary>
            Sets or clears the "is enabled" bit for the provided component on all entities in all chunks matched by the
            query.</summary>
            <typeparam name="T">The component type which should be enabled or disabled on all matching chunks. This type
            must be included in the query's required types, and must implement <see cref="T:Unity.Entities.IEnableableComponent"/>.</typeparam>
            <param name="value">If true, the component <typeparamref name="T"/> will be enabled on all entities in all
            matching chunks. Otherwise, the component will be disabled on all components in all chunks.</param>
            <remarks>The current value of the bits are ignored; this function will enable disabled components on
            entities, even if the component being disabled would cause the entity to not match the query. If any jobs
            are currently running which read or write the target component, this function will block until they complete
            before performing the requested operation.</remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CompareComponents(Unity.Entities.ComponentType[])">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.CompareQuery(Unity.Entities.EntityQueryBuilder@)"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.CompareQuery(Unity.Entities.EntityQueryBuilder@)"/> instead.
            
             Compares a list of component types to the types defining this EntityQuery.
             Only required types in the query are used as the basis for the comparison.
             If you include types that the query excludes or only includes as optional,
             the comparison returns false.</remarks>
             <param name="componentTypes">An array of ComponentType objects.</param>
             <returns>True, if the list of types, including any read/write access specifiers,
             matches the list of required component types of this EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CompareComponents(Unity.Collections.NativeArray{Unity.Entities.ComponentType})">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.CompareQuery(Unity.Entities.EntityQueryBuilder@)"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.CompareQuery(Unity.Entities.EntityQueryBuilder@)"/> instead.
            
             Compares a list of component types to the types defining this EntityQuery.
             Only required types in the query are used as the basis for the comparison.
             If you include types that the query excludes or only includes as optional,
             the comparison returns false. Do not include the <see cref="T:Unity.Entities.Entity"/> type, which
             is included implicitly.</remarks>
             <param name="componentTypes">An array of ComponentType objects.</param>
             <returns>True, if the list of types, including any read/write access specifiers,
             matches the list of required component types of this EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CompareQuery(Unity.Entities.EntityQueryBuilder@)">
            <summary>
            Compares a query description to the description defining this EntityQuery.
            </summary>
            <remarks>The `All`, `Any`, and `None` components in the query description are
            compared to the corresponding list in this EntityQuery.</remarks>
            <param name="queryDesc">The query description to compare.</param>
            <returns>True, if the query description contains the same components with the same
            read/write access modifiers as this EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.ResetFilter">
            <summary>
            Resets this EntityQuery's chunk filter settings to the default (all filtering disabled).
            </summary>
            <remarks>
            Removes references to shared component data, if applicable.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetSharedComponentFilterManaged``1(``0)">
            <summary>
            Filters this EntityQuery so that it only selects entities with a shared component of type <typeparamref name="SharedComponent"/>
            equal to <paramref name="sharedComponent"/>.
            </summary>
            <remarks>
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddSharedComponentFilterManaged``1(``0)"/>.
            </remarks>
            <param name="sharedComponent">The shared component value to filter.</param>
            <typeparam name="SharedComponent">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetSharedComponentFilter``1(``0)">
            <summary>
            Filters this EntityQuery so that it only selects entities with shared component of type <typeparamref name="SharedComponent"/>
            equal to <paramref name="sharedComponent"/>.
            </summary>
            <remarks>
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddSharedComponentFilter``1(``0)"/>.
            </remarks>
            <param name="sharedComponent">The shared component value to filter.</param>
            <typeparam name="SharedComponent">The type of unmanaged shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetSharedComponentFilterManaged``2(``0,``1)">
            <summary>
            Filters this EntityQuery based on the values of two separate shared components.
            </summary>
            <remarks>
            The filter only selects entities which have both a shared component of type <typeparamref name="SharedComponent1"/>
            whose value equals <paramref name="sharedComponent1"/> and a shared component of type
            <typeparamref name="SharedComponent2"/> whose value equals <paramref name="sharedComponent2"/>.
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddSharedComponentFilterManaged``1(``0)"/>.
            </remarks>
            <param name="sharedComponent1">Shared component value to filter.</param>
            <param name="sharedComponent2">Shared component value to filter.</param>
            <typeparam name="SharedComponent1">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
            <typeparam name="SharedComponent2">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetSharedComponentFilter``2(``0,``1)">
            <summary>
            Filters this EntityQuery based on the values of two separate unmanaged shared components.
            </summary>
            <remarks>
            The filter only selects entities which have both a shared component of type <typeparamref name="SharedComponent1"/>
            whose value equals <paramref name="sharedComponent1"/> and a shared component of type
            <typeparamref name="SharedComponent2"/> whose value equals <paramref name="sharedComponent2"/>.
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddSharedComponentFilter``1(``0)"/>.
            </remarks>
            <param name="sharedComponent1">Shared component value to filter.</param>
            <param name="sharedComponent2">Shared component value to filter.</param>
            <typeparam name="SharedComponent1">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
            <typeparam name="SharedComponent2">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetChangedVersionFilter(Unity.Entities.ComponentType)">
            <summary>
            Filters out entities in chunks for which the specified component has not changed.
            </summary>
            <remarks>
            Saves a given ComponentType's index in RequiredComponents in this group's Changed filter.
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddChangedVersionFilter(Unity.Entities.ComponentType)"/>.
            </remarks>
            <param name="componentType">ComponentType to mark as changed on this EntityQuery's filter.</param>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetChangedVersionFilter(Unity.Entities.ComponentType[])">
            <summary>
            Filters out entities in chunks for which the specified component has not changed.
            </summary>
            <remarks>
            Saves a given ComponentType's index in RequiredComponents in this group's Changed filter.
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddChangedVersionFilter(Unity.Entities.ComponentType)"/>.
            </remarks>
            <param name="componentType">ComponentTypes to mark as changed on this EntityQuery's filter.</param>
        </member>
        <member name="M:Unity.Entities.EntityQuery.AddChangedVersionFilter(Unity.Entities.ComponentType)">
            <summary>
            Filters out entities in chunks for which the specified component has not changed. Additive with other filter functions.
            </summary>
            <remarks>
            Saves a given ComponentType's index in RequiredComponents in this group's Changed filter.
            </remarks>
            <param name="componentType">ComponentType to mark as changed on this EntityQuery's filter.</param>
        </member>
        <member name="M:Unity.Entities.EntityQuery.AddSharedComponentFilterManaged``1(``0)">
            <summary>
            Filters this EntityQuery so that it only selects entities with a shared component of type <typeparamref name="SharedComponent"/>
            equal to <paramref name="sharedComponent"/>. Additive with other filter functions.
            </summary>
            <param name="sharedComponent">The shared component value to filter.</param>
            <typeparam name="SharedComponent">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQuery.AddSharedComponentFilter``1(``0)">
            <summary>
            Filters this EntityQuery so that it only selects entities with an unmanaged shared component of type <typeparamref name="SharedComponent"/>
            equal to <paramref name="sharedComponent"/>. Additive with other filter functions.
            </summary>
            <param name="sharedComponent">The unmanaged shared component value to filter.</param>
            <typeparam name="SharedComponent">The type of shared component. This type must also be
            one of the types used to create the EntityQuery.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQuery.SetOrderVersionFilter">
            <summary>
            Filters out entities in chunks for which no structural changes have occurred.
            </summary>
            <remarks>
            This call disables any existing chunk filtering on this query. For additive filtering, use <see cref="M:Unity.Entities.EntityQuery.AddOrderVersionFilter"/>.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.AddOrderVersionFilter">
            <summary>
            Filters out entities in chunks for which no structural changes have occurred. Additive with other filter functions.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQuery.CompleteDependency">
            <summary>
            Ensures all jobs running on this EntityQuery complete.
            </summary>
            <remarks>An entity query uses jobs internally when required to create arrays of
            entities and chunks. This function completes those jobs and returns when they are finished.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetDependency">
            <summary>
            Combines all dependencies in this EntityQuery into a single JobHandle.
            </summary>
            <remarks>An entity query uses jobs internally when required to create arrays of
            entities and chunks.</remarks>
            <returns>JobHandle that represents the combined dependencies of this EntityQuery</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.AddDependency(Unity.Jobs.JobHandle)">
            <summary>
            Adds another job handle to this EntityQuery's dependencies.
            </summary>
            <remarks>An entity query uses jobs internally when required to create arrays of
            entities and chunks. This junction adds an external job as a dependency for those
            internal jobs.</remarks>
            <param name="job">Handle for the job to add to the query's dependencies.</param>
            <returns>The new combined job handle for the query's dependencies.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetCombinedComponentOrderVersion">
            <summary>
            Gets the version for the combined components in this EntityQuery.
            </summary>
            <returns>Returns the version.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.HasFilter">
            <summary>
            Reports whether this entity query has a filter applied to it.
            </summary>
            <returns>Returns true if the query has a filter, returns false if the query does not have a filter.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetEntityQueryMask">
            <summary>
            Returns an EntityQueryMask, which can be used to quickly determine if an entity matches the query.
            </summary>
            <remarks>A maximum of 1024 EntityQueryMasks can be allocated per World.</remarks>
            <returns>The query mask associated with this query.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.Matches(Unity.Entities.Entity)">
             <summary>
             Returns true if the entity matches the query, false if it does not.
             </summary>
             <param name="e">The entity to check for match</param>
             <remarks>
             This function will automatically block on any running jobs writing to component data that would affect the
             results of the check. For a non-blocking variant that ignores any query filtering, see <see cref="M:Unity.Entities.EntityQuery.MatchesIgnoreFilter(Unity.Entities.Entity)"/>.
            
             This function creates a <see cref="T:Unity.Entities.EntityQueryMask"/>, if one does not exist for this query already.
             A maximum of 1024 EntityQueryMasks can be allocated per World.
             </remarks>
             <returns>True if the entity is matched by the query, or false if not.</returns>
             <seealso cref="M:Unity.Entities.EntityQuery.MatchesIgnoreFilter(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.MatchesIgnoreFilter(Unity.Entities.Entity)">
            <summary>
            Returns true if the entity's archetype is matched by this query, ignoring all query
            filtering (including chunk filters and enableable components).
            </summary>
            <param name="e">The entity to check for match</param>
            <remarks>This function creates an <see cref="T:Unity.Entities.EntityQueryMask"/>, if one does not exist for this query already. A maximum
            of 1024 EntityQueryMasks can be allocated per World. This function throws an exception if the
            query contains enableable components.</remarks>
            <returns>True if the entity's archetype is matched by the query, or false if not.</returns>
            <seealso cref="M:Unity.Entities.EntityQuery.Matches(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.EntityQuery.MatchesNoFilter(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityQuery.MatchesIgnoreFilter(Unity.Entities.Entity)"/> instead.</summary>
            <param name="e">The entity to check for match</param>
            <returns>True if the entity's archetype is matched by the query, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.GetEntityQueryDesc">
            <summary>
            Returns an EntityQueryDesc, which can be used to re-create the EntityQuery.
            </summary>
            <returns>A description of this query</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery._GetImpl">
            <summary>
             Internal gen impl
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.op_Equality(Unity.Entities.EntityQuery,Unity.Entities.EntityQuery)">
            <summary>
            Test two queries for equality
            </summary>
            <param name="lhs">The left query</param>
            <param name="rhs">The right query</param>
            <returns>True if the left and right queries are equal, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQuery.op_Inequality(Unity.Entities.EntityQuery,Unity.Entities.EntityQuery)">
            <summary>
            Test two queries for inequality
            </summary>
            <param name="lhs">The left query</param>
            <param name="rhs">The right query</param>
            <returns>False if the left and right queries are equal, or true if not.</returns>
        </member>
        <member name="T:Unity.Entities.EntityQueryManagedComponentExtensions">
            <summary>
            Variants of EntityQuery methods that support managed component types
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton``1(Unity.Entities.EntityQuery)">
            <summary>
            Gets the value of a singleton component.
            </summary>
            <remarks>A singleton component is a component of which only one instance exists that satisfies this query.</remarks>
            <typeparam name="T">The component type. This type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/>.</typeparam>
            <param name="query">The query</param>
            <returns>A copy of the singleton component.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the singleton is zero-sized, or if it's an enableable component.</exception>
            <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.SetSingleton``1(Unity.Entities.EntityQuery,``0)"/>
            <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton``1(Unity.Entities.EntityQuery)"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQueryManagedComponentExtensions.TryGetSingleton``1(Unity.Entities.EntityQuery,``0@)">
            <summary>
            Gets the value of a singleton component, for read/write access.
            </summary>
            <remarks>A singleton component is a component of which only one instance exists that satisfies this query.</remarks>
            <param name="query">The query</param>
            <param name="value">The component.</param>
            <typeparam name="T">The component type. This type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/>.</typeparam>
            <returns>A copy of the singleton component.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the singleton is zero-size, or if it implements an enableable component.</exception>
            <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton``1(Unity.Entities.EntityQuery)"/>
            <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingletonRW``1(Unity.Entities.EntityQuery)"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingletonRW``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingletonRW``1(Unity.Entities.EntityQuery)">
            <summary>
            Gets the value of a singleton component, for read/write access.
            </summary>
            <remarks>A singleton component is a component of which only one instance exists that satisfies this query.</remarks>
            <param name="query">The query</param>
            <typeparam name="T">The component type. This type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/>.</typeparam>
            <returns>A copy of the singleton component.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the singleton is zero-size, or if it implements an enableable component.</exception>
            <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton``1(Unity.Entities.EntityQuery)"/>
            <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingletonRW``1(Unity.Entities.EntityQuery)"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingletonRW``1"/>
        </member>
        <member name="M:Unity.Entities.EntityQueryManagedComponentExtensions.SetSingleton``1(Unity.Entities.EntityQuery,``0)">
             <summary>
             Sets the value of a singleton component.
             </summary>
             <remarks>
             For a component to be a singleton, there can be only one instance of that component
             that satisfies this query.
            
             **Note:** singletons are otherwise normal entities. The EntityQuery and <see cref="T:Unity.Entities.ComponentSystemBase"/>
             singleton functions add checks that you have not created two instances of a
             type that can be accessed by this singleton query, but other APIs do not prevent such accidental creation.
            
             To create a singleton, create an entity with the singleton component.
            
             For example, if you had a component defined as:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="singleton-type-example" title="Singleton"/>
             </example>
            
             You could create a singleton as follows:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="create-singleton" title="Create Singleton"/>
             </example>
            
             To update the singleton component after creation, you can use an EntityQuery object that
             selects the singleton entity and call this `SetSingleton()` function:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="set-singleton" title="Set Singleton"/>
             </example>
            
             You can set and get the singleton value from a system: see <seealso cref="M:Unity.Entities.ComponentSystemBase.SetSingleton``1(``0)"/>
             and <seealso cref="M:Unity.Entities.ComponentSystemBase.GetSingleton``1"/>.
             </remarks>
             <param name="query">The query</param>
             <param name="value">An instance of type T containing the values to set.</param>
             <typeparam name="T">The component type. This type must not implement <see cref="T:Unity.Entities.IEnableableComponent"/>.</typeparam>
             <exception cref="T:System.InvalidOperationException">Thrown if more than one instance of this component type
             exists in the world or the component type appears in more than one archetype.</exception>
             <seealso cref="M:Unity.Entities.EntityQueryManagedComponentExtensions.GetSingleton``1(Unity.Entities.EntityQuery)"/>
             <seealso cref="M:Unity.Entities.EntityQuery.GetSingletonEntity"/>
        </member>
        <member name="T:Unity.Entities.EntityRemapUtility">
            <summary>
            Utility class to remap Entity IDs.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo">
            <summary>
            Structure mapping a target entity to an entity in the current world.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.EntityRemapInfo.SourceVersion">
            <summary>
            The version of the source Entity.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.EntityRemapInfo.Target">
            <summary>
            The target Entity ID after the remapping.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.GetTargets(Unity.Collections.NativeArray{Unity.Entities.Entity}@,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
            <summary>
            Gets the array of Entity targets from an array of <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/>.
            </summary>
            <param name="output">The output array, containing the target Entity IDs.</param>
            <param name="remapping">The source array of <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/> structs.</param>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.AddEntityRemapping(Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo}@,Unity.Entities.Entity,Unity.Entities.Entity)">
            <summary>
            Adds a new <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/> element to a remapping array.
            </summary>
            <param name="remapping">The array of remapped elements.</param>
            <param name="source">The source Entity.</param>
            <param name="target">The target Entity.</param>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.RemapEntity(Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo}@,Unity.Entities.Entity)">
            <summary>
            Remaps a source Entity using the <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/> array.
            </summary>
            <param name="remapping">The array of <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/> used to perform the remapping.</param>
            <param name="source">The source Entity to remap.</param>
            <returns>Returns the remapped Entity ID if it is valid in the current world, otherwise returns Entity.Null.</returns>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.RemapEntity(Unity.Entities.EntityRemapUtility.EntityRemapInfo*,Unity.Entities.Entity)">
            <summary>
            Remaps an entity using the <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/> array.
            </summary>
            <param name="remapping">The array of <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/> used to perform the remapping.</param>
            <param name="source">The source Entity to remap.</param>
            <returns>Returns the remapped Entity ID if it is valid in the current world, otherwise returns Entity.Null.</returns>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.RemapEntityForPrefab(Unity.Entities.Entity*,Unity.Entities.Entity*,System.Int32,Unity.Entities.Entity)">
            <summary>
            Remaps the internal Entity references when instantiating a prefab.
            </summary>
            <param name="remapSrc">The source array of entity references.</param>
            <param name="remapDst">The array of target entities.</param>
            <param name="remappingCount">The size of the source and target arrays.</param>
            <param name="source">The source entity to remap.</param>
            <returns>If the source Entity is found in the <paramref name="remapSrc"/> array, it is remapped.
            Otherwise, returns the <paramref name="source"/> Entity.</returns>
        </member>
        <member name="T:Unity.Entities.EntityRemapUtility.EntityPatchInfo">
            <summary>
            Contains the information for applying a patch on a chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.EntityPatchInfo.Offset">
            <summary>
            The offset within the chunk where the patch is applied.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.EntityPatchInfo.Stride">
            <summary>
            The stride between adjacent entities that need patching.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo">
            <summary>
            Contains the information for applying a patch on a DynamicBuffer in a chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.BufferOffset">
            <summary>Offset within chunk where first buffer header can be found.</summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.BufferStride">
            <summary>Stride between adjacent buffers that need patching.</summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.ElementOffset">
            <summary>Offset (from base pointer of array) where the first entity can be found.</summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo.ElementStride">
            <summary>Stride between adjacent buffer elements.</summary>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.CalculateFieldOffsetsUnmanaged(System.Type,System.Boolean@,System.Boolean@,System.Boolean@,Unity.Collections.NativeList{Unity.Entities.TypeManager.EntityOffsetInfo}@,Unity.Collections.NativeList{Unity.Entities.TypeManager.EntityOffsetInfo}@,Unity.Collections.NativeList{Unity.Entities.TypeManager.EntityOffsetInfo}@)">
            <summary>
            Calculates the field offsets.
            </summary>
            <param name="type">The inspected type.</param>
            <param name="hasEntityRefs">True if the type has any fields of type <see cref="T:Unity.Entities.Entity"/>, otherwise false.</param>
            <param name="hasBlobRefs">True if the type has any fields of type <see cref="T:Unity.Entities.BlobAssetReferenceData"/>, otherwise false.</param>
            <param name="hasWeakAssetRefs">True if the type has fields of type <see cref="T:Unity.Entities.Serialization.UntypedWeakReferenceId"/>, otherwise false.</param>
            <param name="entityOffsets">The offsets of the fields of type <see cref="T:Unity.Entities.Entity"/>.</param>
            <param name="blobOffsets">The offsets of the fields of type <see cref="T:Unity.Entities.BlobAssetReferenceData"/>.</param>
            <param name="weakAssetRefOffsets">The offsets of the fields of type <see cref="T:Unity.Entities.Serialization.UntypedWeakReferenceId"/>.</param>
        </member>
        <member name="T:Unity.Entities.EntityRemapUtility.HasRefResult">
             <summary>
             Specifies if a System.Type has any <see cref="T:Unity.Entities.Entity"/> or <see cref="T:Unity.Entities.BlobAssetReferenceData"/> references in its hierarchy.
             </summary>
             <remarks>
             This enum is returned by <see cref="M:Unity.Entities.EntityRemapUtility.HasEntityReferencesManaged(System.Type,Unity.Entities.EntityRemapUtility.HasRefResult@,Unity.Entities.EntityRemapUtility.HasRefResult@,System.Collections.Generic.Dictionary{System.Type,Unity.Entities.EntityRemapUtility.EntityBlobRefResult},System.Int32)"/>
             which recursively traverses a System.Type and its fields to find entity or blob asset references.
            
             In some cases Unity cannot find all the Entity/Blob references within a type.
             For example, if the type is polymorphic and non-sealed, or if the type hierarchy is deep, making it too expensive
             to be worth inspecting it exhaustively. In this cases, the value <see cref="F:Unity.Entities.EntityRemapUtility.HasRefResult.MayHaveRef"/> specifies that
             although no actual reference was found,
             the type cannot be treated as a type which definitely does not have any references during serialization.
             </remarks>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.HasRefResult.NoRef">
            <summary>The System.Type does not have any References within the entire hierarchy.</summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.HasRefResult.MayHaveRef">
             <summary>
             The System.Type might have References.
             </summary>
             <remarks>
             Cases where we can't say with certainty if the type contains any references include
             if there is a polymorphic non-sealed type, or if the type hierarchy is deeper than the maximum specified recursion depth.
            
             This value can be handled while validating the data for serialization.
             </remarks>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.HasRefResult.HasRef">
            <summary>The System.Type has a reference that was directly seen by the function.</summary>
        </member>
        <member name="T:Unity.Entities.EntityRemapUtility.EntityBlobRefResult">
            <summary>
            Reports whether an Entity blob has any <see cref="T:Unity.Entities.Entity"/> or <see cref="T:Unity.Entities.BlobAssetReferenceData"/> references.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.EntityBlobRefResult.HasEntityRef">
            <summary>
            Specifies if there are any <see cref="T:Unity.Entities.Entity"/> references.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityRemapUtility.EntityBlobRefResult.HasBlobRef">
            <summary>
            Specifies if there are any <see cref="T:Unity.Entities.BlobAssetReferenceData"/> references.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.EntityBlobRefResult.#ctor(Unity.Entities.EntityRemapUtility.HasRefResult,Unity.Entities.EntityRemapUtility.HasRefResult)">
            <summary>
            Initializes and returns an instance of EntityBlobRefResult.
            </summary>
            <param name="hasEntityRef">Specifies if there are any <see cref="T:Unity.Entities.Entity"/> references.</param>
            <param name="hasBlobRef">Specifies if there are any <see cref="T:Unity.Entities.BlobAssetReferenceData"/> references.</param>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.HasEntityReferencesManaged(System.Type,Unity.Entities.EntityRemapUtility.HasRefResult@,Unity.Entities.EntityRemapUtility.HasRefResult@,System.Collections.Generic.Dictionary{System.Type,Unity.Entities.EntityRemapUtility.EntityBlobRefResult},System.Int32)">
            <summary>
            Checks if a type has any <see cref="T:Unity.Entities.Entity"/> or <see cref="T:Unity.Entities.BlobAssetReferenceData"/> references.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="hasEntityReferences">Specifies if the type has any <see cref="T:Unity.Entities.Entity"/> references.</param>
            <param name="hasBlobReferences">Specifies if the type has any <see cref="T:Unity.Entities.BlobAssetReferenceData"/> references.</param>
            <param name="cache">Map of type to <see cref="T:Unity.Entities.EntityRemapUtility.EntityBlobRefResult"/> used to accelerate the type recursion.</param>
            <param name="maxDepth">The maximum depth for the recursion.</param>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.AppendEntityPatches(Unity.Entities.EntityRemapUtility.EntityPatchInfo*,Unity.Entities.TypeManager.EntityOffsetInfo*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds <see cref="T:Unity.Entities.EntityRemapUtility.EntityPatchInfo"/> elements for each of the input offsets.
            </summary>
            <param name="patches">The patch array.</param>
            <param name="offsets">The offset array.</param>
            <param name="offsetCount">The number of offsets in the array.</param>
            <param name="baseOffset">The base offset of the patch.</param>
            <param name="stride">The stride of the patch.</param>
            <returns>Returns a pointer to the next free slot in the <paramref name="patches"/> array.</returns>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.AppendBufferEntityPatches(Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo*,Unity.Entities.TypeManager.EntityOffsetInfo*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds <see cref="T:Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo"/> elements for each of the input offsets.
            </summary>
            <param name="patches">The patch array,</param>
            <param name="offsets">The offset array.</param>
            <param name="offsetCount">The number of offsets in the array.</param>
            <param name="bufferBaseOffset">The offset within chunk where first buffer header can be found.</param>
            <param name="bufferStride">The stride between adjacent buffers that need patching.</param>
            <param name="elementStride">The stride between adjacent buffer elements.</param>
            <returns>Returns a pointer to the next free slot in the <paramref name="patches"/> array.</returns>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.PatchEntities(Unity.Entities.EntityRemapUtility.EntityPatchInfo*,System.Int32,Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo*,System.Int32,System.Byte*,System.Int32,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo}@)">
            <summary>
            Applies a set of entity patches.
            </summary>
            <param name="scalarPatches">The scalar patches to apply.</param>
            <param name="scalarPatchCount">The number of scalar patches.</param>
            <param name="bufferPatches">The buffer patches to apply.</param>
            <param name="bufferPatchCount">The number of buffer patches.</param>
            <param name="chunkBuffer">The chunk buffer, where the patches are applied.</param>
            <param name="entityCount">The number of entities in the chunk.</param>
            <param name="remapping">The remapping array.</param>
        </member>
        <member name="M:Unity.Entities.EntityRemapUtility.PatchEntitiesForPrefab(Unity.Entities.EntityRemapUtility.EntityPatchInfo*,System.Int32,Unity.Entities.EntityRemapUtility.BufferEntityPatchInfo*,System.Int32,System.Byte*,System.Int32,System.Int32,Unity.Entities.Entity*,Unity.Entities.Entity*,System.Int32)">
            <summary>
            Applies a set of patches, remapping the internal prefab entities.
            </summary>
            <param name="scalarPatches">The scalar patches to apply.</param>
            <param name="scalarPatchCount">The number of scalar patches.</param>
            <param name="bufferPatches">The buffer patches to apply.</param>
            <param name="bufferPatchCount">The number of buffer patches.</param>
            <param name="chunkBuffer">The chunk buffer, where the patches are applied.</param>
            <param name="indexInChunk">Theo index in chunk of the source entity to remap.</param>
            <param name="entityCount">The number of entities in chunk.</param>
            <param name="remapSrc">The remap source array.</param>
            <param name="remapDst">The remap target array.</param>
            <param name="remappingCount">The size of the remap arrays.</param>
        </member>
        <member name="M:Unity.Entities.UnsafeChunkCache.MoveNextChunk(System.Int32@,Unity.Entities.ArchetypeChunk@,System.Int32@,System.Byte@,Unity.Burst.Intrinsics.v128@)">
            <summary>
            Advance to the next non-empty, non-filtered chunk in the cache, if possible.
            </summary>
            <param name="chunkIndexInCache">The index of the current chunk in the iteration. Calling this function will
            increment this index. The caller should initialize this value to -1 before the first call.</param>
            <param name="outputChunk">If the function is successful, the next chunk in the iteration is stored here.</param>
            <param name="outputChunkEntityCount">If the function is successful, the number of entities in
            <paramref name="outputChunk"/>is stored here. Note that this count includes all entities in the chunk; for
            a count of the enabled entities, use <see cref="M:Unity.Entities.EnabledBitUtility.countbits(Unity.Burst.Intrinsics.v128)"/> on the
            <paramref name="enableBits"/> mask.</param>
            <param name="outputUseEnableBits">When the function returns, a non-zero value here means that at least one
            entity in the chunk is disabled according to the requirements of this <see cref="T:Unity.Entities.EntityQuery"/>. In this
            case, the contents of the <paramref name="enableBits"/> mask should be used to determine which entities
            match the query.</param>
            <param name="enableBits">If a valid chunk is returned and at least one entity is disabled for the purposes
            of this EntityQuery, the combined mask of all entities in the chunk will be stored here. The contents of
            this parameter are only valid if <paramref name="outputUseEnableBits"/> is non-zero when the function
            returns.</param>
            <returns>True if the next chunk was found. False if the end of the cached chunk list was reached (in which
            case, <paramref name="outputChunk"/>, <paramref name="outputChunkEntityCount"/> and
            <paramref name="outputUseEnableBits"/> will be be default-initialized, and <paramref name="enableBits"/>
            will be undefined).</returns>
        </member>
        <member name="F:Unity.Entities.ManagedObjectRemap.m_References">
            <summary>
            Set used to track already visited references, in order to avoid infinite recursion.
            </summary>
        </member>
        <member name="M:Unity.Entities.ManagedObjectRemap.RemapEntityReferences(System.Object@,Unity.Entities.EntityRemapUtility.EntityRemapInfo*)">
            <summary>
            Remaps all entity references within the given object using the specified <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/>.
            </summary>
            <param name="obj">The object to remap references for.</param>
            <param name="entityRemapInfo">The entity remap information.</param>
            <exception cref="T:System.ArgumentNullException">The given object was null.</exception>
            <exception cref="T:Unity.Properties.MissingPropertyBagException">The given object has no property bag associated with it.</exception>
        </member>
        <member name="M:Unity.Entities.ManagedObjectRemap.RemapEntityReferencesForPrefab(System.Object@,Unity.Entities.Entity*,Unity.Entities.Entity*,System.Int32)">
            <summary>
            Remaps all entity references within the given object using the specified <see cref="T:Unity.Entities.EntityRemapUtility.EntityRemapInfo"/>.
            </summary>
            <param name="obj">The object to remap references for.</param>
            <param name="remapSrc">Array of entities that should be remapped.</param>
            <param name="remapDst">Array of entities that each entry in the remapSrc array should be remapped to.</param>
            <param name="remapInfoCount">Length of the entity arrays.</param>
            <exception cref="T:System.ArgumentNullException">The given object was null.</exception>
            <exception cref="T:Unity.Properties.MissingPropertyBagException">The given object has no property bag associated with it.</exception>
        </member>
        <member name="M:Unity.Entities.ManagedObjectRemap.Unity#Properties#IPropertyBagVisitor#Visit``1(Unity.Properties.IPropertyBag{``0},``0@)">
            <summary>
            Invoked by Unity.Properties for each container type (i.e. struct or class).
            </summary>
            <remarks>
            We do not explicitly override collection visitation. Instead it will simply fall through to this call and enumerate all elements.
            </remarks>
            <param name="properties">The property bag being visited.</param>
            <param name="container">The container being visited.</param>
            <typeparam name="TContainer">The container type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectRemap.Unity#Properties#IPropertyVisitor#Visit``2(Unity.Properties.Property{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for any non-collection property.
            </summary>
            <param name="property">The property being visited.</param>
            <param name="container">The source container.</param>
            <typeparam name="TContainer">The container type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectRemap.Unity#Entities#ITypedVisit{Unity#Entities#Entity}#Visit``1(Unity.Properties.Property{``0,Unity.Entities.Entity},``0@,Unity.Entities.Entity@)">
            <summary>
            Invoked for each <see cref="T:Unity.Entities.Entity"/> member encountered.
            </summary>
            <param name="property">The property being visited.</param>
            <param name="container">The source container.</param>
            <param name="value">The entity value.</param>
            <typeparam name="TContainer">The container type.</typeparam>
            <returns>The status of the adapter visit.</returns>
        </member>
        <member name="T:Unity.Entities.DynamicBuffer`1">
            <summary>
            An array-like data structure that can be used as a component.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.class"/>
            </example>
            <typeparam name="T">The data type stored in the buffer. Must be a value type.</typeparam>
        </member>
        <member name="P:Unity.Entities.DynamicBuffer`1.Length">
            <summary>
            The number of elements the buffer holds.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.length"/>
            </example>
        </member>
        <member name="P:Unity.Entities.DynamicBuffer`1.Capacity">
            <summary>
            The number of elements the buffer can hold.
            </summary>
            <remarks>
            <paramref name="Capacity"/> can not be set lower than <see cref="P:Unity.Entities.DynamicBuffer`1.Length"/> - this will raise an exception.
            If <paramref name="Capacity"/> grows greater than the internal capacity of the DynamicBuffer, memory external to the DynamicBuffer will be allocated.
            If <paramref name="Capacity"/> shrinks to the internal capacity of the DynamicBuffer or smaller, memory external to the DynamicBuffer will be freed.
            No effort is made to avoid costly reallocations when <paramref name="Capacity"/> changes slightly;
            if <paramref name="Capacity"/> is incremented by 1, an array 1 element bigger is allocated.
            </remarks>
        </member>
        <member name="P:Unity.Entities.DynamicBuffer`1.IsEmpty">
            <summary>
            Reports whether container is empty.
            </summary>
            <value>True if this container empty.</value>
        </member>
        <member name="P:Unity.Entities.DynamicBuffer`1.IsCreated">
            <summary>
            Whether the memory for this dynamic buffer has been allocated.
            </summary>
        </member>
        <member name="P:Unity.Entities.DynamicBuffer`1.Item(System.Int32)">
            <summary>
            Array-like indexing operator.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.indexoperator"/>
            </example>
            <param name="index">The zero-based index.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.ElementAt(System.Int32)">
            <summary>
            Gets the reference to the element at the given index.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns>Returns the reference to the element at the index.</returns>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.ResizeUninitialized(System.Int32)">
            <summary>
            Sets the length of this buffer, increasing the capacity if necessary.
            </summary>
            <remarks>If <paramref name="length"/> is less than the current
            length of the buffer, the length of the buffer is reduced while the
            capacity remains unchanged.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.resizeuninitialized"/>
            </example>
            <param name="length">The new length of the buffer.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.Resize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Sets the length of this buffer, increasing the capacity if necessary.
            </summary>
            <remarks>If <paramref name="length"/> is less than the current
            length of the buffer, the length of the buffer is reduced while the
            capacity remains unchanged.</remarks>
            <param name="length">The new length of this buffer.</param>
            <param name="options">Whether to clear any newly allocated bytes to all zeroes.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the buffer has at least the specified capacity.
            </summary>
            <remarks>If <paramref name="length"/> is greater than the current <see cref="P:Unity.Entities.DynamicBuffer`1.Capacity"/>
            of this buffer and greater than the capacity reserved with
            <see cref="T:Unity.Entities.InternalBufferCapacityAttribute"/>, this function allocates a new memory block
            and copies the current buffer to it. The number of elements in the buffer remains
            unchanged.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.reserve"/>
            </example>
            <param name="length">The buffer capacity is ensured to be at least this big.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.Clear">
            <summary>
            Sets the buffer length to zero.
            </summary>
            <remarks>The capacity of the buffer remains unchanged. Buffer memory
            is not overwritten.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.clear"/>
            </example>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.TrimExcess">
            <summary>
            Removes any excess capacity in the buffer.
            </summary>
            <remarks>Sets the buffer capacity to the current length.
            If the buffer memory size changes, the current contents
            of the buffer are copied to a new block of memory and the
            old memory is freed. If the buffer now fits in the space in the
            chunk reserved with <see cref="T:Unity.Entities.InternalBufferCapacityAttribute"/>,
            then the buffer contents are moved to the chunk.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.trimexcess"/>
            </example>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.Add(`0)">
            <summary>
            Adds an element to the end of the buffer, resizing as necessary.
            </summary>
            <remarks>The buffer is resized if it has no additional capacity.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.add"/>
            </example>
            <param name="elem">The element to add to the buffer.</param>
            <returns>The index of the added element, which is equal to the new length of the buffer minus one.</returns>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index, resizing as necessary.
            </summary>
            <remarks>The buffer is resized if it has no additional capacity.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.insert"/>
            </example>
            <param name="index">The position at which to insert the new element.</param>
            <param name="elem">The element to add to the buffer.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.AddRange(Unity.Collections.NativeArray{`0})">
            <summary>
            Adds all the elements from <paramref name="newElems"/> to the end
            of the buffer, resizing as necessary.
            </summary>
            <remarks>The buffer is resized if it has no additional capacity.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.addrange"/>
            </example>
            <param name="newElems">The native array of elements to insert.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of elements, starting with the element at the specified index.
            </summary>
            <remarks>The buffer capacity remains unchanged.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.removerange"/>
            </example>
            <param name="index">The first element to remove.</param>
            <param name="count">How many elements tot remove.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
            <summary>
            Removes the specified number of elements, starting with the element at the specified index. It replaces the
            elements that were removed with a range of elements from the back of the buffer. This is more efficient
            than moving all elements following the removed elements, but does change the order of elements in the buffer.
            </summary>
            <remarks>The buffer capacity remains unchanged.</remarks>
            <param name="index">The first element to remove.</param>
            <param name="count">How many elements tot remove.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.removeat"/>
            </example>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Removes the element at the specified index and swaps the last element into its place. This is more efficient
            than moving all elements following the removed element, but does change the order of elements in the buffer.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.GetUnsafePtr">
            <summary>
            Gets an <see langword="unsafe"/> read/write pointer to the contents of the buffer.
            </summary>
            <remarks>This function can only be called in unsafe code contexts.</remarks>
            <returns>A typed, unsafe pointer to the first element in the buffer.</returns>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.GetUnsafeReadOnlyPtr">
            <summary>
            Gets an <see langword="unsafe"/> read-only pointer to the contents of the buffer.
            </summary>
            <remarks>This function can only be called in unsafe code contexts.</remarks>
            <returns>A typed, unsafe pointer to the first element in the buffer.</returns>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.Reinterpret``1">
            <summary>
            Returns a dynamic buffer of a different type, pointing to the same buffer memory.
            </summary>
            <remarks>No memory modification occurs. The reinterpreted type must be the same size
            in memory as the original type.</remarks>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.reinterpret"/>
            </example>
            <typeparam name="U">The reinterpreted type.</typeparam>
            <returns>A dynamic buffer of the reinterpreted type.</returns>
            <exception cref="T:System.InvalidOperationException">If the reinterpreted type is a different
            size than the original.</exception>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.AsNativeArray">
            <summary>
            Return a native array that aliases the original buffer contents.
            </summary>
            <remarks>You can only access the native array as long as the
            the buffer memory has not been reallocated. Several dynamic buffer operations,
            such as <see cref="M:Unity.Entities.DynamicBuffer`1.Add(`0)"/> and <see cref="M:Unity.Entities.DynamicBuffer`1.TrimExcess"/> can result in
            buffer reallocation.</remarks>
            <returns>A NativeArray view of this buffer.</returns>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.asnativearray"/>
            </example>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.GetEnumerator">
            <summary>
            Provides an enumerator for iterating over the buffer elements.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.getenumerator"/>
            </example>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.ToNativeArray(Unity.Collections.Allocator)">
            <summary>
            Copies the buffer into a new native array.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.tonativearray"/>
            </example>
            <param name="allocator">The type of memory allocation to use when creating the
            native array.</param>
            <returns>A native array containing copies of the buffer elements.</returns>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.CopyFrom(Unity.Collections.NativeArray{`0})">
            <summary>
            Copies all the elements from the specified native array into this dynamic buffer.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.copyfrom.nativearray"/>
            </example>
            <param name="v">The native array containing the elements to copy.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.CopyFrom(Unity.Collections.NativeSlice{`0})">
            <summary>
            Copies all the elements from the specified native slice into this dynamic buffer.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.copyfrom.nativeslice"/>
            </example>
            <param name="v">The native slice containing the elements to copy.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.CopyFrom(Unity.Entities.DynamicBuffer{`0})">
            <summary>
            Copies all the elements from another dynamic buffer.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.copyfrom.dynamicbuffer"/>
            </example>
            <param name="v">The dynamic buffer containing the elements to copy.</param>
        </member>
        <member name="M:Unity.Entities.DynamicBuffer`1.CopyFrom(`0[])">
            <summary>
            Copies all the elements from an array.
            </summary>
            <example>
            <code source="../../DocCodeSamples.Tests/DynamicBufferExamples.cs" language="csharp" region="dynamicbuffer.copyfrom.array"/>
            </example>
            <param name="v">A C# array containing the elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the given array is empty.</exception>
        </member>
        <member name="T:Unity.Entities.RegisterGenericComponentTypeAttribute">
            <summary>
            When added as an assembly-level attribute, allows creating component type reflection data for instances of generic components
            for the <see cref="T:Unity.Entities.TypeManager"/> to reason about.
            </summary>
        </member>
        <member name="F:Unity.Entities.RegisterGenericComponentTypeAttribute.ConcreteType">
            <summary>
            Fully closed generic component type to register with the <see cref="T:Unity.Entities.TypeManager"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.RegisterGenericComponentTypeAttribute.#ctor(System.Type)">
            <summary>
            Registers a fully closed generic component type with the <see cref="T:Unity.Entities.TypeManager"/>
            </summary>
            <param name="type">The component type.</param>
        </member>
        <member name="T:Unity.Entities.SystemState">
            <summary>
            Contains raw entity system state. Used by unmanaged systems (ISystem) as well as managed systems behind the scenes.
            </summary>
        </member>
        <member name="P:Unity.Entities.SystemState.UnmanagedMetaIndex">
            <summary>
            Return the unmanaged type index of the system (>= 0 for ISystem-type systems), or -1 for managed systems.
            </summary>
        </member>
        <member name="P:Unity.Entities.SystemState.DebugName">
            <summary>
            Return a debug name for unmanaged systems.
            </summary>
        </member>
        <member name="P:Unity.Entities.SystemState.Enabled">
            <summary>
            Controls whether this system executes when its OnUpdate function is called.
            </summary>
            <value>True, if the system is enabled.</value>
            <remarks>The Enabled property is intended for debugging so that you can easily turn on and off systems
            from the Entity Debugger window. A system with Enabled set to false will not update, even if its
            <see cref="M:Unity.Entities.SystemState.ShouldRunSystem"/> function returns true.</remarks>
        </member>
        <member name="P:Unity.Entities.SystemState.GlobalSystemVersion">
            <summary>
            The current change version number in this <see cref="P:Unity.Entities.SystemState.World"/>.
            </summary>
            <remarks>The system updates the component version numbers inside any <see cref="T:Unity.Entities.ArchetypeChunk"/> instances
            that this system accesses with write permissions to this value.</remarks>
        </member>
        <member name="P:Unity.Entities.SystemState.LastSystemVersion">
             <summary>
             The current version of this system.
             </summary>
             <remarks>
             LastSystemVersion is updated to match the <see cref="P:Unity.Entities.SystemState.GlobalSystemVersion"/> whenever a system runs.
            
             When you use <seealso cref="M:Unity.Entities.EntityQuery.SetChangedVersionFilter(Unity.Entities.ComponentType)"/>
             or <seealso cref="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicComponentTypeHandle@,System.UInt32)"/>, LastSystemVersion provides the basis for determining
             whether a component could have changed since the last time the system ran.
            
             When a system accesses a component and has write permission, it updates the change version of that component
             type to the current value of LastSystemVersion. The system updates the component type's version whether or not
             it actually modifies data in any instances of the component type -- this is one reason why you should
             specify read-only access to components whenever possible.
            
             For efficiency, ECS tracks the change version of component types by chunks, not by individual entities. If a system
             updates the component of a given type for any entity in a chunk, then ECS assumes that the components of all
             entities in that chunk could have been changed. Change filtering allows you to save processing time by
             skipping all entities in an unchanged chunk, but does not support skipping individual entities in a chunk
             that does contain changes.
             </remarks>
             <value>The <see cref="P:Unity.Entities.SystemState.GlobalSystemVersion"/> the last time this system ran.</value>
        </member>
        <member name="P:Unity.Entities.SystemState.EntityManager">
            <summary>
            The EntityManager object of the <see cref="P:Unity.Entities.SystemState.World"/> in which this system exists.
            </summary>
            <value>The EntityManager for this system.</value>
        </member>
        <member name="P:Unity.Entities.SystemState.World">
            <summary>
            The World in which this system exists.
            </summary>
            <value>The World of this system.</value>
        </member>
        <member name="P:Unity.Entities.SystemState.WorldUnmanaged">
            <summary>
            The unmanaged portion of the world in which this system exists.
            </summary>
            <value>The unmanaged world of this system.</value>
        </member>
        <member name="P:Unity.Entities.SystemState.WorldUpdateAllocator">
            <summary>
            Retrieve the world update allocator of the World in which this system exists.
            </summary>
            <value>The Allocator retrieved.</value>
            <remarks>Behind the world update allocator are double reewindable allocators, and the two allocators
            are switched in each world update.  Therefore user cannot cache the world update allocator.</remarks>
        </member>
        <member name="P:Unity.Entities.SystemState.WorldRewindableAllocator">
            <summary>
            Retrieve the world update rewindable allocator of the World in which this system exists.
            </summary>
            <value>The RewindableAllocator retrieved.</value>
        </member>
        <member name="P:Unity.Entities.SystemState.SystemHandle">
            <summary>
            The untyped system's handle.
            </summary>
        </member>
        <member name="P:Unity.Entities.SystemState.SystemHandleUntyped">
            <summary> Obsolete. Use <see cref="P:Unity.Entities.SystemState.SystemHandle"/> instead.</summary>
        </member>
        <member name="P:Unity.Entities.SystemState.Time">
            <summary>
            Obsolete. The current Time data for this system's world.
            </summary>
            <remarks> **Obsolete.** Use <see cref="P:Unity.Entities.SystemAPI.Time"/> or <see cref="P:Unity.Entities.WorldUnmanaged.Time"/> instead.</remarks>
        </member>
        <member name="P:Unity.Entities.SystemState.Dependency">
             <summary>
             The ECS-related data dependencies of the system.
             </summary>
             <remarks>
             Before <see cref="M:Unity.Entities.SystemBase.OnUpdate"/> or <see cref="M:Unity.Entities.ISystem.OnUpdate(Unity.Entities.SystemState@)"/>, the Dependency property represents the combined job handles of any job that
             writes to the same components that the current system reads -- or reads the same components that the current
             system writes to.
            
             The [JobHandle] objects of any jobs scheduled with explicit dependencies are not combined with
             the system’s Dependency property. You must set the Dependency property manually to make sure
             that later systems receive the correct job dependencies.
            
             [JobHandle]: https://docs.unity3d.com/ScriptReference/Unity.Jobs.JobHandle.html
             </remarks>
             <seealso cref="P:Unity.Entities.SystemBase.Dependency"/>
        </member>
        <member name="M:Unity.Entities.SystemState.CompleteDependency">
            <summary>
            Completes combined job handles registered with this system. See <see cref="P:Unity.Entities.SystemState.Dependency"/> for
            more information.
            </summary>
        </member>
        <member name="M:Unity.Entities.SystemState.ShouldRunSystem">
             <summary>
             Reports whether this system satisfies the criteria to update. This function is used
             internally to determine whether the system's OnUpdate function can be skipped.
             </summary>
             <remarks>
             <p>
             By default, systems will invoke OnUpdate every frame.
             </p>
             <p>
             If a system calls <see cref="M:Unity.Entities.SystemState.RequireForUpdate``1"/> or <see cref="M:Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery)"/>
             in OnCreate, it will only update if all of its required components exist and
             required queries match existing chunks. This check uses [IsEmptyIgnoreFilter], so the queries may
             still be empty if they use filters or [Enableable Components].
             </p>
             <p>
             If a system has the <see cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/> it will
             update if any EntityQuery it uses match existing chunks. This check also uses [IsEmptyIgnoreFilter],
             so all queries may still be empty if they use filters or [Enableable Components].
             </p>
             <p>
             Note: Other factors might prevent a system from updating, even if this method returns
             true. For example, a system will not be updated if its [Enabled] property is false.
             </p>
            
             [IsEmptyIgnoreFilter]: xref:Unity.Entities.EntityQuery.IsEmptyIgnoreFilter
             [Enableable Components]: xref:Unity.Entities.IEnableableComponent
             [Enabled]: xref:Unity.Entities.SystemState.Enabled
             </remarks>
             <returns>True if the system should be updated, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityQuery(Unity.Entities.ComponentType[])">
            <summary>
            Gets the cached query for the specified component types, if one exists; otherwise, creates a new query
            instance and caches it.
            </summary>
            <param name="componentTypes">An array or comma-separated list of component types.</param>
            <returns>The new or cached query.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityQuery(Unity.Entities.ComponentType)">
            <summary>
            Gets the cached query for the specified component type, if one exists; otherwise, creates a new query
            instance and caches it.
            </summary>
            <param name="componentType">The type of component to query.</param>
            <returns>The new or cached query.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityQuery(Unity.Collections.NativeArray{Unity.Entities.ComponentType})">
            <summary>
            Gets the cached query for the specified component types, if one exists; otherwise, creates a new query
            instance and caches it.
            </summary>
            <param name="componentTypes">An array of component types.</param>
            <returns>The new or cached query.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityQuery(Unity.Entities.EntityQueryDesc[])">
            <summary>
            Combines an array of query description objects into a single query.
            </summary>
            <remarks>This function looks for a cached query matching the combined query descriptions, and returns it
            if one exists; otherwise, the function creates a new query instance and caches it.</remarks>
            <returns>The new or cached query.</returns>
            <param name="queryDesc">An array of query description objects to be combined to define the query.</param>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityQuery(Unity.Entities.EntityQueryBuilder@)">
            <summary>
            Create an entity query from a query description builder.
            </summary>
            <remarks>This function looks for a cached query matching the combined query descriptions, and returns it
            if one exists; otherwise, the function creates a new query instance and caches it.</remarks>
            <returns>The new or cached query.</returns>
            <param name="builder">The description builder</param>
        </member>
        <member name="M:Unity.Entities.SystemState.GetComponentTypeHandle``1(System.Boolean)">
            <summary>
            Manually gets the run-time type information required to access an array of component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.ComponentTypeHandle`1.Update(Unity.Entities.SystemState@)"/>. </remarks>
            <param name="isReadOnly">Whether the component data is only read, not written. Access components as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access component data stored in a
            chunk.</returns>
            <remarks>Pass an <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> instance to a job that has access to chunk data,
            such as an <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of component inside the job.</remarks>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetComponentTypeHandle``1(System.Boolean)"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(ref SystemState) at the call-site.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)">
            <summary>
            Manually gets the run-time type information required to access an array of component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.DynamicComponentTypeHandle.Update(Unity.Entities.SystemState@)"/>.</remarks>
            <param name="componentType">Type of the component</param>
            <returns>An object representing the type information required to safely access component data stored in a
            chunk.</returns>
            <remarks>Pass an DynamicComponentTypeHandle instance to a job that has access to chunk data, such as an
            <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of component inside the job.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetBufferTypeHandle``1(System.Boolean)">
            <summary>
            Manually gets the run-time type information required to access an array of buffer components in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.BufferTypeHandle`1.Update(Unity.Entities.SystemState@)"/>.</remarks>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IBufferElementData"/>.</typeparam>
            <returns>An object representing the type information required to safely access buffer components stored in a
            chunk.</returns>
            <remarks>Pass a BufferTypeHandle instance to a job that has access to chunk data, such as an
            <see cref="T:Unity.Entities.IJobChunk"/> job, to access that type of buffer component inside the job.</remarks>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetBufferTypeHandle``1(System.Boolean)"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(ref SystemState) at the call-site.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetSharedComponentTypeHandle``1">
            <summary>
            Manually gets the run-time type information required to access a shared component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.SharedComponentTypeHandle`1.Update(Unity.Entities.SystemState@)"/>.</remarks>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.ISharedComponentData"/>.</typeparam>
            <returns>An object representing the type information required to safely access shared component data stored in a
            chunk.</returns>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetSharedComponentTypeHandle``1"/> in <see cref="T:Unity.Entities.SystemAPI"/> as it will cache in OnCreate for you
            and call .Update(ref SystemState) at the call-site.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)">
            <summary>
            Manually gets the run-time type information required to access a shared component data in a chunk.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.DynamicSharedComponentTypeHandle.Update(Unity.Entities.SystemState@)"/>.</remarks>
            <param name="componentType">The component type to get access to.</param>
            <returns>An object representing the type information required to safely access shared component data stored in a
            chunk.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityTypeHandle">
            <summary>
            Manually gets the runtime type information required to access the array of <see cref="T:Unity.Entities.Entity"/> objects in a chunk.
            </summary>
            <remarks>To make sure the entity type handle is up to date, call  <see cref="M:Unity.Entities.EntityTypeHandle.Update(Unity.Entities.SystemState@)"/> before you use this method.
            It's best practice to use <see cref="M:Unity.Entities.SystemAPI.GetEntityTypeHandle"/> instead of this method because `SystemAPI.GetEntityTypeHandle` caches in OnCreate for you
            and calls Update(ref SystemState) at the call-site.</remarks>
            <returns>An object that represents the type information required to safely access Entity instances stored in a
            chunk.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetComponentLookup``1(System.Boolean)">
            <summary>
            Manually gets a dictionary-like container containing all components of type T, keyed by Entity.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.ComponentLookup`1.Update(Unity.Entities.SystemState@)"/>. </remarks>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>All component data of type T.</returns>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetComponentLookup``1(System.Boolean)"/> as it will cache in OnCreate for you
            and call .Update(ref state) at the call-site.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetComponentDataFromEntity``1(System.Boolean)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemState.GetComponentLookup``1(System.Boolean)"/> instead.</summary>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>All component data of type T.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.GetBufferLookup``1(System.Boolean)">
            <summary>
            Manually gets a BufferLookup&lt;T&gt; object that can access a <seealso cref="T:Unity.Entities.DynamicBuffer`1"/>.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.BufferLookup`1.Update(Unity.Entities.SystemState@)"/>. </remarks>
            <remarks>Assign the returned object to a field of your Job struct so that you can access the
            contents of the buffer in a Job.</remarks>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
            <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
            <seealso cref="T:Unity.Entities.ComponentLookup`1"/>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetBufferLookup``1(System.Boolean)"/> as it will cache in OnCreate for you
            and call .Update(ref state) at the call-site.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetBufferFromEntity``1(System.Boolean)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemState.GetBufferLookup``1(System.Boolean)"/> instead.</summary>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
            <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
            <seealso cref="T:Unity.Entities.ComponentLookup`1"/>
        </member>
        <member name="M:Unity.Entities.SystemState.GetEntityStorageInfoLookup">
            <summary>
            Manually gets a dictionary-like container containing information about how entities are stored.
            </summary>
            <remarks>Remember to call <see cref="M:Unity.Entities.EntityStorageInfoLookup.Update(Unity.Entities.SystemState@)"/>. </remarks>
            <returns>A EntityStorageInfoLookup object.</returns>
            <seealso cref="T:Unity.Entities.EntityStorageInfoLookup"/>
            <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetEntityStorageInfoLookup"/> as it will cache in OnCreate for you
            and call .Update(ref state) at the call-site.</remarks>
        </member>
        <member name="M:Unity.Entities.SystemState.GetStorageInfoFromEntity">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemState.GetEntityStorageInfoLookup"/> instead.</summary>
             <returns>A EntityStorageInfoLookup object.</returns>
        </member>
        <member name="M:Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery)">
             <summary>
             Adds a query that must return entities for the system to run. You can add multiple required queries to a
             system; all of them must match at least one entity for the system to run.
             </summary>
             <param name="query">A query that must match entities this frame in order for this system to run.</param>
             <remarks>Any queries added through RequireForUpdate override all other queries cached by this system.
             In other words, if any required query does not find matching entities, the update is skipped even
             if another query created for the system (either explicitly or implicitly) does match entities and
             vice versa.
            
             Note that for components that implement <see cref="T:Unity.Entities.IEnableableComponent"/>
             this method ignores whether the component is enabled or not, it only checks whether it exists.
             It also ignores any other filters placed </remarks>
             <seealso cref="M:Unity.Entities.SystemState.ShouldRunSystem"/>
             <seealso cref="M:Unity.Entities.SystemState.RequireForUpdate``1"/>
             <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.SystemState.RequireForUpdate``1">
             <summary>
             Require that a specific component exist for this system to run.
             Also includes any components added to a system.
             See <see cref="T:Unity.Entities.SystemHandle"/> for more info on that.
             </summary>
             <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the component.</typeparam>
             <remarks>Any queries added through RequireForUpdate override all other queries cached by this system.
             In other words, if any required query does not find matching entities, the update is skipped even
             if another query created for the system (either explicitly or implicitly) does match entities and
             vice versa.
            
             Note that for components that implement <see cref="T:Unity.Entities.IEnableableComponent"/>
             this method ignores whether the component is enabled or not, it only checks whether it exists.</remarks>
             <seealso cref="M:Unity.Entities.SystemState.ShouldRunSystem"/>
             <seealso cref="M:Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery)"/>
             <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
            
        </member>
        <member name="M:Unity.Entities.SystemState.RequireAnyForUpdate(Unity.Entities.EntityQuery[])">
             <summary>
             Provide a set of queries, one of which must match entities for the system to run.
             </summary>
             <param name="queries">A set of queries, one of which must match entities this frame in order for
             this system to run.</param>
             <remarks>
             This method can only be called from a system's OnCreate method.
            
             You can call this method multiple times from the same system to add multiple sets of required
             queries. Each set must have at least one query that matches an entity for the system to run.
            
             Any queries added through RequireAnyForUpdate and [RequireForUpdate] override all other queries
             created by this system for the purposes of deciding whether to update. In other words, if any set
             of required queries does not find matching entities, the update is skipped even if another query
             created for the system (either explicitly or implicitly) does match entities and vice versa.
            
             [EntityQueries]: xref:Unity.Entities.EntityQuery
             [enableable components]: xref:T:Unity.Entities.IEnableableComponent
             </remarks>
             <seealso cref="M:Unity.Entities.SystemState.ShouldRunSystem"/>
             <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.SystemState.RequireAnyForUpdate(Unity.Collections.NativeArray{Unity.Entities.EntityQuery})">
             <summary>
             Provide a set of queries, one of which must match entities for the system to run.
             </summary>
             <param name="queries">A set of queries, one of which must match entities this frame in order for
             this system to run.</param>
             <remarks>
             This method can only be called from a system's OnCreate method.
            
             You can call this method multiple times from the same system to add multiple sets of required
             queries. Each set must have at least one query that matches an entity for the system to run.
            
             Any queries added through RequireAnyForUpdate and [RequireForUpdate] override all other queries
             created by this system for the purposes of deciding whether to update. In other words, if any set
             of required queries does not find matching entities, the update is skipped even if another query
             created for the system (either explicitly or implicitly) does match entities and vice versa.
            
             [EntityQueries]: xref:Unity.Entities.EntityQuery
             [enableable components]: xref:T:Unity.Entities.IEnableableComponent
             </remarks>
             <seealso cref="M:Unity.Entities.SystemState.ShouldRunSystem"/>
             <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
        </member>
        <member name="M:Unity.Entities.SystemState.RequireSingletonForUpdate``1">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemState.RequireForUpdate``1"/> instead.</summary>
            <typeparam name="T">The <see cref="T:Unity.Entities.IComponentData"/> subtype of the singleton component.</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.Empty">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.R`1">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.I`1">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.V`1">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RI`2">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RR`2">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.II`2">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VI`2">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VR`2">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VV`2">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RII`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRI`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRR`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.III`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VII`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRI`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRR`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVI`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVR`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVV`3">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RIII`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRII`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRI`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRR`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.IIII`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VIII`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRII`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRI`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRR`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVII`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRI`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRR`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVI`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVR`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVV`4">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RIIII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRIII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRI`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRR`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.IIIII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VIIII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRIII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRI`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRR`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVIII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRI`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRR`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVII`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRI`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRR`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVI`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVR`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVV`5">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RIIIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRIIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRI`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRR`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.IIIIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VIIIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRIIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRI`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRR`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVIIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRI`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRR`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVIII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRI`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRR`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVII`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRI`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRR`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVI`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVR`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVV`6">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RIIIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRIIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRRI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRRR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.IIIIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VIIIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRIIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRRI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRRR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVIIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRRI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRRR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVIIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRRI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRRR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVIII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRRI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRRR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVII`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVRI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVRR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVI`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVR`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVV`7">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RIIIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRIIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRRII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRRRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.RRRRRRRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.IIIIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VIIIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRIIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRRII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRRRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VRRRRRRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVIIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRRII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRRRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVRRRRRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVIIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRRII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRRRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVRRRRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVIIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRRII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRRRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVRRRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVIII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVRII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVRRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVRRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVII`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVRI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVRR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVVI`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVVR`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.UniversalDelegates.VVVVVVVV`8">
            <summary>Delegate type that represents the lambda expression in an Entities.ForEach construction.</summary>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
        </member>
        <member name="T:Unity.Entities.LambdaForEachDescriptionConstructionMethods">
            <summary>
            Provides methods for Constructing Entities.ForEach invocations.
            </summary>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``1(``0,Unity.Entities.UniversalDelegates.Empty)">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``2(``0,Unity.Entities.UniversalDelegates.R{``1})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``2(``0,Unity.Entities.UniversalDelegates.I{``1})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``2(``0,Unity.Entities.UniversalDelegates.V{``1})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``3(``0,Unity.Entities.UniversalDelegates.RI{``1,``2})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``3(``0,Unity.Entities.UniversalDelegates.RR{``1,``2})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``3(``0,Unity.Entities.UniversalDelegates.II{``1,``2})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``3(``0,Unity.Entities.UniversalDelegates.VI{``1,``2})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``3(``0,Unity.Entities.UniversalDelegates.VR{``1,``2})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``3(``0,Unity.Entities.UniversalDelegates.VV{``1,``2})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.RII{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.RRI{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.RRR{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.III{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.VII{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.VRI{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.VRR{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.VVI{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.VVR{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``4(``0,Unity.Entities.UniversalDelegates.VVV{``1,``2,``3})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.RIII{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.RRII{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.RRRI{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.RRRR{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.IIII{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VIII{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VRII{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VRRI{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VRRR{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VVII{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VVRI{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VVRR{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VVVI{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VVVR{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``5(``0,Unity.Entities.UniversalDelegates.VVVV{``1,``2,``3,``4})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.RIIII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.RRIII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.RRRII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.RRRRI{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.RRRRR{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.IIIII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VIIII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VRIII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VRRII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VRRRI{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VRRRR{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVIII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVRII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVRRI{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVRRR{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVVII{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVVRI{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVVRR{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVVVI{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVVVR{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``6(``0,Unity.Entities.UniversalDelegates.VVVVV{``1,``2,``3,``4,``5})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.RIIIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.RRIIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.RRRIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.RRRRII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.RRRRRI{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.RRRRRR{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.IIIIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VIIIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VRIIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VRRIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VRRRII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VRRRRI{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VRRRRR{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVIIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVRIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVRRII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVRRRI{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVRRRR{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVIII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVRII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVRRI{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVRRR{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVVII{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVVRI{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVVRR{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVVVI{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVVVR{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``7(``0,Unity.Entities.UniversalDelegates.VVVVVV{``1,``2,``3,``4,``5,``6})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RIIIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RRIIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RRRIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RRRRIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RRRRRII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RRRRRRI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.RRRRRRR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.IIIIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VIIIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VRIIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VRRIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VRRRIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VRRRRII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VRRRRRI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VRRRRRR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVIIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVRIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVRRIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVRRRII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVRRRRI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVRRRRR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVIIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVRIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVRRII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVRRRI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVRRRR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVIII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVRII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVRRI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVRRR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVVII{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVVRI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVVRR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVVVI{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVVVR{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``8(``0,Unity.Entities.UniversalDelegates.VVVVVVV{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RIIIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRIIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRRIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRRRIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRRRRIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRRRRRII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRRRRRRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.RRRRRRRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.IIIIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VIIIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRIIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRRIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRRRIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRRRRIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRRRRRII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRRRRRRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VRRRRRRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVIIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVRIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVRRIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVRRRIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVRRRRII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVRRRRRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVRRRRRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVIIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVRIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVRRIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVRRRII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVRRRRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVRRRRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVIIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVRIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVRRII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVRRRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVRRRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVIII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVRII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVRRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVRRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVVII{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVVRI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVVRR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVVVI{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVVVR{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ForEach``9(``0,Unity.Entities.UniversalDelegates.VVVVVVVV{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Iterate over entities and their components with a lambda expression.
            </summary>
            <param name="description">Description used to form this invocation</param>
            <param name="codeToRun">Lambda expression that will be executed once for each entity that matches the query defined
            by the lambda parameters and the other methods that are part of the EntitiesForEach construction</param>
            <typeparam name="TDescription">Type of description used to form this invocation</typeparam>
            <typeparam name="T0">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T1">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T2">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T3">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T4">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T5">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T6">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <typeparam name="T7">Component, Entity or Aspect type used in the lambda expression</typeparam>
            <returns>Description that is used to build the Entities.ForEach invocation.
            This will provide other methods for building the rest of the invocation and scheduling it.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaForEachDescriptionConstructionMethods.ThrowCodeGenException``1">
            <summary>
            Used internally. It throws an an Exception if source generation did not run.
            </summary>
            <returns>Not applicable; the function always throws.</returns>
            <exception cref="T:System.Exception">Source-gen not run</exception>
            <typeparam name="TDescription">Type of target object.</typeparam>
        </member>
        <member name="T:Unity.Entities.ChunkIterationUtility">
            <summary>
                Enables iteration over chunks belonging to a set of archetypes.
            </summary>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateArchetypeChunkArrayAsync(Unity.Entities.UnsafeMatchingArchetypePtrList,Unity.Collections.Allocator,Unity.Jobs.JobHandle@,Unity.Entities.EntityQueryFilter@,Unity.Jobs.JobHandle)">
            <summary>
            Creates a NativeArray with all the chunks in a given archetype filtered by the provided EntityQueryFilter.
            This function will not sync the needed types in the EntityQueryFilter so they have to be synced manually before calling this function.
            </summary>
            <param name="matchingArchetypes">List of matching archetypes.</param>
            <param name="allocator">Allocator to use for the array.</param>
            <param name="jobHandle">Handle to the GatherChunks job used to fill the output array.</param>
            <param name="filter">Filter used to filter the resulting chunks</param>
            <param name="dependsOn">All jobs spawned will depend on this JobHandle</param>
            <returns>NativeArray of all the chunks in the matchingArchetypes list.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateEntityArray(Unity.Entities.UnsafeMatchingArchetypePtrList,Unity.Collections.Allocator,Unity.Entities.EntityTypeHandle,Unity.Entities.EntityQuery,System.Int32)">
            <summary>
                Creates a NativeArray containing the entities in a given EntityQuery.
            </summary>
            <param name="matchingArchetypes">List of matching archetypes.</param>
            <param name="allocator">Allocator to use for the array.</param>
            <param name="typeHandle">An atomic safety handle required by GatherEntitiesJob so it can call GetNativeArray() on chunks.</param>
            <param name="entityQuery">EntityQuery to gather entities from.</param>
            <param name="entityCount">number of entities to reserve for the returned NativeArray.</param>
            <param name="filter">EntityQueryFilter for calculating the length of the output array.</param>
            <returns>NativeArray of the entities in a given EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateEntityArrayAsync(Unity.Entities.UnsafeMatchingArchetypePtrList,Unity.Collections.Allocator,Unity.Entities.EntityTypeHandle,Unity.Entities.EntityQuery,System.Int32,Unity.Jobs.JobHandle@,Unity.Jobs.JobHandle)">
             <summary>
              Obsolete. Use <see cref="M:Unity.Entities.ChunkIterationUtility.CreateEntityListAsync(Unity.Collections.Allocator,Unity.Entities.EntityTypeHandle,Unity.Entities.EntityQuery,System.Int32,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> instead.
             </summary>
             <remarks> **Obsolete.** Use <see cref="M:Unity.Entities.ChunkIterationUtility.CreateEntityListAsync(Unity.Collections.Allocator,Unity.Entities.EntityTypeHandle,Unity.Entities.EntityQuery,System.Int32,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> instead.
            
             Creates a NativeArray containing the entities in a given EntityQuery.</remarks>
             <param name="matchingArchetypes">List of matching archetypes.</param>
             <param name="allocator">Allocator to use for the array.</param>
             <param name="typeHandle">An atomic safety handle required by GatherEntitiesJob so it can call GetNativeArray() on chunks.</param>
             <param name="entityQuery">EntityQuery to gather entities from.</param>
             <param name="entityCount">number of entities to reserve for the returned NativeArray.</param>
             <param name="outJobHandle">Handle to the GatherEntitiesJob job used to fill the output array.</param>
             <param name="dependsOn">Handle to a job this GatherEntitiesJob must wait on.</param>
             <returns>NativeArray of the entities in a given EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateEntityListAsync(Unity.Collections.Allocator,Unity.Entities.EntityTypeHandle,Unity.Entities.EntityQuery,System.Int32,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
            <summary>
                Creates a NativeList containing the entities in a given EntityQuery.
            </summary>
            <param name="allocator">Allocator to use for the array.</param>
            <param name="typeHandle">An atomic safety handle required by GatherEntitiesJob so it can call GetNativeArray() on chunks.</param>
            <param name="entityQuery">EntityQuery to gather entities from.</param>
            <param name="maxEntityCount">number of entities to reserve for the returned NativeArray.</param>
            <param name="outJobHandle">Handle to the GatherEntitiesJob job used to fill the output array.</param>
            <param name="dependsOn">Handle to a job this GatherEntitiesJob must wait on.</param>
            <returns>NativeList of the entities in a given EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateComponentDataArrayAsync``1(Unity.Collections.Allocator,Unity.Entities.ComponentTypeHandle{``0}@,System.Int32,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle@,Unity.Jobs.JobHandle)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.ChunkIterationUtility.CreateComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Entities.DynamicComponentTypeHandle@,System.Int32,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> instead.
             </summary>
             <remarks>
             **Obsolete.** Use <see cref="M:Unity.Entities.ChunkIterationUtility.CreateComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Entities.DynamicComponentTypeHandle@,System.Int32,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> instead.
            
             Creates a NativeArray with the value of a single component for all entities matching the provided query.
             The job that schedules this method populates the NativeArray. This method
             doesn't sync the needed types in the EntityQueryFilter, so you have to be sync them manually before calling this.
             </remarks>
             <param name="allocator">Allocator to use for the array.</param>
             <param name="typeHandle">Type handle for the component whose values should be extracted.</param>
             <param name="entityCount">Number of entities that match the query. Used as the output array size.</param>
             <param name="entityQuery">Entities that match this query will be included in the output.</param>
             <param name="outJobHandle">Handle to the job that will populate the output array. The caller must complete this job before the output array contents are valid.</param>
             <param name="dependsOn">Input job dependencies for the array-populating job.</param>
             <returns>NativeArray of all the chunks in the matchingArchetypes list.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateComponentDataListAsync``1(Unity.Collections.Allocator,Unity.Entities.DynamicComponentTypeHandle@,System.Int32,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)">
            <summary>
            Creates a NativeList with the value of a single component for all entities matching the provided query.
            The array will be populated by a job scheduled by this function.
            This function will not sync the needed types in the EntityQueryFilter so they have to be synced manually before calling this function.
            </summary>
            <param name="allocator">Allocator to use for the array.</param>
            <param name="typeHandle">Type handle for the component whose values should be extracted.</param>
            <param name="maxEntityCount">Number of entities that match the query. Used as the output array size.</param>
            <param name="entityQuery">Entities that match this query will be included in the output.</param>
            <param name="dependsOn">Input job dependencies for the array-populating job.</param>
            <param name="outJobHandle">Handle to the job that will populate the output array. The caller must complete this job before the output array contents are valid.</param>
            <returns>NativeList of all the chunks in the matchingArchetypes list.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CreateComponentDataArray``1(Unity.Collections.Allocator,Unity.Entities.ComponentTypeHandle{``0}@,System.Int32,Unity.Entities.EntityQuery)">
            <summary>
            Creates a NativeArray with the value of a single component for all entities matching the provided query.
            This function will not sync the needed types in the EntityQueryFilter so they have to be synced manually before calling this function.
            </summary>
            <param name="allocator">Allocator to use for the array.</param>
            <param name="typeHandle">Type handle for the component whose values should be extracted.</param>
            <param name="entityCount">Number of entities that match the query. Used as the output array size.</param>
            <param name="entityQuery">Entities that match this query will be included in the output.</param>
            <returns>NativeArray of all the chunks in the matchingArchetypes list.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CopyFromComponentDataArrayAsync``1(Unity.Entities.UnsafeMatchingArchetypePtrList,Unity.Collections.NativeArray{``0},Unity.Entities.ComponentTypeHandle{``0}@,Unity.Entities.EntityQuery,Unity.Entities.EntityQueryFilter@,Unity.Jobs.JobHandle@,Unity.Jobs.JobHandle)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ChunkIterationUtility.CopyFromComponentDataListAsync``1(Unity.Collections.NativeList{``0},Unity.Entities.DynamicComponentTypeHandle@,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> instead.</summary>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CalculateChunkCount(Unity.Entities.UnsafeCachedChunkList@,Unity.Entities.UnsafeMatchingArchetypePtrList@,Unity.Entities.EntityQueryFilter@,System.Int32)">
            <summary>
                Total number of chunks in a given MatchingArchetype list.
            </summary>
            <param name="matchingArchetypes">List of matching archetypes.</param>
            <returns>Number of chunks in a list of archetypes.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkIterationUtility.CalculateEntityCount(Unity.Entities.UnsafeCachedChunkList@,Unity.Entities.UnsafeMatchingArchetypePtrList@,Unity.Entities.EntityQueryFilter@,System.Int32)">
            <summary>
                Total number of entities contained in a given MatchingArchetype list.
            </summary>
            <param name="matchingArchetypes">List of matching archetypes.</param>
            <param name="filter">EntityQueryFilter to use when calculating total number of entities.</param>
            <param name="doesRequireBatching">True if this query includes any enableable component types</param>
            <returns>Number of entities</returns>
        </member>
        <member name="T:Unity.Entities.EnabledBitUtility">
            <summary>
            Utilities to help manipulate the per-component enabled bits within a given chunk.
            </summary>
        </member>
        <member name="M:Unity.Entities.EnabledBitUtility.GetNextRange(Unity.Burst.Intrinsics.v128@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the next contiguous range of set bits in the provided mask.
            </summary>
            <param name="mask">The enabled-bit mask. This mask is modified during iteration.</param>
            <param name="beginIndex">On success, the index of the start of the next range is written here.</param>
            <param name="endIndex">On success, the index of the first bit not in the next range is written here.</param>
            <returns>True if another range of contiguous bits was found (in which case, the range info is stored in
            <paramref name="beginIndex"/> and <paramref name="endIndex"/>. Otherwise, false.</returns>
        </member>
        <member name="T:Unity.Entities.EnabledRefRO`1">
            <summary>
            Stores a safe reference to a read-only component enable bit.
            </summary>
            <remarks>Do not store outside of stack</remarks>
            <typeparam name="T">Type of enabled component</typeparam>
        </member>
        <member name="M:Unity.Entities.EnabledRefRO`1.#ctor(Unity.Entities.SafeBitRef)">
            <summary>
            Constructor for read-only enable reference to enableable component.
            This is typically used by generated code inside of Aspects.
            </summary>
            <param name="ptr">Pointer to single bit and safety handle</param>
        </member>
        <member name="P:Unity.Entities.EnabledRefRO`1.Null">
            <summary>
            Null value for this reference.
            </summary>
        </member>
        <member name="P:Unity.Entities.EnabledRefRO`1.IsValid">
            <summary>
            Property that returns true if the reference is valid, false otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.EnabledRefRO`1.ValueRO">
            <summary>
            Property to get enabled value of this reference (true if enabled, false otherwise).
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityManager">
             <summary>
             The EntityManager manages entities and components in a World.
             </summary>
             <remarks>
             The EntityManager provides an API to create, read, update, and destroy entities.
            
             A <see cref="P:Unity.Entities.EntityManager.World"/> has one EntityManager, which manages all the entities for that World.
            
             Many EntityManager operations result in *structural changes* that change the layout of entities in memory.
             Before it can perform such operations, the EntityManager must wait for all running Jobs to complete, an event
             called a *sync point*. A sync point both blocks the main thread and prevents the application from taking
             advantage of all available cores as the running Jobs wind down.
            
             Although you cannot prevent sync points entirely, you should avoid them as much as possible. To this end, the ECS
             framework provides the <see cref="T:Unity.Entities.EntityCommandBuffer"/>, which allows you to queue structural changes so that
             they all occur at one time in the frame.
             </remarks>
        </member>
        <member name="P:Unity.Entities.EntityManager.World">
            <summary>
            The <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager.
            </summary>
            <value>A World has one EntityManager and an EntityManager manages the entities of one World.</value>
        </member>
        <member name="P:Unity.Entities.EntityManager.WorldUnmanaged">
            <summary>
            The <see cref="P:Unity.Entities.EntityManager.WorldUnmanaged"/> of this EntityManager.
            </summary>
            <value>A World has one EntityManager and an EntityManager manages the entities of one World.</value>
        </member>
        <member name="P:Unity.Entities.EntityManager.EntityOrderVersion">
            <summary>
            If this version number increases, it means that a structural change has occurred (Entities created / destroyed or components added / removed)
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.Version">
            <summary> Obsolete. Use <see cref="P:Unity.Entities.EntityManager.EntityOrderVersion"/> instead.</summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.GlobalSystemVersion">
            <summary>
            A counter that increments after every system update.
            </summary>
            <remarks>
            The ECS framework uses the GlobalSystemVersion to track changes in a conservative, efficient fashion.
            Changes are recorded per component per chunk.
            </remarks>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0}@,System.UInt32)"/>
            <seealso cref="T:Unity.Entities.EntityQueryFilter.ChangedFilter"/>
        </member>
        <member name="P:Unity.Entities.EntityManager.EntityCapacity">
             <summary>
             The capacity of the internal entities array.
             </summary>
             <value>The number of entities the array can hold before it must be resized.</value>
             <remarks>
             The entities array automatically resizes itself when the entity count approaches the capacity.
             You should rarely need to set this value directly.
            
             **Important:** when you set this value (or when the array automatically resizes), the EntityManager
             first ensures that all Jobs finish. This can prevent the Job scheduler from utilizing available CPU
             cores and threads, resulting in a temporary performance drop.
             </remarks>
        </member>
        <member name="P:Unity.Entities.EntityManager.UniversalQueryWithSystems">
            <summary>
            An EntityQuery instance that matches all normal components and
            - includes system entities
            - excludes chunk entities
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.UniversalQuery">
            <summary>
            An EntityQuery instance that matches all normal components and
            - excludes system entities
            - excludes chunk entities
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.Debug">
            <summary>
            An object providing debugging information and operations.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.TotalChunkAddressSpaceInBytes">
            <summary>
            The total reserved address space for all Chunks in all Worlds.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.Equals(Unity.Entities.EntityManager)">
            <summary>
            Reports whether this EntityManager references the same manager as another instance.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>True, if the <paramref name="other"/> parameter is an EntityManager instance that points to the same
            instance as this.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.Equals(System.Object)">
            <summary>
            Reports whether this EntityManager references the same manager as another object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True, if the <paramref name="obj"/> parameter is an EntityManager instance that points to the same
            instance as this.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetHashCode">
            <summary>
            Computes a hash code for this object
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.op_Equality(Unity.Entities.EntityManager,Unity.Entities.EntityManager)">
            <summary>
            Compare two EntityManager objects for equality
            </summary>
            <param name="lhs">The left EntityManager instance</param>
            <param name="rhs">The right EntityManager instnace</param>
            <returns>True if the two instances are equal, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.op_Inequality(Unity.Entities.EntityManager,Unity.Entities.EntityManager)">
            <summary>
            Compare two EntityManager objects for inequality
            </summary>
            <param name="lhs">The left EntityManager instance</param>
            <param name="rhs">The right EntityManager instnace</param>
            <returns>False if the two instances are equal, or true if not.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentData``1(Unity.Entities.Entity)">
            <summary>
            Gets the value of a component for an entity.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentData``1(Unity.Entities.SystemHandle)">
            <summary>
            Gets the value of a component for an entity associated with a system.
            </summary>
            <param name="system">The system handle.</param>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the system isn't from thie world.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentDataRW``1(Unity.Entities.SystemHandle)">
            <summary>
            Gets the value of a component for an entity associated with a system.
            </summary>
            <param name="system">The system handle.</param>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <returns>A <see cref="T:Unity.Entities.RefRW`1"/> struct of type T containing access to the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the system isn't from thie world.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetComponentData``1(Unity.Entities.Entity,``0)">
            <summary>
            Sets the value of a component of an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="componentData">The data to set.</param>
            <typeparam name="T">The component type.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetComponentData``1(Unity.Entities.SystemHandle,``0)">
            <summary>
            Sets the value of a component of an entity associated with a system.
            </summary>
            <param name="system">The system handle.</param>
            <param name="componentData">The data to set.</param>
            <typeparam name="T">The component type.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the system isn't from thie world.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetChunkComponentData``1(Unity.Entities.ArchetypeChunk)">
            <summary>
            Gets the value of a chunk component.
            </summary>
            <remarks>
            A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
            instance through either the chunk itself or through an entity stored in that chunk.
            </remarks>
            <param name="chunk">The chunk.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the ArchetypeChunk object is invalid.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetChunkComponentData``1(Unity.Entities.Entity)">
            <summary>
            Gets the value of chunk component for the chunk containing the specified entity.
            </summary>
            <remarks>
            A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
            instance through either the chunk itself or through an entity stored in that chunk.
            </remarks>
            <param name="entity">The entity.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetChunkComponentData``1(Unity.Entities.ArchetypeChunk,``0)">
            <summary>
            Sets the value of a chunk component.
            </summary>
            <remarks>
            A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
            instance through either the chunk itself or through an entity stored in that chunk.
            </remarks>
            <param name="chunk">The chunk to modify.</param>
            <param name="componentValue">The component data to set.</param>
            <typeparam name="T">The component type.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the ArchetypeChunk object is invalid.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentObject``1(Unity.Entities.Entity)">
             <summary>
             Gets the managed [UnityEngine.Component](https://docs.unity3d.com/ScriptReference/Component.html) object
             from an entity.
             </summary>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of the managed object.</typeparam>
             <returns>The managed object, cast to type T.</returns>
             <remarks>
             Accessing data in a managed object forfeits many opportunities for increased performance. Using
             managed objects should be avoided or used sparingly.
            
             The method also works for adding managed objects implementing `IComponentData`, but `GetComponentData` is the preferred method for those objects.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentObject``1(Unity.Entities.Entity,Unity.Entities.ComponentType)">
             <summary>
             Gets the managed [UnityEngine.Component](https://docs.unity3d.com/ScriptReference/Component.html) object
             from an entity.
             </summary>
             <param name="entity">The entity.</param>
             <param name="componentType">The type of the managed object.</param>
             <typeparam name="T">The return type of the managed object.</typeparam>
             <returns>The managed object, cast to type T.</returns>
             <remarks>
             Accessing data in a managed object forfeits many opportunities for increased performance. Using
             managed objects should be avoided or used sparingly.
            
             The method also works for adding managed objects implementing `IComponentData`, but `GetComponentData` is the preferred method for those objects.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentObject``1(Unity.Entities.SystemHandle)">
             <summary>
             Gets the managed [UnityEngine.Component](https://docs.unity3d.com/ScriptReference/Component.html) object
             from an entity associated with a system.
             </summary>
             <param name="system">The system handle.</param>
             <typeparam name="T">The type of the managed object.</typeparam>
             <returns>The managed object, cast to type T.</returns>
             <remarks>
             Accessing data in a managed object forfeits many opportunities for increased performance. Using
             managed objects should be avoided or used sparingly.
            
             The method also works for adding managed objects implementing `IComponentData`, but `GetComponentData` is the preferred method for those objects.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentObject``1(Unity.Entities.SystemHandle,Unity.Entities.ComponentType)">
             <summary>
             Gets the managed [UnityEngine.Component](https://docs.unity3d.com/ScriptReference/Component.html) object
             from an entity associated with a system.
             </summary>
             <param name="system">The system handle.</param>
             <param name="componentType">The type of the managed object.</param>
             <typeparam name="T">The return type of the managed object.</typeparam>
             <returns>The managed object, cast to type T.</returns>
             <remarks>
             Accessing data in a managed object forfeits many opportunities for increased performance. Using
             managed objects should be avoided or used sparingly.
            
             The method also works for adding managed objects implementing `IComponentData`, but `GetComponentData` is the preferred method for those objects.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentCount">
            <summary>
            Gets the number of shared components managed by this EntityManager.
            </summary>
            <returns>The shared component count</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponentData``1(Unity.Entities.Entity,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entity">The entity</param>
            <param name="componentData">A shared component object containing the values to set.</param>
            <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)">
             <summary>
             Sets the shared component of an entity.
             </summary>
             <remarks>
             Changing a shared component value of an entity results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entity">The entity</param>
             <param name="componentData">A shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
             <summary>
             Sets the shared component on an array of entities
             </summary>
             <remarks>
             Changing a shared component value of an entity results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entities">The target entities</param>
             <param name="componentData">A shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponent``1(Unity.Entities.EntityQuery,``0)">
             <summary>
             Sets the shared component of all entities in the query.
             </summary>
             <remarks>
             The component data stays in the same chunk, the internal shared component data indices will be adjusted.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="query">The query where matching entities will be assigned the shared component to.</param>
             <param name="componentData">A shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponentData``1(Unity.Entities.EntityQuery,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="query">The query where matching entities will be assigned the shared component to.</param>
            <param name="componentData">A shared component object containing the values to set.</param>
            <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Entities.EntityQuery,``0)">
             <summary>
             Sets the shared component of all entities in the query.
             </summary>
             <remarks>
             The component data stays in the same chunk, the internal shared component data indices will be adjusted.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="query">The query where matching entities will be assigned the shared component to.</param>
             <param name="componentData">A shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponent``1(Unity.Entities.Entity)">
            <summary>
            Gets a shared component from an entity.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetUnmanagedSharedComponentData``1(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetSharedComponent``1(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The target entity</param>
            <typeparam name="T">The type of the unmanaged shared component to look up on the target entity</typeparam>
            <returns>The index of the target entity's value for the shared component of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentIndex``1(Unity.Entities.Entity)">
            <summary>
            Retrieves the index of the shared component data value for an entity.
            </summary>
            <param name="entity">The target entity</param>
            <typeparam name="T">The type of the unmanaged shared component to look up on the target entity</typeparam>
            <returns>The index of the target entity's value for the shared component of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetUnmanagedSharedComponentDataIndex``1(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetSharedComponentIndex``1(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The target entity</param>
            <typeparam name="T">The type of the unmanaged shared component to look up on the target entity</typeparam>
            <returns>The index of the target entity's value for the shared component of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponent``1(System.Int32)">
            <summary>
            Gets a shared component by index.
            </summary>
            <remarks>
            The ECS framework maintains an internal list of unique shared components. You can get the components in this
            list, along with their indices using
            <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})"/>. An
            index in the list is valid and points to the same shared component index as long as the shared component
            order version from <see cref="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersion``1(``0)"/> remains the same.
            </remarks>
            <param name="sharedComponentIndex">The index of the shared component in the internal shared component
            list.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetUnmanagedSharedComponentData``1(System.Int32)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetSharedComponent``1(System.Int32)"/> instead.</summary>
            <param name="sharedComponentIndex">The index of the shared component in the internal shared component
            list.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetUnmanagedSharedComponentData``1(Unity.Entities.Entity,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.SetSharedComponent``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entity">The entity</param>
            <param name="componentData">An unmanaged shared component object containing the values to set.</param>
            <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponent``1(Unity.Entities.Entity,``0)">
             <summary>
             Sets the shared component of an entity.
             </summary>
             <remarks>
             Changing a shared component value of an entity results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entity">The entity</param>
             <param name="componentData">An unmanaged shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
             <summary>
             Sets the shared component value on an array of entities
             </summary>
             <remarks>
             Changing a shared component value of an entity results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entities">The target entities</param>
             <param name="componentData">An unmanaged shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentData``1(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(Unity.Entities.Entity)">
            <summary>
            Gets a shared component from an entity.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentDataIndex``1(Unity.Entities.Entity)">
            <summary>
            Retrieves the index of the shared component data value for an entity.
            </summary>
            <param name="entity">The target entity</param>
            <typeparam name="T">The type of the shared component to look up on the target entity</typeparam>
            <returns>The index of the target entity's value for the shared component of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentData``1(System.Int32)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(System.Int32)"/> instead.</summary>
            <param name="sharedComponentIndex">The index of the shared component in the internal shared component
            list.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(System.Int32)">
            <summary>
            Gets a shared component by index.
            </summary>
            <remarks>
            The ECS framework maintains an internal list of unique shared components. You can get the components in this
            list, along with their indices using
            <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})"/>. An
            index in the list is valid and points to the same shared component index as long as the shared component
            order version from <see cref="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersion``1(``0)"/> remains the same.
            </remarks>
            <param name="sharedComponentIndex">The index of the shared component in the internal shared component
            list.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>A copy of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentDataBoxed(System.Int32,Unity.Entities.TypeIndex)">
            <summary>
            Retrieves a shared component value as a managed boxed object.
            </summary>
            <remarks>This API is for debugging or performance-insensitive purposes.</remarks>
            <param name="sharedComponentIndex">The shared component index</param>
            <param name="typeIndex">The type index</param>
            <returns>The shared component value, boxed into an object.</returns>
            <seealso cref="M:Unity.Entities.EntityManager.GetSharedComponent``1(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentData``1(System.Collections.Generic.List{``0})">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0})"/> instead.</summary>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets a list of all the unique instances of a shared component type.
            </summary>
            <remarks>
            All entities with the same archetype and the same values for a shared component are stored in the same set
            of chunks. This function finds the unique shared components existing across chunks and archetype and
            fills a list with copies of those components.
            Note that the first element of the output list will always be the default value for <typeparamref name="T"/>,
            even if no entities or chunks currently use that value.
            </remarks>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentData``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})"/> instead.</summary>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <param name="sharedComponentIndices">A List&lt;int&gt; object to receive the unique instances of the
            shared components' indices.</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets a list of all unique shared components of the same type and a corresponding list of indices into the
            internal shared component list.
            </summary>
            <remarks>
            All entities with the same archetype and the same values for a shared component are stored in the same set
            of chunks. This function finds the unique shared components existing across chunks and archetype and
            fills a list with copies of those components and fills in a separate list with the indices of those components
            in the internal shared component list. You can use the indices to ask the same shared components directly
            by calling <see cref="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(System.Int32)"/>, passing in the index. An index remains valid until
            the shared component order version changes. Check this version using
            <see cref="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersion``1(``0)"/>.
            </remarks>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <param name="sharedComponentIndices">A List&lt;int&gt; object to receive the unique instances of the
            shared components' indices.</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentData``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})"/> instead.</summary>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <param name="sharedComponentIndices">A List&lt;int&gt; object to receive the unique instances of the
            shared components' indices.</param>
            <param name="sharedComponentVersions">A List&lt;int&gt; object to receive the unique instances of the
            shared components' versions.</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets a list of all unique shared components of the same type and a corresponding list of indices into the
            internal shared component list and their internal versions.
            </summary>
            <remarks>
            All entities with the same archetype and the same values for a shared component are stored in the same set
            of chunks. This function finds the unique shared components existing across chunks and archetype and
            fills a list with copies of those components and fills in two separated lists: One with the indices of those
            components in the internal shared component list and one with their internal versions to detect free list
            reuse. You can use the indices to ask the same shared components directly
            by calling <see cref="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(System.Int32)"/>, passing in the index. An index remains valid until
            the shared component order version changes. Check this version using
            <see cref="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersion``1(``0)"/>.
            </remarks>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <param name="sharedComponentIndices">A List&lt;int&gt; object to receive the unique instances of the
            shared components' indices.</param>
            <param name="sharedComponentVersions">A List&lt;int&gt; object to receive the unique instances of the
            shared components' versions.</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponents``1(Unity.Collections.NativeList{``0}@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Gets a list of all the unique instances of an unmanaged shared component type.
            </summary>
            <remarks>
            All entities with the same archetype and the same values for a shared component are stored in the same set
            of chunks. This function finds the unique shared components existing across chunks and archetype and
            fills a list with copies of those components.
            Note that the first element of the output list will always be the default value for <typeparamref name="T"/>,
            even if no entities or chunks currently use that value.
            </remarks>
            <param name="sharedComponentValues">A List&lt;T&gt; object to receive the unique instances of the
            shared component of type T.</param>
            <param name="allocator">The allocator for the native list of sharedComponentValues</param>
            <typeparam name="T">The type of shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddUnmanagedSharedComponentData``1(Unity.Entities.Entity,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <param name="componentData">The shared component value to set.</param>
            <typeparam name="T">The shared component type.</typeparam>
            <returns>Returns false if the entity already has the shared component. The shared component value is set either way.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Entities.Entity,``0)">
             <summary>
             Adds a shared component to an entity.
             </summary>
             <remarks>
             The fields of the `componentData` parameter are assigned to the added shared component.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <returns>Returns false if the entity already has the shared component. The shared component value is set either way.</returns>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <param name="componentData">The shared component value to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
             <summary>
             Adds a shared component to multiple entities
             </summary>
             <remarks>
             The fields of the `componentData` parameter are assigned to the added shared component.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">An element of <paramref name="entities"/> is invalid or does not exist.</exception>
             <param name="entities">The array of entities.</param>
             <param name="componentData">The shared component value to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersionManaged``1(``0)">
             <summary>
             Gets the version number of the specified shared component.
             </summary>
             <remarks>
             This version number is incremented each time there is a structural change involving entities in the chunk of
             the specified shared component. Such changes include creating or destroying entities or anything that changes
             the archetype of an entity.
            
             Version numbers can overflow. To compare if one version is more recent than another use a calculation such as:
            
             <code>
             bool VersionBisNewer = (VersionB - VersionA) > 0;
             </code>
             </remarks>
             <param name="sharedComponent">The shared component instance.</param>
             <typeparam name="T">The shared component type.</typeparam>
             <returns>The current version number.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersion``1(``0)">
             <summary>
             Gets the version number of the specified shared component.
             </summary>
             <remarks>
             This version number is incremented each time there is a structural change involving entities in the chunk of
             the specified shared component. Such changes include creating or destroying entities or anything that changes
             the archetype of an entity.
            
             Version numbers can overflow. To compare if one version is more recent than another use a calculation such as:
            
             <code>
             bool VersionBisNewer = (VersionB - VersionA) > 0;
             </code>
             </remarks>
             <param name="sharedComponent">The unmanaged shared component instance.</param>
             <typeparam name="T">The unmanaged shared component type.</typeparam>
             <returns>The current version number.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetBuffer``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Gets the dynamic buffer of an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="isReadOnly">Specify whether the access to the component through this object is read only
            or read and write.</param>
            <typeparam name="T">The type of the buffer's elements.</typeparam>
            <returns>The DynamicBuffer object for accessing the buffer contents.</returns>
            <exception cref="T:System.ArgumentException">Thrown if T is an unsupported type.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetBuffer``1(Unity.Entities.SystemHandle,System.Boolean)">
            <summary>
            Gets the dynamic buffer of an entity associated with a system.
            </summary>
            <param name="system">The system handle.</param>
            <param name="isReadOnly">Specify whether the access to the component through this object is read only
            or read and write.</param>
            <typeparam name="T">The type of the buffer's elements.</typeparam>
            <returns>The DynamicBuffer object for accessing the buffer contents.</returns>
            <exception cref="T:System.ArgumentException">Thrown if T is an unsupported type.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetStorageInfo(Unity.Entities.Entity)">
            <summary>
            Gets a struct containing information about the archetype in which an entity is stored.
            </summary>
            <param name="entity">The entity being queried for storage information.</param>
            <returns>Information about the storage of the target entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.SwapComponents(Unity.Entities.ArchetypeChunk,System.Int32,Unity.Entities.ArchetypeChunk,System.Int32)">
             <summary>
             Swaps the components of two entities.
             </summary>
             <remarks>
             The entities must have the same components. However, this function can swap the components of entities in
             different worlds, so they do not need to have identical archetype instances.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before swapping the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="leftChunk">A chunk containing one of the entities to swap.</param>
             <param name="leftIndex">The index within the `leftChunk` of the entity and components to swap. Must be in
             the range [0,leftChunk.Count).</param>
             <param name="rightChunk">The chunk containing the other entity to swap. This chunk can be the same as
             the `leftChunk`. It also does not need to be in the same World as `leftChunk`.</param>
             <param name="rightIndex">The index within the `rightChunk`  of the entity and components to swap. Must be in
             the range [0,rightChunk.Count).</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetChunk(Unity.Entities.Entity)">
            <summary>
            Gets the chunk in which the specified entity is stored.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The chunk containing the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentCount(Unity.Entities.Entity)">
            <summary>
            Gets the number of component types associated with an entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The number of components.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
             <summary>
             Adds a component to an entity.
             </summary>
             <remarks>
             Can add any kind of component except chunk components. For chunk
             components, use <see cref="M:Unity.Entities.EntityManager.AddChunkComponentData``1(Unity.Entities.Entity)"/>.
            
             Adding a component changes the entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added component has the default values for the type.
            
             If the <see cref="T:Unity.Entities.Entity"/> object refers to an entity that already has the specified <see cref="T:Unity.Entities.ComponentType"/>,
             the function returns false without performing any modifications.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The Entity.</param>
             <param name="componentType">The type of component to add.</param>
             <returns>If the component was successfully added to the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.SystemHandle,Unity.Entities.ComponentType)">
             <summary>
             Adds a component to an entity associated with a system.
             </summary>
             <remarks>
             Can add any kind of component except chunk components. For chunk
             components, use <see cref="M:Unity.Entities.EntityManager.AddChunkComponentData``1(Unity.Entities.Entity)"/>.
            
             Adding a component changes the entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added component has the default values for the type.
            
             If the <see cref="T:Unity.Entities.Entity"/> object refers to an entity that already has the specified <see cref="T:Unity.Entities.ComponentType"/>,
             the function returns false without performing any modifications.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="system">The system handle.</param>
             <param name="componentType">The type of component to add.</param>
             <returns>If the component was successfully added to the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent``1(Unity.Entities.Entity)">
             <summary>
             Adds a component to an entity.
             </summary>
             <remarks>
             Can add any kind of component except chunk components. For chunk
             components, use <see cref="M:Unity.Entities.EntityManager.AddChunkComponentData``1(Unity.Entities.Entity)"/>.
            
             Adding a component changes the entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added component has the default values for the type.
            
             If the <see cref="T:Unity.Entities.Entity"/> object refers to an entity that already has the specified <see cref="T:Unity.Entities.ComponentType"/>,
             the function returns false without performing any modifications.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before addting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The Entity.</param>
             <typeparam name="T">The type of component to add.</typeparam>
             <returns>If the component was successfully added to the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent``1(Unity.Entities.SystemHandle)">
             <summary>
             Adds a component to an entity associated with a system.
             </summary>
             <remarks>
             Can add any kind of component except chunk components. For chunk
             components, use <see cref="M:Unity.Entities.EntityManager.AddChunkComponentData``1(Unity.Entities.Entity)"/>.
            
             Adding a component changes the entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added component has the default values for the type.
            
             If the <see cref="T:Unity.Entities.Entity"/> object refers to an entity that already has the specified <see cref="T:Unity.Entities.ComponentType"/>,
             the function returns false without performing any modifications.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before addting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="system">The system handle.</param>
             <typeparam name="T">The type of component to add.</typeparam>
             <returns>If the component was successfully added to the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateSingleton``1(Unity.Collections.FixedString64Bytes)">
            <summary>
            Creates and supports only a single entity with a given unmanaged component.
            </summary>
            <remarks>
            Note that while zero-size component may be created, they can not be accessed directly in code. They are
            only usable for situations such as in calling <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>.
            </remarks>
            <param name="name">The debug friendly name associated with the singleton component entity.</param>
            <typeparam name="T">The type of component to create.</typeparam>
            <returns>The Entity object that you can use to access the singleton component entity.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the component type has no fields, is enableable, or an entity containing it already exists.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateSingleton``1(``0,Unity.Collections.FixedString64Bytes)">
            <summary>
            Creates and supports only a single entity with a given unmanaged component.
            </summary>
            <remarks>
            Note that while zero-size component may be created, they can not be accessed directly in code. They are
            only usable for situations such as in calling <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>.
            </remarks>
            <param name="componentData">The data to assign to the singleton component.</param>
            <param name="name">The debug friendly name associated with the singleton component entity.</param>
            <typeparam name="T">The type of component to create.</typeparam>
            <returns>The Entity object that you can use to access the singleton component entity.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the component type has no fields, is enableable, or an entity containing it already exists.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateSingletonBuffer``1(Unity.Collections.FixedString64Bytes)">
            <summary>
            Creates and supports only a single entity with a given unmanaged component buffer.
            </summary>
            <param name="name">The debug friendly name associated with the singleton component buffer entity.</param>
            <typeparam name="T">The type of component buffer to create.</typeparam>
            <returns>The Entity object that you can use to access the singleton component buffer entity.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the component buffer type has no fields, is enableable, or an entity containing it already exists.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)">
             <summary>
             Adds a component to a set of entities defined by a EntityQuery.
             </summary>
             <remarks>
             Can add any kind of component.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before addting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to modify.</param>
             <param name="componentType">The type of component to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Adds components to a set of entities defined by a EntityQuery.
             </summary>
             <remarks>
             You can use this method to add a component to an Entity.
            
             The added components have the default values for the type.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before addting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to modify.</param>
             <param name="componentTypeSet">The type of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponentData``1(Unity.Entities.EntityQuery,Unity.Collections.NativeArray{``0})">
             <summary>
             Adds a component to a set of entities defined by the EntityQuery and
             sets the component of each entity in the query to the value in the component array.
             </summary>
             <remarks>
             You can use this method to add a component to an Entity.
            
             Adding components changes an entity's archetype and results in the entity being moved to a different
             chunk.
             componentArray.Length must match entityQuery.ToEntityArray().Length.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to add component to</param>
             <param name="componentArray">The NativeArray to add the components to.</param>
             <typeparam name="T">The type of component to add.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent``1(Unity.Entities.EntityQuery)">
             <summary>
             Adds a component to a set of entities defined by a EntityQuery.
             </summary>
             <remarks>
             Can add any kind of component except chunk components.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to modify.</param>
             <typeparam name="T">The type of component to add.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType)">
             <summary>
             Adds a component to a set of entities.
             </summary>
             <remarks>
             Can add any kind of component except chunk components.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the chunk. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The `entities` array refers to an entity that does not exist.</exception>
             <param name="entities">An array of Entity objects.</param>
             <param name="componentType">The type of component to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@)">
             <summary>
             Adds components to a specified collection of entities.
             </summary>
             <remarks>
             You can use this method to add a component to an Entity.
            
             The added components have the default values for the type.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entities">The collection of entities to modify.</param>
             <param name="componentTypeSet">The type of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@)">
             <summary>
             Removes multiple components from a specified colleciton of entities.
             </summary>
             <remarks>
             You can use this method to remove a component from an Entity
            
             It's OK if some or all of the components to remove are already missing from the entity.
            
             Removing components changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If any of the types are a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entities">The collection of entities to modify.</param>
             <param name="componentTypeSet">The types of components to remove.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType)">
             <summary>
             Remove a component from a set of entities.
             </summary>
             <remarks>
             Can remove any kind of component.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If componentType is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the chunk. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The `entities` array refers to an entity that does not exist.</exception>
             <param name="entities">An array of Entity objects.</param>
             <param name="componentType">The type of component to remove.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity})">
             <summary>
             Adds a component to a set of entities.
             </summary>
             <remarks>
             Can add any kind of component.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The `entities` array refers to an entity that does not exist.</exception>
             <param name="entities">An array of Entity objects.</param>
             <typeparam name="T">The type of component to add.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.SystemHandle,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Adds a set of component to an entity associated with a system.
             </summary>
             <remarks>
             You can use this method to add a component to an Entity.
            
             Adding components changes the entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             If the <see cref="T:Unity.Entities.Entity"/> object refers to an entity that has been destroyed, this function throws an InvalidOperationException
             exception.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.InvalidOperationException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="system">The system handle.</param>
             <param name="componentTypeSet">The types of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Adds a set of component to an entity.
             </summary>
             <remarks>
             You can use this method to add a component to an Entity.
            
             Adding components changes the entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             If the <see cref="T:Unity.Entities.Entity"/> object refers to an entity that has been destroyed, this function throws an InvalidOperationException
             exception.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.InvalidOperationException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity to modify.</param>
             <param name="componentTypeSet">The types of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponents(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/> instead.</summary>
            <param name="entity">The entity to modify.</param>
            <param name="componentTypeSet">The types of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
             <summary>
             Removes a component from an entity.
             </summary>
             <remarks>
             Can remove any kind of component.
            
             Returns false if the entity already does not have the specified component, or if the entity does not exist.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If componentType is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity to modify.</param>
             <param name="componentType">The type of component to remove.</param>
             <returns>True if the component was removed successfully.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Entities.SystemHandle,Unity.Entities.ComponentType)">
             <summary>
             Removes a component from an entity associated with a system.
             </summary>
             <remarks>
             Can remove any kind of component.
            
             Returns false if the entity already does not have the specified component, or if the entity does not exist.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If componentType is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="system">The system handle.</param>
             <param name="componentType">The type of component to remove.</param>
             <returns>True if the component was removed successfully.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Removes multiple components from an entity.
             </summary>
             <remarks>
             You can use this method to remove a component from an Entity
            
             It's OK if some or all of the components to remove are already missing from the entity, or if the target
             entity does not exist.
            
             Removing components changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If any of the types are a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity to modify.</param>
             <param name="componentTypeSet">The types of components to remove.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)">
             <summary>
             Removes a component from a set of entities defined by an EntityQuery.
             </summary>
             <remarks>
             Can remove any kind of component.
            
             It's OK if some or all of the components to remove are already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If componentType is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to modify.</param>
             <param name="componentType">The type of component to remove.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Removes a set of components from a set of entities defined by an EntityQuery.
             </summary>
             <remarks>
             You can use this method to remove a component from an Entity
            
             It's OK if some or all of the components to remove are already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If any of the types are a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to modify.</param>
             <param name="componentTypeSet">The types of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent``1(Unity.Entities.Entity)">
             <summary>
             Removes a component from an entity.
             </summary>
             <remarks>
             Can remove any kind of component except chunk components.
            
             Returns false if the entity was already missing the component.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If T is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component to remove.</typeparam>
             <returns>True if the component was removed successfully.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent``1(Unity.Entities.SystemHandle)">
             <summary>
             Removes a component from an entity associated with a system.
             </summary>
             <remarks>
             Can remove any kind of component except chunk components.
            
             Returns false if the entity was already missing the component.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If T is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose() on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="system">The system handle.</param>
             <typeparam name="T">The type of component to remove.</typeparam>
             <returns>True if the component was removed successfully.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent``1(Unity.Entities.EntityQuery)">
             <summary>
             Removes a component from a set of entities defined by a EntityQuery.
             </summary>
             <remarks>
             Can remove any kind of component except chunk components.
            
             It's OK if the component to remove is already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery defining the entities to modify.</param>
             <typeparam name="T">The type of component to remove.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity})">
             <summary>
             Removes a component from a set of entities.
             </summary>
             <remarks>
             Can remove any kind of component except chunk components.
            
             It's OK if the component to remove is already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             If T is a managed component which implements <see cref="T:System.IDisposable"/>, this operation will invoke Dispose()  on the component value.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entities">An array identifying the entities to modify.</param>
             <typeparam name="T">The type of component to remove.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponentData``1(Unity.Entities.Entity,``0)">
             <summary>
             Adds a component to an entity and set the value of that component.
             </summary>
             <remarks>
             Can add any kind of component except chunk components, managed components, or shared components.
            
             Returns false if the entity already had the component. The component's data is set regardless.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The type of component.</typeparam>
             <returns>Returns false if the entity alredy had the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponentData``1(Unity.Entities.SystemHandle,``0)">
             <summary>
             Adds a component to an entity associated with a system and sets the value of that component.
             </summary>
             <remarks>
             Can add any kind of component except chunk components, managed components, or shared components.
            
             Returns false if the entity already had the component. The component's data is set regardless.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="system">The system handle.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The type of component.</typeparam>
             <returns>Returns false if the entity already had the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveChunkComponent``1(Unity.Entities.Entity)">
             <summary>
             Removes a chunk component from the specified entity.
             </summary>
             <remarks>
             A chunk component is common to all entities in a chunk. Removing the chunk component from an entity changes
             that entity's archetype and results in the entity being moved to a different chunk (that does not have the
             removed component).
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <returns>False if the entity did not have the component.</returns>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component to remove.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddChunkComponentData``1(Unity.Entities.Entity)">
             <summary>
             Adds a chunk component to the specified entity.
             </summary>
             <remarks>
             Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved
             to a different chunk, either one that already has an archetype containing the chunk component or a new
             chunk.
            
             A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
             instance through either the chunk itself or through an entity stored in that chunk. In either case, getting
             or setting the component reads or writes the same data.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <returns>False if the entity already had the chunk component. The chunk component's value is set regardless.</returns>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component, which must implement IComponentData.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddChunkComponentData``1(Unity.Entities.EntityQuery,``0)">
             <summary>
             Adds a chunk component to each of the chunks identified by an EntityQuery and sets the component values.
             </summary>
             <remarks>
             This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified
             component to them.
            
             A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
             instance through either the chunk itself or through an entity stored in that chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery identifying the chunks to modify.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The type of component, which must implement IComponentData.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.RemoveChunkComponentData``1(Unity.Entities.EntityQuery)">
             <summary>
             Removes a chunk component from the chunks identified by an EntityQuery.
             </summary>
             <remarks>
             A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
             instance through either the chunk itself or through an entity stored in that chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before removing the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entityQuery">The EntityQuery identifying the chunks to modify.</param>
             <typeparam name="T">The type of component to remove.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddBuffer``1(Unity.Entities.Entity)">
             <summary>
             Adds a dynamic buffer component to an entity.
             </summary>
             <remarks>
             A buffer component stores the number of elements inside the chunk defined by the [InternalBufferCapacity]
             attribute applied to the buffer element type declaration. Any additional elements are stored in a separate memory
             block that is managed by the EntityManager.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             (You can add a buffer component with the regular AddComponent methods, but unlike those methods, this
             method conveniently also returns the new buffer.)
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of buffer element. Must implement IBufferElementData.</typeparam>
             <returns>The buffer.</returns>
             <seealso cref="T:Unity.Entities.InternalBufferCapacityAttribute"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponentObject(Unity.Entities.Entity,System.Object)">
             <summary>
             Adds a managed [UnityEngine.Component](https://docs.unity3d.com/ScriptReference/Component.html)
             object to an entity.
             </summary>
             <remarks>
             Accessing data in a managed object forfeits many opportunities for increased performance. Adding
             managed objects to an entity should be avoided or used sparingly.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The method also works for adding managed objects implementing `IComponentData`, but `AddComponentData` is the preferred method for those objects.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the object. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="entity">The entity to modify.</param>
             <param name="componentData">An object inheriting UnityEngine.Component.</param>
             <exception cref="T:System.ArgumentNullException">If the componentData object is not an instance of
             UnityEngine.Component.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddComponentObject(Unity.Entities.SystemHandle,System.Object)">
             <summary>
             Adds a managed [UnityEngine.Component](https://docs.unity3d.com/ScriptReference/Component.html)
             object to an entity associated with a system.
             </summary>
             <remarks>
             Accessing data in a managed object forfeits many opportunities for increased performance. Adding
             managed objects to an entity should be avoided or used sparingly.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The method also works for adding managed objects implementing `IComponentData`, but `AddComponentData` is the preferred method for those objects.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the object. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="system">The system handle with the system entity to modify.</param>
             <param name="componentData">An object inheriting UnityEngine.Component.</param>
             <exception cref="T:System.ArgumentNullException">If the componentData object is not an instance of
             UnityEngine.Component.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponentData``1(Unity.Entities.Entity,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <param name="componentData">The shared component value to set.</param>
            <typeparam name="T">The shared component type.</typeparam>
            <returns>Returns false if the entity already has the shared component. The shared component value is set either way.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)">
             <summary>
             Adds a shared component to an entity.
             </summary>
             <remarks>
             The fields of the `componentData` parameter are assigned to the added shared component.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <returns>Returns false if the entity already has the shared component. The shared component value is set either way.</returns>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity.</param>
             <param name="componentData">The shared component value to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
             <summary>
             Adds a shared component to an array of entities
             </summary>
             <remarks>
             The fields of the `componentData` parameter are assigned to the added shared component.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">A target <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entities">The target entities</param>
             <param name="componentData">The shared component value to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Entities.EntityQuery,``0)">
             <summary>
             Adds an unmanaged shared component to a set of entities defined by a EntityQuery.
             </summary>
             <remarks>
             The fields of the `componentData` parameter are assigned to all of the added shared components.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entityQuery">The EntityQuery defining a set of entities to modify.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The data type of the shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponentData``1(Unity.Entities.EntityQuery,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entityQuery">The EntityQuery defining a set of entities to modify.</param>
            <param name="componentData">The data to set.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Entities.EntityQuery,``0)">
             <summary>
             Adds a possibly-managed shared component to a set of entities defined by a EntityQuery.
             </summary>
             <remarks>
             The fields of the `componentData` parameter are assigned to all of the added shared components.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entityQuery">The EntityQuery defining a set of entities to modify.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The data type of the shared component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetArchetype(Unity.Entities.Entity,Unity.Entities.EntityArchetype)">
             <summary>
             Adds and removes components of an entity to match the specified EntityArchetype.
             </summary>
             <remarks>
             Components of the archetype which the entity already has will preserve their values.
            
             Components of the archetype which the entity does *not* have will get the default value for their types.
            
             Adding a component to an entity changes its archetype and results in the entity being moved to a
             different chunk. The entity moves to a chunk with other entities that have the same shared component values.
             A new chunk is created if no chunk with the same archetype and shared component values currently exists.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity whose archetype to change.</param>
             <param name="archetype">The new archetype for the entity.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetEnabled(Unity.Entities.Entity,System.Boolean)">
             <summary>
             Adds or removes the <see cref="T:Unity.Entities.Disabled"/> component to an <see cref="T:Unity.Entities.Entity"/>.
             </summary>
             <remarks>
             Entities with the <see cref="T:Unity.Entities.Disabled"/> component are not matched by any <see cref="T:Unity.Entities.EntityQuery"/>, and are
             therefore not processed by systems. To override this behavior for a specific query, use
             EntityQueryOptions.IncludeDisabledEntities at query creation time.
            
             If the entity was converted from a prefab and thus has a <see cref="T:Unity.Entities.LinkedEntityGroup"/> component, the entire group will be enabled or disabled.
            
             This operation requires a structural change to add or remove the <see cref="T:Unity.Entities.Disabled"/> component. To enable or disable individual components
             without requiring a structural change, see <see cref="T:Unity.Entities.IEnableableComponent"/> and <see cref="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)"/>.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity to enable or disable</param>
             <param name="enabled">True if the entity should be enabled</param>
             <seealso cref="M:Unity.Entities.EntityManager.IsEnabled(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.IsEnabled(Unity.Entities.Entity)">
            <summary>
            Check whether an entire entity has the <see cref="T:Unity.Entities.Disabled"/> tag component.
            </summary>
            <remarks>
            Entities with the <see cref="T:Unity.Entities.Disabled"/> component are not matched by any <see cref="T:Unity.Entities.EntityQuery"/>, and are
            therefore not processed by systems. To override this behavior for a specific query, use
            EntityQueryOptions.IncludeDisabledEntities at query creation time.
            </remarks>
            <param name="entity">The entity to check</param>
            <returns>True if the target entity does not have <see cref="T:Unity.Entities.Disabled"/> tag component, or false if it does.</returns>
            <seealso cref="M:Unity.Entities.EntityManager.SetEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetEnabled(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityManager.IsEnabled(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The entity to check</param>
            <returns>True if the target entity does not have <see cref="T:Unity.Entities.Disabled"/> tag component, or false if it does.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.IsComponentEnabled``1(Unity.Entities.Entity)">
            <summary>
            Checks whether a given <see cref="T:Unity.Entities.ComponentType"/> is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <remarks>An entity with a disabled component will not match an <see cref="T:Unity.Entities.EntityQuery"/> that requires that component,
            and will match a query that excludes that component.</remarks>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <typeparam name="T">The component type whose enabled status should be checked. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="entity">The entity whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.IsComponentEnabled``1(Unity.Entities.SystemHandle)">
            <summary>
            Checks whether a given <see cref="T:Unity.Entities.ComponentType"/> is enabled on the specified system using <see cref="T:Unity.Entities.SystemHandle"/>.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <typeparam name="T">The component type whose enabled status should be checked. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="systemHandle">The system whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.SystemHandle)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.SystemHandle,System.Boolean)">
            <summary>
            Enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.SystemHandle"/>.
            </summary>
            <remarks>
            This operation does not cause a structural change, and does not affect the current value of the component.
            To enable/disable components from a job, use <see cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.SystemHandle,System.Boolean)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.SystemHandle"/> does not exist.</exception>
            <typeparam name="T">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="systemHandle">The system whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            <seealso cref="M:Unity.Entities.EntityManager.IsComponentEnabled``1(Unity.Entities.SystemHandle)"/>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.SystemHandle,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.IsComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary>
            Checks whether a given <see cref="T:Unity.Entities.ComponentType"/> is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <remarks>An entity with a disabled component will not match an <see cref="T:Unity.Entities.EntityQuery"/> that requires that component,
            and will match a query that excludes that component.</remarks>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be checked.</param>
            <param name="componentType">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</param>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.EntityManager.SetComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType,System.Boolean)"/>
            <seealso cref="M:Unity.Entities.ComponentLookup`1.IsComponentEnabled(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)">
             <summary>
             Enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>.
             </summary>
             <remarks>
             This operation does not cause a structural change, and does not affect the current value of the component.
            
             An entity with a disabled component will not match an <see cref="T:Unity.Entities.EntityQuery"/> that requires that component,
             and will match a query that excludes that component.
            
             To enable/disable components from a job, use <see cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)"/>.
             To enable/disable an entire <see cref="T:Unity.Entities.Entity"/>, use <see cref="M:Unity.Entities.EntityManager.SetEnabled(Unity.Entities.Entity,System.Boolean)"/> (which, unlike this function,
             does involve a structural change).
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <typeparam name="T">The component type to enable or disable. This type must implement the
             <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
             <param name="entity">The entity whose component should be enabled or disabled.</param>
             <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
             <seealso cref="M:Unity.Entities.EntityManager.IsComponentEnabled``1(Unity.Entities.Entity)"/>
             <seealso cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType,System.Boolean)">
             <summary>
             Enable or disable <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>.
             </summary>
             <remarks>
             This operation does not cause a structural change, and does not affect the current value of the component.
            
             An entity with a disabled component will not match an <see cref="T:Unity.Entities.EntityQuery"/> that requires that component,
             and will match a query that excludes that component.
            
             To enable/disable components from a job, use <see cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)"/>.
             To enable/disable an entire <see cref="T:Unity.Entities.Entity"/>, use <see cref="M:Unity.Entities.EntityManager.SetEnabled(Unity.Entities.Entity,System.Boolean)"/> (which, unlike this function,
             does involve a structural change).
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity whose component should be enabled or disabled.</param>
             <param name="componentType">The component type to enable or disable. This type must implement the
             <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</param>
             <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
             <seealso cref="M:Unity.Entities.EntityManager.IsComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType)"/>
             <seealso cref="M:Unity.Entities.ComponentLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.EntityArchetype)">
             <summary>
             Creates an entity having the specified archetype.
             </summary>
             <remarks>
             The EntityManager creates the entity in the first available chunk with the matching archetype that has
             enough space.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="archetype">The archetype for the new entity.</param>
             <returns>The Entity object that you can use to access the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.ComponentType[])">
             <summary>
             Creates an entity having components of the specified types.
             </summary>
             <remarks>
             The EntityManager creates the entity in the first available chunk with the matching archetype that has
             enough space.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="types">The types of components to add to the new entity.</param>
             <returns>The Entity object that you can use to access the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntity">
             <summary>
             Creates an entity with no components.
             </summary>
             <remarks>
             The EntityManager creates the entity in the first available chunk with the archetype having no components.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before setting the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <returns>The Entity object that you can use to access the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.EntityArchetype,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>
            Creates a set of entities of the specified archetype.
            </summary>
            <remarks>Fills the [NativeArray](https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeArray_1.html)
            object assigned to the `entities` parameter with the Entity objects of the created entities. Each entity
            has the components specified by the <see cref="T:Unity.Entities.EntityArchetype"/> object assigned
            to the `archetype` parameter. The EntityManager adds these entities to the <see cref="P:Unity.Entities.EntityManager.World"/> entity list. Use the
            Entity objects in the array for further processing, such as setting the component values.</remarks>
            <param name="archetype">The archetype defining the structure for the new entities.</param>
            <param name="entities">An array to hold the Entity objects needed to access the new entities.
            The length of the array determines how many entities are created.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.EntityArchetype,System.Int32,Unity.Collections.Allocator)">
            <summary>
            Creates a set of entities of the specified archetype.
            </summary>
            <remarks>Creates a [NativeArray](https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeArray_1.html) of entities,
            each of which has the components specified by the <see cref="T:Unity.Entities.EntityArchetype"/> object assigned
            to the `archetype` parameter. The EntityManager adds these entities to the <see cref="P:Unity.Entities.EntityManager.World"/> entity list.</remarks>
            <param name="archetype">The archetype defining the structure for the new entities.</param>
            <param name="entityCount">The number of entities to create with the specified archetype.</param>
            <param name="allocator">How the created native array should be allocated.</param>
            <returns>
            A [NativeArray](https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeArray_1.html) of entities
            with the given archetype.
            </returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.EntityArchetype,System.Int32)">
            <summary>
            Creates a set of entities of the specified archetype.
            </summary>
            <remarks>Unlike the other overloads, this does not create an array of Entity values. You don't always need the Entity value of a newly created entity because maybe you only need to access the entity through queries.</remarks>
            <param name="archetype">The archetype defining the structure for the new entities.</param>
            <param name="entityCount">The number of entities to create with the specified archetype.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Entities.EntityQuery)">
            <summary>
            Destroy all entities having a common set of component types.
            </summary>
            <remarks>Since entities in the same chunk share the same component structure, this function effectively destroys
            the chunks holding any entities identified by the `entityQueryFilter` parameter.</remarks>
            <param name="entityQuery">Defines the components an entity must have to qualify for destruction.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.DestroyAndResetAllEntities">
            <summary>
            Destroys all entities in the EntityManager and resets the internal entity ID version table.
            </summary>
            <remarks>
            This method can be used to reset an EntityManager for the purpose of creating data that can be written to disk with a deterministic, exact matching file on disk.
            It resets all chunk and entity version state so that it can be serialized to disk back to a state that is the same as a clean world.
            Archetypes and EntityQuery are not reset since they are often cached / owned by systems, but these are also not stored on disk.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>
            Destroys all entities in an array.
            </summary>
            <remarks>
            **Important:** This method creates a sync point, which means that the EntityManager waits for all
            currently running jobs to complete before destroying the entity. No additional jobs can start before
            the method is finished. A sync point can cause a drop in performance because the ECS framework might not
            be able to use the processing power of all available cores.
            </remarks>
            <param name="entities">An array containing the Entity objects of the entities to destroy.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Collections.NativeSlice{Unity.Entities.Entity})">
            <summary>
            Destroys all entities in a slice of an array.
            </summary>
            <remarks>
            **Important:** This method creates a sync point, which means that the EntityManager waits for all
            currently running jobs to complete before destroying the entity. No additional jobs can start before
            the method is finished. A sync point can cause a drop in performance because the ECS framework might not
            be able to use the processing power of all available cores.
            </remarks>
            <param name="entities">The slice of an array containing the Entity objects of the entities to destroy.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Entities.Entity)">
            <summary>
            Destroys an entity.
            </summary>
            <remarks>
            **Important:** This method creates a sync point, which means that the EntityManager waits for all
            currently running jobs to complete before destroying the entity. No additional jobs can start before
            the method is finished. A sync point can cause a drop in performance because the ECS framework might not
            be able to use the processing power of all available cores.
            </remarks>
            <param name="entity">The Entity object of the entity to destroy.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.Instantiate(Unity.Entities.Entity)">
             <summary>
             Clones an entity.
             </summary>
             <remarks>
             The new entity has the same archetype and component values as the original; however, <see cref="T:Unity.Entities.ICleanupComponentData"/>
             and <see cref="T:Unity.Entities.Prefab"/> components are removed from the clone.
            
             If the source entity was converted from a prefab and thus has a <see cref="T:Unity.Entities.LinkedEntityGroup"/> component,
             the entire group is cloned as a new set of entities. Entity references on components that are being cloned to entities inside
             the set are remapped to the instantiated entities.
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntity">The entity to clone.</param>
             <returns>The Entity object for the new entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.Instantiate(Unity.Entities.Entity,Unity.Collections.NativeArray{Unity.Entities.Entity})">
             <summary>
             Makes multiple clones of an entity.
             </summary>
             <remarks>
             The new entity has the same archetype and component values as the original, however cleanup and prefab tag components are removed from the clone.
            
             If the source entity has a <see cref="T:Unity.Entities.LinkedEntityGroup"/> component, the entire group is cloned as a new
             set of entities. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntity">The entity to clone.</param>
             <param name="outputEntities">An array to receive the Entity objects of the root entity in each clone.
             The length of this array determines the number of clones.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.Instantiate(Unity.Entities.Entity,System.Int32,Unity.Collections.Allocator)">
             <summary>
             Makes multiple clones of an entity.
             </summary>
             <remarks>
             The new entity has the same archetype and component values as the original, however cleanup and prefab tag components are removed from the clone.
            
             If the source entity has a <see cref="T:Unity.Entities.LinkedEntityGroup"/> component, the entire group is cloned as a new
             set of entities. Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntity">The entity to clone.</param>
             <param name="instanceCount">The number of entities to instantiate with the same components as the source entity.</param>
             <param name="allocator">How the created native array should be allocated.</param>
             <returns>A [NativeArray](https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeArray_1.html) of entities.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.Instantiate(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Collections.NativeArray{Unity.Entities.Entity})">
             <summary>
             Clones a set of entities.
             </summary>
             <remarks>
             The new entity has the same archetype and component values as the original, however cleanup and prefab tag components are removed from the clone.
            
             Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities.
             This method overload ignores the <see cref="T:Unity.Entities.LinkedEntityGroup"/> component,
             since the group of entities that will be cloned is passed explicitly.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntities">The set of entities to clone</param>
             <param name="outputEntities">the set of entities that were cloned. outputEntities.Length must match srcEntities.Length</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.CopyEntities(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Collections.NativeArray{Unity.Entities.Entity})">
             <summary>
             Clones a set of entities, different from Instantiate because it does not remove the prefab tag component.
             </summary>
             <remarks>
             The new entity has the same archetype and component values as the original, however cleanup components are removed from the clone.
            
             Entity references on components that are being cloned to entities inside the set are remapped to the instantiated entities.
             This method overload ignores the <see cref="T:Unity.Entities.LinkedEntityGroup"/> component,
             since the group of entities that will be cloned is passed explicitly.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before creating the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntities">The set of entities to clone</param>
             <param name="outputEntities">the set of entities that were cloned. outputEntities.Length must match srcEntities.Length</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetCreatedAndDestroyedEntitiesAsync(Unity.Collections.NativeList{System.Int32},Unity.Collections.NativeList{Unity.Entities.Entity},Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Detects the created and destroyed entities compared to last time the method was called with the given state.
            </summary>
            <remarks>
            Entities must be fully destroyed, if cleanup components keep it alive it still counts as not yet destroyed.
            <see cref="T:Unity.Entities.EntityCommandBuffer"/> instances that have not been played back will have no effect on this until they are played back.
            </remarks>
            <param name="state">The same state list must be passed when you call this method, it remembers the entities that were already notified created and destroyed.</param>
            <param name="createdEntities">The entities that were created.</param>
            <param name="destroyedEntities">The entities that were destroyed.</param>
            <returns>a <see cref="T:Unity.Jobs.JobHandle"/> for the job scheduled by this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetCreatedAndDestroyedEntities(Unity.Collections.NativeList{System.Int32},Unity.Collections.NativeList{Unity.Entities.Entity},Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Detects the created and destroyed entities compared to last time the method was called with the given state.
            </summary>
            <remarks>
            Entities must be fully destroyed, if cleanup components keep it alive it still counts as not yet destroyed.
            <see cref="T:Unity.Entities.EntityCommandBuffer"/> instances that have not been played back will have no effect on this until they are played back.
            </remarks>
            <param name="state">The same state list must be passed when you call this method, it remembers the entities that were already notified created and destroyed.</param>
            <param name="createdEntities">The entities that were created.</param>
            <param name="destroyedEntities">The entities that were destroyed.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateArchetype(Unity.Entities.ComponentType[])">
            <summary>
            Creates an archetype from a set of component types.
            </summary>
            <remarks>
            Creates a new archetype in the ECS framework's internal type registry, unless the archetype already exists.
            </remarks>
            <param name="types">The component types to include as part of the archetype.</param>
            <returns>The EntityArchetype object for the archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateArchetype(Unity.Collections.NativeArray{Unity.Entities.ComponentType})">
            <summary>
            Creates an archetype from a set of component types.
            </summary>
            <remarks>
            Creates a new archetype in the ECS framework's internal type registry, unless the archetype already exists.
            </remarks>
            <param name="types">The component types to include as part of the archetype.</param>
            <returns>The EntityArchetype object for the archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CopyEntitiesFrom(Unity.Entities.EntityManager,Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>
            Instantiates / Copies all entities from srcEntityManager and copies them into this EntityManager.
            Entity references on components that are being cloned to entities inside the srcEntities set are remapped to the instantiated entities.
            </summary>
            <param name="srcEntityManager">The EntityManager to copy from</param>
            <param name="srcEntities">Entities in the srcEntityManager that have component with Entity references</param>
            <param name="outputEntities">New entities that have been remapped from srcEntities</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.CopyAndReplaceEntitiesFrom(Unity.Entities.EntityManager)">
            <summary>
            Copies all entities from srcEntityManager and replaces all entities in this EntityManager
            </summary>
            <remarks>
            Guarantees that the chunk layout and order of the entities will match exactly, thus this method can be used for deterministic rollback.
            This feature is not complete and only supports a subset of the EntityManager features at the moment:
            * Currently it copies all CleanupComponents (They should not be copied)
            * Currently does not support class based components
            </remarks>
            <param name="srcEntityManager">The EntityManager to copy from</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Entities.EntityManager)">
             <summary>
             Moves all entities managed by the specified EntityManager to the world of this EntityManager.
             </summary>
             <remarks>
             The entities moved are owned by this EntityManager.
            
             Each <see cref="P:Unity.Entities.EntityManager.World"/> has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Collections.NativeArray{Unity.Entities.Entity}@,Unity.Entities.EntityManager)">
             <summary>
             Moves all entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager and fills
             an array with their Entity objects.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager. Use the `output` array to make post-move
             changes to the transferred entities.
            
             Each world has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="output">An array to receive the Entity objects of the transferred entities.</param>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Collections.NativeArray{Unity.Entities.Entity}@,Unity.Entities.EntityManager,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
             <summary>
             Moves all entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager and fills
             an array with their <see cref="T:Unity.Entities.Entity"/> objects.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager. Use the `output` array to make post-move
             changes to the transferred entities.
            
             Each world has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="output">An array to receive the Entity objects of the transferred entities.</param>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
             <param name="entityRemapping">A set of entity transformations to make during the transfer.</param>
             <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Entities.EntityManager,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
             <summary>
             Moves all entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager.
            
             Each World has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one world to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
             <param name="entityRemapping">A set of entity transformations to make during the transfer.</param>
             <exception cref="T:System.ArgumentException">Thrown if you attempt to transfer entities to the EntityManager
             that already owns them.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Entities.EntityManager,Unity.Entities.EntityQuery)">
             <summary>
             Moves a selection of the entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager
             and fills an array with their <see cref="T:Unity.Entities.Entity"/> objects.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager. Use the `output` array to make post-move
             changes to the transferred entities.
            
             Each world has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
             <param name="filter">A EntityQuery that defines the entities to move. Must be part of the source
             World. This query must not reference any types that implement IEnableableComponent.</param>
             <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Collections.NativeArray{Unity.Entities.Entity}@,Unity.Entities.EntityManager,Unity.Entities.EntityQuery,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
             <summary>
             Moves a selection of the entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager
             and fills an array with their <see cref="T:Unity.Entities.Entity"/> objects.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager. Use the `output` array to make post-move
             changes to the transferred entities.
            
             Each world has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="output">An array to receive the Entity objects of the transferred entities.</param>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
             <param name="filter">A EntityQuery that defines the entities to move. Must be part of the source
             World. This query must not reference any types that implement IEnableableComponent.</param>
             <param name="entityRemapping">A set of entity transformations to make during the transfer.</param>
             <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Entities.EntityManager,Unity.Entities.EntityQuery,Unity.Collections.NativeArray{Unity.Entities.EntityRemapUtility.EntityRemapInfo})">
             <summary>
             Moves a selection of the entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager.
            
             Each world has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
             <param name="filter">A EntityQuery that defines the entities to move. Must be part of the source
             World. This query must not reference any types that implement IEnableableComponent.</param>
             <param name="entityRemapping">A set of entity transformations to make during the transfer.</param>
             <exception cref="T:System.ArgumentException">Thrown if the EntityQuery object used as the `filter` comes
             from a different world than the `srcEntities` EntityManager.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Collections.NativeArray{Unity.Entities.Entity}@,Unity.Entities.EntityManager,Unity.Entities.EntityQuery)">
             <summary>
             Moves a selection of the entities managed by the specified EntityManager to the <see cref="P:Unity.Entities.EntityManager.World"/> of this EntityManager
             and fills an array with their <see cref="T:Unity.Entities.Entity"/> objects.
             </summary>
             <remarks>
             After the move, the entities are managed by this EntityManager. Use the `output` array to make post-move
             changes to the transferred entities.
            
             Each world has one EntityManager, which manages all the entities in that world. This function
             allows you to transfer entities from one World to another.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before moving the entity. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="output">An array to receive the Entity objects of the transferred entities.</param>
             <param name="srcEntities">The EntityManager whose entities are appropriated.</param>
             <param name="filter">A EntityQuery that defines the entities to move. Must be part of the source
             World. This query must not reference any types that implement IEnableableComponent.</param>
             <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntityRemapArray(Unity.Collections.Allocator)">
            <summary>
            Creates a remapping array with one element for each entity in the <see cref="P:Unity.Entities.EntityManager.World"/>.
            </summary>
            <param name="allocator">The type of memory allocation to use when creating the array.</param>
            <returns>An array containing a no-op identity transformation for each entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentOrderVersion``1">
             <summary>
             Gets the version number of the specified component type.
             </summary>
             <remarks>This version number is incremented each time there is a structural change involving the specified
             type of component. Such changes include creating or destroying entities that have this component and adding
             or removing the component type from an entity. Shared components are not covered by this version;
             see <see cref="M:Unity.Entities.EntityManager.GetSharedComponentOrderVersion``1(``0)"/>.
            
             Version numbers can overflow. To compare if one version is more recent than another use a calculation such as:
            
             <code>
             bool VersionBisNewer = (VersionB - VersionA) > 0;
             </code>
             </remarks>
             <typeparam name="T">The component type.</typeparam>
             <returns>The current version number.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.PrepareForDeserialize">
            <summary>
            Prepares an empty <see cref="P:Unity.Entities.EntityManager.World"/> to load serialized entities.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.CompleteAllTrackedJobs">
            <summary>
            Waits for all tracked jobs to complete.
            </summary>
            <remarks>Calling <see cref="M:Unity.Entities.EntityManager.CompleteAllTrackedJobs"/> blocks the main thread until all currently running tracked Jobs finish. </remarks>
            <remarks>Tracked JobHandles for this <see cref="P:Unity.Entities.EntityManager.World"/> include every systems resulting JobHandle directly after their OnUpdate. </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.CompleteAllJobs">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.EntityManager.CompleteAllTrackedJobs"/> instead.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentTypeHandle``1(System.Boolean)">
            <summary>
            Gets the dynamic type object required to access a chunk component of type T.
            </summary>
            <remarks>
            To access a component stored in a chunk, you must have the type registry information for the component.
            This function provides that information. Use the returned <see cref="T:Unity.Entities.ComponentTypeHandle`1"/>
            object with the functions of an <see cref="T:Unity.Entities.ArchetypeChunk"/> object to get information about the components
            in that chunk and to access the component values.
            </remarks>
            <param name="isReadOnly">Specify whether the access to the component through this object is read only
            or read and write. For managed components isReadonly will always be treated as false.</param>
            <typeparam name="T">The compile-time type of the component.</typeparam>
            <returns>The run-time type information of the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)">
            <summary>
            Gets the dynamic type object required to access a chunk component of dynamic type acquired from reflection.
            </summary>
            <remarks>
            To access a component stored in a chunk, you must have the type registry information for the component.
            This function provides that information. Use the returned <see cref="T:Unity.Entities.DynamicComponentTypeHandle"/>
            object with the functions of an <see cref="T:Unity.Entities.ArchetypeChunk"/> object to get information about the components
            in that chunk and to access the component values.
            </remarks>
            <param name="componentType">Type of the component</param>
            <returns>The run-time type information of the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetBufferTypeHandle``1(System.Boolean)">
            <summary>
            Gets the dynamic type object required to access a chunk buffer containing elements of type T.
            </summary>
            <remarks>
            To access a component stored in a chunk, you must have the type registry information for the component.
            This function provides that information for buffer components. Use the returned
            <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> object with the functions of an <see cref="T:Unity.Entities.ArchetypeChunk"/>
            object to get information about the components in that chunk and to access the component values.
            </remarks>
            <param name="isReadOnly">Specify whether the access to the component through this object is read only
            or read and write. </param>
            <typeparam name="T">The compile-time type of the buffer elements.</typeparam>
            <returns>The run-time type information of the buffer component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetSharedComponentTypeHandle``1">
            <summary>
            Gets the dynamic type object required to access a shared component of type T.
            </summary>
            <remarks>
            To access a component stored in a chunk, you must have the type registry information for the component.
            This function provides that information for shared components. Use the returned
            <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> object with the functions of an <see cref="T:Unity.Entities.ArchetypeChunk"/>
            object to get information about the components in that chunk and to access the component values.
            </remarks>
            <typeparam name="T">The compile-time type of the shared component.</typeparam>
            <returns>The run-time type information of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)">
            <summary>
            Gets the dynamic type object required to access a shared component of the given type.
            </summary>
            <remarks>
            To access a component stored in a chunk, you must have the type registry information for the component.
            This function provides that information for shared components. Use the returned
            <see cref="T:Unity.Entities.DynamicSharedComponentTypeHandle"/> object with the functions of an <see cref="T:Unity.Entities.ArchetypeChunk"/>
            object to get information about the components in that chunk and to access the component values.
            </remarks>
            <param name="componentType">The component type to get access to.</param>
            <returns>The run-time type information of the shared component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetEntityTypeHandle">
             <summary>
             Gets the dynamic type object required to access the <see cref="T:Unity.Entities.Entity"/> component of a chunk.
             </summary>
             <remarks>
             All chunks have an implicit <see cref="T:Unity.Entities.Entity"/> component referring to the entities in that chunk.
            
             To access any component stored in a chunk, you must have the type registry information for the component.
             This function provides that information for the implicit <see cref="T:Unity.Entities.Entity"/> component. Use the returned
             <see cref="T:Unity.Entities.ComponentTypeHandle`1"/> object with the functions of an <see cref="T:Unity.Entities.ArchetypeChunk"/>
             object to access the component values.
             </remarks>
             <returns>The run-time type information of the Entity component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentTypes(Unity.Entities.Entity,Unity.Collections.Allocator)">
            <summary>
            Gets an entity's component types.
            </summary>
            <param name="entity">The entity.</param>
            <param name="allocator">The type of allocation for creating the NativeArray to hold the ComponentType
            objects.</param>
            <returns>An array of ComponentType containing all the types of components associated with the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetComponentTypes(Unity.Entities.SystemHandle,Unity.Collections.Allocator)">
            <summary>
            Gets a system entity's component types.
            </summary>
            <param name="system">The system handle.</param>
            <param name="allocator">The type of allocation for creating the NativeArray to hold the ComponentType
            objects.</param>
            <returns>An array of ComponentType containing all the types of components associated with the entity.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAssignableComponentTypes(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Gets a list of the types of components that can be assigned to the specified component.
            </summary>
            <remarks>Assignable components include those with the same compile-time type and those that
            inherit from the same compile-time type.</remarks>
            <param name="interfaceType">The type to check.</param>
            <param name="listOut">The list to receive the output.</param>
            <returns>The list that was passed in, containing the System.Types that can be assigned to `interfaceType`.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAssignableComponentTypes(System.Type)">
            <summary>
            Gets a list of the types of components that can be assigned to the specified component.
            </summary>
            <remarks>Assignable components include those with the same compile-time type and those that
            inherit from the same compile-time type.</remarks>
            <param name="interfaceType">The type to check.</param>
            <returns>A new List object containing the System.Types that can be assigned to `interfaceType`.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntityQuery(Unity.Entities.ComponentType[])">
            <summary>
            Creates a EntityQuery from an array of component types.
            </summary>
            <param name="requiredComponents">An array containing the component types.</param>
            <returns>The EntityQuery derived from the specified array of component types.</returns>
            <seealso cref="T:Unity.Entities.EntityQueryDesc"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntityQuery(Unity.Entities.EntityQueryDesc[])">
            <summary>
            Creates a EntityQuery from an EntityQueryDesc.
            </summary>
            <param name="queriesDesc">A queryDesc identifying a set of component types.</param>
            <returns>The EntityQuery corresponding to the queryDesc.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.CreateEntityQuery(Unity.Entities.EntityQueryBuilder@)">
            <summary>
            Creates an EntityQuery from an EntityQueryBuilder.
            </summary>
            <param name="queriesDesc">A queryDesc identifying a set of component types.</param>
            <returns>The EntityQuery corresponding to the queryDesc.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllChunks(Unity.Collections.Allocator)">
            <summary>
            Gets all the chunks managed by this EntityManager.
            </summary>
            <remarks>
            **Important:** This method creates a sync point, which means that the EntityManager waits for all
            currently running jobs to complete before getting the chunk. No additional jobs can start before
            the method is finished. A sync point can cause a drop in performance because the ECS framework might not
            be able to use the processing power of all available cores.
            </remarks>
            <param name="allocator">The type of allocation for creating the NativeArray to hold the ArchetypeChunk
            objects.</param>
            <returns>An array of ArchetypeChunk objects referring to all the chunks in the <see cref="P:Unity.Entities.EntityManager.World"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllChunksAndMetaChunks(Unity.Collections.Allocator)">
            <summary>
            Gets all the chunks managed by this EntityManager, including the meta chunks (containing chunk components).
            </summary>
            <remarks>
            **Important:** This method creates a sync point, which means that the EntityManager waits for all
            currently running jobs to complete before getting the chunk. No additional jobs can start before
            the method is finished. A sync point can cause a drop in performance because the ECS framework might not
            be able to use the processing power of all available cores.
            </remarks>
            <param name="allocator">The type of allocation for creating the NativeArray to hold the ArchetypeChunk
            objects.</param>
            <returns>An array of ArchetypeChunk objects referring to all the chunks in the <see cref="P:Unity.Entities.EntityManager.World"/>.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllArchetypes(Unity.Collections.NativeList{Unity.Entities.EntityArchetype})">
            <summary>
            Gets all the archetypes.
            </summary>
            <remarks>The function adds the archetype objects to the existing contents of the list.
            The list is not cleared.</remarks>
            <param name="allArchetypes">A native list to receive the EntityArchetype objects.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetEntityQueryMask(Unity.Entities.EntityQuery)">
            <summary>
            This method is obsolete. Use <see cref="M:Unity.Entities.EntityQuery.GetEntityQueryMask"/> instead.
            </summary>
            <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQuery.GetEntityQueryMask"/> instead.</remarks>
            <param name="query">The query whose mask should be returned</param>
            <returns>A query mask for the provided query</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.Exists(Unity.Entities.Entity)">
             <summary>
             Reports whether an Entity object is still valid.
             </summary>
             <remarks>
             An Entity object does not contain a reference to its entity. Instead, the Entity struct contains an index
             and a generational version number. When an entity is destroyed, the EntityManager increments the version
             of the entity within the internal array of entities. The index of a destroyed entity is recycled when a
             new entity is created.
            
             After an entity is destroyed, any existing Entity objects will still contain the
             older version number. This function compares the version numbers of the specified Entity object and the
             current version of the entity recorded in the entities array. If the versions are different, the Entity
             object no longer refers to an existing entity and cannot be used.
             </remarks>
             <param name="entity">The Entity object to check.</param>
             <returns>True, if <see cref="F:Unity.Entities.Entity.Version"/> matches the version of the current entity at
             <see cref="F:Unity.Entities.Entity.Index"/> in the entities array.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.HasComponent``1(Unity.Entities.Entity)">
            <summary>
            Checks whether an entity has a specific type of component.
            </summary>
            <remarks>Always returns false for an entity that has been destroyed.</remarks>
            <param name="entity">The Entity object.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <returns>True, if the specified entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.HasComponent``1(Unity.Entities.SystemHandle)">
            <summary>
            Checks whether an entity associated with a system has a specific type of component.
            </summary>
            <remarks>Always returns false for an entity that has been destroyed.</remarks>
            <param name="system">The system handle.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <returns>True, if the specified system entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.HasBuffer``1(Unity.Entities.Entity)">
            <summary>
            Checks whether an entity has a dynamic buffer of a specific IBufferElementData type.
            </summary>
            <remarks>Always returns false for an entity that has been destroyed.</remarks>
            <param name="entity">The Entity object.</param>
            <typeparam name="T">The IBufferElementData type.</typeparam>
            <returns>True, if the specified entity has a dynamic buffer of IBufferElementData type.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.HasComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary>
            Checks whether an entity has a specific type of component.
            </summary>
            <remarks>Always returns false for an entity that has been destroyed.</remarks>
            <param name="entity">The Entity object.</param>
            <param name="type">The data type of the component.</param>
            <returns>True, if the specified entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.HasComponent(Unity.Entities.SystemHandle,Unity.Entities.ComponentType)">
            <summary>
            Checks whether an entity associated with a system has a specific type of component.
            </summary>
            <remarks>Always returns false for an entity that has been destroyed.</remarks>
            <param name="system">The system handle.</param>
            <param name="type">The data type of the component.</param>
            <returns>True, if the specified system entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.HasChunkComponent``1(Unity.Entities.Entity)">
            <summary>
            Checks whether the chunk containing an entity has a specific type of component.
            </summary>
            <remarks>Always returns false for an entity that has been destroyed.</remarks>
            <param name="entity">The Entity object.</param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <returns>True, if the chunk containing the specified entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAspect``1(Unity.Entities.Entity)">
            <summary>
            Look up an aspect for an entity.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of aspect to retrieve.</typeparam>
            <returns>An aspect struct of type T representing the aspect on the entity.</returns>
            <remarks>
            T must implement the <see cref="T:Unity.Entities.IAspect"/> interface.
            The given entity is assumed to have all the components required by the aspect type.
            </remarks>
            <remarks>
            This method will create an instance of the aspect struct using
            an internal SystemState.
            </remarks>
            <remarks>
            When calling from an ISystem, use SystemAPI.GetAspect instead.
            When calling from a SystemBase, use SystemBase.GetAspect instead.
            Use this method when calling from outside the dots runtime, e.g. from the editor code.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAspectRO``1(Unity.Entities.Entity)">
            <summary>
            Look up an aspect for an entity with readonly access.
            </summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of aspect to retrieve.</typeparam>
            <returns>An aspect struct of type T representing the aspect on the entity.</returns>
            <remarks>
            T must implement the <see cref="T:Unity.Entities.IAspect"/> interface.
            The given entity is assumed to have all the components required by the aspect type.
            </remarks>
            <remarks>
            This method will create an instance of the aspect struct using
            an internal SystemState.
            </remarks>
            <remarks>
            When calling from an ISystem, use SystemAPI.GetAspectRO instead.
            When calling from a SystemBase, use SystemBase.GetAspectRO instead.
            Use this method when calling from outside the dots runtime, e.g. from the editor code.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityManager.CompleteDependencyBeforeRW``1">
            <summary>
            Completes the dependency chain required for this component to have read and write access.
            So it completes all write dependencies of the component to allow for reading,
            and it completes all read dependencies, so we can write to it.
            </summary>
            <typeparam name="T">The type of component you wanna complete dependencies on</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.CompleteDependencyBeforeRO``1">
            <summary>
            Completes the dependency chain required for this component to have read access.
            So it completes all write dependencies of the component to allow for reading.
            </summary>
            <typeparam name="T">The type of component you wanna complete dependencies on</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManager.IsQueryValid(Unity.Entities.EntityQuery)">
            <summary>
            Check if an entity query is still valid
            </summary>
            <param name="query">The EnityQuery to check.</param>
            <returns>Returns true if the specified query handle is still valid (and can be disposed).</returns>
        </member>
        <member name="P:Unity.Entities.EntityManager.ExclusiveEntityTransactionDependency">
            <summary>
            An optional <see cref="T:Unity.Jobs.JobHandle"/> that corresponds to the job currently using an ExclusiveEntityTransaction.
            This job is completed when this EntityManager's <see cref="P:Unity.Entities.EntityManager.World"/> is destroyed.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.CanBeginExclusiveEntityTransaction">
            <summary>
            Check whether or not a new exclusive entity transaction can begin.
            </summary>
            <returns><see langword="true"/> if a new exclusive transaction can begin, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.BeginExclusiveEntityTransaction">
             <summary>
             Begins an exclusive entity transaction, which allows you to make structural changes inside a Job.
             </summary>
             <remarks>
             <see cref="T:Unity.Entities.ExclusiveEntityTransaction"/> allows you to create and destroy entities from a job. The purpose is
             to enable procedural generation scenarios where instantiation on big scale must happen on jobs. As the
             name implies it is exclusive to any other access to the EntityManager.
            
             An exclusive entity transaction should be used on a manually created <see cref="P:Unity.Entities.EntityManager.World"/> that acts as a
             staging area to construct and setup entities.
            
             After the job has completed you can end the transaction and use
             <see cref="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Entities.EntityManager)"/> to move the entities to an active <see cref="P:Unity.Entities.EntityManager.World"/>.
             </remarks>
             <returns>A transaction object that provides an functions for making structural changes.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.EndExclusiveEntityTransaction">
            <summary>
            Ends an active <see cref="T:Unity.Entities.ExclusiveEntityTransaction"/> and returns ownership of the
            <see cref="T:Unity.Entities.EntityManager"/> to the main thread.
            </summary>
            <seealso cref="T:Unity.Entities.ExclusiveEntityTransaction"/>
            <seealso cref="M:Unity.Entities.EntityManager.BeginExclusiveEntityTransaction"/>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetName(Unity.Entities.Entity)">
            <summary>
            Gets the name assigned to an entity.
            </summary>
            <remarks>For performance, entity names only exist when running in the Unity Editor.</remarks>
            <param name="entity">The Entity object of the entity of interest.</param>
            <returns>The entity name, as a managed string.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetName(Unity.Entities.Entity,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Gets the name assigned to an entity.
            </summary>
            <remarks>For performance, entity names only exist when running in the Unity Editor.</remarks>
            <param name="entity">The Entity object of the entity of interest.</param>
            <param name="name">The entity's name will be stored here.</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.SetName(Unity.Entities.Entity,Unity.Collections.FixedString64Bytes)">
            <summary>
            Sets the name of an entity.
            </summary>
            <remarks>
            <para>Note that any `System.String` names will implicitly cast to <see cref="T:Unity.Collections.FixedString64Bytes"/>.
            This conversion will throw, rather than truncate, if over capacity (61 characters).
            Thus, ensure your names fit, or manually truncate them first (via <see cref="M:Unity.Collections.FixedStringMethods.CopyFromTruncated``1(``0@,System.String)"/>).</para>
            <para>However, GameObjects converted to entities (via Baking) will have long names silently truncated.</para>
            <para>For performance, entity names only exist when running in the Unity Editor.</para>
            </remarks>
            <param name="entity">The Entity object of the entity to name.</param>
            <param name="name">The name to assign. See remarks for caveats.</param>
        </member>
        <member name="T:Unity.Entities.EntityManager.GetAllEntitiesOptions">
            <summary>
            Options include internal entity types such as <see cref="F:Unity.Entities.Chunk.metaChunkEntity"/> or system entities.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManager.GetAllEntitiesOptions.Default">
            <summary>
            Returns the same entities as <see cref="P:Unity.Entities.EntityManager.UniversalQuery"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManager.GetAllEntitiesOptions.IncludeMeta">
            <summary>
            Includes any <see cref="F:Unity.Entities.Chunk.metaChunkEntity"/> in the query
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityManager.GetAllEntitiesOptions.IncludeSystems">
            <summary>
            Includes any System associated Entities in the query
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllEntities(Unity.Collections.Allocator)">
            <summary>
            Gets all the entities managed by this EntityManager.
            </summary>
            <remarks>
            **Important:** This function creates a sync point, which means that the EntityManager waits for all
            currently running Jobs to complete before getting the entities and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <param name="allocator">The type of allocation for creating the NativeArray to hold the Entity objects.</param>
            <returns>An array of Entity objects referring to all the entities in the World.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.GetAllEntities(Unity.Collections.Allocator,Unity.Entities.EntityManager.GetAllEntitiesOptions)">
            <summary>
            Gets all the entities managed by this EntityManager.
            </summary>
            <remarks>
            **Important:** This function creates a sync point, which means that the EntityManager waits for all
            currently running Jobs to complete before getting the entities and no additional Jobs can start before
            the function is finished. A sync point can cause a drop in performance because the ECS framework may not
            be able to make use of the processing power of all available cores.
            </remarks>
            <param name="allocator">The type of allocation for creating the NativeArray to hold the Entity objects.</param>
            <param name="options">Specifies whether entities from chunk components should be included.</param>
            <returns>An array of Entity objects referring to all the entities in the World.</returns>
        </member>
        <member name="T:Unity.Entities.EntityManager.EntityManagerDebug">
            <summary>
            Provides information and utility functions for debugging.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.#ctor(Unity.Entities.EntityManager)">
            <summary>
            Creates an EntityManagerDebug from an EntityManager
            </summary>
            <param name="entityManager">The EntityManager to debug</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.PoisonUnusedDataInAllChunks(Unity.Entities.EntityArchetype,System.Byte)">
            <summary>
            Sets all unused chunk data for an archetype to the specified byte value.
            </summary>
            <param name="archetype">The archetype to modify</param>
            <param name="value">The value to set for any unused chunk data</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.IsSharedComponentManagerEmpty">
            <summary>
            Checks to see if the <see cref="T:Unity.Entities.ManagedComponentStore"/> has any references to shared components
            </summary>
            <returns>True if the <see cref="T:Unity.Entities.ManagedComponentStore"/> does not have any references to shared components</returns>
        </member>
        <member name="P:Unity.Entities.EntityManager.EntityManagerDebug.EntityCount">
            <summary>
            The number of entities in the referenced EntityManager
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.EntityManagerDebug.UseMemoryInitPattern">
            <summary>
            Determines if chunks created in the <see cref="T:Unity.Entities.EntityComponentStore"/> use the specified <see cref="P:Unity.Entities.EntityManager.EntityManagerDebug.MemoryInitPattern"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.EntityManagerDebug.MemoryInitPattern">
            <summary>
            A specified memory pattern used when initializing new chunks if <see cref="P:Unity.Entities.EntityManager.EntityManagerDebug.UseMemoryInitPattern"/> is set to true
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityManager.EntityManagerDebug.IsInForEachDisallowStructuralChange">
            <summary>
            Returns true if we are inside of a Entities.ForEach or IJobChunk.Run and thus can not allow structural changes at the same time.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetSystemProfilerMarkerName(Unity.Entities.World,Unity.Entities.SystemHandle)">
            <summary>
            Returns the name used for the profiler marker of the passed system. This is useful for inspecting profiling data using the ProfilerRecorder API.
            </summary>
            <param name="world">The world to query.</param>
            <param name="system">The system within the world to query.</param>
            <returns>The marker name as a string</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.LogEntityInfo(Unity.Entities.Entity)">
            <summary>
            Debug logs information about a given entity including the entity's version, index, and archetype
            </summary>
            <param name="entity">The entity to log</param>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetEntityInfo(Unity.Entities.Entity)">
            <summary>
            Creates a string with the information about a given entity including the entity's version, index, and archetype.
            </summary>
            <param name="entity">The entity to get the information about</param>
            <returns>The string with the entity's information</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetLastWriterSystemName(Unity.Entities.ArchetypeChunk,Unity.Entities.ComponentType)">
            <summary>
            Gets the name of the system that last modified the component type of the given chunk
            </summary>
            <param name="chunk">The chunk to check</param>
            <param name="componentType">The component type to check</param>
            <returns>The name of the system that modified it if found</returns>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetComponentBoxed(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary>
            Gets the component object of a given entity
            </summary>
            <param name="entity">The entity</param>
            <param name="type">The component type to get the object of</param>
            <returns>The component object</returns>
            <exception cref="T:System.ArgumentException">Throws if the type does not exist on the entity</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetComponentBoxed(Unity.Entities.Entity,System.Type)">
            <summary>
            Gets the component object of a given entity based on the type
            </summary>
            <param name="entity">The entity</param>
            <param name="type">The type to get the object of</param>
            <returns>The component object</returns>
            <exception cref="T:System.ArgumentException">Throws if the type does not exist on the entity</exception>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetAuthoringObjectForEntity(Unity.Entities.Entity)">
            <summary>
            Returns the Authoring object for the entity. Returns null if the authoring object is not available.
            For example closed subscenes will always return null.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetEntitiesForAuthoringObject(UnityEngine.GameObject,Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Lists all entities in this world that were converted from or are associated with the game object.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetEntitiesForAuthoringObject(UnityEngine.Component,Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Lists all entities in this world that were converted from or are associated with the game object.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.GetEntitiesForAuthoringObject(UnityEngine.Object,Unity.Collections.NativeList{Unity.Entities.Entity})">
            <summary>
            Lists all entities in this world that were converted from or are associated with the given object.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManager.EntityManagerDebug.CheckInternalConsistency">
            <summary>
            Several checks to ensure that the <see cref="T:Unity.Entities.EntityComponentStore"/> and <see cref="T:Unity.Entities.ManagedComponentStore"/>
            have all references that are expected at this time as well as the expected number of entities.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityManagerManagedComponentExtensions">
            <summary>
            Variants of EntityManager methods that support managed components.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.CreateSingleton``1(Unity.Entities.EntityManager,Unity.Collections.FixedString64Bytes)">
            <summary>
            Creates and supports only a single entity with a given managed component.
            </summary>
            <remarks>
            Note that while zero-size component may be created, they can not be accessed directly in code. They are
            only usable for situations such as in calling <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>.
            </remarks>
            <param name="manager">This entity manager.</param>
            <param name="name">The debug friendly name associated with the singleton component entity.</param>
            <typeparam name="T">The type of component to create.</typeparam>
            <returns>The Entity object that you can use to access the singleton component entity.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the component type has no fields, is enableable, or an entity containing it already exists.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.CreateSingleton``1(Unity.Entities.EntityManager,``0,Unity.Collections.FixedString64Bytes)">
            <summary>
            Creates and supports only a single entity with a given managed component.
            </summary>
            <remarks>
            Note that while zero-size component may be created, they can not be accessed directly in code. They are
            only usable for situations such as in calling <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>.
            </remarks>
            <param name="manager">This entity manager.</param>
            <param name="componentData">The data to assign to the singleton component.</param>
            <param name="name">The debug friendly name associated with the singleton component entity.</param>
            <typeparam name="T">The type of component to create.</typeparam>
            <returns>The Entity object that you can use to access the singleton component entity.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the component type has no fields, is enableable, or an entity containing it already exists.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.GetComponentData``1(Unity.Entities.EntityManager,Unity.Entities.Entity)">
            <summary>
            Gets the value of a component for an entity.
            </summary>
            <param name="manager">This entity manager.</param>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.GetComponentData``1(Unity.Entities.EntityManager,Unity.Entities.SystemHandle)">
            <summary>
            Gets the value of a component for an entity associated with a system.
            </summary>
            <param name="manager">This entity manager.</param>
            <param name="system">The system handle.</param>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the system isn't from thie world.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.SetComponentData``1(Unity.Entities.EntityManager,Unity.Entities.Entity,``0)">
            <summary>
            Sets the value of a component of an entity.
            </summary>
            <param name="manager">This entity manager.</param>
            <param name="entity">The entity.</param>
            <param name="componentData">The data to set.</param>
            <typeparam name="T">The component type.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.SetComponentData``1(Unity.Entities.EntityManager,Unity.Entities.SystemHandle,``0)">
            <summary>
            Sets the value of a component of an entity associated with a system.
            </summary>
            <param name="manager">This entity manager.</param>
            <param name="system">The system handle.</param>
            <param name="componentData">The data to set.</param>
            <typeparam name="T">The component type.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the system isn't from thie world.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.GetChunkComponentData``1(Unity.Entities.EntityManager,Unity.Entities.ArchetypeChunk)">
            <summary>
            Gets the value of a chunk component.
            </summary>
            <remarks>
            A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
            instance through either the chunk itself or through an entity stored in that chunk.
            </remarks>
            <param name="manager">This entity manager.</param>
            <param name="chunk">The chunk.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the ArchetypeChunk object is invalid.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.GetChunkComponentData``1(Unity.Entities.EntityManager,Unity.Entities.Entity)">
            <summary>
            Gets the value of chunk component for the chunk containing the specified entity.
            </summary>
            <remarks>
            A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
            instance through either the chunk itself or through an entity stored in that chunk.
            </remarks>
            <param name="manager">This entity manager.</param>
            <param name="entity">The entity.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>A struct of type T containing the component value.</returns>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.SetChunkComponentData``1(Unity.Entities.EntityManager,Unity.Entities.ArchetypeChunk,``0)">
            <summary>
            Sets the value of a chunk component.
            </summary>
            <remarks>
            A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
            instance through either the chunk itself or through an entity stored in that chunk.
            </remarks>
            <param name="manager">This entity manager.</param>
            <param name="chunk">The chunk to modify.</param>
            <param name="componentValue">The component data to set.</param>
            <typeparam name="T">The component type.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the ArchetypeChunk object is invalid.</exception>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.AddComponentData``1(Unity.Entities.EntityManager,Unity.Entities.Entity,``0)">
             <summary>
             Adds a managed component to an entity and set the value of that component.
             </summary>
             <remarks>
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="manager">This entity manager.</param>
             <param name="entity">The entity.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The type of component.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.MoveComponent``1(Unity.Entities.EntityManager,Unity.Entities.Entity,Unity.Entities.Entity)">
             <summary>
             Move the given component on the source entity to another destination entity.
             </summary>
             <remarks>
             If the source and destination entity are identical, no operation is performed.
            
             This operation seems similar to
            
             value = GetComponentData&lt;T&gt;(src);
             AddComponentData(dst, value)
             RemoveComponent&lt;T&gt;(src)
            
             But for managed components which implement <see cref="T:System.IDisposable"/>, calling RemoveComponent will invoke Dispose() on the component value, leaving the destination entity with an uninitialized object.```
             This operation ensures the component is properly moved over.
             </remarks>
             <param name="manager">This entity manager.</param>
             <param name="src">The Entity the managed component will be removed from</param>
             <param name="dst">The Entity the managed component will be added to</param>
             <typeparam name="T">The managed component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.AddChunkComponentData``1(Unity.Entities.EntityManager,Unity.Entities.Entity)">
             <summary>
             Adds a chunk component to the specified entity.
             </summary>
             <remarks>
             Adding a chunk component to an entity changes that entity's archetype and results in the entity being moved
             to a different chunk, either one that already has an archetype containing the chunk component or a new
             chunk.
            
             A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
             instance through either the chunk itself or through an entity stored in that chunk. In either case, getting
             or setting the component reads or writes the same data.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="manager">This entity manager.</param>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component, which must implement IComponentData.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityManagerManagedComponentExtensions.AddChunkComponentData``1(Unity.Entities.EntityManager,Unity.Entities.EntityQuery,``0)">
             <summary>
             Adds a managed chunk component to each of the chunks identified by an EntityQuery and set the component values.
             </summary>
             <remarks>
             This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified
             component to them.
            
             A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
             instance through either the chunk itself or through an entity stored in that chunk.
            
             **Important:** This method creates a sync point, which means that the EntityManager waits for all
             currently running jobs to complete before adding the component. No additional jobs can start before
             the method is finished. A sync point can cause a drop in performance because the ECS framework might not
             be able to use the processing power of all available cores.
             </remarks>
             <param name="manager">This entity manager.</param>
             <param name="entityQuery">The EntityQuery identifying the chunks to modify.</param>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The type of component, which must implement IComponentData.</typeparam>
        </member>
        <member name="T:Unity.Entities.BakingVersionAttribute">
            <summary>
            By default if no baking version are declared in an assembly, the scene will be re-imported if the assembly has changed.
            If you only want to re-trigger scene import if a baker, a baking system or an optimization system has changed and not something else in the assembly, use this attribute and bump its version or username everytime you want to re-trigger the scene import.
            </summary>
        </member>
        <member name="M:Unity.Entities.BakingVersionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes and returns an instance of BakingVersionAttribute
            </summary>
            <param name="userName">An identifier for the user that made the last change. Use this to enforce a merge conflict when two different users both try to bump the version at the same time.</param>
            <param name="version">The version number of the converter. Increase this to invalidate the cached versions of entity scenes that use the converter that is tagged with this attribute.</param>
        </member>
        <member name="M:Unity.Entities.BakingVersionAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes and returns an instance of BakingVersionAttribute that is excluded from changing the Baking behaviour for an assembly.
            </summary>
            <param name="excluded">Whether or not the Baker or Baking System is excluded from impacting the behaviour of the assembly. This means it does not contribute to an assembly causing re-bakes when changed, but also will not emit warnings if the assembly does use BakingVersion on other Bakers. With this constructor, only true is valid.</param>
        </member>
        <member name="F:Unity.Entities.ManagedObjectBlobs.m_References">
            <summary>
            Set used to track already visited references.
            </summary>
        </member>
        <member name="M:Unity.Entities.ManagedObjectBlobs.GatherBlobAssetReferences(System.Object,Unity.Collections.NativeList{Unity.Entities.BlobAssetPtr},Unity.Collections.NativeParallelHashMap{Unity.Entities.BlobAssetPtr,System.Int32})">
            <summary>
            Gathers all blob asset references within the specified object.
            </summary>
            <param name="obj">The object to extract all blob asset references from.</param>
            <param name="blobAssets">The array where new blob asset references are added.</param>
            <param name="blobAssetMap">Mapping to track existing blob asset references encountered.</param>
            <exception cref="T:System.ArgumentNullException">The given object was null.</exception>
            <exception cref="T:Unity.Properties.MissingPropertyBagException">The given object has no property bag associated with it.</exception>
        </member>
        <member name="M:Unity.Entities.ManagedObjectBlobs.Unity#Properties#IPropertyBagVisitor#Visit``1(Unity.Properties.IPropertyBag{``0},``0@)">
            <summary>
            Invoked by Unity.Properties for each container type (i.e. struct or class).
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="container">The container being visited.</param>
            <typeparam name="TContainer">The container type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectBlobs.Unity#Properties#IPropertyVisitor#Visit``2(Unity.Properties.Property{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for any non-collection property.
            </summary>
            <param name="property">The property being visited.</param>
            <param name="container">The source container.</param>
            <typeparam name="TContainer">The container type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectBlobs.Unity#Properties#ISetPropertyBagVisitor#Visit``2(Unity.Properties.ISetPropertyBag{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for each ISet based container type.
            </summary>
            <remarks>
            We specialize on well known types to avoid struct enumerator boxing.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ManagedObjectBlobs.Unity#Properties#IListPropertyBagVisitor#Visit``2(Unity.Properties.IListPropertyBag{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for each IList based container type.
            </summary>
            <remarks>
            We specialize on well known types to avoid struct enumerator boxing.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ManagedObjectBlobs.Unity#Properties#IDictionaryPropertyBagVisitor#Visit``3(Unity.Properties.IDictionaryPropertyBag{``0,``1,``2},``0@)">
            <summary>
            Invoked by Unity.Properties for each IDictionary based container type.
            </summary>
            <remarks>
            We specialize on well known types to avoid struct enumerator boxing.
            </remarks>
        </member>
        <member name="T:Unity.Entities.DebuggerDataAccess">
            <summary>
            Access to entity data used by the managed debugger via [DebuggerTypeProxy] for Entity and friends.
            </summary>
            <remarks>
            We approach safety here completely different than normally, one goal is that you can with the debugger
            see the current state right now from any job, thread or main thread. Essentially if you have a watch
            window for a specific variable you can see the state no matter where in code execution we are or what
            other jobs are running right now. Normally the safety system does it's best to prevent any of such
            access to prevent race conditions, but in this codepath we don't care about race conditions we just
            want to know what the state is right now. Thus we completely circumvent the safety system to get to
            the data, instead we do very basic sanity checks that the pointers and data we are looking at are still
            valid pointers. (Since we don't use the safety system, we can't safely make the assumption that all the
            pointers here haven't in fact already been deallocated).
            </remarks>
        </member>
        <member name="T:Unity.Entities.EntityNameStorage">
            <summary>
            Can hold <see cref="F:Unity.Entities.EntityNameStorage.kMaxEntries"/> (up to <see cref="F:Unity.Entities.EntityNameStorage.kMaxChars"/>) entity names.
            Duplicate entries (with identical hashes) share the same location (<see cref="M:Unity.Entities.EntityNameStorage.GetIndexFromHashAndFixedString(System.Int32,Unity.Collections.FixedString64Bytes@)"/>).
            Once added, a name cannot be removed.
            Will throw if store is full.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityNameStorage.Entries">
            <summary>
            Returns the number of stored entries (not characters). I.e. Length or Count.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityNameStorage.Clear">
            <summary>
            Clears the store.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityNameStorage.GetFixedString(System.Int32,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Copies the stored FixedString64Bytes (at this index) into the ref.
            Asserts if out of range.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityNameStorage.GetIndexFromHashAndFixedString(System.Int32,Unity.Collections.FixedString64Bytes@)">
            <remarks>
            You must pass in both the hash of the FixedString, and the FixedString itself.
            </remarks>
            <returns>If found, returns the index of the name. Otherwise, -1 and default(FixedString64Bytes).</returns>
        </member>
        <member name="M:Unity.Entities.EntityNameStorage.Contains(Unity.Collections.FixedString64Bytes@)">
            <returns>Returns true if the Store contains this FixedString.</returns>
            <see cref="M:Unity.Entities.EntityNameStorage.GetIndexFromHashAndFixedString(System.Int32,Unity.Collections.FixedString64Bytes@)"/>
        </member>
        <member name="M:Unity.Entities.EntityNameStorage.Contains(System.String)">
            <returns>Returns true if the Store contains this name (in FixedString form).</returns>
            <see cref="M:Unity.Entities.EntityNameStorage.GetIndexFromHashAndFixedString(System.Int32,Unity.Collections.FixedString64Bytes@)"/>
        </member>
        <member name="M:Unity.Entities.EntityNameStorage.GetOrCreateIndex(Unity.Collections.FixedString64Bytes@)">
            <summary>
            If the store contains this name already, returns the index of it.
            Otherwise, assigns the next free index, and saves the name into the store.
            </summary>
            <returns>New or existing index of value (i.e. name).</returns>
        </member>
        <member name="T:Unity.Entities.EntityName">
             <remarks>
             An "EntityName" is an integer that refers to 4,096 or fewer chars of UTF-16 text in a global storage blob.
             Each should refer to *at most* about one printed page of text.
            
             If you need more text, consider using one EntityName struct for each printed page's worth.
            
             Each EntityName instance that you create is stored in a single, internally-managed EntityNameStorage object,
             which can hold up to 16,384 EntityName entries. Once added, the entries in EntityNameStorage cannot be modified
             or removed.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityName.ToFixedString(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Writes the FixedString at this corresponding <see cref="F:Unity.Entities.EntityName.Index"/> into value.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityName.ToString">
            <summary>
            System.String equivalent of <see cref="M:Unity.Entities.EntityName.ToFixedString(Unity.Collections.FixedString64Bytes@)"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityName.SetFixedString(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Writes the FixedString value into the store, cached as an <see cref="F:Unity.Entities.EntityName.Index"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.DefaultWorldInitializationProxy">
            <summary>
            The script mediates the specific deinitialization order allowing to destroy world after all scripts are disabled.
            It is private and hidden, but has executionOrder: 10000 in the meta file,
            and has to be executed after all proxy MonoBehaviours are disabled (e.g. ComponentDataProxyBase.OnDisable).
            </summary>
        </member>
        <member name="T:Unity.Entities.Entity">
             <summary>
             Identifies an entity.
             </summary>
             <remarks>
             The entity is a fundamental part of the Entity Component System. Everything in your application that has data or an
             identity of its own is an entity. However, an entity doesn't contain either data or behavior itself. Instead,
             the data is stored in the components and the behavior is provided by the systems that process those
             components. The entity acts as an identifier or key to the data stored in components.
            
             The <see cref="T:Unity.Entities.EntityManager"/> class manages entities and they exist within a <see cref="T:Unity.Entities.World"/>. An
             Entity struct refers to an entity, but isn't a reference. Rather, the Entity struct contains an
             <see cref="F:Unity.Entities.Entity.Index"/> that you can use to access entity data, and a <see cref="F:Unity.Entities.Entity.Version"/> that you can 
             use to check whether the Index is still valid. Note that you must pass the Index or Version values to  
             relevant API methods, rather than accessing them directly.
            
             To add or remove components, access components, or to destroy the entity, pass an Entity struct to methods of 
             the <see cref="T:Unity.Entities.EntityManager"/>, the <see cref="T:Unity.Entities.EntityCommandBuffer"/>, or the <see cref="T:Unity.Entities.ComponentSystemBase"/>. 
             </remarks>
        </member>
        <member name="F:Unity.Entities.Entity.Index">
            <summary>
            The ID of an entity.
            </summary>
            <value>The index into the internal list of entities.</value>
            <remarks>
            Entity indexes are recycled when an entity is destroyed. When an entity is destroyed, the
            EntityManager increments the version identifier. To represent the same entity, both the Index and the
            Version fields of the Entity object must match. If the Index is the same, but the Version is different,
            then the entity has been recycled.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Entity.Version">
            <summary>
            The generational version of the entity.
            </summary>
            <remarks>The Version number can, theoretically, overflow and wrap around within the lifetime of an
            application. For this reason, you cannot assume that an Entity instance with a larger Version is a more
            recent incarnation of the entity than one with a smaller Version (and the same Index).</remarks>
            <value>Used to determine whether this Entity object still identifies an existing entity.</value>
        </member>
        <member name="M:Unity.Entities.Entity.op_Equality(Unity.Entities.Entity,Unity.Entities.Entity)">
            <summary>
            Entity instances are equal if they refer to the same entity.
            </summary>
            <param name="lhs">An Entity object.</param>
            <param name="rhs">Another Entity object.</param>
            <returns>True, if both Index and Version are identical.</returns>
        </member>
        <member name="M:Unity.Entities.Entity.op_Inequality(Unity.Entities.Entity,Unity.Entities.Entity)">
            <summary>
            Entity instances are equal if they refer to the same entity.
            </summary>
            <param name="lhs">An Entity object.</param>
            <param name="rhs">Another Entity object.</param>
            <returns>True, if either Index or Version are different.</returns>
        </member>
        <member name="M:Unity.Entities.Entity.CompareTo(Unity.Entities.Entity)">
            <summary>
            Compare this entity against a given one
            </summary>
            <param name="other">The other entity to compare to</param>
            <returns>Difference based on the Entity Index value</returns>
        </member>
        <member name="M:Unity.Entities.Entity.Equals(System.Object)">
            <summary>
            Entity instances are equal if they refer to the same entity.
            </summary>
            <param name="compare">The object to compare to this Entity.</param>
            <returns>True, if the compare parameter contains an Entity object having the same Index and Version
            as this Entity.</returns>
        </member>
        <member name="M:Unity.Entities.Entity.GetHashCode">
            <summary>
            A hash used for comparisons.
            </summary>
            <returns>A unique hash code.</returns>
        </member>
        <member name="P:Unity.Entities.Entity.Null">
            <summary>
            A "blank" Entity object that does not refer to an actual entity.
            </summary>
        </member>
        <member name="M:Unity.Entities.Entity.Equals(Unity.Entities.Entity)">
            <summary>
            Entity instances are equal if they represent the same entity.
            </summary>
            <param name="entity">The other Entity.</param>
            <returns>True, if the Entity instances have the same Index and Version.</returns>
        </member>
        <member name="M:Unity.Entities.Entity.ToString">
            <summary>
            Provides a debugging string.
            </summary>
            <returns>A string containing the entity index and generational version.</returns>
        </member>
        <member name="M:Unity.Entities.Entity.ToFixedString">
            <summary>
            Provides a Burst compatible debugging string.
            </summary>
            <returns>A string containing the entity index and generational version.</returns>
        </member>
        <member name="T:Unity.Entities.AlwaysUpdateSystemAttribute">
             <summary>
             Obsolete. Systems now update by default. 
             </summary>
             <remarks>
             **Obsolete. Systems now update by default. Use <see cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/> if you want a
             system to only update if one of its queries is non-empty.** 
            
             This attribute causes a system to update even if none of its registered queries matched any entities.
             </remarks>
        </member>
        <member name="T:Unity.Entities.ECBChunk">
            <summary>
            Organized in memory like a single block with Chunk header followed by Size bytes of data.
            </summary>
        </member>
        <member name="T:Unity.Entities.PlaybackPolicy">
            <summary>
            Specifies if the <see cref="T:Unity.Entities.EntityCommandBuffer"/> can be played a single time or multiple times.
            </summary>
        </member>
        <member name="F:Unity.Entities.PlaybackPolicy.SinglePlayback">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBuffer"/> can only be played once. After a first playback, the EntityCommandBuffer must be disposed.
            </summary>
        </member>
        <member name="F:Unity.Entities.PlaybackPolicy.MultiPlayback">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBuffer"/> can be played back more than once.
            </summary>
            <remarks>Even though the EntityCommandBuffer can be played back more than once, no commands can be added after the first playback.</remarks>
        </member>
        <member name="T:Unity.Entities.SupportedInEntitiesForEach">
            <summary>
            This attribute should be added to a public method in the `EntityCommandBuffer` class iff the following conditions are fulfilled:
            1. The method is allowed to run inside of the Entities.ForEach() lambda function (one exception would be Playback(), since we do not
            want entity command buffers to be played back inside of Entities.ForEach());
            2. Source-generation of the method when used inside Entities.ForEach() has been implemented.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityCommandBuffer">
            <summary>
                A thread-safe command buffer that can buffer commands that affect entities and components for later playback.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityCommandBuffer.kDefaultMinimumChunkSize">
            <summary>
                The minimum chunk size to allocate from the job allocator.
            </summary>
            We keep this relatively small as we don't want to overload the temp allocator in case people make a ton of command buffers.
        </member>
        <member name="P:Unity.Entities.EntityCommandBuffer.MinimumChunkSize">
            <summary>
                Allows controlling the size of chunks allocated from the temp job allocator to back the command buffer.
            </summary>
            Larger sizes are more efficient, but create more waste in the allocator.
        </member>
        <member name="P:Unity.Entities.EntityCommandBuffer.ShouldPlayback">
             <summary>
             Controls whether this command buffer should play back.
             </summary>
            
             This property is normally true, but can be useful to prevent
             the buffer from playing back when the user code is not in control
             of the site of playback.
            
             For example, is a buffer has been acquired from an EntityCommandBufferSystem and partially
             filled in with data, but it is discovered that the work should be aborted,
             this property can be set to false to prevent the buffer from playing back.
        </member>
        <member name="P:Unity.Entities.EntityCommandBuffer.IsEmpty">
            <summary>
            Returns true if the <see cref="T:Unity.Entities.EntityCommandBuffer"/> has not been initialized or no commands have been recorded.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.#ctor(Unity.Collections.Allocator)">
            <summary>
             Creates a new command buffer.
            </summary>
            <param name="label">Memory allocator to use for chunks and data</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.#ctor(Unity.Collections.Allocator,Unity.Entities.PlaybackPolicy)">
            <summary>
             Creates a new command buffer.
            </summary>
            <param name="label">Memory allocator to use for chunks and data</param>
            <param name="playbackPolicy">Specifies if the EntityCommandBuffer can be played a single time or more than once.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Entities.PlaybackPolicy)">
            <summary>
             Creates a new command buffer.
            </summary>
            <param name="label">Memory allocator to use for chunks and data</param>
            <param name="playbackPolicy">Specifies if the EntityCommandBuffer can be played a single time or more than once.</param>
        </member>
        <member name="P:Unity.Entities.EntityCommandBuffer.IsCreated">
            <summary>
            Is true if the <see cref="T:Unity.Entities.EntityCommandBuffer"/> has been initialized correctly.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.Dispose">
            <summary>
            Deals with freeing and releasing unmanaged memory allocated by the entity command buffer.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.CreateEntity(Unity.Entities.EntityArchetype)">
            <summary>Records a command to create an entity with specified archetype.</summary>
            <remarks>At playback, this command throws an error if the archetype contains the <see cref="T:Unity.Entities.Prefab"/> tag.</remarks>
            <param name="archetype">The archetype of the new entity.</param>
            <returns>An entity that is deferred and will be fully realized when this EntityCommandBuffer is played back.</returns>
            <exception cref="T:System.ArgumentException">Throws if the archetype is null.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.CreateEntity">
            <summary>Records a command to create an entity with no components.</summary>
            <returns>An entity that is deferred and will be fully realized when this EntityCommandBuffer is played back.</returns>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.Instantiate(Unity.Entities.Entity)">
            <summary>Records a command to create an entity with specified entity prefab.</summary>
            <remarks>An instantiated entity has the same components and component values as the
            prefab entity, minus the Prefab tag component.
            If the source entity was destroyed before playback, this command throws an error.</remarks>
            <param name="e">The entity prefab.</param>
            <returns>An entity that is deferred and will be fully realized when this EntityCommandBuffer is played back.</returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if Entity e is null and if safety checks are enabled.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.Instantiate(Unity.Entities.Entity,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>Records a command to create a NativeArray of entities with specified entity prefab.</summary>
            <remarks>An instantiated entity has the same components and component values as the prefab entity, minus the Prefab tag component.
            If the source entity was destroyed before playback, this command throws an error.</remarks>
            <param name="e">The entity prefab.</param>
            <param name="entities">The NativeArray of entities that will be populated with realized entities when this EntityCommandBuffer is played back.</param>
            <exception cref="T:System.ArgumentNullException"> Thrown if Entity e is null and if safety checks are enabled.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.DestroyEntity(Unity.Entities.Entity)">
            <summary>Records a command to destroy an entity.</summary>
            <remarks>At playback, this command throws an error if the entity is
            [deferred](xref:systems-entity-command-buffers), or was destroyed between recording and playback, or if the entity
            has the <see cref="T:Unity.Entities.Prefab"/> tag.</remarks>
            <param name="e">The entity to destroy.</param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.DestroyEntity(Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>Records a command to destroy a NativeArray of entities.</summary>
            <remarks>At playback, this command only runs if the entity count is greater than 0.
            This command throws an error if any of the entities [are deferred](xref:systems-entity-command-buffers),
            were destroyed between recording and playback, or if any of the entities have
            the <see cref="T:Unity.Entities.Prefab"/> tag.</remarks>
            <param name="entities">The NativeArray of entities to destroy.</param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddBuffer``1(Unity.Entities.Entity)">
            <summary>Records a command to add a dynamic buffer to an entity.</summary>
            <remarks>At playback, if the entity already has this type of dynamic buffer,
            this method sets the dynamic buffer contents. If the entity doesn't have a
            <see cref="T:Unity.Entities.DynamicBuffer`1"/> component that stores elements of type T, then
            this method adds a DynamicBuffer component with the provided contents. If the
            entity is destroyed before playback, or is deferred, an error is thrown.</remarks>
            <param name="e">The entity to add the dynamic buffer to.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> type stored by the <see cref="T:Unity.Entities.DynamicBuffer`1"/>.</typeparam>
            <returns>The <see cref="T:Unity.Entities.DynamicBuffer`1"/> that will be added when the command plays back.</returns>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetBuffer``1(Unity.Entities.Entity)">
            <summary>Records a command to set a dynamic buffer on an entity.</summary>
            <remarks>At playback this command throws an error if the entity is destroyed
            before playback, or if [it's deferred](xref:systems-entity-command-buffers),
            or if the entity doesn't have a <see cref="T:Unity.Entities.DynamicBuffer`1"/> component that
            stores elements of type T.</remarks>
            <param name="e">The entity to set the dynamic buffer on.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> type stored by the <see cref="T:Unity.Entities.DynamicBuffer`1"/>.</typeparam>
            <returns>The <see cref="T:Unity.Entities.DynamicBuffer`1"/> that will be set when the command plays back.</returns>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AppendToBuffer``1(Unity.Entities.Entity,``0)">
            <summary>Records a command to append a single element to the end of a dynamic buffer component.</summary>
            <remarks>At playback this command throws an error if the entity is destroyed
            before playback, or if [it's deferred](xref:systems-entity-command-buffers),
            or if the entity doesn't have a <see cref="T:Unity.Entities.DynamicBuffer`1"/> component that
            stores elements of type T.</remarks>
            <param name="e">The entity to which the dynamic buffer belongs.</param>
            <param name="element">The new element to add to the <see cref="T:Unity.Entities.DynamicBuffer`1"/> component.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> type stored by the <see cref="T:Unity.Entities.DynamicBuffer`1"/>.</typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Entities.Entity,``0)">
            <summary> Records a command to add component of type T to an entity. </summary>
            <remarks>At playback, if the entity already has this type of component, the value will just be set.
            Throws an error if this entity is destroyed before playback, if this entity is still [deferred](xref:systems-entity-command-buffers),
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="e"> The entity to have the component added. </param>
            <param name="component">The value to add on the new component in playback for the entity.</param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to add component of type T to a NativeArray of entities. </summary>
            <remarks>At playback, if any entity already has this type of component, the value will just be set.
            Throws an error if any entity is destroyed before playback, if any entity is still [deferred](xref:systems-entity-command-buffers),
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="entities"> The NativeArray of entities to have the component added. </param>
            <param name="component">The value to add on the new component in playback for all entities in the NativeArray.</param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Entities.Entity)">
            <summary> Records a command to add component of type T to an entity. </summary>
            <remarks>At playback, this command does nothing if the entity already has the component.
            Throws an error if this entity is destroyed before playback, if this entity is still [deferred](xref:systems-entity-command-buffers),
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="e"> The entity to have the component added. </param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary> Records a command to add component of type T to a NativeArray of entities. </summary>
            <remarks>At playback, if an entity already has this component, it is skipped.
            Throws an error if any entity is destroyed before playback, or if any entity is still [deferred](xref:systems-entity-command-buffers),
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="entities"> The NativeArray of entities to have the component added. </param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary> Records a command to add a component to an entity. </summary>
            <remarks>At playback, this command does nothing if the entity already has the component.
            Throws an error if any entity is destroyed before playback, or if any entity is still [deferred](xref:systems-entity-command-buffers),
            if component is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="e"> The entity to get the additional component. </param>
            <param name="componentType"> The type of component to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.UnsafeAddComponent(Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Void*)">
            <summary> Records a command to add a component to an entity. </summary>
            <remarks>At playback, this command does nothing if the entity already has the component.
            Throws an error if any entity is destroyed before playback, or if any entity is still [deferred](xref:systems-entity-command-buffers),
            if component is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="typeIndex"> The TypeIndex of the component being set. </param>
            <param name="typeSize"> The Size of the type of the component being set. </param>
            <param name="componentDataPtr"> The pointer to the data of the component to be copied. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType)">
            <summary> Records a command to add a component to a NativeArray of entities. </summary>
            <remarks>At playback, if an entity already has this component, it is skipped.
            Throws an error if any entity is destroyed before playback, or if any entity is still [deferred](xref:systems-entity-command-buffers),
            if component is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this component type makes the archetype too large.</remarks>
            <param name="entities"> The NativeArray of entities to have the component added. </param>
            <param name="componentType"> The type of component to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to add one or more components to an entity. </summary>
            <remarks>At playback, you can include a component type that the entity already has.
            Throws an error if this entity is destroyed before playback, if this entity is still [deferred](xref:systems-entity-command-buffers),
            if any component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding a component type makes the archetype too large.</remarks>
            <param name="e"> The entity to get additional components. </param>
            <param name="componentTypeSet"> The types of components to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to add one or more components to a NativeArray of entities. </summary>
            <remarks>At playback, you can include a component type that any of the entities already have.
            Throws an error if this entity is destroyed before playback, if this entity is still [deferred](xref:systems-entity-command-buffers),
            if any component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding a component type makes the archetype too large.</remarks>
            <param name="entities"> The NativeArray of entities to have the components added. </param>
            <param name="componentTypeSet"> The types of components to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetComponent``1(Unity.Entities.Entity,``0)">
            <summary> Records a command to set a component value on an entity.</summary>
            <remarks> At playback, this command throws an error if the entity is destroyed before playback,
            if this entity is still [deferred](xref:systems-entity-command-buffers), if the entity doesn't have the component type,
            if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if T is zero sized.</remarks>
            <param name="e"> The entity to set the component value of. </param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.UnsafeSetComponent(Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Void*)">
            <summary> Records a command to set a component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity doesn't have the component type,
            if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if T is zero sized.</remarks>
            <param name="e"> The entity to set the component value of. </param>
            <param name="typeIndex"> The TypeIndex of the component being set. </param>
            <param name="typeSize"> The Size of the type of the component being set. </param>
            <param name="componentDataPtr"> The pointer to the data of the component to be copied. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetEnabled(Unity.Entities.Entity,System.Boolean)">
             <summary>
             Records a command to add or remove the <see cref="T:Unity.Entities.Disabled"/> component. By default EntityQuery does not include entities containing the Disabled component.
             Enabled entities are processed by systems, disabled entities are not.
            
             If the entity was converted from a prefab and thus has a <see cref="T:Unity.Entities.LinkedEntityGroup"/> component, the entire group will be enabled or disabled.
             </summary>
             <remarks> At playback, this command throws an error if this entity is destroyed before playback,
             if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if this entity is still deferred.</remarks>
             <param name="e">The entity whose component should be enabled or disabled.</param>
             <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Records a command to enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the component type.</remarks>
            <typeparam name="T">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="e">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType,System.Boolean)">
            <summary>
            Records a command to enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the component type.</remarks>
            <param name="e">The entity whose component should be enabled or disabled.</param>
            <param name="componentType">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetName(Unity.Entities.Entity,Unity.Collections.FixedString64Bytes@)">
            <summary> Records a command to set a name of an entity if Debug Names is enabled.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the EntityNameStore has reached its limit.</remarks>
            <param name="e"> The entity to set the name value of. </param>
            <param name="name"> The name to set. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent``1(Unity.Entities.Entity)">
            <summary> Records a command to remove component of type T from an entity. </summary>
            <remarks> At playback, it's not an error if the entity doesn't have component T.
            Will throw an error if this entity is destroyed before playback,
            if this entity is still deferred, or if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="e"> The entity to have the component removed. </param>
            <typeparam name="T"> The type of component to remove. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary> Records a command to remove component of type T from a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error if any entity doesn't have component T.
            Will throw an error if one of these entities is destroyed before playback,
            if one of these entities is still deferred, or if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="entities"> The NativeArray of entities to have the component removed. </param>
            <typeparam name="T"> The type of component to remove. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary> Records a command to remove a component from an entity. </summary>
            <remarks>At playback, it's not an error if the entity doesn't have the component type.
            Will throw an error if this entity is destroyed before playback,
            if this entity is still deferred, or if the component type is Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="e"> The entity to have the component removed. </param>
            <param name="componentType"> The type of component to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType)">
            <summary> Records a command to remove one or more components from a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error if any entity doesn't have the component type.
            Will throw an error if one of these entities is destroyed before playback,
            if one of these entities is still deferred, or if the component type is Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="entities"> The NativeArray of entities to have the component removed. </param>
            <param name="componentType"> The type of component to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to remove one or more components from an entity. </summary>
            <remarks>At playback, it's not an error if the entity doesn't have one of the component types.
            Will throw an error if this entity is destroyed before playback,
            if this entity is still deferred, or if any of the component types are Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="e"> The entity to have components removed. </param>
            <param name="componentTypeSet"> The types of components to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to remove one or more components from a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error if any entity doesn't have one of the component types.
            Will throw an error if one of these entities is destroyed before playback,
            if one of these entities is still deferred, or if any of the component types are Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="entities"> The NativeArray of entities to have components removed. </param>
            <param name="componentTypeSet"> The types of components to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentForEntityQuery(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities to which the component is added. </param>
            <param name="componentType">The type of component to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)">
             <summary>Records a command to add a component to all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Does not affect entities which already have the component.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities to which the component is added. </param>
             <param name="componentType">The type of component to add.</param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentForEntityQuery``1(Unity.Entities.EntityQuery)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Entities.EntityQuery)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities to which the component is added. </param>
            <typeparam name="T"> The type of component to add. </typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Entities.EntityQuery)">
             <summary>Records a command to add a component to all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Does not affect entities which already have the component.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities to which the component is added. </param>
             <typeparam name="T"> The type of component to add. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentForEntityQuery``1(Unity.Entities.EntityQuery,``0)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Entities.EntityQuery,``0)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities to which the component is added. </param>
            <param name="value">The value to set on the new component in playback for all entities matching the query.</param>
            <typeparam name="T"> The type of component to add. </typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent``1(Unity.Entities.EntityQuery,``0)">
             <summary>Records a command to add a component to all entities matching a query. Also sets the value of this new component on all the matching entities.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Entities which already have the component type will have the component set to the value.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities to which the component is added. </param>
             <param name="value">The value to set on the new component in playback for all entities matching the query.</param>
             <typeparam name="T"> The type of component to add. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentForEntityQuery(Unity.Entities.EntityQuery,Unity.Entities.ComponentTypeSet@)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities to which the components are added. </param>
            <param name="componentTypeSet">The types of components to add.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentTypeSet@)">
             <summary>Records a command to add multiple components to all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Some matching entities may already have some or all of the specified components. After this operation, all matching entities will have all of the components.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities to which the components are added. </param>
             <param name="componentTypeSet">The types of components to add.</param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponentManaged``1(Unity.Entities.EntityQuery,``0)">
             <summary> Records a command to add a possibly-managed shared component to all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Entities which already have the component type will have the component set to the value.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
             <param name="component"> The component value to add. </param>
             <typeparam name="T"> The type of shared component to set. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponentForEntityQuery``1(Unity.Entities.EntityQuery,``0)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.AddSharedComponent``1(Unity.Entities.EntityQuery,``0)"/> instead.</summary>
            <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
            <param name="component"> The component value to add. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponent``1(Unity.Entities.EntityQuery,``0)">
             <summary> Records a command to add a unmanaged shared component to all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Entities which already have the component type will have the component set to the value.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
             <param name="component"> The component value to add. </param>
             <typeparam name="T"> The type of shared component to set. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentObjectForEntityQuery(Unity.Entities.EntityQuery,System.Object)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.AddComponentObject(Unity.Entities.EntityQuery,System.Object)"/> instead.</summary>
            <param name="entityQuery"> The query specifying which entities to add the component value to.</param>
            <param name="componentData"> The component object to add. </param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentObject(Unity.Entities.EntityQuery,System.Object)">
             <summary> Records a command to add a hybrid component and set its value for all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             At playback, this command throws an error if one of these entities is destroyed before playback.
             Entities which already have the component type will have the component set to the value.
             </remarks>
             <exception cref="T:System.InvalidOperationException">Thrown in playback if one or more of the entities has been destroyed. (With safety checks disabled,
             playback will perform invalid and unsafe memory access.).</exception>
             <param name="entityQuery"> The query specifying which entities to add the component value to.</param>
             <param name="componentData"> The component object to add. </param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
             <exception cref="T:System.ArgumentNullException">Throws if componentData is null.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetComponentObjectForEntityQuery(Unity.Entities.EntityQuery,System.Object)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.SetComponentObject(Unity.Entities.EntityQuery,System.Object)"/> instead.</summary>
            <param name="entityQuery"> The query specifying which entities to set the component value for.</param>
            <param name="componentData"> The component object to set.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetComponentObject(Unity.Entities.EntityQuery,System.Object)">
             <summary> Records a command to set a hybrid component value for all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             At playback, this command throws an error if one of these entities is destroyed before playback,
             if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any entity does not have the component type at playback.
             Playback Entities which already have the component type will have the component set to the value.</remarks>
             <exception cref="T:System.InvalidOperationException">Thrown in playback if one or more of the entities does not have the component type or has been destroyed. (With safety checks disabled,
             playback will perform invalid and unsafe memory access.).</exception>
             <param name="entityQuery"> The query specifying which entities to set the component value for.</param>
             <param name="componentData"> The component object to set.</param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
             <exception cref="T:System.ArgumentNullException">Throws if componentData is null.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponentForEntityQueryManaged``1(Unity.Entities.EntityQuery,``0)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.SetSharedComponentManaged``1(Unity.Entities.EntityQuery,``0)"/> instead.</summary>
            <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
            <param name="component"> The component value to add. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponentManaged``1(Unity.Entities.EntityQuery,``0)">
             <summary> Records a command to set a possibly-managed shared component value on all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Fails if any of the entities do not have the type of shared component. [todo: should it be required that the component type is included in the query?]
            
             At playback, this command throws an error if one of these entities is destroyed before playback or
             if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
             <param name="component"> The component value to add. </param>
             <typeparam name="T"> The type of shared component to set. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponentForEntityQuery``1(Unity.Entities.EntityQuery,``0)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.SetSharedComponent``1(Unity.Entities.EntityQuery,``0)"/> instead.</summary>
            <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
            <param name="component"> The component value to add. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponent``1(Unity.Entities.EntityQuery,``0)">
             <summary> Records a command to set an unmanaged shared component value on all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Fails if any of the entities do not have the type of shared component. [todo: should it be required that the component type is included in the query?]
            
             At playback, this command throws an error if one of these entities is destroyed before playback or
             if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery"> The query specifying which entities to add the component value to. </param>
             <param name="component"> The component value to add. </param>
             <typeparam name="T"> The type of shared component to set. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponentForEntityQuery(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities from which the component is removed. </param>
            <param name="componentType">The types of component to remove.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentType)">
             <summary>Records a command to remove a component from all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Does not affect entities already missing the component.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities from which the component is removed. </param>
             <param name="componentType">The types of component to remove.</param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponentForEntityQuery``1(Unity.Entities.EntityQuery)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.RemoveComponent``1(Unity.Entities.EntityQuery)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities from which the component is removed. </param>
            <typeparam name="T"> The type of component to remove. </typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent``1(Unity.Entities.EntityQuery)">
             <summary>Records a command to remove a component from all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Does not affect entities already missing the component.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities from which the component is removed. </param>
             <typeparam name="T"> The type of component to remove. </typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponentForEntityQuery(Unity.Entities.EntityQuery,Unity.Entities.ComponentTypeSet@)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities from which the components are removed. </param>
            <param name="componentTypeSet">The types of components to remove.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.RemoveComponent(Unity.Entities.EntityQuery,Unity.Entities.ComponentTypeSet@)">
             <summary>Records a command to remove multiple components from all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Some matching entities may already be missing some or all of the specified components. After this operation, all matching entities will have none of the components.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities from which the components are removed. </param>
             <param name="componentTypeSet">The types of components to remove.</param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.DestroyEntitiesForEntityQuery(Unity.Entities.EntityQuery)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBuffer.DestroyEntity(Unity.Entities.EntityQuery)"/> instead.</summary>
            <param name="entityQuery">The query specifying the entities to destroy.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.DestroyEntity(Unity.Entities.EntityQuery)">
             <summary>Records a command to destroy all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             At playback, this command throws an error if one of these entities is destroyed before playback. (With safety checks enabled, an exception is thrown. Without safety checks,
             playback will perform invalid and unsafe memory access.)
             </remarks>
             <param name="entityQuery">The query specifying the entities to destroy.</param>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)">
            <summary> Records a command to add a possibly-managed shared component value on an entity.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="e"> The entity to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponent``1(Unity.Entities.Entity,``0)">
            <summary> Records a command to add an unmanaged shared component value on an entity.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="e"> The entity to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to add a possibly-managed shared component value on a NativeArray of entities.</summary>
            <remarks>At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="entities"> The NativeArray of entities to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to add an unmanaged shared component value on a NativeArray of entities.</summary>
            <remarks>At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="entities"> The NativeArray of entities to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)">
            <summary> Records a command to set a possibly-managed shared component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the shared component type.</remarks>
            <param name="e"> The entity to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.UnsafeSetSharedComponentManagedNonDefault(Unity.Entities.Entity,System.Object,Unity.Entities.TypeIndex)">
            <summary>
            Only for inserting a non-default value
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponent``1(Unity.Entities.Entity,``0)">
            <summary> Records a command to set an unmanaged shared component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the shared component type.</remarks>
            <param name="e"> The entity to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to set a possibly-managed shared component value on a NativeArray of entities.</summary>
            <remarks> At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any entity doesn't have the shared component type.</remarks>
            <param name="entities"> The NativeArray of entities to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to set an unmanaged shared component value on a NativeArray of entities.</summary>
            <remarks> At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any entity doesn't have the shared component type.</remarks>
            <param name="entities"> The NativeArray of entities to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentForLinkedEntityGroup``1(Unity.Entities.Entity,Unity.Entities.EntityQueryMask,``0)">
            <summary>Records a command that adds a component to an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/> based on an <see cref="T:Unity.Entities.EntityQueryMask"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't match the mask will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback,
            if the entity is still deferred, or if any of the matching linked entities cannot add the component.</remarks>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="mask">The EntityQueryMask that is used to determine which linked entities to add the component to.
            Note that EntityQueryMask ignores all query filtering (including chunk filtering and enableable components),
            and may thus match more entities than expected.</param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the component has a reference to a deferred entity, requiring fixup within the command buffer.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AddComponentForLinkedEntityGroup(Unity.Entities.Entity,Unity.Entities.EntityQueryMask,Unity.Entities.ComponentType)">
            <summary>Records a command that adds a component to an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/> based on an <see cref="T:Unity.Entities.EntityQueryMask"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't match the mask will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback,
            if the entity is still deferred, or if any of the matching linked entities cannot add the component.</remarks>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="mask">The EntityQueryMask that is used to determine which linked entities to add the component to.
            Note that EntityQueryMask ignores all query filtering (including chunk filtering and enableable components),
            and may thus match more entities than expected.</param>
            <param name="componentType"> The component type to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.SetComponentForLinkedEntityGroup``1(Unity.Entities.Entity,Unity.Entities.EntityQueryMask,``0)">
            <summary>Records a command that sets a component for an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/> based on an <see cref="T:Unity.Entities.EntityQueryMask"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't match the mask will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback,
            if the entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any of the matching linked entities do not already have the component.</remarks>
            <param name="e">The entity whose LinkedEntityGroup will be modified by this command.</param>
            <param name="mask">The EntityQueryMask that is used to determine which linked entities to set the component for.
            Note that EntityQueryMask ignores all query filtering (including chunk filtering and enableable components),
            and may thus match more entities than expected.</param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the component has a reference to a deferred entity, requiring fixup within the command buffer.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ReplaceComponentForLinkedEntityGroup``1(Unity.Entities.Entity,``0)">
            <summary>Records a command that replaces a component value for an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't have the component will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback or
            if the entity is still deferred.</remarks>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the component has a reference to a deferred entity, requiring fixup within the command buffer.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.Playback(Unity.Entities.EntityManager)">
            <summary>
            Play back all recorded operations against an entity manager.
            </summary>
            <param name="mgr">The entity manager that will receive the operations</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.Playback(Unity.Entities.ExclusiveEntityTransaction)">
            <summary>
            Play back all recorded operations with an exclusive entity transaction.
            <seealso cref="M:Unity.Entities.EntityManager.BeginExclusiveEntityTransaction"/>.
            </summary>
            <param name="mgr">The exclusive entity transaction that will process the operations</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.AsParallelWriter">
            <summary>An extension of EntityCommandBuffer that allows concurrent (deterministic) command buffer recording.</summary>
            <returns>The <see cref="T:Unity.Entities.EntityCommandBuffer.ParallelWriter"/> that can be used to record commands in parallel.</returns>
        </member>
        <member name="T:Unity.Entities.EntityCommandBuffer.ParallelWriter">
            <summary>
            Allows concurrent (deterministic) command buffer recording.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.CreateEntity(System.Int32,Unity.Entities.EntityArchetype)">
            <summary>Records a command to create an entity with specified archetype.</summary>
            <remarks>At playback, this command will throw an error if the archetype contains the <see cref="T:Unity.Entities.Prefab"/> tag.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="archetype">The archetype of the new entity.</param>
            <returns>An entity that is deferred and will be fully realized when this EntityCommandBuffer is played back.</returns>
            <exception cref="T:System.ArgumentException">Throws if the archetype is null.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.CreateEntity(System.Int32)">
            <summary>Records a command to create an entity with no components.</summary>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <returns>An entity that is deferred and will be fully realized when this EntityCommandBuffer is played back.</returns>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.Instantiate(System.Int32,Unity.Entities.Entity)">
            <summary>Records a command to create an entity with specified entity prefab.</summary>
            <remarks>An instantiated entity will have the same components and component values as the prefab entity, minus the Prefab tag component.
            At playback, this command will throw an error if the source entity was destroyed before playback.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity prefab.</param>
            <returns>An entity that is deferred and will be fully realized when this EntityCommandBuffer is played back.</returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if Entity e is null and if safety checks are enabled.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.Instantiate(System.Int32,Unity.Entities.Entity,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>Records a command to create a NativeArray of entities with specified entity prefab.</summary>
            <remarks>An instantiated entity will have the same components and component values as the prefab entity, minus the Prefab tag component.
            At playback, this command will throw an error if the source entity was destroyed before playback.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity prefab.</param>
            <param name="entities">The NativeArray of entities that will be populated with realized entities when this EntityCommandBuffer is played back.</param>
            <exception cref="T:System.ArgumentNullException"> Thrown if Entity e is null and if safety checks are enabled.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.DestroyEntity(System.Int32,Unity.Entities.Entity)">
            <summary>Records a command to destroy an entity.</summary>
            <remarks>At playback, this command will throw an error if any of the entities are still deferred or were destroyed between recording and playback,
            or if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity to destroy.</param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.DestroyEntity(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary>Records a command to destroy a NativeArray of entities.</summary>
            <remarks>At playback, this command will do nothing if entities has a count of 0.
            This command will throw an error if any of the entities are still deferred or were destroyed between recording and playback,
            or if any of the entities have the <see cref="T:Unity.Entities.Prefab"/> tag.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities">The NativeArray of entities to destroy.</param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary> Records a command to add component of type T to an entity. </summary>
            <remarks>At playback, if the entity already has this type of component, the value will just be set.
            Will throw an error if this entity is destroyed before playback, if this entity is still deferred,
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to have the component added. </param>
            <param name="component">The value to add on the new component in playback for the entity.</param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.UnsafeAddComponent(System.Int32,Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Void*)">
            <summary> Records a command to add a component to an entity. </summary>
            <remarks>At playback, this command will do nothing if the entity already has the component.
            Will throw an error if this entity is destroyed before playback, if this entity is still deferred,
            if component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="typeIndex"> The TypeIndex of the component being set. </param>
            <param name="typeSize"> The Size of the type of the component being set. </param>
            <param name="componentDataPtr"> The pointer to the data of the component to be copied. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to add component of type T to a NativeArray of entities. </summary>
            <remarks>At playback, if any entity already has this type of component, the value will just be set.
            Will throw an error if any entity is destroyed before playback, if any entity is still deferred,
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have the component added. </param>
            <param name="component">The value to add on the new component in playback for all entities in the NativeArray.</param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent``1(System.Int32,Unity.Entities.Entity)">
            <summary> Records a command to add component of type T to an entity. </summary>
            <remarks>At playback, this command will do nothing if the entity already has the component.
            Will throw an error if this entity is destroyed before playback, if this entity is still deferred,
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to have the component added. </param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary> Records a command to add component of type T to a NativeArray of entities. </summary>
            <remarks>At playback, if an entity already has this component, it will be skipped.
            Will throw an error if any entity is destroyed before playback, if any entity is still deferred,
            if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have the component added. </param>
            <typeparam name="T"> The type of component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent(System.Int32,Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary> Records a command to add a component to an entity. </summary>
            <remarks>At playback, this command will do nothing if the entity already has the component.
            Will throw an error if this entity is destroyed before playback, if this entity is still deferred,
            if component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to get the additional component. </param>
            <param name="componentType"> The type of component to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType)">
            <summary> Records a command to add a component to a NativeArray of entities. </summary>
            <remarks>At playback, if an entity already has this component, it will be skipped.
            Will throw an error if any entity is destroyed before playback, if any entity is still deferred,
            if component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding this componentType makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have the component added. </param>
            <param name="componentType"> The type of component to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent(System.Int32,Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to add one or more components to an entity. </summary>
            <remarks>At playback, it's not an error to include a component type that the entity already has.
            Will throw an error if this entity is destroyed before playback, if this entity is still deferred,
            if any component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding a component type makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to get additional components. </param>
            <param name="typeSet"> The types of components to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponent(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to add one or more components to a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error to include a component type that any of the entities already have.
            Will throw an error if any entity is destroyed before playback, if any entity is still deferred,
            if any component type is type Entity or <see cref="T:Unity.Entities.Prefab"/>, or adding a component type makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have the components added. </param>
            <param name="typeSet"> The types of components to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddBuffer``1(System.Int32,Unity.Entities.Entity)">
            <summary>Records a command to add a dynamic buffer to an entity.</summary>
            <remarks>At playback, if the entity already has this type of dynamic buffer,
            this method sets the dynamic buffer contents. If the entity doesn't have a
            <see cref="T:Unity.Entities.DynamicBuffer`1"/> component that stores elements of type T, then
            this method adds a DynamicBuffer component with the provided contents. If the
            entity is destroyed before playback, or [is deferred](xref:systems-entity-command-buffers),
            an error is thrown.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity to add the dynamic buffer to.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> type stored by the <see cref="T:Unity.Entities.DynamicBuffer`1"/>.</typeparam>
            <returns>The <see cref="T:Unity.Entities.DynamicBuffer`1"/> that will be added when the command plays back.</returns>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetBuffer``1(System.Int32,Unity.Entities.Entity)">
            <summary>Records a command to set a dynamic buffer on an entity.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, or if the entity doesn't have a <see cref="T:Unity.Entities.DynamicBuffer`1"/> component storing elements of type T.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity to set the dynamic buffer on.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> type stored by the <see cref="T:Unity.Entities.DynamicBuffer`1"/>.</typeparam>
            <returns>The <see cref="T:Unity.Entities.DynamicBuffer`1"/> that will be set when the command plays back.</returns>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AppendToBuffer``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary>Records a command to append a single element to the end of a dynamic buffer component.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, or if the entity doesn't have a <see cref="T:Unity.Entities.DynamicBuffer`1"/> component storing elements of type T.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity to which the dynamic buffer belongs.</param>
            <param name="element">The new element to add to the <see cref="T:Unity.Entities.DynamicBuffer`1"/> component.</param>
            <typeparam name="T">The <see cref="T:Unity.Entities.IBufferElementData"/> type stored by the <see cref="T:Unity.Entities.DynamicBuffer`1"/>.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown if the entity does not have a <see cref="T:Unity.Entities.DynamicBuffer`1"/>
            component storing elements of type T at the time the entity command buffer executes this append-to-buffer command.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetComponent``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary> Records a command to set a component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity doesn't have the component type,
            if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if T is zero sized.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to set the component value of. </param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.UnsafeSetComponent(System.Int32,Unity.Entities.Entity,Unity.Entities.TypeIndex,System.Int32,System.Void*)">
            <summary> Records a command to set a component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity doesn't have the component type,
            if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if T is zero sized.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to set the component value of. </param>
            <param name="typeIndex"> The TypeIndex of the component being set. </param>
            <param name="typeSize"> The Size of the type of the component being set. </param>
            <param name="componentDataPtr"> The pointer to the data of the component to be copied. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetEnabled(System.Int32,Unity.Entities.Entity,System.Boolean)">
             <summary>
             Records a command to add or remove the <see cref="T:Unity.Entities.Disabled"/> component. By default EntityQuery does not include entities containing the Disabled component.
             Enabled entities are processed by systems, disabled entities are not.
            
             If the entity was converted from a prefab and thus has a <see cref="T:Unity.Entities.LinkedEntityGroup"/> component, the entire group will be enabled or disabled.
             </summary>
             <remarks> At playback, this command throws an error if this entity is destroyed before playback,
             if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if this entity is still deferred.</remarks>
             <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
             across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
             <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
             pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
             <param name="e">The entity whose component should be enabled or disabled.</param>
             <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetComponentEnabled``1(System.Int32,Unity.Entities.Entity,System.Boolean)">
            <summary>
            Records a command to enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the component type.</remarks>
            <typeparam name="T">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetComponentEnabled(System.Int32,Unity.Entities.Entity,Unity.Entities.ComponentType,System.Boolean)">
            <summary>
            Records a command to enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the component type.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity whose component should be enabled or disabled.</param>
            <param name="componentType">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetName(System.Int32,Unity.Entities.Entity,Unity.Collections.FixedString64Bytes@)">
            <summary> Records a command to set a name of an entity if Debug Names is enabled.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the EntityNameStore has reached its limit.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to set the name value of. </param>
            <param name="name"> The name to set. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent``1(System.Int32,Unity.Entities.Entity)">
            <summary> Records a command to remove component of type T from an entity. </summary>
            <remarks>At playback, it's not an error if the entity doesn't have component T.
            Will throw an error if this entity is destroyed before playback,
            if this entity is still deferred, or if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to have the component removed. </param>
            <typeparam name="T"> The type of component to remove. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <summary> Records a command to remove component of type T from a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error if any entity doesn't have component T.
            Will throw an error if one of these entities is destroyed before playback,
            if one of these entities is still deferred, or if T is type Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have the component removed. </param>
            <typeparam name="T"> The type of component to remove. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent(System.Int32,Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <summary> Records a command to remove a component from an entity. </summary>
            <remarks>At playback, it's not an error if the entity doesn't have the component type.
            Will throw an error if this entity is destroyed before playback,
            if this entity is still deferred, or if the component type is Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to have the component removed. </param>
            <param name="componentType"> The type of component to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentType)">
            <summary> Records a command to remove one or more components from a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error if any entity doesn't have the component type.
            Will throw an error if one of these entities is destroyed before playback,
            if one of these entities is still deferred, or if the component type is Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have the component removed. </param>
            <param name="componentType"> The type of component to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent(System.Int32,Unity.Entities.Entity,Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to remove one or more components from an entity. </summary>
            <remarks>At playback, it's not an error if the entity doesn't have one of the component types.
            Will throw an error if this entity is destroyed before playback,
            if this entity is still deferred, or if any of the component types are Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to have the components removed. </param>
            <param name="typeSet"> The types of components to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.RemoveComponent(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},Unity.Entities.ComponentTypeSet@)">
            <summary> Records a command to remove one or more components from a NativeArray of entities. </summary>
            <remarks>At playback, it's not an error if any entity doesn't have one of the component types.
            Will throw an error if one of these entities is destroyed before playback,
            if one of these entities is still deferred, or if any of the component types are Entity or <see cref="T:Unity.Entities.Prefab"/>.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to have components removed. </param>
            <param name="typeSet"> The types of components to remove. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddSharedComponentManaged``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary> Records a command to add a shared component value on an entity.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddSharedComponent``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary> Records a command to add an unmanaged shared component value on an entity.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddSharedComponentManaged``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to add a possibly-managed shared component value on a NativeArray of entities.</summary>
            <remarks>At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddSharedComponent``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to add an unmanaged shared component value on a NativeArray of entities.</summary>
            <remarks>At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if adding this shared component exceeds the maximum number of shared components,
            or adding a component type makes the archetype too large.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to add the shared component value to. </param>
            <param name="sharedComponent"> The shared component value to add. </param>
            <typeparam name="T"> The type of shared component to add. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetSharedComponentManaged``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary> Records a command to set a shared component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the shared component type.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetSharedComponent``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary> Records a command to set an unmanaged shared component value on an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the shared component type.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e"> The entity to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.UnsafeSetSharedComponentNonDefault(System.Int32,Unity.Entities.Entity,System.Void*,Unity.Entities.TypeIndex)">
            <summary>
            Only for inserting a non-default value
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetSharedComponentManaged``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to set a shared component value on a NativeArray of entities.</summary>
            <remarks> At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any entity doesn't have the shared component type.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetSharedComponent``1(System.Int32,Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <summary> Records a command to set a shared component value on a NativeArray of entities.</summary>
            <remarks> At playback, this command throws an error if any entity is destroyed before playback,
            if any entity is still deferred, if any entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any entity doesn't have the shared component type.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="entities"> The NativeArray of entities to set the shared component value of. </param>
            <param name="sharedComponent"> The shared component value to set. </param>
            <typeparam name="T"> The type of shared component to set. </typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponentForLinkedEntityGroup``1(System.Int32,Unity.Entities.Entity,Unity.Entities.EntityQueryMask,``0)">
            <summary>Records a command that adds a component to an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/> based on an <see cref="T:Unity.Entities.EntityQueryMask"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't match the mask will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback,
            if the entity is still deferred, or if any of the matching linked entities cannot add the component.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="mask">The EntityQueryMask that is used to determine which linked entities to add the component to.
            Note that EntityQueryMask ignores all query filtering (including chunk filtering and enableable components),
            and may thus match more entities than expected.</param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the component has a reference to a deferred entity, requiring fixup within the command buffer.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.AddComponentForLinkedEntityGroup(System.Int32,Unity.Entities.Entity,Unity.Entities.EntityQueryMask,Unity.Entities.ComponentType)">
            <summary>Records a command that adds a component to an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/> based on an <see cref="T:Unity.Entities.EntityQueryMask"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't match the mask will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback,
            if the entity is still deferred, or if any of the matching linked entities cannot add the component.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="mask">The EntityQueryMask that is used to determine which linked entities to add the component to.
            Note that EntityQueryMask ignores all query filtering (including chunk filtering and enableable components),
            and may thus match more entities than expected.</param>
            <param name="componentType"> The component type to add. </param>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.SetComponentForLinkedEntityGroup``1(System.Int32,Unity.Entities.Entity,Unity.Entities.EntityQueryMask,``0)">
            <summary>Records a command that sets a component for an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/> based on an <see cref="T:Unity.Entities.EntityQueryMask"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't match the mask will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback,
            if the entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if any of the matching linked entities do not already have the component.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="mask">The EntityQueryMask that is used to determine which linked entities to set the component for.
            Note that EntityQueryMask ignores all query filtering (including chunk filtering and enableable components),
            and may thus match more entities than expected.</param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the component has a reference to a deferred entity, requiring fixup within the command buffer.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBuffer.ParallelWriter.ReplaceComponentForLinkedEntityGroup``1(System.Int32,Unity.Entities.Entity,``0)">
            <summary>Records a command that replaces a component value for an entity's <see cref="T:Unity.Entities.LinkedEntityGroup"/>.
            Entities in the <see cref="T:Unity.Entities.LinkedEntityGroup"/> that don't have the component will be skipped safely.</summary>
            <remarks>At playback, this command throws an error if the entity is destroyed before playback or
            if the entity is still deferred.</remarks>
            <param name="sortKey">A unique index for each set of commands added to this EntityCommandBuffer
            across all parallel jobs writing commands to this buffer. The <see cref="T:Unity.Entities.ChunkIndexInQuery"/> provided by
            <see cref="T:Unity.Entities.IJobEntity"/> is an appropriate value to use for this parameter. In an <see cref="T:Unity.Entities.IJobChunk"/>
            pass the 'unfilteredChunkIndex' value from <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="e">The entity whose LinkedEntityGroup will be referenced.</param>
            <param name="component"> The component value to set. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.ArgumentException">Throws if the component has a reference to a deferred entity, requiring fixup within the command buffer.</exception>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="P:Unity.Entities.EntityCommandBuffer.PLAYBACK_WITH_TRACE">
            <summary>
            A static field for logging details during EntityCommandBuffer playback.
            When set to true, each EntityCommandBuffer will log its commands as they are processed during playback.
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityCommandBufferManagedComponentExtensions">
            <summary>
            Provides additional methods for using managed components with an EntityCommandBuffer.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.Entity,``0)">
            <summary> Records a command to add and set a managed component for an entity.</summary>
            <remarks>At playback, if the entity already has this type of component, the value will just be set.
            Will throw an error if this entity is destroyed before playback, if this entity is still deferred,
            or adding this componentType makes the archetype too large.</remarks>
            <param name="ecb"> This entity command buffer.</param>
            <param name="e"> The entity to set the component value on.</param>
            <param name="component"> The component value to add. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.Entity)">
            <summary> Records a command to add a managed component for an entity.</summary>
            <remarks>At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, or adding this componentType makes the archetype too large.</remarks>
            <param name="ecb"> This entity command buffer.</param>
            <param name="e"> The entity to set the component value on.</param>
            <typeparam name="T"> The type of component to add.</typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.Entity,``0)">
            <summary> Records a command to set a managed component for an entity.</summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the shared component type.</remarks>
            <param name="ecb"> This entity command buffer.</param>
            <param name="e"> The entity to set the component value on.</param>
            <param name="component"> The component value to add. </param>
            <typeparam name="T"> The type of component to set.</typeparam>
            <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponentEnabled``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.Entity,System.Boolean)">
            <summary>
            Records a command to enable or disable a <see cref="T:Unity.Entities.ComponentType"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <remarks> At playback, this command throws an error if this entity is destroyed before playback,
            if this entity is still deferred, if the entity has the <see cref="T:Unity.Entities.Prefab"/> tag, or if the entity doesn't have the component type.</remarks>
            <typeparam name="T">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="ecb"> This entity command buffer.</param>
            <param name="e">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponentForEntityQuery``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.EntityQuery,``0)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.EntityQuery,``0)"/> instead.</summary>
            <param name="ecb"> This entity command buffer.</param>
            <param name="query"> The query specifying which entities to add the component value to.</param>
            <param name="component"> The component value to add. </param>
            <typeparam name="T"> The type of component to add.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.AddComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.EntityQuery,``0)">
             <summary> Records a command to add a managed component and set its value for all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             Entities which already have the component type will have the component set to the value.
             </remarks>
             <exception cref="T:System.InvalidOperationException">Thrown in playback if one or more of the entities has been destroyed. (With safety checks disabled,
             playback will perform invalid and unsafe memory access.).</exception>
             <param name="ecb"> This entity command buffer.</param>
             <param name="query"> The query specifying which entities to add the component value to.</param>
             <param name="component"> The component value to add. </param>
             <typeparam name="T"> The type of component to add.</typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponentForEntityQuery``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.EntityQuery,``0)">
            <summary>Obsolete. Use <see cref="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.EntityQuery,``0)"/> instead.</summary>
            <param name="ecb"> This entity command buffer.</param>
            <param name="query"> The query specifying which entities to set the component value for.</param>
            <param name="component"> The component value to set.</param>
            <typeparam name="T"> The type of component to set.</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityCommandBufferManagedComponentExtensions.SetComponent``1(Unity.Entities.EntityCommandBuffer,Unity.Entities.EntityQuery,``0)">
             <summary> Records a command to set a managed component value for all entities matching a query.</summary>
             <remarks>The set of entities matching the query is 'captured' in the method call, and the recorded command stores an array of all these entities.
            
             If any entity does not have the component type at playback , playback Entities which already have the component type will have the component set to the value.
             </remarks>
             <exception cref="T:System.InvalidOperationException">Thrown in playback if one or more of the entities does not have the component type or has been destroyed. (With safety checks disabled,
             playback will perform invalid and unsafe memory access.).</exception>
             <param name="ecb"> This entity command buffer.</param>
             <param name="query"> The query specifying which entities to set the component value for.</param>
             <param name="component"> The component value to set.</param>
             <typeparam name="T"> The type of component to set.</typeparam>
             <exception cref="T:System.NullReferenceException">Throws if an Allocator was not passed in when the EntityCommandBuffer was created.</exception>
             <exception cref="T:System.InvalidOperationException">Throws if this EntityCommandBuffer has already been played back.</exception>
        </member>
        <member name="M:Unity.Entities.MemoryProfiler.Internal_UpdateWorld(Unity.Entities.World)">
            <summary>
            For internal use only, use <see cref="M:Unity.Entities.MemoryProfiler.Update"/> instead.
            </summary>
        </member>
        <member name="T:Unity.Entities.DisallowRefReturnCrossingThisAttribute">
            <summary>
                What is this : Attribute signaling that ref returned values, of a type that has this attribute, cannot intersect
                with
                calls to methods that also have this attribute.
                Motivation(s): ref returns of values that are backed by native memory (unsafe), like IComponentData in ecs chunks,
                can have the referenced
                memory invalidated by certain methods. A way is needed to detect these situations a compilation time to prevent
                accessing invalidated references.
                Notes:
                - This attribute is used/feeds a Static Analyzer at compilation time.
                - Attribute transfers with aggragations: struct A has this attribute, struct B has a field of type A; both A and B
                are concidered to have the attribute.
            </summary>
        </member>
        <member name="T:Unity.Entities.AlwaysSynchronizeSystemAttribute">
            <summary>
            AlwaysSynchronizeSystem can be applied to a SystemBase to force it to synchronize on all of its
            dependencies before every update.  This attribute should only be applied when a synchronization point is
            necessary every frame.
            </summary>
        </member>
        <member name="E:Unity.Entities.RuntimeApplication.PreFrameUpdate">
            <summary>
            Event invoked before a frame update.
            </summary>
        </member>
        <member name="E:Unity.Entities.RuntimeApplication.PostFrameUpdate">
            <summary>
            Event invoked after a frame update.
            </summary>
        </member>
        <member name="T:Unity.Entities.ExclusiveEntityTransaction">
            <summary>
            Provides an interface to safely perform <see cref="P:Unity.Entities.ExclusiveEntityTransaction.EntityManager"/> operations from a single worker thread, by temporarily
            giving that thread exclusive access to a <see cref="T:Unity.Entities.World"/>'s <see cref="P:Unity.Entities.ExclusiveEntityTransaction.EntityManager"/>.
            </summary>
            <remarks>The intended use case for this feature is to let a worker thread stream Entity data into a staging <see cref="T:Unity.Entities.World"/>
            and perform any necessary post-processing structural changes, prior to moving the final data into the main simulation world
            using <see cref="M:Unity.Entities.EntityManager.MoveEntitiesFrom(Unity.Entities.EntityManager)"/>. This lets the main thread continue to safely process the primary world
            while the new data is loading in, and not require a main-thread sync point until the new Entities are fully loaded
            and ready to be injected.</remarks>
            <seealso cref="M:Unity.Entities.EntityManager.BeginExclusiveEntityTransaction"/>
            <seealso cref="M:Unity.Entities.EntityManager.EndExclusiveEntityTransaction"/>
        </member>
        <member name="P:Unity.Entities.ExclusiveEntityTransaction.EntityManager">
            <summary>
            Return the entity manager this transaction operates upon
            </summary>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.CreateArchetype(Unity.Entities.ComponentType[])">
            <inheritdoc cref="M:Unity.Entities.EntityManager.CreateArchetype(Unity.Entities.ComponentType[])"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.CreateEntity(Unity.Entities.EntityArchetype)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.EntityArchetype)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.CreateEntity(Unity.Entities.EntityArchetype,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <inheritdoc cref="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.EntityArchetype,Unity.Collections.NativeArray{Unity.Entities.Entity})"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.CreateEntity(Unity.Entities.ComponentType[])">
            <inheritdoc cref="M:Unity.Entities.EntityManager.CreateEntity(Unity.Entities.ComponentType[])"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.Instantiate(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.Instantiate(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.Instantiate(Unity.Entities.Entity,Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <inheritdoc cref="M:Unity.Entities.EntityManager.Instantiate(Unity.Entities.Entity,Unity.Collections.NativeArray{Unity.Entities.Entity})"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.DestroyEntity(Unity.Collections.NativeArray{Unity.Entities.Entity})">
            <inheritdoc cref="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Collections.NativeArray{Unity.Entities.Entity})"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.DestroyEntity(Unity.Collections.NativeSlice{Unity.Entities.Entity})">
            <inheritdoc cref="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Collections.NativeSlice{Unity.Entities.Entity})"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.DestroyEntity(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.DestroyEntity(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddBuffer``1(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddBuffer``1(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.HasBuffer``1(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.HasBuffer``1(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.RemoveComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.Exists(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.Exists(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.HasComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.HasComponent(Unity.Entities.Entity,Unity.Entities.ComponentType)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.GetComponentData``1(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.GetComponentData``1(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetComponentData``1(Unity.Entities.Entity,``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetComponentData``1(Unity.Entities.Entity,``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.GetSharedComponentData``1(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ExclusiveEntityTransaction.GetSharedComponentManaged``1(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <typeparam name="T">The type of entity</typeparam>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.GetSharedComponentManaged``1(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.GetSharedComponentManaged``1(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.GetSharedComponent``1(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.GetSharedComponent``1(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetSharedComponentData``1(Unity.Entities.Entity,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ExclusiveEntityTransaction.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <param name="componentData">The data to set.</param>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Entities.Entity,``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetSharedComponent``1(Unity.Entities.Entity,``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetSharedComponent``1(Unity.Entities.Entity,``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk},``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk},``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk},``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk},``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponentData``1(Unity.Entities.Entity,``0)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <param name="componentData">The shared component value to set.</param>
            <typeparam name="T">The shared component type.</typeparam>
            <returns>Returns false</returns>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Entities.Entity,``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddSharedComponentManaged``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponent``1(Unity.Entities.Entity,``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Entities.Entity,``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.AddSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.AddSharedComponent``1(Unity.Collections.NativeArray{Unity.Entities.Entity},``0)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.GetBuffer``1(Unity.Entities.Entity,System.Boolean)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.GetBuffer``1(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SwapComponents(Unity.Entities.ArchetypeChunk,System.Int32,Unity.Entities.ArchetypeChunk,System.Int32)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SwapComponents(Unity.Entities.ArchetypeChunk,System.Int32,Unity.Entities.ArchetypeChunk,System.Int32)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType,System.Boolean)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.SetComponentEnabled``1(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.IsComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.IsComponentEnabled(Unity.Entities.Entity,Unity.Entities.ComponentType)"/>
        </member>
        <member name="M:Unity.Entities.ExclusiveEntityTransaction.IsComponentEnabled``1(Unity.Entities.Entity)">
            <inheritdoc cref="M:Unity.Entities.EntityManager.IsComponentEnabled``1(Unity.Entities.Entity)"/>
        </member>
        <member name="T:Unity.Entities.ManagedObjectEqual">
            <summary>
            Unity.Properties visitor used to deep compare two object instances. This is an internal class.
            </summary>
            <remarks>
            An instance of this class can be re-used for multiple clone operations.
            </remarks>
        </member>
        <member name="F:Unity.Entities.ManagedObjectEqual.m_References">
            <summary>
            Map used to track of references within the same object.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectEqual.m_LhsObject">
            <summary>
            This root lhs object to compare.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectEqual.m_RhsObject">
            <summary>
            This root rhs object to compare.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectEqual.m_Stack">
            <summary>
            The current destination container on the stack. This is pushed and popped as we traverse the tree.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectEqual.m_Equals">
            <summary>
            Returns true if the two objects are equal.
            </summary>
            <remarks>
            This value starts as true and will only be set false during visitation.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.CompareEqual(System.Object,System.Object)">
            <summary>
            Determines whether two object instances are equal using a deep comparison.
            </summary>
            <param name="lhs">The first object to compare.</param>
            <param name="rhs">The second object to compare.</param>
            <returns><see langword="true"/> if the objects are considered equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.Unity#Properties#IPropertyBagVisitor#Visit``1(Unity.Properties.IPropertyBag{``0},``0@)">
            <summary>
            Invoked by Unity.Properties for each container type (i.e. struct or class).
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source container being visited.</param>
            <typeparam name="TContainer">The container type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.Unity#Properties#IListPropertyBagVisitor#Visit``2(Unity.Properties.IListPropertyBag{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for each list container type (i.e. Array or IList type)
            </summary>
            <remarks>
            This will be called for built in array types.
            </remarks>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source list being visited.</param>
            <typeparam name="TList">The list type.</typeparam>
            <typeparam name="TElement">The element type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.Unity#Properties#ISetPropertyBagVisitor#Visit``2(Unity.Properties.ISetPropertyBag{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for each set container type. (i.e. ISet type)
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source set being visited.</param>
            <typeparam name="TSet">The set type.</typeparam>
            <typeparam name="TElement">The element type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.Unity#Properties#IDictionaryPropertyBagVisitor#Visit``3(Unity.Properties.IDictionaryPropertyBag{``0,``1,``2},``0@)">
            <summary>
            Invoked by Unity.Properties for each dictionary container type. (i.e. IDictionary{TKey, TValue} type)
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source dictionary being visited</param>
            <typeparam name="TDictionary">The dictionary type.</typeparam>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.Unity#Properties#IPropertyVisitor#Visit``2(Unity.Properties.Property{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for any non-collection property.
            </summary>
            <param name="property">The property being visited.</param>
            <param name="srcContainer">The source container.</param>
            <typeparam name="TContainer">The container type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectEqual.CompareEquality``1(``0,``0)">
            <summary>
            Compares the given values for equality.
            </summary>
            <param name="lhs">The left hand side to test.</param>
            <param name="rhs">The right hand side to test.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns><see langword="true"/> if the values are equals, otherwise; <see langword="false"/>.</returns>
        </member>
        <member name="T:Unity.Entities.ComponentTypes">
            <summary> Obsolete. Use <see cref="T:Unity.Entities.ComponentTypeSet"/> instead.</summary>
        </member>
        <member name="T:Unity.Entities.ComponentTypeSet">
             <summary>
             An immutable set of <see cref="T:Unity.Entities.ComponentType"/> values.
             </summary>
             <remarks>
             Max numbers of types is 15 (the capacity of <see cref="T:Unity.Collections.FixedList64Bytes`1"/> of 32-bit integers).
            
             Values in the list are sorted by their internal type index.
            
             Only the types themselves are stored, not any access modes.
            
             Cannot contain multiple ComponentType values with the same type index (safety checks in the constructors will throw an exception).
             </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentTypeSet.Length">
            <summary>
            The component type count
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.GetTypeIndex(System.Int32)">
            <summary>
            Get the type index of a component type within this list
            </summary>
            <param name="index">The index of the component within the types stored in this list</param>
            <returns>The type index of the component type at the specified index</returns>
        </member>
        <member name="P:Unity.Entities.ComponentTypeSet.UnsafeTypesPtrRO">
            <summary>
            Get a pointer to the internal array of type indices.
            </summary>
            <remarks>
            This pointer should only be used for read-only access
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.GetComponentType(System.Int32)">
            <summary>
            Gets a ComponentType for the type stored at the index in the list.
            </summary>
            <param name="index">The index in the list.</param>
            <returns>Returns the ComponentType for the type stored at the index in the list.
            The returned ComponentType always has access mode ReadWrite.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Entities.ComponentType)">
            <summary>
            Create an instance with one component type
            </summary>
            <param name="a">A component type</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Create an instance with two component types
            </summary>
            <param name="a">A component type</param>
            <param name="b">A component type</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Entities.ComponentType,Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Create an instance with three component types
            </summary>
            <param name="a">A component type</param>
            <param name="b">A component type</param>
            <param name="c">A component type</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Entities.ComponentType,Unity.Entities.ComponentType,Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Create an instance with five component types
            </summary>
            <param name="a">A component type</param>
            <param name="b">A component type</param>
            <param name="c">A component type</param>
            <param name="d">A component type</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Entities.ComponentType,Unity.Entities.ComponentType,Unity.Entities.ComponentType,Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Create an instance with five component types
            </summary>
            <param name="a">A component type</param>
            <param name="b">A component type</param>
            <param name="c">A component type</param>
            <param name="d">A component type</param>
            <param name="e">A component type</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Entities.ComponentType[])">
            <summary>
            Create an instance from a list of component types
            </summary>
            <param name="types">The list of component types</param>
            <exception cref="T:System.ArgumentException">Thrown if the length of <paramref name="types"/> exceeds the maximum ComponentTypes capacity (15).</exception>
        </member>
        <member name="M:Unity.Entities.ComponentTypeSet.#ctor(Unity.Collections.FixedList128Bytes{Unity.Entities.ComponentType}@)">
            <summary>
            Create an instance from a list of component types
            </summary>
            <param name="types">The list of component types</param>
            <exception cref="T:System.ArgumentException">Thrown if the length of <paramref name="types"/> exceeds the maximum ComponentTypes capacity (15).</exception>
        </member>
        <member name="T:Unity.Entities.IFixedRateManager">
            <summary> Obsolete. Use <see cref="T:Unity.Entities.IRateManager"/> instead.</summary>
        </member>
        <member name="M:Unity.Entities.IFixedRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.IRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)"/> instead.</summary>
            <param name="group">The system group to check</param>
            <returns>True if <paramref name="group"/> should update its member systems, or false if the group should skip its update.</returns>
        </member>
        <member name="P:Unity.Entities.IFixedRateManager.Timestep">
            <summary> Obsolete. Use <see cref="P:Unity.Entities.IRateManager.Timestep"/> instead.</summary>
        </member>
        <member name="T:Unity.Entities.IRateManager">
            <summary>
            Interface to define custom behaviors for controlling when a <see cref="T:Unity.Entities.ComponentSystemGroup"/> should update,
            and what timestep should be visible to the systems in that group. This allows the implementation of Unity's
            traditional MonoBehaviour "FixedUpdate()" semantics within DOTS, as well as more advanced/flexible update schemes.
            </summary>
        </member>
        <member name="M:Unity.Entities.IRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)">
            <summary>
            Determines whether a system group should proceed with its update.
            </summary>
            <param name="group">The system group to check</param>
            <returns>True if <paramref name="group"/> should update its member systems, or false if the group should skip its update.</returns>
        </member>
        <member name="P:Unity.Entities.IRateManager.Timestep">
            <summary>
            The timestep since the previous group update (in seconds).
            </summary>
            <remarks>
            This value will be pushed to the delta time of <see cref="P:Unity.Entities.World.Time"/> for the duration of the group update. New
            values will be clamped to the range [0.0001, 10.0].
            </remarks>
        </member>
        <member name="T:Unity.Entities.RateUtils">
            <summary>
            Contains some default <see cref="T:Unity.Entities.IRateManager"/> implementations to address the most common use cases.
            </summary>
        </member>
        <member name="T:Unity.Entities.RateUtils.FixedRateSimpleManager">
            <summary>
            Implements a rate manager that updates the group exactly once per presentation frame, but uses a
            constant timestep instead of the actual elapsed time since the previous frame.
            </summary>
            <remarks>With this rate manager, the simulation will always tick at a constant timestep per rendered
            frame, even if the actual per-frame time is variable. This provides more consistent and more deterministic
            performance, and avoids issues stemming from the occasional extremely long or short frame. However, animations
            may start to appear jerky if the presentation time is consistently different from the fixed timestep. This mode
            is best suited for applications that reliably run very close to the specified fixed timestep, and want the
            extra consistency of a constant timestep instead of the usual slight variations.</remarks>
        </member>
        <member name="P:Unity.Entities.RateUtils.FixedRateSimpleManager.Timestep">
            <inheritdoc cref="P:Unity.Entities.IRateManager.Timestep"/>
        </member>
        <member name="F:Unity.Entities.RateUtils.FixedRateSimpleManager.m_OldGroupAllocators">
            <summary>
            Double rewindable allocators to remember before pushing in rate group allocators.
            </summary>
        </member>
        <member name="M:Unity.Entities.RateUtils.FixedRateSimpleManager.#ctor(System.Single)">
            <summary>
            Construct a new instance
            </summary>
            <param name="fixedDeltaTime">The constant fixed timestep to use during system group updates (in seconds)</param>
        </member>
        <member name="M:Unity.Entities.RateUtils.FixedRateSimpleManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)">
            <inheritdoc cref="M:Unity.Entities.IRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)"/>
        </member>
        <member name="T:Unity.Entities.RateUtils.FixedRateCatchUpManager">
             <summary>
             Implements system update semantics similar to [UnityEngine.MonoBehaviour.FixedUpdate](https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html).
             </summary>
             <remarks>When this mode is enabled on a group, the group updates exactly once for each elapsed interval
             of the fixed timestep.
            
             For example, assume a fixed timestep of 0.02 seconds. If the previous frame updated
             at an elapsed time of 1.0 seconds, and the elapsed time for the current frame is now 1.05 seconds, then the
             system group updates twice in a row: one with an elapsed simulation time of 1.02 seconds, and a second time
             with an elapsed time of 1.04 seconds. In both cases, the delta time is reported as 0.02 seconds. If the
             elapsed wall time for the next frame is 1.06 seconds, then the system group doesn't update at all for that
             frame.
            
             This mode provides the strongest stability and determinism guarantees, and is best suited for systems implementing
             physics or netcode logic. However, the systems in the group will update at an unreliable rate each frame, and
             may not update at all if the actual elapsed time is small enough. The running time of systems in this group
             must therefore be kept to a minimum. If the wall time needed to simulate a single group update exceeds the
             fixed timestep interval, the group can end up even further behind than when it started, causing a negative
             feedback loop.</remarks>
        </member>
        <member name="P:Unity.Entities.RateUtils.FixedRateCatchUpManager.Timestep">
            <inheritdoc cref="P:Unity.Entities.IRateManager.Timestep"/>
        </member>
        <member name="F:Unity.Entities.RateUtils.FixedRateCatchUpManager.m_OldGroupAllocators">
            <summary>
            Double rewindable allocators to remember before pushing in rate group allocators.
            </summary>
        </member>
        <member name="M:Unity.Entities.RateUtils.FixedRateCatchUpManager.#ctor(System.Single)">
            <summary>
            Construct a new instance
            </summary>
            <param name="fixedDeltaTime">The constant fixed timestep to use during system group updates (in seconds)</param>
        </member>
        <member name="M:Unity.Entities.RateUtils.FixedRateCatchUpManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)">
            <inheritdoc cref="M:Unity.Entities.IRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)"/>
        </member>
        <member name="T:Unity.Entities.RateUtils.VariableRateManager">
            <summary>
            A <see cref="T:Unity.Entities.IRateManager"/> implementation providing a variable update rate in milliseconds.
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.MinUpdateRateMS">
            <summary>
            The minimum allowed update rate in Milliseconds
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_ShouldPushToWorld">
            <summary>
            Should the world have <see cref="T:Unity.Core.TimeData"/> pushed to it?
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_TicksPerSecond">
            <summary>
            A cached copy of <see cref="F:System.Diagnostics.Stopwatch.Frequency"/> as a <see cref="T:System.Single"/>.
            </summary>
            <remarks>This is used explicitly when trying to calculate the <see cref="F:Unity.Entities.RateUtils.VariableRateManager.m_Timestep"/>.</remarks>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_UpdateRate">
            <summary>
                The required number of ticks to trigger an update when compared against <see cref="F:Unity.Entities.RateUtils.VariableRateManager.m_TickCount"/>
                during <see cref="M:Unity.Entities.RateUtils.VariableRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_CurrentTimestamp">
            <summary>
            The latest polled ticks from the timer mechanism.
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_ElapsedTime">
            <summary>
            The elapsed time which the rate manager has operated.
            </summary>
            <remarks>
                This does not have any protection against rollover issues, and is only updated if
                <see cref="F:Unity.Entities.RateUtils.VariableRateManager.m_ShouldPushToWorld"/> is toggled.
            </remarks>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_PreviousTimestamp">
            <summary>
            The previous iterations ticks from the timer mechanism.
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_DidPushTime">
            <summary>
            Was <see cref="T:Unity.Core.TimeData"/> pushed to the world?
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_TickCount">
            <summary>
            An accumulator of ticks observed during <see cref="M:Unity.Entities.RateUtils.VariableRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_Timestep">
            <summary>
            The calculated delta time between updates.
            </summary>
        </member>
        <member name="F:Unity.Entities.RateUtils.VariableRateManager.m_OldGroupAllocators">
            <summary>
            Double rewindable allocators to remember before pushing in rate group allocators.
            </summary>
        </member>
        <member name="M:Unity.Entities.RateUtils.VariableRateManager.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Construct a <see cref="T:Unity.Entities.RateUtils.VariableRateManager"/> with a given Millisecond update rate.
            </summary>
            <remarks>
                Utilizes an accumulator where when it exceeds the indicated tick count, triggers the update and
                resets the counter.
            </remarks>
            <param name="updateRateInMS">
                The update rate for the manager in Milliseconds, if the value is less then
                <see cref="F:Unity.Entities.RateUtils.VariableRateManager.MinUpdateRateMS"/> it will be set to it.
            </param>
            <param name="pushToWorld">
                Should <see cref="T:Unity.Core.TimeData"/> be pushed onto the world? If systems inside of this group do not
                require the use of the <see cref="P:Unity.Entities.World.Time"/>, a minor performance gain can be made setting this
                to false.
            </param>
        </member>
        <member name="M:Unity.Entities.RateUtils.VariableRateManager.ShouldGroupUpdate(Unity.Entities.ComponentSystemGroup)">
            <summary>
            Determines if the group should be updated this invoke.
            </summary>
            <remarks>The while loop happens once.</remarks>
            <param name="group">The system group to check</param>
            <returns>True if <paramref name="group"/> should update its member systems, or false if the group should skip its update.</returns>
        </member>
        <member name="P:Unity.Entities.RateUtils.VariableRateManager.Timestep">
            <inheritdoc />
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.AllowDynamicValueAttribute">
            <summary>Attribute indicating that this parameter can be a dynamic value (coming from a variable instead of compile-type value).
            Only used by types in the Entities package.</summary>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.ILambdaJobDescription">
            <summary>Interface indicating that this type is used to construct a lambda job.  Only used by types in the Entities package.</summary>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.ILambdaJobExecutionDescription">
            <summary>Interface indicating that this type is used to construct a lambda job.  Only used by types in the Entities package.</summary>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.ILambdaSingleJobExecutionDescription">
            <summary>Interface indicating that this type is used to construct a lambda job.  Only used by types in the Entities package.</summary>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.ISupportForEachWithUniversalDelegate">
            <summary>
            Interface that allows you to define your own delegate type and ForEach overload.
            </summary>
            <remarks>
            This interface allows you to use as many arguments as you want and to put the ref/in/value parameters in any order you want.
            For more information, see the user manual documentation on [Custom delegates](xref:iterating-data-entities-foreach).
            </remarks>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.ISingleJobDescription">
            <summary>Interface indicating that this type is used to construct a lambda job.  Only used by types in the Entities package.</summary>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription">
            <summary>Description type used to define an Entities.ForEach.  This is typically accessed via the Entity property on a system.</summary>
        </member>
        <member name="T:Unity.Entities.CodeGeneratedJobForEach.LambdaSingleJobDescription">
            <summary>Description type used to define a Job.WithCode.  This is typically accessed via the Job property on a system.</summary>
        </member>
        <member name="T:Unity.Entities.LambdaJobDescriptionConstructionMethods">
            <summary>
            Static class holding methods to construct lambda jobs (Entities.ForEach and Job.WithCode)
            </summary>
        </member>
        <member name="T:Unity.Entities.LambdaJobDescriptionConstructionMethods.AllowMultipleInvocationsAttribute">
            <summary>Attribute indicating that this parameter can be a dynamic value (coming from a variable instead of compile-type value).
            Only used by types in the Entities package.</summary>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithoutBurst``1(``0)">
            <summary>
            Disable Burst for the Entities.ForEach or Job.WithCode that this invocation constructs.
            </summary>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithBurst``1(``0,Unity.Burst.FloatMode,Unity.Burst.FloatPrecision,System.Boolean)">
            <summary>
            Enables Burst for the Entities.ForEach or Job.WithCode that this invocation constructs.
            </summary>
            <param name="description">The target object</param>
            <param name="floatMode">Floating point optimization mode for Burst compilation</param>
            <param name="floatPrecision">Floating point precision used for certain builtin operations</param>
            <param name="synchronousCompilation">Whether this invocation should be compiled by Burst before execution begins</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithName``1(``0,System.String)">
            <summary>
            Provides a name for the generated job.  This can be viewed in the profiler.
            </summary>
            <param name="description">The target object</param>
            <param name="name">Name for the generated job</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithStructuralChanges``1(``0)">
            <summary>
            Enables structural changes to occur in the lambda.
            </summary>
            <remarks>
            This mode adds additional safety checks and only works without Burst and with .Run.
            Important: This makes execution very slow.
            </remarks>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithReadOnly``2(``0,``1)">
            <summary>
            Capture a variable that stores a native container with read-only access.
            This allows the job system to track this container as only being read from (potentially allowing more job scheduling).
            </summary>
            <param name="description">The target object</param>
            <param name="capturedVariable">Captured variable that stores a NativeContainer</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <typeparam name="TCapturedVariableType">Type of captured variable</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithDisposeOnCompletion``2(``0,``1)">
            <summary>
            Mark a captured Native Container or type that contains a Native Container to be disposed of after the job finishes
            (or immediately after with .Run()).
            </summary>
            <param name="description">The target object</param>
            <param name="capturedVariable">Captured variable that stores a NativeContainer</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <typeparam name="TCapturedVariableType">Type of captured variable</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableContainerSafetyRestriction``2(``0,``1)">
            <summary>
            Disable safety checks for a given captured variable that stores a native container.
            This will allow some jobs to run that wouldn't otherwise, but it does by-pass the safety system for this container.
            </summary>
            <param name="description">The target object</param>
            <param name="capturedVariable">Captured variable that stores a NativeContainer</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <typeparam name="TCapturedVariableType">Type of captured variable</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableUnsafePtrRestriction``2(``0,``1*)">
            <summary>
            Allows capture of a native container to be passed to a job even though it contains a pointer, which is usually not allowed.
            </summary>
            <param name="description">The target object</param>
            <param name="capturedVariable">Captured variable that stores a NativeContainer</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <typeparam name="TCapturedVariableType">Type of captured variable</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionConstructionMethods.WithNativeDisableParallelForRestriction``2(``0,``1)">
            <summary>
            Disables safety checks for a captured native container for the generated parallel job
            that may write to the same container from other job workers for the same job instance.
            </summary>
            <param name="description">The target object</param>
            <param name="capturedVariable">Captured variable that stores a NativeContainer</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <typeparam name="TCapturedVariableType">Type of captured variable</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="T:Unity.Entities.LambdaJobDescriptionExecutionMethods">
            <summary>
            Static class holding methods to construct lambda jobs (Entities.ForEach and Job.WithCode)
            </summary>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionExecutionMethods.Schedule``1(``0,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the generated job to be run sequentially.
            This job may run at a later point, but will run the job execution sequentially instead of in parallel.
            </summary>
            <param name="description">The target object</param>
            <param name="dependency">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependency`
            parameter.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionExecutionMethods.ScheduleParallel``1(``0,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the generated job to be run in parallel.
            This job may run at a later point and will run the job execution in parallel.
            </summary>
            <param name="description">The target object</param>
            <param name="dependency">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependency`
            parameter.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionExecutionMethods.Schedule``1(``0)">
            <summary>
            Schedule the generated job to be run sequentially and use the Dependency property of the containing system for both
            the input and output dependencies.
            This job may run at a later point, but will run the job execution sequentially instead of in parallel.
            </summary>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionExecutionMethods.ScheduleParallel``1(``0)">
            <summary>
            Schedule the generated job to be run in parallel and use the Dependency property of the containing system for both
            the input and output dependencies.
            This job may run at a later point and will run the job execution in parallel.
            </summary>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionExecutionMethods.Run``1(``0)">
            <summary>
            Runs the generated job immediately on the current thread.
            </summary>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
        </member>
        <member name="M:Unity.Entities.LambdaJobDescriptionExecutionMethods.ThrowCodeGenException">
            <summary>
            Used internally. It throws an an Exception if source generation did not run.
            </summary>
            <returns>Not applicable; the function always throws.</returns>
            <exception cref="T:System.Exception">Source-gen not run</exception>
        </member>
        <member name="T:Unity.Entities.LambdaSingleJobDescriptionExecutionMethods">
            <summary>
            Static class holding methods to construct lambda jobs (Entities.ForEach and Job.WithCode)
            </summary>
        </member>
        <member name="M:Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Schedule``1(``0,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the generated job to be run sequentially.
            </summary>
            <param name="description">The target object</param>
            <param name="dependency">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependency`
            parameter.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Schedule``1(``0)">
            <summary>
            Schedule the generated job to be run sequentially and use the Dependency property of the containing system for both
            the input and output dependencies.
            </summary>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
        </member>
        <member name="M:Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.Run``1(``0)">
            <summary>
            Runs the generated job immediately on the current thread.
            </summary>
            <param name="description">The target object</param>
            <typeparam name="TDescription">Type of target object</typeparam>
        </member>
        <member name="M:Unity.Entities.LambdaSingleJobDescriptionExecutionMethods.ThrowCodeGenException">
            <summary>
            Used internally. It throws an an Exception if source generation did not run.
            </summary>
            <returns>Not applicable; the function always throws.</returns>
            <exception cref="T:System.Exception">Source-gen not run</exception>
        </member>
        <member name="T:Unity.Entities.LambdaSingleJobDescriptionConstructionMethods">
            <summary>
            Static class holding methods to construct Job.WithCode jobs.
            </summary>
        </member>
        <member name="T:Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCodeAction">
            <summary>
            Delegate type used to define the execution of a Job.WithCode job.
            </summary>
        </member>
        <member name="M:Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCode``1(``0,Unity.Entities.LambdaSingleJobDescriptionConstructionMethods.WithCodeAction)">
            <summary>
            Provides an easy way to run a function as a single background job.
            You can also run Job.WithCode on the main thread and still take advantage of Burst compilation to speed up execution.
            </summary>
            <param name="description">The target object</param>
            <param name="code">Lambda that provides the execution for the job.</param>
            <typeparam name="TDescription">Type of target object</typeparam>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="T:Unity.Entities.Invalid_ForEach_Signature_See_ForEach_Documentation_For_Rules_And_Restrictions">
            <summary>
            Special delegate for overload to catch invalid Entities.ForEach signatures.  Do not use!
            </summary>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`1">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`1">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`1.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`1.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.#ctor(`0,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`1.Deconstruct(`0@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.Deconstruct(`0@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`1.#ctor(`0,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`1.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`2">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`2.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`2">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`2.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`2.Item2">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`2.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.#ctor(`0,`1,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`2.Deconstruct(`0@,`1@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.Deconstruct(`0@,`1@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`2.#ctor(`0,`1,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`2.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`3">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`3.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`3">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`3.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`3.Item2">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`3.Item3">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`3.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.#ctor(`0,`1,`2,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`3.Deconstruct(`0@,`1@,`2@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.Deconstruct(`0@,`1@,`2@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`3.#ctor(`0,`1,`2,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`3.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`4">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`4.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`4">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`4.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`4.Item2">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`4.Item3">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`4.Item4">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`4.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.#ctor(`0,`1,`2,`3,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`4.Deconstruct(`0@,`1@,`2@,`3@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.Deconstruct(`0@,`1@,`2@,`3@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`4.#ctor(`0,`1,`2,`3,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`4.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`5">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
            <typeparam name="T5">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`5.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`5">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
            <typeparam name="T5">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`5.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`5.Item2">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`5.Item3">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`5.Item4">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`5.Item5">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`5.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.#ctor(`0,`1,`2,`3,`4,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`5.Deconstruct(`0@,`1@,`2@,`3@,`4@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="item5">The value for <typeparamref name="T5"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.Deconstruct(`0@,`1@,`2@,`3@,`4@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`5.#ctor(`0,`1,`2,`3,`4,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="item5">The value for <typeparamref name="T5"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`5.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`6">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
            <typeparam name="T5">A component type</typeparam>
            <typeparam name="T6">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`6.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`6">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
            <typeparam name="T5">A component type</typeparam>
            <typeparam name="T6">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Item2">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Item3">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Item4">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Item5">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Item6">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`6.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.#ctor(`0,`1,`2,`3,`4,`5,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`6.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="item5">The value for <typeparamref name="T5"/>.</param>
            <param name="item6">The value for <typeparamref name="T6"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`6.#ctor(`0,`1,`2,`3,`4,`5,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="item5">The value for <typeparamref name="T5"/>.</param>
            <param name="item6">The value for <typeparamref name="T6"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`6.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.QueryEnumerable`7">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
            <typeparam name="T5">A component type</typeparam>
            <typeparam name="T6">A component type</typeparam>
            <typeparam name="T7">A component type</typeparam>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithDisabled``1">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithDisabled``2">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithDisabled``3">
            <summary>
            Specify all read-only component types that must be present AND disabled.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerable, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.WithEntityAccess">
            <summary>
            Invoke this method if you wish to retrieve a tuple with an `Entity` parameter, thus giving you direct access to an entity.
            </summary>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerable`7.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, EnabledRefRO and EnabledRefRW components as well as entities that match the constructed Query.</returns>
        </member>
        <member name="T:Unity.Entities.QueryEnumerableWithEntity`7">
            <summary>An enumeration interface for the entities that match an <see cref="T:Unity.Entities.EntityQuery"/>. This variant includes access the the entity and its component values.</summary>
            <remarks>
            This feature is primarily intended as a backend implementation for <see cref="M:Unity.Entities.SystemAPI.Query``1"/>. Application code
            should prefer to use that interface rather than using this type directly.
            </remarks>
            <typeparam name="T1">A component type</typeparam>
            <typeparam name="T2">A component type</typeparam>
            <typeparam name="T3">A component type</typeparam>
            <typeparam name="T4">A component type</typeparam>
            <typeparam name="T5">A component type</typeparam>
            <typeparam name="T6">A component type</typeparam>
            <typeparam name="T7">A component type</typeparam>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item1">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item2">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item3">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item4">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item5">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item6">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Item7">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="F:Unity.Entities.QueryEnumerableWithEntity`7.Entity">
            <summary>A component value for the current entity.</summary>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.#ctor(`0,`1,`2,`3,`4,`5,`6,Unity.Entities.Entity)">
            <summary>
            Construct a new object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`7.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@,`6@,Unity.Entities.Entity@)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="item5">The value for <typeparamref name="T5"/>.</param>
            <param name="item6">The value for <typeparamref name="T6"/>.</param>
            <param name="item7">The value for <typeparamref name="T7"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@,`6@,Unity.Entities.Entity@)">
            <summary>
            Clean up an existing object.
            </summary>
            <remarks>Objects of this type are typically created and destroyed automatically by the source generators.</remarks>
            <seealso cref="M:Unity.Entities.QueryEnumerableWithEntity`7.#ctor(`0,`1,`2,`3,`4,`5,`6,Unity.Entities.Entity)"/>
            <param name="item1">The value for <typeparamref name="T1"/>.</param>
            <param name="item2">The value for <typeparamref name="T2"/>.</param>
            <param name="item3">The value for <typeparamref name="T3"/>.</param>
            <param name="item4">The value for <typeparamref name="T4"/>.</param>
            <param name="item5">The value for <typeparamref name="T5"/>.</param>
            <param name="item6">The value for <typeparamref name="T6"/>.</param>
            <param name="item7">The value for <typeparamref name="T7"/>.</param>
            <param name="entity">The entity</param>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithSharedComponentFilter``1(``0)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <typeparam name="TSharedComponent1">The shared component type</typeparam>
            <param name="sharedComponent">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithSharedComponentFilter``2(``0,``1)">
            <summary>
            Only select chunks that have a specified value for a shared component.
            </summary>
            <summary>
            Only select chunks that have the specified values for two shared components.
            </summary>
            <typeparam name="TSharedComponent1">The first shared component type</typeparam>
            <typeparam name="TSharedComponent2">The second shared component type</typeparam>
            <param name="sharedComponent1">The value of <typeparamref name="TSharedComponent1"/> which an entity must have in order to match this query</param>
            <param name="sharedComponent2">The value of <typeparamref name="TSharedComponent2"/> which an entity must have in order to match this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithChangeFilter``1">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithChangeFilter``2">
            <summary>
            Only select components in chunks in which the specified component might have changed since the last time the system updated.
            </summary>
            <typeparam name="TChangeFilter1">A component type</typeparam>
            <typeparam name="TChangeFilter2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="TComponent1">A component type</typeparam>
            <typeparam name="TComponent2">A component type</typeparam>
            <typeparam name="TComponent3">A component type</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithAny``1">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithAny``2">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithAny``3">
            <summary>
            Specify optional read-only component types.
            </summary>
            <typeparam name="TComponent1">Optional component</typeparam>
            <typeparam name="TComponent2">Optional component</typeparam>
            <typeparam name="TComponent3">Optional component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithNone``1">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithNone``2">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithNone``3">
            <summary>
            Specify component types that must be absent.
            </summary>
            <typeparam name="TComponent1">Absent component</typeparam>
            <typeparam name="TComponent2">Absent component</typeparam>
            <typeparam name="TComponent3">Absent component</typeparam>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description. Subsequent calls will override
            previous options, rather than adding to them. Use the bitwise OR operator '|' to combine multiple options.
            </remarks>
            <param name="options">The options for this query</param>
            <returns>QueryEnumerableWithEntity, which allows enumerating over all Aspects, RefRO, RefRW, components, EnabledRefRO, EnabledRefRW and entities that match the constructed Query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="M:Unity.Entities.QueryEnumerableWithEntity`7.GetEnumerator">
            <summary>
            Returns an enumerator over the entities in this query.
            </summary>
            <returns>An IEnumerator interface into the entities matched by this query.</returns>
            <exception cref="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">Exception indicating that this method invocation should have been rewritten/replaced during source-generation.</exception>
        </member>
        <member name="T:Unity.Entities.EntityPatcher">
            <summary>
            Utility class to apply a <see cref="T:Unity.Entities.EntityChangeSet"/> to an <see cref="T:Unity.Entities.EntityManager"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityPatcher.ApplyChangeSet(Unity.Entities.EntityManager,Unity.Entities.EntityChangeSet)">
            <summary>
            Applies the given change set to the given entity manager.
            </summary>
            <param name="entityManager">The <see cref="T:Unity.Entities.EntityManager"/> to apply the change set to.</param>
            <param name="changeSet">The <see cref="T:Unity.Entities.EntityChangeSet"/> to apply.</param>
        </member>
        <member name="M:Unity.Entities.EntityPatcher.BuildEntityLookups(Unity.Entities.EntityManager,Unity.Entities.EntityQuery,Unity.Collections.NativeParallelMultiHashMap{Unity.Entities.EntityGuid,Unity.Entities.Entity},Unity.Collections.NativeParallelHashMap{Unity.Entities.Entity,Unity.Entities.EntityGuid})">
            <summary>
            Builds a lookup of <see cref="T:Unity.Collections.NativeParallelMultiHashMap`2"/> for the target world.
            </summary>
            <remarks>
            This will run over ALL entities in the world. This is very expensive.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityPatcher.BuildPackedLookups(Unity.Entities.EntityChangeSet,Unity.Collections.NativeParallelMultiHashMap{Unity.Entities.EntityGuid,Unity.Entities.Entity},Unity.Collections.NativeParallelMultiHashMap{System.Int32,Unity.Entities.Entity},Unity.Collections.NativeArray{Unity.Entities.ComponentType})">
             <summary>
             This method will generate lookups into the packed change set.
            
             1) Maps existing entities in the world to <see cref="F:Unity.Entities.EntityChangeSet.Entities"/>
             2) Maps types in the world to <see cref="F:Unity.Entities.EntityChangeSet.TypeHashes"/>
            
             These tables are used by subsequent methods to quickly access the packed data.
             </summary>
        </member>
        <member name="M:Unity.Entities.EntityPatcher.ApplyCreateEntities(Unity.Entities.EntityManager@,Unity.Collections.NativeParallelMultiHashMap{System.Int32,Unity.Entities.Entity}@,System.Int32)">
            <summary>
            Creates all new entities described in the <see cref="T:Unity.Entities.EntityChangeSet"/>
            </summary>
            <remarks>
            This method only creates the entities and does not set any data.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityPatcher.ApplyDestroyEntities(Unity.Entities.EntityManager@,Unity.Collections.NativeArray{Unity.Entities.EntityGuid}@,Unity.Collections.NativeParallelMultiHashMap{System.Int32,Unity.Entities.Entity}@,Unity.Collections.NativeParallelMultiHashMap{Unity.Entities.EntityGuid,Unity.Entities.Entity}@,System.Int32)">
            <summary>
            Destroys all entities described in the <see cref="T:Unity.Entities.EntityChangeSet"/>
            </summary>
            <remarks>
            Since building the <see cref="T:Unity.Collections.NativeParallelMultiHashMap`2"/> the entire world is expensive
            this method will incrementally update the map based on the destroyed entities.
            </remarks>
        </member>
        <member name="T:Unity.Entities.ComponentType">
            <summary>
            A struct to define a component including how it's accessed and what type of component it is
            </summary>
        </member>
        <member name="T:Unity.Entities.ComponentType.AccessMode">
            <summary>
            The access of the component type
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentType.AccessMode.ReadWrite">
            <summary>
            Access to read and write to the component type
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentType.AccessMode.ReadOnly">
            <summary>
            Access to only read the component type
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentType.AccessMode.Exclude">
            <summary>
            Excludes the component type when used in a query
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentType.TypeIndex">
            <summary>
            A unique index of the component type
            </summary>
        </member>
        <member name="F:Unity.Entities.ComponentType.AccessModeType">
            <summary>
            The way the component type will be accessed
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsBuffer">
            <summary>
            True if the component type is a <see cref="T:Unity.Entities.IBufferElementData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsSystemStateComponent">
             <summary>
             Obsolete. Use <see cref="P:Unity.Entities.ComponentType.IsCleanupComponent"/> instead.
             </summary>
             <remarks> **Obsolete.** Use <see cref="P:Unity.Entities.ComponentType.IsCleanupComponent"/> instead.
            
             True if the component type is a <see cref="T:Unity.Entities.ICleanupComponentData"/></remarks>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsCleanupComponent">
            <summary>
            True if the component type is a <see cref="T:Unity.Entities.ICleanupComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsSystemStateSharedComponent">
             <summary>
             Obsolete. Use <see cref="P:Unity.Entities.ComponentType.IsCleanupComponent"/> instead.
             </summary>
             <remarks> **Obsolete.** Use <see cref="P:Unity.Entities.ComponentType.IsCleanupComponent"/> instead.
            
             True if the component type is a <see cref="T:Unity.Entities.ICleanupSharedComponentData"/>.</remarks>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsCleanupSharedComponent">
            <summary>
            True if the component type is a <see cref="T:Unity.Entities.ICleanupSharedComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsCleanupBufferComponent">
            <summary>
            Bitflag set for component types inheriting from <seealso cref="T:Unity.Entities.ICleanupBufferElementData"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsComponent">
            <summary>
            True if the component type is a <see cref="T:Unity.Entities.IComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsSharedComponent">
            <summary>
            True if the component type is a <see cref="T:Unity.Entities.ISharedComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsManagedComponent">
            <summary>
            True if the component type is a managed component
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsZeroSized">
            <summary>
            True if the component type does not contain actual fields or data
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsChunkComponent">
            <summary>
            True if the component type is flagged as a chunk component type
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.IsEnableable">
            <summary>
            True if the component type is a <see cref="T:Unity.Entities.IEnableableComponent"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentType.HasEntityReferences">
            <summary>
            True if any of the fields in the component type are type <see cref="T:Unity.Entities.Entity"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentType.ReadWrite``1">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> based on the generic type T.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ReadWrite(System.Type)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> based on the type.
            </summary>
            <param name="type">The type</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ReadWrite(Unity.Entities.TypeIndex)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> based on the typeIndex.
            </summary>
            <param name="typeIndex">The index</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.FromTypeIndex(Unity.Entities.TypeIndex)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> based on the typeIndex
            </summary>
            <param name="typeIndex">The index</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ReadOnly(System.Type)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadOnly"/> based on the type.
            </summary>
            <param name="type">The type</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ReadOnly(Unity.Entities.TypeIndex)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadOnly"/> based on the typeIndex.
            </summary>
            <param name="typeIndex">The index</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ReadOnly``1">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadOnly"/> based on the generic type T.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ChunkComponent(System.Type)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> that is a chunk component with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> based on the type.
            </summary>
            <param name="type">The type</param>
            <returns>The chunk component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ChunkComponent``1">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> that is a chunk component with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> based on the type.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The chunk component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ChunkComponentReadOnly``1">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> that is a chunk component with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadOnly"/> based on the type.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The chunk component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ChunkComponentReadOnly(System.Type)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> that is a chunk component with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadOnly"/> based on the type.
            </summary>
            <param name="type">The type</param>
            <returns>The chunk component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ChunkComponentExclude``1">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> that is a chunk component with <see cref="F:Unity.Entities.ComponentType.AccessMode.Exclude"/> based on the type.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The chunk component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ChunkComponentExclude(System.Type)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> that is a chunk component with <see cref="F:Unity.Entities.ComponentType.AccessMode.Exclude"/> based on the type.
            </summary>
            <param name="type">The type</param>
            <returns>The chunk component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.Exclude(System.Type)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.Exclude"/> based on the type.
            </summary>
            <param name="type">The type</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.Exclude(Unity.Entities.TypeIndex)">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.Exclude"/> based on the typeIndex.
            </summary>
            <param name="typeIndex">The index</param>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.Exclude``1">
            <summary>
            Returns a <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.Exclude"/> based on the generic type T.
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.#ctor(System.Type,Unity.Entities.ComponentType.AccessMode)">
            <summary>
            Create a component type
            </summary>
            <param name="type">The type</param>
            <param name="accessModeType">The <see cref="T:Unity.Entities.ComponentType.AccessMode"/> of the component type. <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/> by default.</param>
        </member>
        <member name="M:Unity.Entities.ComponentType.GetManagedType">
            <summary>
            Gets the managed <see cref="T:System.Type"/> based on the component's <see cref="F:Unity.Entities.ComponentType.TypeIndex"/>.
            </summary>
            <returns>The managed type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.op_Implicit(System.Type)~Unity.Entities.ComponentType">
            <summary>
            Creates a new component type based on the type passed in
            </summary>
            <param name="type">The managed type</param>
            <returns>The new <see cref="T:Unity.Entities.ComponentType"/> with <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/></returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.op_LessThan(Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Evaluates if one component type is less than the the other first by <see cref="F:Unity.Entities.ComponentType.TypeIndex"/>, then by <see cref="T:Unity.Entities.ComponentType.AccessMode"/>.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>True if the left-hand side's <see cref="F:Unity.Entities.ComponentType.TypeIndex"/> is less than the right-hand side's. If the type indices match, the <see cref="F:Unity.Entities.ComponentType.AccessModeType"/> is used.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.op_GreaterThan(Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Evaluates if one component type is greater than the the other.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>True if the left-hand side is greater than the right-hand side</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.op_Equality(Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Evaluates if two component types are equal based on <see cref="F:Unity.Entities.ComponentType.TypeIndex"/> and <see cref="F:Unity.Entities.ComponentType.AccessModeType"/>.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>Returns true if both their type indices are equal and their access modes are equal.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.op_Inequality(Unity.Entities.ComponentType,Unity.Entities.ComponentType)">
            <summary>
            Evaluates if two component types are not equal based on <see cref="F:Unity.Entities.ComponentType.TypeIndex"/> and <see cref="F:Unity.Entities.ComponentType.AccessModeType"/>.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>Returns true if their type indices are not equal or their access modes are not equal.</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.Combine(Unity.Entities.ComponentType[][])">
            <summary>
            Combine multiple array of component type into one. Duplicate types are removed.
            It will allocate an array containing all component type.
            Useful for creating queries during initialization of systems.
            </summary>
            <param name="componentTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ToString">
            <summary>
            Returns a managed string of the component type
            </summary>
            <returns>A string of the component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.ToFixedString">
            <summary>
            Returns a fixed string of the component type
            </summary>
            <returns>A <see cref="T:Unity.Collections.FixedString128Bytes"/> of the component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.Equals(Unity.Entities.ComponentType)">
            <summary>
            Checks if this component type has the same <see cref="F:Unity.Entities.ComponentType.TypeIndex"/> as the other component type.
            </summary>
            <param name="other">The other component type to compare to</param>
            <returns>True if the <see cref="F:Unity.Entities.ComponentType.TypeIndex"/> of both are equal</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.CompareTo(Unity.Entities.ComponentType)">
            <summary>
            Returns the sort order this component type compared to another
            </summary>
            <param name="other">The other component type</param>
            <returns>The sort order</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.Equals(System.Object)">
            <summary>
            Checks to see if an object is equal to this component type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>True if the object is a <see cref="T:Unity.Entities.ComponentType"/> and the object equals this component type</returns>
        </member>
        <member name="M:Unity.Entities.ComponentType.GetHashCode">
            <summary>
            Gets the hash code for this component type
            </summary>
            <returns>The hash code as an int</returns>
        </member>
        <member name="M:Unity.Entities.InternalCompilerInterface.CombineComponentType(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.ComponentType}@,Unity.Entities.ComponentType@)">
            <summary>
            Combine a component type into an UnsafeList of component types. No duplicate are added to the list.
            Useful for creating queries during initialization of systems.
            Called by the generated code from the Aspect Generator
            </summary>
            <param name="into">List to combine component types into</param>
            <param name="componentType">The component type to combine into the list</param>
            <exception cref="T:System.ArgumentException">if the component type conflict with any component types in the UnsafeList.</exception>
        </member>
        <member name="M:Unity.Entities.InternalCompilerInterface.UnsafeGetChunkNativeArrayReadOnlyIntPtrWithoutChecks``1(Unity.Entities.ArchetypeChunk@,Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            There is no need to conduct the same checks in this method as we do in `GetRequiredComponentDataPtrRO` and `GetRequiredComponentDataPtrRW` --
            the source-generator has already ensured that everything is correctly set up.
            </summary>
        </member>
        <member name="M:Unity.Entities.InternalCompilerInterface.UnsafeGetChunkNativeArrayIntPtrWithoutChecks``1(Unity.Entities.ArchetypeChunk@,Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            There is no need to conduct the same checks in this method as we do in `GetRequiredComponentDataPtrRO` and `GetRequiredComponentDataPtrRW` --
            the source-generator has already ensured that everything is correctly set up.
            </summary>
        </member>
        <member name="T:Unity.Entities.InternalCompilerInterface.UncheckedRefRO`1">
            <summary>
            This type is used by source-generators to circumvent per-component safety checks when iterating through `RefRO` types in `foreach` statements,
            by replacing `RefRO` with `UncheckedRefRO`.
            </summary>
        </member>
        <member name="T:Unity.Entities.InternalCompilerInterface.UncheckedRefRW`1">
            <summary>
            This type is used by source-generators to circumvent per-component safety checks when iterating through `RefRW` types in `foreach` statements,
            by replacing `RefRW` with `UncheckedRefRW`.
            </summary>
        </member>
        <member name="M:Unity.Entities.InternalCompilerInterface.OnlyAllowedInSourceGeneratedCodeGetSingleQuery``1(Unity.Entities.SystemBase)">
            <summary>
            Used internally to get a single query for when you are inside a SystemBase property or generic member method.
            AS A USER, PLEASE DON'T USE THIS, ANYTHING BUT THIS!!
            </summary>
            <param name="system">System to attach query to.</param>
            <typeparam name="T">single type to query after</typeparam>
            <returns>An entity query for the SystemBase</returns>
        </member>
        <member name="M:Unity.Entities.InternalCompilerInterface.ThrowCodeGenException">
            <summary>
            Used internally by all Source Generation stubs. It throws an InvalidOperations from Source-gen not running.
            </summary>
            <returns>InvalidOperations from Source-gen not running.</returns>
            <exception cref="T:System.InvalidOperationException">Source-gen not run</exception>
        </member>
        <member name="T:Unity.Entities.NativeArraySharedInt">
            <summary>
                Merge sort index list referencing NativeArray values.
            </summary>
            <remarks>
                Provide list of shared values, indices to shared values, and lists of source i
                value indices with identical shared value.
                As an example:
                Given Source NativeArray: [A,A,A,B,B,C,C,A,B]
                Provides:
                Shared value indices: [0,0,0,1,1,2,2,0,1]
                Shared value counts: [4,3,2] (number of occurrences of a shared value)
                Shared values: [A,B,C] (not stored in this structure)
                Sorted indices: [0,1,2,7,3,4,8,5,6] (using these indices to look up values in the source array would give you [A,A,A,A,B,B,B,C,C])
                Shared value start offsets (into sorted indices): [0,4,7]
            </remarks>
        </member>
        <member name="P:Unity.Entities.NativeArraySharedInt.SourceBuffer">
            <summary>
            Original Source Values (passed into constructor)
            </summary>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.#ctor(Unity.Collections.NativeArray{System.Int32},Unity.Collections.Allocator)">
            <summary>
            Construct a NativeArraySharedInt struct from a NativeArray
            </summary>
            <param name="sourceBuffer">Original source values.</param>
            <param name="allocator">The NativeArray allocation type.</param>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.Dispose">
            <summary>
            Dispose this NativeArraySharedInt struct
            </summary>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.Schedule(Unity.Jobs.JobHandle)">
            <summary>
                Schedule jobs to collect and sort shared values.
            </summary>
            <param name="inputDeps">Dependent JobHandle</param>
            <returns>JobHandle</returns>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSortedIndices">
            <summary>
                Indices into source NativeArray sorted by value
            </summary>
            <returns>Index NativeArray where each element refers to an element in the source NativeArray</returns>
        </member>
        <member name="P:Unity.Entities.NativeArraySharedInt.SharedValueCount">
            <summary>
                Number of shared (unique) values in source NativeArray
            </summary>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSharedIndexBySourceIndex(System.Int32)">
            <summary>
                Index of shared value associated with an element in the source buffer.
                For example, given source array: [A,A,A,B,B,C,C,A,B]
                shared values are: [A,B,C]
                Given the index 2 into the source array (A), the return value would be 0 (A in shared values).
            </summary>
            <param name="indexIntoSourceBuffer">Index of source value</param>
            <returns>Index into the list of shared values</returns>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSharedIndexArray">
            <summary>
                Indices into shared values.
                For example, given source array: [A,A,A,B,B,C,C,A,B]
                shared values are: [A,B,C]
                shared index array would contain: [0,0,0,1,1,2,2,0,1]
            </summary>
            <returns>Index NativeArray where each element refers to the index of a shared value in a list of shared (unique) values.</returns>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSharedValueIndicesBySourceIndex(System.Int32)">
            <summary>
                Array of indices into shared value indices NativeArray which share the same source value
                For example, given Source NativeArray: [A,A,A,B,B,C,C,A,B]
                shared values are: [A,B,C]
                Shared value indices: [0,0,0,1,1,2,2,0,1]
                Given the index 2 into the source array (A),
                the returned array would contain: [0,1,2,7] (indices in SharedValueIndices that have a value of 0, i.e. where A is in the shared values)
            </summary>
            <param name="indexIntoSourceBuffer">Index of source value</param>
            <returns>Index NativeArray where each element refers to an index into the shared value indices array.</returns>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSharedValueIndexCountBySourceIndex(System.Int32)">
            <summary>
                Number of occurrences of a shared (unique) value shared by a given a source index.
                For example, given source array: [A,A,A,B,B,C,C,A,B]
                shared values are: [A,B,C]
                Shared value counts: [4,3,2] (number of occurrences of a shared value)
                Given the index 2 into the source array (A), the return value would be 4 (for 4 occurrences of A in the source buffer).
            </summary>
            <param name="indexIntoSourceBuffer">Index of source value.</param>
            <returns>Count of total occurrences of the shared value at a source buffer index in the source buffer.</returns>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSharedValueIndexCountArray">
            <summary>
                Array of number of occurrences of all shared values.
                For example, given source array: [A,A,A,B,B,C,C,A,B]
                shared values are: [A,B,C]
                Shared value counts: [4,3,2] (number of occurrences of a shared value)
            </summary>
            <returns>Count NativeArray where each element refers to the number of occurrences of each shared value.</returns>
        </member>
        <member name="M:Unity.Entities.NativeArraySharedInt.GetSharedValueIndicesBySharedIndex(System.Int32)">
            <summary>
                Array of indices into source NativeArray which share the same shared value
                For example, given source array: [A,A,A,B,B,C,C,A,B]
                shared values are: [A,B,C]
                Shared value counts: [4,3,2] (number of occurrences of a shared value)
                Shared value start offsets (into sorted indices): [0,4,7]
                Given the index 0 into the shared value array (A), the returned array would contain [0,1,2,7] (indices into the source array which point to the shared value A).
            </summary>
            <param name="sharedValueIndex">Index of shared value</param>
            <returns>Index NativeArray where each element refers to an index into the source array.</returns>
        </member>
        <member name="T:Unity.Entities.EntityQueryBuilder">
             <summary>
             Describes a query to find archetypes in terms of required, optional, and excluded components.
             </summary>
             <remarks>
             EntityQueryBuilder is unmanaged and compatible with the Burst compiler. It is the recommended way
             to create an EntityQuery, and can be used for both SystemBase and ISystem.
            
             Use an EntityQueryBuilder object to describe complex queries.
            
             A query description combines the component types you specify (using methods like `WithAll`, `WithAny`, and `WithNone`)
             sets according to the following rules:
            
             * All - Includes archetypes that have every component in this set
             * Any - Includes archetypes that have at least one component in this set
             * None - Excludes archetypes that have any component in this set, but includes entities which have the component disabled.
             * Disabled - Includes archetypes that have every component in this set, but only matches entities where the component is disabled.
             * Absent - Excludes archetypes that have any component in this set.
            
             For example, given entities with the following components:
            
             * Player has components: ObjectPosition, ObjectRotation, Player
             * Enemy1 has components: ObjectPosition, ObjectRotation, Melee
             * Enemy2 has components: ObjectPosition, ObjectRotation, Ranger
            
             The query description below matches all of the archetypes that:
             have any of [Melee or Ranger], AND have none of [Player], AND have all of [ObjectPosition and ObjectRotation]
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-builder" title="Query Builder"/>
             </example>
            
             In other words, the query created from this description selects the Enemy1 and Enemy2 entities, but not the Player entity.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.#ctor(Unity.Collections.Allocator)">
            <summary>
            Create an entity query description builder.
            </summary>
            <param name="allocator">The allocator used to allocate the builder's arrays. Typically Allocator.Temp.</param>
            <remarks>
            It is safe to use Allocator.Temp for all EntityQueryBuilders. Since they are a ref struct,
            their lifetime is limited to the current frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.#ctor(Unity.Collections.Allocator,Unity.Entities.ComponentType*,System.Int32)">
             <summary>
             Create an EntityQueryBuilder from a list of required component types.
             </summary>
             <remarks>
             This simplifies the most common case, where the only constraint is "matching archetypes must have
             all of the following components".
            
             If a component's access mode is "Exclude", it will instead be added to the None list as a read-only type.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithOptions(Unity.Entities.EntityQueryOptions)">
             <summary>
             Set options for the current query.
             </summary>
             <remarks>
             You should not need to set these options for most queries.
            
             You should only call WithOptions once for each query description. Subsequent calls
             override previous options, rather than adding to them. Use the bitwise OR
             operator '|' to combine multiple options.
             </remarks>
             <param name="options"><see cref="T:Unity.Entities.EntityQueryOptions"/> flags to set for the current query</param>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAspect``1">
            <summary>
            Add component type requirement for a given aspect.
            </summary>
            <typeparam name="TAspect">The aspect to add to the query</typeparam>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAspectRO``1">
            <summary>
            Add component type requirement for a given aspect with forced read-only access.
            </summary>
            <typeparam name="TAspect">The aspect to add to the query</typeparam>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.AddAll(Unity.Entities.ComponentType)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAll(Unity.Entities.ComponentType*,System.Int32)"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAll(Unity.Entities.ComponentType*,System.Int32)"/> instead.
            
             Add an "all" matching type to the current query.</remarks>
             <param name="t">The component type</param>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``1">
             <summary>
             Add required component types to the query.
             </summary>
             <remarks>
             To match the resulting query, an Entity must have all of the query's required component types.
            
             WithAll accepts up to seven type arguments. You can add more component types by chaining calls together.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-builder-chained-withall" title="Query Builder With Chained WithAll Calls"/>
             </example>
            
             To add component types that are not known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAll``1(``0@)"/>
             </remarks>
             <typeparam name="T1">A required component type</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``1"/>
            <typeparam name="T2">A required component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``3">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``2"/>
            <typeparam name="T3">A required component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``4">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``3"/>
            <typeparam name="T4">A required component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``5">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``4"/>
            <typeparam name="T5">A required component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``6">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``5"/>
            <typeparam name="T6">A required component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``7">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``6"/>
            <typeparam name="T7">A required component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAllRW``1">
             <summary>
             Add required component types to the query with ReadWrite mode.
             </summary>
             <remarks>
             If a query uses the <see cref="F:Unity.Entities.EntityQueryOptions.FilterWriteGroup"/> option,
             you must use WithAllRW to specify the query's writeable required components. Refer to the
             [write groups guide](xref:systems-write-groups) for more information.
            
             To match the resulting query, an Entity must have all of the query's required component types.
            
             WithAllRW accepts up to two type arguments. You can add more component types by chaining calls together.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-builder-chained-withallrw" title="Query Builder With Chained WithAllRW Calls"/>
             </example>
            
             </remarks>
             <typeparam name="T1">A required ReadWrite component type</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAllRW``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAllRW``1"/>
            <typeparam name="T2">A required ReadWrite component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAllChunkComponent``1">
             <summary>
             Add a required [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to find entities that have all the specified chunk components. Chunk
             components are a distinct component type, which are different from adding the same type as a standard
             component.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs"
              region="query-builder-chunk-component-all" title="Query Builder With Required Chunk Component"/>
             </example>
            
             To add additional required Chunk Components, call this method multiple times.
            
             To add component types that are not known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAll``1(``0@)"/>
             </remarks>
            
             <typeparam name="T">Component type to use as a required, read-only Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAllChunkComponentRW``1">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAllChunkComponent``1"/>
            <typeparam name="T">Component type to use as a required, read-write Chunk Component</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAll``1(``0@)">
            <summary>
            Add a list of required component types to the query.
            </summary>
            <remarks>
            To match the resulting query, an Entity must have all of the query's required component types.
            </remarks>
            <param name="componentTypes">
            A list of component types that implements <see cref="T:Unity.Collections.INativeList`1"/>.
            For example, <see cref="T:Unity.Collections.NativeList`1"/> or
            <see cref="T:Unity.Collections.FixedList64Bytes`1"/>
            </param>
            <typeparam name="T">A container of component types</typeparam>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.AddAny(Unity.Entities.ComponentType)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny(Unity.Entities.ComponentType*,System.Int32)"/> instead.
             </summary>
             <remarks> **Obsolete.** Use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny(Unity.Entities.ComponentType*,System.Int32)"/> instead.
            
             Add an "any" matching type to the current query.</remarks>
             <param name="t">The component type</param>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``1">
             <summary>
             Add optional component types to the query.
             </summary>
             <remarks>
             To match the resulting query, an Entity must have at least one of the query's optional component types.
            
             WithAny accepts up to seven type arguments. You can add more component types by chaining calls together.
            
             In the following example, an Entity must have either an ObjectUniformScale, ObjectNonUniformScale, and/or ObjectCompositeScale
             component in order to match the query:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-builder-chained-withany" title="Query Builder With Chained WithAny Calls"/>
             </example>
            
             To add component types that are not known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1(``0@)"/>
             </remarks>
             <typeparam name="T1">An optional component type</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>
            <typeparam name="T2">An optional component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``3">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAny``2"/>
            <typeparam name="T3">An optional component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``4">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAny``3"/>
            <typeparam name="T4">An optional component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``5">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAny``4"/>
            <typeparam name="T5">An optional component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``6">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAny``5"/>
            <typeparam name="T6">An optional component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``7">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAny``6"/>
            <typeparam name="T7">An optional component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAnyRW``1">
             <summary>
             Add optional component types to the query with ReadWrite mode.
             </summary>
             <remarks>
             If a query uses the <see cref="F:Unity.Entities.EntityQueryOptions.FilterWriteGroup"/> option,
             you must use WithAnyRW to specify the query's writeable optional components. Refer to the
             [write groups guide](xref:systems-write-groups) for more information.
            
             <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/> assumes the component type is read-only.
            
             To match the resulting query, an Entity must have all of the query's optional component types.
            
             WithAnyRW accepts up to two type arguments. You can add more component types by chaining calls together.
            
             In the following example, an Entity must have either a Scale, NonUniformScale, and/or CompositeScale
             component in order to match the query:
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="query-builder-chained-withaanyrw" title="Query Builder With Chained WithAnyRW Calls"/>
             </example>
            
             </remarks>
             <typeparam name="T1">An optional ReadWrite component type</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAnyRW``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAnyRW``1"/>
            <typeparam name="T2">An optional ReadWrite component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAnyChunkComponent``1">
             <summary>
             Add an optional [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             To match the resulting query, an Entity must have at least one of the query's optional component types,
             specified using either <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny(Unity.Entities.ComponentType*,System.Int32)"/> or <see cref="M:Unity.Entities.EntityQueryBuilder.WithAnyChunkComponent``1"/>. Chunk components are a distinct component
             type, which are different from adding the same type as a standard component.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs"
              region="query-builder-chunk-component-any" title="Query Builder With Optional Chunk Component"/>
             </example>
            
             Compare this to <see cref="M:Unity.Entities.EntityQueryBuilder.WithAllChunkComponent``1"/>
            
             To add additional optional Chunk Components, call this method multiple times.
            
             To add component types that are not known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1(``0@)"/>
            
             </remarks>
             <typeparam name="T">Component type to use as an optional, read-only Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAnyChunkComponentRW``1">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAnyChunkComponent``1"/>
            <typeparam name="T">Component type to use as an optional, read-write Chunk Component</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAny``1(``0@)">
             <summary>
             Add optional component types to the query.
             </summary>
             <remarks>
             To match the resulting query, an Entity must have at least one of the query's optional component types.
            
             To add component types that are known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>
             </remarks>
             <param name="componentTypes">
             A list of component types that implements <see cref="T:Unity.Collections.INativeList`1"/>.
             For example, <see cref="T:Unity.Collections.NativeList`1"/> or
             <see cref="T:Unity.Collections.FixedList64Bytes`1"/>
             </param>
             <typeparam name="T">A container of component types</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.AddNone(Unity.Entities.ComponentType)">
             <summary>
             Obsolete. Use <see cref="M:Unity.Entities.EntityQueryBuilder.WithNone(Unity.Entities.ComponentType*,System.Int32)"/> instead.
             </summary>
             <param name="t">The component type</param>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.EntityQueryBuilder.WithNone(Unity.Entities.ComponentType*,System.Int32)"/> instead.
            
             Add a "none" matching type to the current query. Types in the None list are never written to. If the AccessModeType field of the
             provided component type is <see cref="F:Unity.Entities.ComponentType.AccessMode.ReadWrite"/>, will be forced to
             <see cref="T:Unity.Collections.NativeArray`1.ReadOnly"/> in the query.</remarks>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithNone``1" -->
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNone``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithNone``1"/>
            <typeparam name="T2">An excluded component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNone``3">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithNone``2"/>
            <typeparam name="T3">An excluded component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNone``4">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithNone``3"/>
            <typeparam name="T4">An excluded component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNone``5">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithNone``4"/>
            <typeparam name="T5">An excluded component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNone``6">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithNone``5"/>
            <typeparam name="T6">An excluded component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNone``7">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithNone``6"/>
            <typeparam name="T7">An excluded component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithNoneChunkComponent``1">
             <summary>
             Add an excluded [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to exclude any entities that have the specified chunk component.
             Chunk components are a distinct component type, which are different from excluding the same type as a
             standard component.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs"
              region="query-builder-chunk-component-none" title="Query Builder With Excluded Chunk Component"/>
             </example>
            
             To add additional excluded Chunk Components, call this method multiple times.
            
             To add component types that are not known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithNone``1(``0@)"/>
            
             </remarks>
             <typeparam name="T">Component type to use as an excluded Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithNone``1(``0@)" -->
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithDisabled``1" -->
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabled``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithDisabled``1"/>
            <typeparam name="T2">A required disabled component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabled``3">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithDisabled``2"/>
            <typeparam name="T3">A required disabled component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabled``4">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithDisabled``3"/>
            <typeparam name="T4">A required disabled component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabled``5">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithDisabled``4"/>
            <typeparam name="T5">A required disabled component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabled``6">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAll``5"/>
            <typeparam name="T6">A required disabled component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabled``7">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithDisabled``6"/>
            <typeparam name="T7">A required disabled component type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithDisabledRW``1" -->
        <member name="M:Unity.Entities.EntityQueryBuilder.WithDisabledRW``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithDisabledRW``1"/>
            <typeparam name="T2">A required disabled ReadWrite component type</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithDisabled``1(``0@)" -->
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithAbsent``1" -->
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsent``2">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAbsent``1"/>
            <typeparam name="T2">An absent component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsent``3">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAbsent``2"/>
            <typeparam name="T3">An absent component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsent``4">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAbsent``3"/>
            <typeparam name="T4">An absent component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsent``5">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAbsent``4"/>
            <typeparam name="T5">An absent component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsent``6">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAbsent``5"/>
            <typeparam name="T6">An absent component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsent``7">
            <inheritdoc cref="M:Unity.Entities.EntityQueryBuilder.WithAbsent``6"/>
            <typeparam name="T7">An absent component type</typeparam>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.WithAbsentChunkComponent``1">
             <summary>
             Add an absent [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to exclude any entities that have the specified chunk component.
             Chunk components are a distinct component type, which are different from excluding the same type as a
             standard component.
            
             <example>
             <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs"
              region="query-builder-chunk-component-none" title="Query Builder With Excluded Chunk Component"/>
             </example>
            
             To add additional excluded Chunk Components, call this method multiple times.
            
             To add component types that are not known at compile time, use <see cref="M:Unity.Entities.EntityQueryBuilder.WithNone``1(``0@)"/>
            
             </remarks>
             <typeparam name="T">Component type to use as an absent Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Entities.EntityQueryBuilder.WithAbsent``1(``0@)" -->
        <member name="M:Unity.Entities.EntityQueryBuilder.AddAdditionalQuery">
            <summary>
            Add an additional query description to a single EntityQuery.
            </summary>
            <remarks>
            The resulting EntityQuery will match all entities matched by any individual query description. In terms of
            set theory, the query matches the union of its query descriptions, not the intersection.
            <example>
            <code lang="csharp" source="../../DocCodeSamples.Tests/EntityQueryExamples.cs" region="combine-query-builder" title="Query Builder With Multiple Descriptions"/>
            </example>
            The EntityQuery created from this builder matches entities that have a Parent component
            but no Child component OR have a Child component but no Parent component.
            </remarks>
            <returns>Returns the amended EntityQuery.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.FinalizeQuery">
            <summary>
            Obsolete. Calling this method has no effect; it is temporarily provided for backwards compatibility.
            </summary>
            <remarks>**Obsolete.** You don't need to call this on EntityQueryBuilder.
            If you want to build an EntityQuery with multiple query descriptions, call <see cref="M:Unity.Entities.EntityQueryBuilder.AddAdditionalQuery"/>.</remarks>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.FinalizeQueryInternal">
            <summary>
            Store the pending query constraints into the builder, and clear the pending state.
            </summary>
            <remarks>
            Components added to any, all, and none are stored in the builder once this is called.
            If you don't call this, nothing is recorded and the query will be empty.
            </remarks>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.Dispose">
            <summary>
            Dispose the builder and release the memory.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.Reset">
            <summary>
            Reset the builder for reuse.
            </summary>
            <remarks>
            To create another EntityQuery without allocating additional memory, call this method after you create an
            query with <see cref="M:EntityQueryBuilder.Build"/>.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.Build(Unity.Entities.SystemState@)">
            <summary>
            Create an EntityQuery owned by an <see cref="T:Unity.Entities.ISystem"/>'s <see cref="T:Unity.Entities.SystemState"/>.
            </summary>
            <remarks>
            The System owning the systemState object retains this EntityQuery and disposes it at the end of the System's lifespan.
            </remarks>
            <param name="systemState">SystemState of the system that will own the EntityQuery.</param>
            <returns>An EntityQuery based on the constraints set in the EntityQueryBuilder</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.Build(Unity.Entities.SystemBase)">
            <summary>
            Create an EntityQuery owned by an <see cref="T:Unity.Entities.SystemBase"/>.
            </summary>
            <remarks>The SystemBase argument retains the EntityQuery, and
            disposes it at the end of that system's lifetime.
            </remarks>
            <param name="systemBase">System that will own the EntityQuery.</param>
            <returns>An EntityQuery based on the constraints set in the EntityQueryBuilder</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryBuilder.Build(Unity.Entities.EntityManager)">
            <summary>
            Create an EntityQuery owned by an <see cref="T:Unity.Entities.EntityManager"/>.
            </summary>
            <remarks>
            The EntityManager retains the EntityQuery, and
            disposes it at the end of that EntityManager's corresponding World's lifetime.
            </remarks>
            <param name="entityManager">EntityManager that will own the EntityQuery.</param>
            <returns>An EntityQuery based on the constraints set in the EntityQueryBuilder.</returns>
        </member>
        <member name="T:Unity.Entities.EntityQueryDescBuilder">
            <summary> Obsolete. Use <see cref="T:Unity.Entities.EntityQueryBuilder"/> instead.</summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryDescBuilder.Options(Unity.Entities.EntityQueryOptions)">
            <summary> Obsolete. Use <see  cref="M:Unity.Entities.EntityQueryBuilder.WithOptions(Unity.Entities.EntityQueryOptions)"/> instead.</summary>
            <param name="options"><see cref="T:Unity.Entities.EntityQueryOptions"/> flags to set for the current query</param>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="F:Unity.Entities.WorldUnmanagedImpl.MaximumDeltaTime">
            <summary>
            The maximum DeltaTime that will be applied to a World in a single call to Update().
            If the actual elapsed time since the previous frame exceeds this value, it will be clamped.
            This helps maintain a minimum frame rate after a large frame time spike, by spreading out the recovery over
            multiple frames.
            The value is expressed in seconds. The default value is 1/3rd seconds. Recommended values are 1/10th and 1/3rd seconds.
            </summary>
        </member>
        <member name="F:Unity.Entities.Chunk.ListIndex">
            <summary>
            The index of this Chunk within its ArchetypeChunkData's chunk list
            </summary>
        </member>
        <member name="T:Unity.Entities.ChangeVersionUtility">
            <summary>
            Utilities to manipulate version numbers
            </summary>
        </member>
        <member name="M:Unity.Entities.ChangeVersionUtility.DidChange(System.UInt32,System.UInt32)">
            <summary>
            Test whether two version numbers indicate that a change has occurred.
            </summary>
            <param name="changeVersion">The newer/current version number</param>
            <param name="requiredVersion">The previous version number.</param>
            <returns>True if <paramref name="changeVersion"/> is greater than <paramref name="requiredVersion"/>,
            or if <paramref name="requiredVersion"/> is zero.</returns>
        </member>
        <member name="M:Unity.Entities.ChunkDataUtility.ChangeArchetypeInPlace(Unity.Entities.Chunk*,Unity.Entities.Archetype*,System.Int32*)">
            <summary>
            Fix-up the chunk to refer to a different (but layout compatible) archetype.
            - Should only be called by Move(chunk)
            </summary>
        </member>
        <member name="T:Unity.Entities.TypeHash">
             <summary>
             Produces a stable type hash for a Type based on its layout in memory and how that memory should be interpreted.
             </summary>
             <remarks>
             You can rename field members and this hash isn't affected. However, if a field's type changes,
             this hash changes, because the interpretation of the underlying memory will have contextually changed.
            
             The purpose of the stable type hash is to provide a version linking serialized component data to its runtime
             representation.
             
             As such, the type hash has a few requirements:
                - **R0:** TypeHashes apply only to types that Unity.Entities serializes. The internals of a UnityEngine.Object reference
                  contained in a component mustn't have an effect on the type hash. You can safely change the internals of the
                  UnityEngine.Object reference because they're serialized outside of Unity.Entities.
                - **R1:** Types with the same data layout but are different types should have different hashes.
                - **R2:** If a type's data layout changes, so should the type hash. This includes:
                  - A nested field's data layout changes (for example, a new member added)
                  - FieldOffsets, explicit size, or pack alignment are changed
                  - Different types of the same width swap places (for example if a uint swaps with an int)
                  - **Note:** Unity can't detect if fields of the same type swap (for example, mInt1 swaps with mInt2) This is a semantic
                    difference which you should increase your component [TypeVersion(1)] attribute. You shouldn't
                    try to hash field names to handle this, because you can't control all field names.
                    Also, field names have no effect serialization and doesn't affect hashes.
                - **R3:** You should version the hash in case the semantics of a type change, but the data layout is unchanged
                - **R4:** DOTS Runtime relies on hashes generated from the Editor (used in serialized data) and hashes generated
                  during compilation. These hashes must match. This rule exists because of the following:
                  - Tiny swapa out assemblies for 'tiny' versions, which means you should avoid any hashing using the AssemblyName
                    or handle it specially for the known swapped assemblies.
                    - This means you should avoid Type.AssemblyQualifiedName in hashes, but as well, closed-form
                      generic types include the assembly qualified name for GenericArguments in Type.FullName which
                      causes issues. For example, `typeof(ComponentWithGeneric.GenericField).FullName ==
                      Unity.Entities.ComponentWithGeneric.GenericField`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]`
                  - System.Reflection and Mono.Cecil provide different Type names (they use a different format).
                    Generating hashes from System.Reflection to match hashes using Mono.Cecil must account for this difference.
             </remarks>
        </member>
        <member name="M:Unity.Entities.TypeHash.FNV1A64(System.String)">
            <summary>
            Generates a FNV1A64 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <returns>Hash of input string.</returns>
        </member>
        <member name="M:Unity.Entities.TypeHash.FNV1A64``1(``0)">
            <summary>
            Generates a FNV1A64 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <typeparam name="T">Unmanaged IUTF8 type.</typeparam>
            <returns>Hash of input string.</returns>
        </member>
        <member name="M:Unity.Entities.TypeHash.FNV1A64(System.Int32)">
            <summary>
            Generates a FNV1A64 hash.
            </summary>
            <param name="val">Value to hash.</param>
            <returns>Hash of input.</returns>
        </member>
        <member name="M:Unity.Entities.TypeHash.CombineFNV1A64(System.UInt64,System.UInt64)">
            <summary>
            Combines a FNV1A64 hash with a value.
            </summary>
            <param name="hash">Input Hash.</param>
            <param name="value">Value to add to the hash.</param>
            <returns>A combined FNV1A64 hash.</returns>
        </member>
        <member name="M:Unity.Entities.TypeHash.CalculateStableTypeHash(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData},System.Collections.Generic.Dictionary{System.Type,System.UInt64})">
            <summary>
            Calculates a stable type hash for the input type.
            </summary>
            <param name="type">Type to hash.</param>
            <param name="customAttributes">Custom attributes for the provided type (if any).</param>
            <param name="hashCache">Cache for Types and their hashes. Used for quicker lookups when hashing.</param>
            <returns>StableTypeHash for the input type.</returns>
        </member>
        <member name="M:Unity.Entities.TypeHash.CalculateMemoryOrdering(System.Type,System.Boolean@,System.Collections.Generic.Dictionary{System.Type,System.UInt64})">
            <summary>
            Calculates a MemoryOrdering for the input type.
            </summary>
            <param name="type">Type to inspect.</param>
            <param name="hasCustomMemoryOrder">Out param; set to true if the memory order has been explicitly overriden for the input type.</param>
            <param name="hashCache">Cache for Types and their hashes. Used for quicker lookups when hashing.</param>
            <returns>MemoryOrdering for the input type.</returns>
        </member>
        <member name="T:Unity.Entities.LambdaJobQueryConstructionMethods">
            <summary>
            Extension methods implementing the fluent API for `Entities.ForEach`.
            </summary>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAbsent``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that do not have the specified component type.
            </summary>
            <typeparam name="T">Type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAbsent``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that do not have the specified component types.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithDisabled``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have the specified DISABLED component type.
            </summary>
            <typeparam name="T">Type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithDisabled``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have the specified DISABLED component types.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithNone``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that either 1) do not have the specified component type OR 2) have the specified DISABLED component type.
            </summary>
            <typeparam name="T">Type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithNone``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that either 1) do not have the specified component types OR 2) have the specified DISABLED component types.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithNone``3(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that do not have the specified component types.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <typeparam name="T3">Third type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAny``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have any of the specified component type.
            </summary>
            <typeparam name="T">Type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAny``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have any of the specified component types.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAny``3(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have any of the specified component type.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <typeparam name="T3">Third type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAll``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have all of the specified component type.
            </summary>
            <typeparam name="T">First type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAll``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have all of the specified component type.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithAll``3(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have all of the specified component type.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <typeparam name="T3">Third type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithChangeFilter``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have chunks where the specified component changed
            since the last time the system ran.
            </summary>
            <typeparam name="T">Type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithChangeFilter``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Add qualification to the generated query that it should only return entities that have chunks where the specified component changed
            since the last time the system ran.
            </summary>
            <typeparam name="T1">First type of component</typeparam>
            <typeparam name="T2">Second type of component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithDeferredPlaybackSystem``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>Specify an EntityCommandBufferSystem to play back entity commands.</summary>
            <remarks>To use this, you must pass an EntityCommands parameter as part of the ForEach() lambda expression. You can use this together with .Run(), .Schedule(), or .ScheduleParallel().</remarks>
            <typeparam name="T">Type of EntityCommandBufferSystem</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithImmediatePlayback(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>Play back entity commands immediately.</summary>
            <remarks>Usage requires an EntityCommands parameter to be passed to the ForEach() lambda function.
            May be used only together with .Run().</remarks>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithEntityQueryOptions(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Entities.EntityQueryOptions)">
            <summary>
            Add EntityQueryOptions to the generated query.
            </summary>
            <param name="options">EntityQueryOptions to add to query</param>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithSharedComponentFilter``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,``0)">
            <summary>
            Set a shared component filter on the query so that it only matches entities with this shared component value.
            </summary>
            <param name="sharedComponent">Shared component value</param>
            <typeparam name="T">Type of shared component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithStoreEntityQueryInField(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Entities.EntityQuery@)">
            <summary>Stores the generated query in a field</summary>
            <remarks>Unity calls this before the ForEach invocation, so the query can be used as soon as the system is created.</remarks>
            <param name="query">Reference to field in the system to store the query</param>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.WithSharedComponentFilter``2(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,``0,``1)">
            <summary>
            Set a shared component filter on the query so that it only matches entities with these shared component values.
            </summary>
            <param name="sharedComponent1">First shared component value</param>
            <param name="sharedComponent2">Second shared component value</param>
            <typeparam name="T1">First type of shared component</typeparam>
            <typeparam name="T2">Second type of shared component</typeparam>
            <param name="description">The target object</param>
            <returns>The target object, suitable for chaining multiple methods</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.ToQuery(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Capture the query you have defined using WithAny/WithAll/WithNone
            </summary>
            <param name="description">The target object</param>
            <returns>The EntityQuery corresponding to the query.</returns>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.DestroyEntity(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
            <summary>
            Destroys the set of entities defined by the query you have defined using WithAny/WithAll/WithNone.
            </summary>
            <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.AddComponent(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Entities.ComponentType)">
             <summary>
             Adds a component to a set of entities selected by the query you have defined using WithAny/WithAll/WithNone
             </summary>
             <remarks>
             Can add any kind of component.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before adding the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentType">The type of component to add.</param>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.AddComponent(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Adds components to a set of entities selected by the query you have defined using WithAny/WithAll/WithNone
             </summary>
             <remarks>
             Can add any kinds of components.
            
             The added components have the default values for the type.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before adding the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentTypes">The type of components to add.</param>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.AddComponent``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
             <summary>
             Adds a component to a set of entities selected by the query you have defined using WithAny/WithAll/WithNone
             </summary>
             <remarks>
             Can add any kind of component except chunk components.
            
             Adding a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             The added components have the default values for the type.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before adding the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <typeparam name="T">The type of component to add.</typeparam>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.RemoveComponent(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Entities.ComponentType)">
             <summary>
             Removes a component from a set of entities se3lected by the query you have defined using WithAny/WithAll/WithNone
             </summary>
             <remarks>
             Can remove any kind of component.
            
             It's OK if some or all of the components to remove are already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before removing the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentType">The type of component to remove.</param>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.RemoveComponent(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Entities.ComponentTypeSet@)">
             <summary>
             Removes a set of components from a set of entities selected by the query you have defined using
             WithAny/WithAll/WithNone
             </summary>
             <remarks>
             Can remove any kinds of components.
            
             It's OK if some or all of the components to remove are already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before removing the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentTypes">The types of components to add.</param>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.RemoveComponent``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
             <summary>
             Removes a component from a set of entities selected by the query you have defined using
              WithAny/WithAll/WithNone
             </summary>
             <remarks>
             Can remove any kind of component except chunk components.
            
             It's OK if the component to remove is already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before removing the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <typeparam name="T">The type of component to remove.</typeparam>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.AddComponentData``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,Unity.Collections.NativeArray{``0})">
             <summary>
             Adds a component to a set of entities selected by the query you have defined using WithAny/WithAll/WithNone
             and sets the component of each entity in the query to the value in the component array.
             </summary>
             <remarks>
             Can add any kind of component except chunk components, managed components, and shared components.
            
             componentArray.Length must match entityQuery.ToEntityArray().Length.
             </remarks>
             <typeparam name="T">The type of component to add.</typeparam>
             <param name="componentArray">NativeArray that contains the components.</param>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.AddChunkComponentData``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,``0)">
             <summary>
             Adds a chunk component to each of the chunks identified by the query you have defined using
             WithAny/WithAll/WithNone and sets the component values.
             </summary>
             <remarks>
             This function finds all chunks whose archetype satisfies the EntityQuery and adds the specified
             component to them.
            
             A chunk component is common to all entities in a chunk. You can access a chunk <see cref="T:Unity.Entities.IComponentData"/>
             instance through either the chunk itself or through an entity stored in that chunk.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before adding the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentData">The data to set.</param>
             <typeparam name="T">The type of component, which must implement IComponentData.</typeparam>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.RemoveChunkComponentData``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription)">
             <summary>
             Removes a component from a set of entities selected by the query you have defined using WithAny/WithAll/WithNone.
             </summary>
             <remarks>
             Can remove any kind of component except chunk components.
            
             It's OK if the component to remove is already missing from some or all of the entities.
            
             Removing a component changes an entity's archetype and results in the entity being moved to a different
             chunk.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before removing the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <typeparam name="T">The type of component to remove.</typeparam>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.AddSharedComponent``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,``0)">
             <summary>
             Sets the shared component of all entities in the query you have defined using WithAny/WithAll/WithNone
             </summary>
             <remarks>
             The component data stays in the same chunk, the internal shared component data indices will be adjusted.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before setting the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentData">A shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
             <param name="description">The target object</param>
        </member>
        <member name="M:Unity.Entities.LambdaJobQueryConstructionMethods.SetSharedComponent``1(Unity.Entities.CodeGeneratedJobForEach.ForEachLambdaJobDescription,``0)">
             <summary>
             Sets the shared component of all entities in the query.
             </summary>
             <remarks>
             The component data stays in the same chunk, the internal shared component data indices will be adjusted.
            
             **Important:** This function creates a sync point, which means that the EntityManager waits for all
             currently running Jobs to complete before setting the component and no additional Jobs can start before
             the function is finished. A sync point can cause a drop in performance because the ECS framework may not
             be able to make use of the processing power of all available cores.
             </remarks>
             <param name="componentData">A shared component object containing the values to set.</param>
             <typeparam name="T">The shared component type.</typeparam>
             <param name="description">The target object</param>
        </member>
        <member name="F:Unity.Entities.BlobAssetReferenceData.m_Align8Union">
            <summary>
            This field overlaps m_Ptr similar to a C union.
            It is an internal (so we can initialize the struct) field which
            is here to force the alignment of BlobAssetReferenceData to be 8-bytes.
            </summary>
        </member>
        <member name="P:Unity.Entities.BlobAssetReferenceData.SerializedHash">
             <summary>
             This member is exposed to Unity.Properties to support EqualityComparison and Serialization within managed objects.
             </summary>
             <remarks>
             This member is used to expose the value of the <see cref="F:Unity.Entities.BlobAssetReferenceData.m_Ptr"/> to properties (which does not handle pointers by default).
            
             It's used for two managed object cases.
            
             1) EqualityComparison - The equality comparison visitor will encounter this member and compare the value (i.e. blob address).
            
            
             2) Serialization - Before serialization, the <see cref="F:Unity.Entities.BlobAssetReferenceData.m_Ptr"/> field is patched with a serialized hash. The visitor encounters this member
                                and writes/reads back the value. The value is then patched back to the new ptr.
            
             3) ManagedObjectClone - When cloning managed objects Unity.Properties does not have access to the internal pointer field. This property is used to copy the bits for this struct.
             </remarks>
        </member>
        <member name="T:Unity.Entities.BlobAssetReference`1">
            <summary>
            A reference to a blob asset stored in unmanaged memory.
            </summary>
            <remarks>Create a blob asset using a <see cref="T:Unity.Entities.BlobBuilder"/> or by deserializing a serialized blob asset.</remarks>
            <typeparam name="T">The struct data type defining the data structure of the blob asset.</typeparam>
        </member>
        <member name="P:Unity.Entities.BlobAssetReference`1.IsCreated">
            <summary>
            Reports whether this instance references a valid blob asset.
            </summary>
            <value>True, if this instance references a valid blob instance.</value>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.GetUnsafePtr">
            <summary>
            Provides an unsafe pointer to the blob asset data.
            </summary>
            <remarks>You can only use unsafe pointers in [unsafe contexts].
            [unsafe contexts]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code
            </remarks>
            <returns>An unsafe pointer. The pointer is null for invalid BlobAssetReference instances.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Dispose">
            <summary>
            Destroys the referenced blob asset and frees its memory.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if you attempt to dispose a blob asset that loaded as
            part of a scene or subscene.</exception>
        </member>
        <member name="P:Unity.Entities.BlobAssetReference`1.Value">
            <summary>
            A reference to the blob asset data, a struct of type T that is stored in the blob asset.
            </summary>
            <remarks>The property is a
            <see href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns">
            reference return</see>.</remarks>
            <value>The root data structure of the blob asset data.</value>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Create(System.Void*,System.Int32)">
            <summary>
            Creates a blob asset from a pointer to data and a specified size.
            </summary>
            <remarks>The blob asset is created in unmanaged memory. Call <see cref="M:Unity.Entities.BlobAssetReference`1.Dispose"/> to free the asset memory
            when it is no longer needed. This function can only be used in an [unsafe context].
            [unsafe context]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code
            </remarks>
            <param name="ptr">A pointer to the buffer containing the data to store in the blob asset.</param>
            <param name="length">The length of the buffer in bytes.</param>
            <returns>A reference to newly created blob asset.</returns>
            <seealso cref="T:Unity.Entities.BlobBuilder"/>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Create(System.Byte[])">
            <summary>
            Creates a blob asset from a byte array.
            </summary>
            <remarks>The blob asset is created in unmanaged memory. Call <see cref="M:Unity.Entities.BlobAssetReference`1.Dispose"/> to free the asset memory
            when it is no longer needed. This function can only be used in an [unsafe context].
            [unsafe context]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code
            </remarks>
            <param name="data">The byte array containing the data to store in the blob asset.</param>
            <returns>A reference to newly created blob asset.</returns>
            <seealso cref="T:Unity.Entities.BlobBuilder"/>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Create(`0)">
            <summary>
            Creates a blob asset from an instance of a struct.
            </summary>
            <remarks>The struct must only contain blittable fields (primitive types, fixed-length arrays, or other structs
            meeting these same criteria). The blob asset is created in unmanaged memory. Call <see cref="M:Unity.Entities.BlobAssetReference`1.Dispose"/> to
            free the asset memory when it is no longer needed. This function can only be used in an [unsafe context].
            [unsafe context]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code</remarks>
            <param name="value">An instance of <typeparamref name="T"/>.</param>
            <returns>A reference to newly created blob asset.</returns>
            <seealso cref="T:Unity.Entities.BlobBuilder"/>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Create(Unity.Entities.BlobAssetReferenceData)">
            <summary>
            Construct a BlobAssetReference from the blob data
            </summary>
            <param name="blobData">The blob data to attach to the returned object</param>
            <returns>The created BlobAssetReference</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.TryRead``1(``0,System.Int32,Unity.Entities.BlobAssetReference{`0}@)">
            <summary>
            Reads bytes from a binary reader, validates the expected serialized version, and deserializes them into a new blob asset.
            </summary>
            <param name="binaryReader">The reader for the blob data path</param>
            <param name="version">Expected version number of the blob data.</param>
            <param name="result">The resulting BlobAssetReference if the data was read successful.</param>
            <typeparam name="U">The type of binary reader</typeparam>
            <returns>True if the data was successfully read, false otherwise</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.TryRead(System.String,System.Int32,Unity.Entities.BlobAssetReference{`0}@)">
            <summary>
            Reads bytes from a fileName, validates the expected serialized version, and deserializes them into a new blob asset.
            </summary>
            <param name="path">The path of the blob data to read.</param>
            <param name="version">Expected version number of the blob data.</param>
            <param name="result">The resulting BlobAssetReference if the data was read successful.</param>
            <returns>A bool if the read was successful or not.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.TryReadInplace(System.Byte*,System.Int64,System.Int32,Unity.Entities.BlobAssetReference{`0}@,System.Int32@)">
            <summary>
            Reads bytes from a buffer, validates the expected serialized version, and deserializes them into a new blob asset.
            The returned blob reuses the data from the passed in pointer and is only valid as long as the buffer stays allocated.
            Also the returned blob asset reference can not be disposed.
            </summary>
            <param name="data">A pointer to the buffer containing the serialized blob data.</param>
            <param name="size">Size in bytes of the buffer containing the serialized blob data.</param>
            <param name="version">Expected version number of the blob data.</param>
            <param name="result">The resulting BlobAssetReference if the data was read successful.</param>
            <param name="numBytesRead">Number of bytes of the data buffer that are read.</param>
            <returns>A bool if the read was successful or not.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Write``1(``0,Unity.Entities.BlobBuilder,System.Int32)">
            <summary>
            Writes the blob data to a path with serialized version.
            </summary>
            <param name="writer">The binary writer to write the blob with.</param>
            <param name="builder">The BlobBuilder containing the blob to write.</param>
            <param name="version">Serialized version number of the blob data.</param>
            <typeparam name="U">The type of binary writer</typeparam>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Write(Unity.Entities.BlobBuilder,System.String,System.Int32)">
            <summary>
            Writes the blob data to a path with serialized version.
            </summary>
            <param name="builder">The BlobBuilder containing the blob to write.</param>
            <param name="path">The path to write the blob data.</param>
            <param name="version">Serialized version number of the blob data.</param>
        </member>
        <member name="P:Unity.Entities.BlobAssetReference`1.Null">
            <summary>
            A "null" blob asset reference that can be used to test if a BlobAssetReference instance
            </summary>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.op_Equality(Unity.Entities.BlobAssetReference{`0},Unity.Entities.BlobAssetReference{`0})">
            <summary>
            Two BlobAssetReferences are equal when they reference the same data.
            </summary>
            <param name="lhs">The BlobAssetReference on the left side of the operator.</param>
            <param name="rhs">The BlobAssetReference on the right side of the operator.</param>
            <returns>True, if both references point to the same data or if both are <see cref="P:Unity.Entities.BlobAssetReference`1.Null"/>.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.op_Inequality(Unity.Entities.BlobAssetReference{`0},Unity.Entities.BlobAssetReference{`0})">
            <summary>
            Two BlobAssetReferences are not equal unless they reference the same data.
            </summary>
            <param name="lhs">The BlobAssetReference on the left side of the operator.</param>
            <param name="rhs">The BlobAssetReference on the right side of the operator.</param>
            <returns>True, if the references point to different data in memory or if one is <see cref="P:Unity.Entities.BlobAssetReference`1.Null"/>.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Equals(Unity.Entities.BlobAssetReference{`0})">
            <summary>
            Two BlobAssetReferences are equal when they reference the same data.
            </summary>
            <param name="other">The reference to compare to this one.</param>
            <returns>True, if both references point to the same data or if both are <see cref="P:Unity.Entities.BlobAssetReference`1.Null"/>.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.Equals(System.Object)">
            <summary>
            Two BlobAssetReferences are equal when they reference the same data.
            </summary>
            <param name="obj">The object to compare to this reference</param>
            <returns>True, if the object is a BlobAssetReference instance that references to the same data as this one,
            or if both objects are <see cref="P:Unity.Entities.BlobAssetReference`1.Null"/> BlobAssetReference instances.</returns>
        </member>
        <member name="M:Unity.Entities.BlobAssetReference`1.GetHashCode">
            <summary>
            Generates the hash code for this object.
            </summary>
            <returns>A standard C# value-type hash code.</returns>
        </member>
        <member name="T:Unity.Entities.BlobPtr`1">
            <summary>
            A pointer referencing a struct, array, or field inside a blob asset.
            </summary>
            <typeparam name="T">The data type of the referenced object.</typeparam>
            <seealso cref="T:Unity.Entities.BlobBuilder"/>
        </member>
        <member name="P:Unity.Entities.BlobPtr`1.IsValid">
            <summary>
            Returns 'true' if this is a valid pointer (not null)
            </summary>
        </member>
        <member name="P:Unity.Entities.BlobPtr`1.Value">
            <summary>
            The value, of type <typeparamref name="T"/> to which the pointer refers.
            </summary>
            <remarks>The property is a
            <see href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns">
            reference return</see>.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the pointer does not reference a valid instance of
            a data type.</exception>
        </member>
        <member name="M:Unity.Entities.BlobPtr`1.GetUnsafePtr">
            <summary>
            Provides an unsafe pointer to the referenced data.
            </summary>
            <remarks>You can only use unsafe pointers in [unsafe contexts].
            [unsafe contexts]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code
            </remarks>
            <returns>An unsafe pointer.</returns>
        </member>
        <member name="T:Unity.Entities.BlobArray`1">
            <summary>
             An immutable array of value types stored in a blob asset.
            </summary>
            <remarks>When creating a blob asset, use the <see cref="T:Unity.Entities.BlobBuilderArray`1"/> provided by a
            <see cref="T:Unity.Entities.BlobBuilder"/> instance to set the array elements.</remarks>
            <typeparam name="T">The data type of the elements in the array. Must be a struct or other value type.</typeparam>
            <seealso cref="T:Unity.Entities.BlobBuilder"/>
        </member>
        <member name="P:Unity.Entities.BlobArray`1.Length">
            <summary>
            The number of elements in the array.
            </summary>
        </member>
        <member name="M:Unity.Entities.BlobArray`1.GetUnsafePtr">
            <summary>
            Provides an unsafe pointer to the array data.
            </summary>
            <remarks>You can only use unsafe pointers in [unsafe contexts].
            [unsafe contexts]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code
            </remarks>
            <returns>An unsafe pointer.</returns>
        </member>
        <member name="P:Unity.Entities.BlobArray`1.Item(System.Int32)">
            <summary>
            The element of the array at the <paramref name="index"/> position.
            </summary>
            <param name="index">The array index.</param>
            <remarks>The array element is a
            <see href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns">
            reference return</see>.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if <paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Unity.Entities.BlobArray`1.ToArray">
            <summary>
            Copies the elements of this BlobArray to a new managed array.
            </summary>
            <returns>An array containing copies of the elements of the BlobArray.</returns>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if the array type contains
            nested <see cref="T:Unity.Entities.BlobArray`1"/>, <see cref="T:Unity.Entities.BlobString"/> or <see cref="T:Unity.Entities.BlobPtr`1"/> fields.</exception>
        </member>
        <member name="T:Unity.Entities.MayOnlyLiveInBlobStorageAttribute">
            <summary>
            Use this attribute if you have structs that use offset pointers that are only valid when they live inside the blob storage.
            It will turn ensure a compiler error is generated for every time a reference to the struct is copied, or a field is read
            from a reference to the struct this attribute is applied on.
            </summary>
        </member>
        <member name="T:Unity.Entities.BlobString">
            <summary>
            An immutable, variable-length string stored in a blob asset.
            </summary>
            <seealso cref="T:Unity.Entities.BlobBuilder"/>
        </member>
        <member name="P:Unity.Entities.BlobString.Length">
            <summary>
            The length of the string in UTF-8 bytes.
            </summary>
        </member>
        <member name="M:Unity.Entities.BlobString.ToString">
            <summary>
            Converts this BlobString to a standard C# <see cref="T:System.String"/>.
            </summary>
            <returns>The C# string.</returns>
        </member>
        <member name="M:Unity.Entities.BlobString.CopyTo``1(``0@)">
            <summary>
            Copies the characters from a BlobString to a native container
            </summary>
            <param name="dest">The destination BlobString.</param>
            <typeparam name="T">The type of native container to copy to</typeparam>
            <returns>None if the copy fully completes. Otherwise, returns Overflow.</returns>
        </member>
        <member name="T:Unity.Entities.BlobStringExtensions">
            <summary>
            Extensions that allow the creation of <see cref="T:Unity.Entities.BlobString"/> instances by a <see cref="T:Unity.Entities.BlobBuilder"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.BlobStringExtensions.AllocateString(Unity.Entities.BlobBuilder@,Unity.Entities.BlobString@,System.String)">
            <summary>
            Allocates memory to store the string in a blob asset and copies the string data into it.
            </summary>
            <param name="builder">The BlobBuilder instance building the blob asset.</param>
            <param name="blobStr">A reference to the field in the blob asset that will store the string. This
            function allocates memory for that field and sets the string value.</param>
            <param name="value">The string to copy into the blob asset.</param>
        </member>
        <member name="M:Unity.Entities.BlobStringExtensions.AllocateString``1(Unity.Entities.BlobBuilder@,Unity.Entities.BlobString@,``0@)">
            <summary>
            Allocates memory to store the string in a blob asset and copies the string data into it.
            </summary>
            <param name="builder">The BlobBuilder instance building the blob asset.</param>
            <param name="blobStr">A reference to the field in the blob asset that will store the string. This
            function allocates memory for that field and sets the string value.</param>
            <param name="value">The string to copy into the blob asset.</param>
            <typeparam name="T">The type of native container that contains the source string</typeparam>
        </member>
        <member name="T:Unity.Entities.BlobAssetSerializeExtensions">
            <summary>
            Extensions for supporting serialization and deserialization of blob assets.
            </summary>
        </member>
        <member name="M:Unity.Entities.BlobAssetSerializeExtensions.Write``1(Unity.Entities.Serialization.BinaryWriter,Unity.Entities.BlobAssetReference{``0})">
            <summary>
            Serializes the blob asset data and writes the bytes to a <see cref="T:Unity.Entities.Serialization.BinaryWriter"/> instance.
            </summary>
            <param name="binaryWriter">An implementation of the BinaryWriter interface.</param>
            <param name="blob">A reference to the blob asset to serialize.</param>
            <typeparam name="T">The blob asset's root data type.</typeparam>
            <seealso cref="T:Unity.Entities.Serialization.StreamBinaryWriter"/>
            <seealso cref="T:Unity.Entities.Serialization.MemoryBinaryWriter"/>
        </member>
        <member name="M:Unity.Entities.BlobAssetSerializeExtensions.Read``1(Unity.Entities.Serialization.BinaryReader)">
            <summary>
            Reads bytes from a <see cref="T:Unity.Entities.Serialization.BinaryReader"/> instance and deserializes them into a new blob asset.
            </summary>
            <param name="binaryReader">An implementation of the BinaryReader interface.</param>
            <typeparam name="T">The blob asset's root data type.</typeparam>
            <returns>A reference to the deserialized blob asset.</returns>
            <seealso cref="T:Unity.Entities.Serialization.StreamBinaryReader"/>
            <seealso cref="T:Unity.Entities.Serialization.MemoryBinaryReader"/>
        </member>
        <member name="T:Unity.Entities.WriteGroupAttribute">
             <summary>
             Can exclude components which are unknown at the time of creating the query that have been declared
             to write to the same component.
            
             This allows for extending systems of components safely without editing the previously existing systems.
            
             The goal is to have a way for systems that expect to transform data from one set of components (inputs) to
             another (output[s]) be able to declare that explicit transform, and they exclusively know about one set of
             inputs. If there are other inputs that want to write to the same output, the query shouldn't match because it's
             a nonsensical/unhandled setup. It's both a way to guard against nonsensical components (having two systems write
             to the same output value), and a way to "turn off" existing systems/queries by putting a component with the same
             write lock on an entity, letting another system handle it.
             </summary>
        </member>
        <member name="M:Unity.Entities.WriteGroupAttribute.#ctor(System.Type)">
            <summary>
            <see cref="T:Unity.Entities.WriteGroupAttribute"/>
            </summary>
            <param name="targetType">Output type the component decorated with this attribute (input) expects to be written by.</param>
        </member>
        <member name="F:Unity.Entities.WriteGroupAttribute.TargetType">
            <summary>
            Output type the component decorated with this attribute (input) expects to be written by.
            </summary>
        </member>
        <member name="T:Unity.Entities.DisableAutoTypeRegistrationAttribute">
            <summary>
            Prevents a Component Type from being registered in the TypeManager during TypeManager.Initialize().
            Types that are not registered will not be recognized by EntityManager.
            </summary>
        </member>
        <member name="T:Unity.Entities.TemporaryBakingTypeAttribute">
             <summary>
             Attribute that indicates that the component should be removed at the end of each baking iteration.
             </summary>
             <remarks>
             Components decorated with the [TemporaryBakingType] attribute are stripped
             after each baking iteration, so you can use them in baking systems
             to identify entities that a baker has modified during the current baking iteration.
            
             Components with the [TemporaryBakingType] attribute are not exported in the runtime data.
             </remarks>
             <seealso cref="T:Unity.Entities.BakingTypeAttribute"/>
        </member>
        <member name="T:Unity.Entities.BakingTypeAttribute">
             <summary>
             Attribute that indicates that a component should persist in the baking world, but shouldn't be exported with the runtime data.
             </summary>
             <remarks>
             During incremental baking, components with the [BakingType] attribute persist in the baking world.
             This allows baking systems to process entities which haven't been modified during the current baking iteration,
             but which are dependencies to the final result of the baking.
            
             Components with the [BakingType] attribute are not exported in the runtime data.
             </remarks>
             <seealso cref="T:Unity.Entities.TemporaryBakingTypeAttribute"/>
        </member>
        <member name="T:Unity.Entities.TypeIndex">
            <summary>
            Provides a unique id for component types as well as quick lookup information about the component type itself.
            This value is fully deterministic at runtime but should not be considered deterministic across builds
            and thus should not be serialized. For serialization, please prefer <see cref="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash"/> instead.
            </summary>
        </member>
        <member name="F:Unity.Entities.TypeIndex.Value">
            <summary>
            Raw value used to identify Component types at runtime.
            <remarks>
            This value should not be serialized as it is not guaranteed to be deterministic across builds (but is during runtime).
            For deterministic serialization of types please use <seealso cref="F:Unity.Entities.TypeManager.TypeInfo.StableTypeHash"/>
            </remarks>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.Null">
            <summary>
            An invalid <seealso cref="T:Unity.Entities.TypeIndex"/> which does not map to a valid component type.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsBuffer">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.IBufferElementData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsCleanupComponent">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.ICleanupComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsCleanupSharedComponent">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.ICleanupSharedComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsCleanupBufferComponent">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.ICleanupBufferElementData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsComponentType">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.IComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsSharedComponentType">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.ISharedComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsIEquatable">
            <summary>
            The component type inherits from <seealso cref="T:System.IEquatable`1"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsManagedComponent">
            <summary>
            The component type <seealso cref="P:Unity.Entities.TypeIndex.IsManagedType"/> and inherits from <seealso cref="T:Unity.Entities.IComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsManagedSharedComponent">
            <summary>
            The component type <seealso cref="P:Unity.Entities.TypeIndex.IsManagedType"/> and inherits from <seealso cref="T:Unity.Entities.ISharedComponentData"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsManagedType">
            <summary>
            The component type requires managed storage due to being a class type, and/or contains reference types
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsZeroSized">
            <summary>
            The component type allocates 0 bytes in Chunk storage
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsChunkComponent">
            <summary>
            The component type is used as a chunk component (a component mapped to a Chunk rather than <seealso cref="T:Unity.Entities.Entity"/>)
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsEnableable">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.IEnableableComponent"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsRefCounted">
            <summary>
            The component type inherits from <seealso cref="T:Unity.Entities.IRefCounted"/>
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.HasEntityReferences">
            <summary>
            The component type contains an <seealso cref="T:Unity.Entities.Entity"/> member. Entity members found in nested member types will also cause this property to return true.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.HasNativeContainer">
            <summary>
            The component type contains a NativeContainer member. NativeContainer members found in nested member types will also cause this property to return true.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsTemporaryBakingType">
            <summary>
            The component type is decorated with the <seealso cref="T:Unity.Entities.TemporaryBakingTypeAttribute"/> attribute.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.IsBakingOnlyType">
            <summary>
            The component type is decorated with the <seealso cref="T:Unity.Entities.BakingTypeAttribute"/> attribute.
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.Index">
            <summary>
            Zero-based index for the <seealso cref="T:Unity.Entities.TypeIndex"/> stored in Value (the type index with no flags).
            </summary>
        </member>
        <member name="P:Unity.Entities.TypeIndex.Flags">
            <summary>
            Type flags stored in Value
            </summary>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_Implicit(Unity.Entities.TypeIndex)~System.Int32">
            <summary>
            Implicit conversion from TypeIndex to an int.
            </summary>
            <param name="ti">TypeIndex to convert.</param>
            <returns>TypeIndex.Value integer representation.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_Implicit(System.Int32)~Unity.Entities.TypeIndex">
            <summary>
            Implicit conversion from an int to a TypeIndex.
            </summary>
            <param name="value">int to convert</param>
            <returns>TypeIndex representation of the int</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_Equality(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="T:Unity.Entities.TypeIndex"/> instances are equal if they refer to the same component type instance.
            </summary>
            <remarks>
            Note that two <seealso cref="T:Unity.Entities.TypeIndex"/> for the same Component Type may not always be equal. For example, a type inheriting from IComponentData could be used as a
            Chunk Component in one Archetype but not in another. If those two TypeIndices were compared they would not match even though they are for the same System.Type.
            </remarks>
            <param name="lhs"><seealso cref="T:Unity.Entities.TypeIndex"/> on left side of the equality expression</param>
            <param name="rhs"><seealso cref="T:Unity.Entities.TypeIndex"/> on right side of the equality expression</param>
            <returns>True, if both TypeIndices are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_Inequality(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="T:Unity.Entities.TypeIndex"/> instances are equal if they refer to the same component type instance.
            </summary>
            <remarks>
            Note that two <seealso cref="T:Unity.Entities.TypeIndex"/> for the same Component Type may not always be equal. For example, a type inheriting from <seealso cref="T:Unity.Entities.IComponentData"/> could be used as a
            Chunk Component in one Archetype but not in another. If those two TypeIndices were compared they would not match even though they are for the same System.Type.
            </remarks>
            <param name="lhs"><seealso cref="T:Unity.Entities.TypeIndex"/> on left side of the equality expression.</param>
            <param name="rhs"><seealso cref="T:Unity.Entities.TypeIndex"/> on right side of the equality expression.</param>
            <returns>True, if both TypeIndices are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_LessThan(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            Evaluates if one <seealso cref="T:Unity.Entities.TypeIndex"/> is less than the other.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>True if the left-hand side's <see cref="T:Unity.Entities.TypeIndex"/> is less than the right-hand side's.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_GreaterThan(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            Evaluates if one <seealso cref="T:Unity.Entities.TypeIndex"/> is greater than the other.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>True if the left-hand side's <see cref="T:Unity.Entities.TypeIndex"/> is greater than the right-hand side's.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_LessThanOrEqual(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            Evaluates if one <seealso cref="T:Unity.Entities.TypeIndex"/> is less than or equal to the other.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>True if the left-hand side's <see cref="T:Unity.Entities.TypeIndex"/> is less than or equal to the right-hand side's.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.op_GreaterThanOrEqual(Unity.Entities.TypeIndex,Unity.Entities.TypeIndex)">
            <summary>
            Evaluates if one <seealso cref="T:Unity.Entities.TypeIndex"/> is greater than or equal to the other.
            </summary>
            <param name="lhs">The left-hand side</param>
            <param name="rhs">The right-hand side</param>
            <returns>True if the left-hand side's <see cref="T:Unity.Entities.TypeIndex"/> is greater than or equal to the right-hand side's.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.CompareTo(Unity.Entities.TypeIndex)">
            <summary>
            Compare this <seealso cref="T:Unity.Entities.TypeIndex"/> against a given one
            </summary>
            <param name="other">The other TypeIndex to compare to</param>
            <returns>Difference between TypeIndex values</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.Equals(System.Object)">
            <summary>
            <seealso cref="T:Unity.Entities.TypeIndex"/> instances are equal if they refer to the same component type instance.
            </summary>
            <remarks>
            Note that two <seealso cref="T:Unity.Entities.TypeIndex"/> for the same Component Type may not always be equal. For example, a type inheriting from <seealso cref="T:Unity.Entities.IComponentData"/> could be used as a
            Chunk Component in one Archetype but not in another. If those two TypeIndices were compared they would not match even though they are for the same System.Type.
            </remarks>
            <param name="compare">The object to compare to this <seealso cref="T:Unity.Entities.TypeIndex"/>.</param>
            <returns>True, if the compare parameter contains a <seealso cref="T:Unity.Entities.TypeIndex"/> object equal to this <seealso cref="T:Unity.Entities.TypeIndex"/> instance.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.GetHashCode">
            <summary>
            A hash used for comparisons.
            </summary>
            <returns>A unique hash code.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.Equals(Unity.Entities.TypeIndex)">
            <summary>
            <seealso cref="T:Unity.Entities.TypeIndex"/> instances are equal if they refer to the same component type instance.
            </summary>
            <remarks>
            Note that two  for the <seealso cref="T:Unity.Entities.TypeIndex"/> same Component Type may not always be equal. For example, a type inheriting from IComponentData could be used as a
            Chunk Component in one Archetype but not in another. If those two TypeIndices were compared they would not match even though they are for the same System.Type.
            </remarks>
            <param name="typeIndex">The other <seealso cref="T:Unity.Entities.TypeIndex"/>.</param>
            <returns>True, if the <seealso cref="T:Unity.Entities.TypeIndex"/> instances are equal.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.ToString">
            <summary>
            Provides a debugging string.
            </summary>
            <returns>A string containing the entity index and generational version.</returns>
        </member>
        <member name="M:Unity.Entities.TypeIndex.ToFixedString">
            <summary>
            Provides a Burst compatible debugging string.
            </summary>
            <returns>A string containing the entity index and generational version.</returns>
        </member>
        <member name="T:Unity.Entities.ManagedObjectClone">
            <summary>
            Unity.Properties visitor used to deep clone object instances. This is an internal class.
            </summary>
            <remarks>
            An instance of this class can be re-used for multiple clone operations.
            </remarks>
        </member>
        <member name="F:Unity.Entities.ManagedObjectClone.m_References">
            <summary>
            Map used to track and copy references within the same object.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectClone.m_RootSource">
            <summary>
            The root source. This is the object we are cloning from.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectClone.m_RootDestination">
            <summary>
            The root destination. This is the object we are cloning to.
            </summary>
        </member>
        <member name="F:Unity.Entities.ManagedObjectClone.m_Stack">
            <summary>
            The current destination container being written to. This is pushed and popped as we traverse the tree.
            </summary>
            <remarks>
            At the end of visitation this will contain the final cloned object.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.Clone(System.Object)">
            <summary>
            Creates a new object that is a copy of the given instance.
            </summary>
            <param name="obj">The object to clone.</param>
            <returns>A new object that is a copy of the given instance.</returns>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.Unity#Properties#IPropertyBagVisitor#Visit``1(Unity.Properties.IPropertyBag{``0},``0@)">
            <summary>
            Invoked by Unity.Properties for each container type (i.e. struct or class).
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source container being visited.</param>
            <typeparam name="TContainer">The container type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.Unity#Properties#IListPropertyBagVisitor#Visit``2(Unity.Properties.IListPropertyBag{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for each list container type (i.e. Array or IList type)
            </summary>
            <remarks>
            This will be called for built in array types.
            </remarks>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source list being visited.</param>
            <typeparam name="TList">The list type.</typeparam>
            <typeparam name="TElement">The element type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.Unity#Properties#ISetPropertyBagVisitor#Visit``2(Unity.Properties.ISetPropertyBag{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for each set container type. (i.e. ISet type)
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source set being visited.</param>
            <typeparam name="TSet">The set type.</typeparam>
            <typeparam name="TElement">The element type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.Unity#Properties#IDictionaryPropertyBagVisitor#Visit``3(Unity.Properties.IDictionaryPropertyBag{``0,``1,``2},``0@)">
            <summary>
            Invoked by Unity.Properties for each dictionary container type. (i.e. IDictionary{TKey, TValue} type)
            </summary>
            <param name="properties">The property bag being visited.</param>
            <param name="srcContainer">The source dictionary being visited</param>
            <typeparam name="TDictionary">The dictionary type.</typeparam>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.Unity#Properties#IPropertyVisitor#Visit``2(Unity.Properties.Property{``0,``1},``0@)">
            <summary>
            Invoked by Unity.Properties for any non-collection property.
            </summary>
            <param name="property">The property being visited.</param>
            <param name="srcContainer">The source container.</param>
            <typeparam name="TContainer">The container type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Unity.Entities.ManagedObjectClone.CloneValue``1(``0@,``0)">
            <summary>
            Constructs and initializes the given instance of <paramref name="dstValue"/> based on the given <paramref name="srcValue"/>.
            </summary>
            <param name="dstValue">The destination value to initialize.</param>
            <param name="srcValue">The source value to initialize based on.</param>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="T:Unity.Entities.IQueryTypeParameter">
            <summary>
            Interface used to indicate that a type can be used as type to construct a QueryEnumerable.
            This should only be used by types internal to the Entities package.
            </summary>
        </member>
        <member name="T:Unity.Entities.RefRW`1">
            <summary>
            RefRW stores a reference (with write access) to native memory
            </summary>
            <typeparam name="T">The type of object referenced.</typeparam>
        </member>
        <member name="M:Unity.Entities.RefRW`1.op_Implicit(Unity.Entities.RefRW{`0})~Unity.Entities.RefRO{`0}">
            <summary>
            Convert into a read-only version RefRO of this RefRW
            </summary>
            <param name="refRW">The read-write reference to convert to read-only</param>
            <returns>Returns a RefRO</returns>
        </member>
        <member name="M:Unity.Entities.RefRW`1.#ctor(System.Byte*,Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
            <summary>
            Stores a safe reference a pointer to T
            </summary>
            <param name="ptr">Pointer pointing to an instance of T</param>
            <param name="safety">AtomicSafetyHandle protecting access to 'ptr'</param>
        </member>
        <member name="M:Unity.Entities.RefRW`1.#ctor(Unity.Collections.NativeArray{`0},System.Int32)">
            <summary>
            Stores a safe reference to a component from an array of components at the index.
            </summary>
            <param name="componentDataNativeArray">The array of components.</param>
            <param name="index">The index of the array.</param>
        </member>
        <member name="M:Unity.Entities.RefRW`1.Optional(Unity.Collections.NativeArray{`0},System.Int32)">
            <summary>
            Stores a safe reference to a component from an array of components at the index.
            If the array is empty stores a null reference.
            </summary>
            <param name="componentDataNativeArray">The array of components.</param>
            <param name="index">The index of the array.</param>
            <returns>Read-write optional reference to component</returns>
        </member>
        <member name="P:Unity.Entities.RefRW`1.IsValid">
            <summary>
            Checks if the component exists on this entity.
            </summary>
            <remarks>
            This doesn't take into account if the component is enabled or not.
            </remarks>
        </member>
        <member name="P:Unity.Entities.RefRW`1.ValueRW">
            <summary>
            Returns a writable reference to the component value itself.
            </summary>
            <remarks>
            This value is a reference to the actual component data.  It is safe to use this field directly, e.g.
            "Data.ValueRW.SomeField = 123".  It is also safe to make a copy of this value, e.g. "var myComponent = Data.ValueRW".
            Keeping a ref ("ref var myref = Data.ValueRW" is inherently unsafe as any structural change may invalidate this
            reference, and there is no way to detect this. It is safe to use this reference locally if you can guarantee
            that no structural changes will occur in between acquiring it and using it. Do not hold on to such a reference
            for any extended amount of time.
            </remarks>
        </member>
        <member name="P:Unity.Entities.RefRW`1.ValueRO">
            <summary>
            Returns a read-only reference to the component value itself.
            </summary>
            <remarks>
            This value is a reference to the actual component data.  It is safe to use this field directly, e.g.
            "Data.ValueRO.SomeField".  It is also safe to make a copy of this value, e.g. "var myComponent = Data.ValueRO".
            Keeping a ref ("ref var myref = Data.ValueRO" is inherently unsafe as any structural change may invalidate this
            reference, and there is no way to detect this. It is safe to use this reference locally if you can guarantee
            that no structural changes will occur in between acquiring it and using it. Do not hold on to such a reference
            for any extended amount of time.
            </remarks>
        </member>
        <member name="T:Unity.Entities.AspectType">
            <summary>
            Native friendly container for managed <see cref="T:System.Type"/> derived from <see cref="T:Unity.Entities.IAspect"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.AspectType.TypeIndex">
            <summary>
            The type index of the aspect in the <see cref="T:Unity.Entities.TypeManager"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.AspectType.FromTypeIndex(System.Int32)">
            <summary>
            Create an <see cref="T:Unity.Entities.AspectType"/> from a type index.
            </summary>
            <param name="typeIndex">The aspect type index.</param>
            <returns>A new AspectType instance.</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.#ctor(System.Type)">
            <summary>
            Create an <see cref="T:Unity.Entities.AspectType"/> from a managed <see cref="T:System.Type"/>.
            </summary>
            <remarks>The managed <see cref="T:System.Type"/> must derive from <see cref="T:Unity.Entities.IAspect"/> to be valid.</remarks>
            <param name="type">The managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</param>
        </member>
        <member name="M:Unity.Entities.AspectType.GetManagedType">
            <summary>
            Retrieve the managed <see cref="T:System.Type"/>.
            </summary>
            <returns>The managed <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.op_Implicit(System.Type)~Unity.Entities.AspectType">
            <summary>
            Implicit conversion from managed <see cref="T:System.Type"/> to <see cref="T:Unity.Entities.AspectType"/>.
            </summary>
            <param name="type">The managed <see cref="T:System.Type"/> that derives from <see cref="T:Unity.Entities.IAspect"/>.</param>
            <returns>Returns the new AspectType.</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.op_LessThan(Unity.Entities.AspectType,Unity.Entities.AspectType)">
            <summary>
            Operator less-than by type index
            </summary>
            <param name="lhs">AspectType on the left side of the operation</param>
            <param name="rhs">AspectType on the right side of the operation</param>
            <returns>True if lhs has a lower type index than rhs</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.op_GreaterThan(Unity.Entities.AspectType,Unity.Entities.AspectType)">
            <summary>
            Operator greater-than by type index
            </summary>
            <param name="lhs">AspectType on the left side of the operation</param>
            <param name="rhs">AspectType on the right side of the operation</param>
            <returns>True if lhs has a greater type index than rhs</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.op_Equality(Unity.Entities.AspectType,Unity.Entities.AspectType)">
            <summary>
            Operator equal by type index
            </summary>
            <param name="lhs">AspectType on the left side of the operation</param>
            <param name="rhs">AspectType on the right side of the operation</param>
            <returns>True if lhs has the same type index as rhs</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.op_Inequality(Unity.Entities.AspectType,Unity.Entities.AspectType)">
            <summary>
            Operator not-equal by type index
            </summary>
            <param name="lhs">AspectType on the left side of the operation</param>
            <param name="rhs">AspectType on the right side of the operation</param>
            <returns>True if lhs does not have the same type index as rhs</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.ToString">
            <summary>
            Name of the aspect type
            </summary>
            <returns>Name of the aspect type</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.Equals(Unity.Entities.AspectType)">
            <summary>
            Test if this AspectType is equal to another AspectType
            </summary>
            <param name="other">AspectType to test equality with</param>
            <returns>True if this AspectType is equal to another AspectType</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.Equals(System.Object)">
            <summary>
            Test if this object is equal to another object
            </summary>
            <param name="obj">Object to test equality with</param>
            <returns>True if this object is equal to another object</returns>
        </member>
        <member name="M:Unity.Entities.AspectType.GetHashCode">
            <summary>
            Get hash code for this AspectType
            </summary>
            <returns>hash code for this AspectType</returns>
        </member>
        <member name="T:Unity.Entities.EntityArchetype">
             <summary>
             An EntityArchetype is a unique combination of component types. The <see cref="T:Unity.Entities.EntityManager"/>
             uses the archetype to group all entities that have the same sets of components.
             </summary>
             <remarks>
             An entity can change archetype fluidly over its lifespan. For example, when you add or
             remove components, the archetype of the affected entity changes.
            
             An archetype object is not a container; rather it is an identifier to each unique combination
             of component types that an application has created at run time, either directly or implicitly.
            
             You can create archetypes directly using <see cref="M:Unity.Entities.EntityManager.CreateArchetype(Unity.Entities.ComponentType[])"/>.
             You also implicitly create archetypes whenever you add or remove a component from an entity. An EntityArchetype
             object is an immutable singleton; creating an archetype with the same set of components, either directly or
             implicitly, results in the same archetype for a given EntityManager.
            
             The ECS framework uses archetypes to group entities that have the same structure together. The ECS framework
             stores component data in blocks of memory called *chunks*. A given chunk stores only entities having the same
             archetype. You can get the EntityArchetype object for a chunk from its <see cref="P:Unity.Entities.ArchetypeChunk.Archetype"/>
             property.
            
             Instead of using new EntityArchetype(), use EntityManager.CreateArchetype() to create EntityArchetype values.
             </remarks>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.Valid">
            <summary>
            Reports whether this EntityArchetype instance references a non-null archetype.
            </summary>
            <value>True, if the archetype is valid.</value>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.op_Equality(Unity.Entities.EntityArchetype,Unity.Entities.EntityArchetype)">
            <summary>
            Compares the archetypes for equality.
            </summary>
            <param name="lhs">A EntityArchetype object.</param>
            <param name="rhs">Another EntityArchetype object.</param>
            <returns>True, if these EntityArchetype instances reference the same archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.op_Inequality(Unity.Entities.EntityArchetype,Unity.Entities.EntityArchetype)">
            <summary>
            Compares the archetypes for inequality.
            </summary>
            <param name="lhs">A EntityArchetype object.</param>
            <param name="rhs">Another EntityArchetype object.</param>
            <returns>True, if these EntityArchetype instances reference different archetypes.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.Equals(System.Object)">
            <summary>
            Reports whether this EntityArchetype references the same archetype as another object.
            </summary>
            <param name="compare">The object to compare.</param>
            <returns>True, if the compare parameter is a EntityArchetype instance that points to the same
            archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.Equals(Unity.Entities.EntityArchetype)">
            <summary>
            Compares archetypes for equality.
            </summary>
            <param name="entityArchetype">The EntityArchetype to compare.</param>
            <returns>Returns true, if both EntityArchetype instances reference the same archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.GetHashCode">
            <summary>
            Returns the hash of the archetype.
            </summary>
            <remarks>Two EntityArchetype instances referencing the same archetype return the same hash.</remarks>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.ToString">
            <summary>
            Construct a string representation of this archetype, for logging or debugging.
            </summary>
            <returns>A string representation of this archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.GetComponentTypes(Unity.Collections.Allocator)">
            <summary>
            Gets the types of the components making up this archetype.
            </summary>
            <remarks>The set of component types in an archetype cannot change; adding components to an entity or
            removing components from an entity changes the archetype of that entity (possibly resulting in the
            creation of a new archetype). The original archetype remains unchanged.</remarks>
            <param name="allocator">The allocation type to use for the returned NativeArray.</param>
            <returns>A native array containing the <see cref="T:Unity.Entities.ComponentType"/> objects of this archetype.</returns>
        </member>
        <member name="M:Unity.Entities.EntityArchetype.CalculateDifference(Unity.Entities.EntityArchetype,Unity.Entities.EntityArchetype,Unity.Entities.TypeIndex*,System.Int32@,Unity.Entities.TypeIndex*,System.Int32@)">
            <summary>
            Calculates the difference between two archetypes.
            Reports what components need to be added to and removed from "before" in order to convert it to "after".
            </summary>
            <param name="before">First archetype</param>
            <param name="after">Second archetype</param>
            <param name="addedTypes">Buffer to hold type indices of types present in "after" but
            not in "before".  Buffer must be large enough to potentially hold all the types present in "after"</param>
            <param name="addedTypesCount">How many types were put into the addedTypes buffer</param>
            <param name="removedTypes">Buffer to hold type indices of types present in "before" but
            not in "after".  Buffer must be large enough to potentially hold all the types present in "before"</param>
            <param name="removedTypesCount">How many types were put into the removedTypes buffer</param>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.TypesCount">
            <summary>
            The number of component types this archetype contains.
            </summary>
            <value>The number of component types.</value>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.ChunkCount">
            <summary>
            The current number of chunks storing entities having this archetype.
            </summary>
            <value>The number of chunks.</value>
            <remarks>This value can change whenever structural changes occur.
            Structural changes include creating or destroying entities, adding components to or removing them from
            an entity, and changing the value of shared components, all of which alter where entities are stored.
            </remarks>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.ChunkCapacity">
            <summary>
            The number of entities having this archetype that can fit into a single chunk of memory.
            </summary>
            <value>Capacity is determined by the fixed, 16KB size of the memory blocks allocated by the ECS framework
            and the total storage size of all the component types in the archetype.</value>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.Prefab">
            <summary>
            Reports whether this EntityArchetype instance describes a Prefab.
            </summary>
            <value>True, if the archetype is a prefab archetype.</value>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.Disabled">
            <summary>
            Reports whether this EntityArchetype instance contains disabled entities.
            </summary>
            <value>True, if the archetype is a disabled archetype.</value>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.StableHash">
            <summary>
            Retrieve the stable hash for this EntityArchetype.
            </summary>
        </member>
        <member name="P:Unity.Entities.EntityArchetype.Types">
            <summary>
            The component types this archetype contains.
            </summary>
        </member>
        <member name="T:Unity.Entities.SystemAPIQueryBuilder">
            <summary>
            Supports construction of queries matching one or multiple archetypes inside `ISystem` and `SystemBase` types.
            All queried components must be known at compile-time.
            </summary>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsentChunkComponent``1">
             <summary>
             Add an absent [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to exclude any entities that have the specified chunk component.
             Chunk components are a distinct component type, which are different from excluding the same type as a
             standard component.
            
             To add additional excluded Chunk Components, call this method multiple times.
             </remarks>
             <typeparam name="T1">Component type to use as an absent Chunk Component</typeparam>
             <returns>This query builder object, to allow chaining multiple method calls.</returns>
             <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``1">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``2">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``3">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``4">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``5">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <typeparam name="T5">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``6">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <typeparam name="T5">Absent component</typeparam>
            <typeparam name="T6">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAbsent``7">
            <summary>
            Specify all read-only component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <typeparam name="T5">Absent component</typeparam>
            <typeparam name="T6">Absent component</typeparam>
            <typeparam name="T7">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``1">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``2">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``3">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <typeparam name="T3">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``4">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <typeparam name="T3">Mandatory disabled component</typeparam>
            <typeparam name="T4">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``5">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <typeparam name="T3">Mandatory disabled component</typeparam>
            <typeparam name="T4">Mandatory disabled component</typeparam>
            <typeparam name="T5">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``6">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <typeparam name="T3">Mandatory disabled component</typeparam>
            <typeparam name="T4">Mandatory disabled component</typeparam>
            <typeparam name="T5">Mandatory disabled component</typeparam>
            <typeparam name="T6">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabled``7">
            <summary>
            Specify all read-only DISABLED component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <typeparam name="T3">Mandatory disabled component</typeparam>
            <typeparam name="T4">Mandatory disabled component</typeparam>
            <typeparam name="T5">Mandatory disabled component</typeparam>
            <typeparam name="T6">Mandatory disabled component</typeparam>
            <typeparam name="T7">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabledRW``1">
            <summary>
            Specify all DISABLED component types (with write access) that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithDisabledRW``2">
            <summary>
            Specify all DISABLED component types (with write access) that must be present.
            </summary>
            <typeparam name="T1">Mandatory disabled component</typeparam>
            <typeparam name="T2">Mandatory disabled component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``1">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``2">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``3">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <typeparam name="T3">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``4">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <typeparam name="T3">Mandatory component</typeparam>
            <typeparam name="T4">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``5">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <typeparam name="T3">Mandatory component</typeparam>
            <typeparam name="T4">Mandatory component</typeparam>
            <typeparam name="T5">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``6">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <typeparam name="T3">Mandatory component</typeparam>
            <typeparam name="T4">Mandatory component</typeparam>
            <typeparam name="T5">Mandatory component</typeparam>
            <typeparam name="T6">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAll``7">
            <summary>
            Specify all read-only component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <typeparam name="T3">Mandatory component</typeparam>
            <typeparam name="T4">Mandatory component</typeparam>
            <typeparam name="T5">Mandatory component</typeparam>
            <typeparam name="T6">Mandatory component</typeparam>
            <typeparam name="T7">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAllRW``1">
            <summary>
            Specify all read-write component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAllRW``2">
            <summary>
            Specify all read-write component types that must be present.
            </summary>
            <typeparam name="T1">Mandatory component</typeparam>
            <typeparam name="T2">Mandatory component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAllChunkComponent``1">
             <summary>
             Add a required [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to find entities that have all the specified chunk components. Chunk
             components are a distinct component type, which are different from adding the same type as a standard
             component.
            
             To add additional required Chunk Components, call this method multiple times.
             </remarks>
            
             <typeparam name="T">Component type to use as a required, read-only Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAllChunkComponentRW``1">
             <summary>
             Add a required [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to find entities that have all the specified chunk components. Chunk
             components are a distinct component type, which are different from adding the same type as a standard
             component.
            
             To add additional required Chunk Components, call this method multiple times.
             </remarks>
            
             <typeparam name="T">Component type to use as a required, read-write Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``1">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``2">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``3">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <typeparam name="T3">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``4">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <typeparam name="T3">Optional component</typeparam>
            <typeparam name="T4">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``5">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <typeparam name="T3">Optional component</typeparam>
            <typeparam name="T4">Optional component</typeparam>
            <typeparam name="T5">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``6">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <typeparam name="T3">Optional component</typeparam>
            <typeparam name="T4">Optional component</typeparam>
            <typeparam name="T5">Optional component</typeparam>
            <typeparam name="T6">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``7">
            <summary>
            Specify optional read-only component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <typeparam name="T3">Optional component</typeparam>
            <typeparam name="T4">Optional component</typeparam>
            <typeparam name="T5">Optional component</typeparam>
            <typeparam name="T6">Optional component</typeparam>
            <typeparam name="T7">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAnyRW``1">
            <summary>
            Specify optional read-write component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAnyRW``2">
            <summary>
            Specify optional read-write component types that must be present.
            </summary>
            <typeparam name="T1">Optional component</typeparam>
            <typeparam name="T2">Optional component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAnyChunkComponent``1">
             <summary>
             Add an optional [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             To match the resulting query, an Entity must have at least one of the query's optional component types,
             specified using either <see cref="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``1"/> or <see cref="M:Unity.Entities.SystemAPIQueryBuilder.WithAnyChunkComponent``1"/>. Chunk components are a distinct component
             type, which are different from adding the same type as a standard component.
            
             Compare this to <see cref="M:Unity.Entities.SystemAPIEntityQueryBuilder.WithAllChunkComponent``1"/>
            
             To add additional optional Chunk Components, call this method multiple times.
            
             </remarks>
             <typeparam name="T">Component type to use as an optional, read-only Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAnyChunkComponentRW``1">
             <summary>
             Add an optional [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             To match the resulting query, an Entity must have at least one of the query's optional component types,
             specified using either <see cref="M:Unity.Entities.SystemAPIQueryBuilder.WithAny``1"/> or <see cref="M:Unity.Entities.SystemAPIQueryBuilder.WithAnyChunkComponent``1"/>. Chunk components are a distinct component
             type, which are different from adding the same type as a standard component.
            
             Compare this to <see cref="M:Unity.Entities.SystemAPIEntityQueryBuilder.WithAllChunkComponent``1"/>
            
             To add additional optional Chunk Components, call this method multiple times.
            
             </remarks>
             <typeparam name="T">Component type to use as an optional, read-write Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``1">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``2">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``3">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``4">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``5">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <typeparam name="T5">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``6">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <typeparam name="T5">Absent component</typeparam>
            <typeparam name="T6">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNone``7">
            <summary>
            Specify component types that must NOT be present.
            </summary>
            <typeparam name="T1">Absent component</typeparam>
            <typeparam name="T2">Absent component</typeparam>
            <typeparam name="T3">Absent component</typeparam>
            <typeparam name="T4">Absent component</typeparam>
            <typeparam name="T5">Absent component</typeparam>
            <typeparam name="T6">Absent component</typeparam>
            <typeparam name="T7">Absent component</typeparam>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithNoneChunkComponent``1">
             <summary>
             Add an excluded [Chunk Component](xref:components-chunk) type to the query.
             </summary>
             <remarks>
             Call this method on the query builder to exclude any entities that have the specified chunk component.
             Chunk components are a distinct component type, which are different from excluding the same type as a
             standard component.
            
             To add additional excluded Chunk Components, call this method multiple times.
            
             </remarks>
             <typeparam name="T">Component type to use as an excluded Chunk Component</typeparam>
             <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAspect``1">
            <summary>
            Add component type requirement for a given aspect.
            </summary>
            <typeparam name="TAspect">The aspect to add to the query</typeparam>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithAspectRO``1">
            <summary>
            Add component type requirement for a given aspect with forced read-only access.
            </summary>
            <typeparam name="TAspect">The aspect to add to the query</typeparam>
            <returns>The builder object that invoked this method.</returns>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.WithOptions(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specify your own `EntityQueryOptions`.
            </summary>
            <remarks>
            This method may not be invoked more than once for each query description.
            Subsequent calls will override previous options, rather than adding to them. Use the bitwise OR operator '|'
            to combine multiple options.
            </remarks>
            <param name="options">The query options</param>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.AddAdditionalQuery">
            <summary>
            Finalize the existing query description. All `.WithXXX()` invocations chained after this method will create a new query description.
            </summary>
            <returns>This query builder object, to allow chaining multiple method calls.</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="M:Unity.Entities.SystemAPIQueryBuilder.Build">
            <summary>
            Get or create an `EntityQuery` matching the query description(s).
            </summary>
            <remarks>If an `EntityQuery` in the containing system's existing cache
            matches the defined query, it gets retrieved. Otherwise, a new `EntityQuery` is created and then added to the containing system's cache.
            </remarks>
            <returns>The query</returns>
            <exception cref="M:Unity.Entities.SystemAPIQueryBuilder.ThrowNotBuildException"></exception>
        </member>
        <member name="T:Unity.Entities.ArchetypeChunk">
            <summary>
            A block of unmanaged memory containing the components for entities sharing the same
            <see cref="P:Unity.Entities.ArchetypeChunk.Archetype"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.Count">
            <summary>
            Returns the number of entities in the chunk.
            </summary>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.ChunkEntityCount">
            <summary>
            The number of entities currently stored in the chunk.
            </summary>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.Capacity">
            <summary>
            The number of entities that can fit in this chunk.
            </summary>
            <remarks>The capacity of a chunk depends on the size of the components making up the
            <see cref="P:Unity.Entities.ArchetypeChunk.Archetype"/> of the entities stored in the chunk.</remarks>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.Full">
            <summary>
            Whether this chunk is exactly full.
            </summary>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.op_Equality(Unity.Entities.ArchetypeChunk,Unity.Entities.ArchetypeChunk)">
            <summary>
            Two ArchetypeChunk instances are equal if they reference the same block of chunk and entity component store memory.
            </summary>
            <param name="lhs">An ArchetypeChunk</param>
            <param name="rhs">Another ArchetypeChunk</param>
            <returns>True, if both ArchetypeChunk instances reference the same memory, or both contain null memory
            references.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.op_Inequality(Unity.Entities.ArchetypeChunk,Unity.Entities.ArchetypeChunk)">
            <summary>
            Two ArchetypeChunk instances are only equal if they reference the same block of chunk and entity component store memory.
            </summary>
            <param name="lhs">An ArchetypeChunk</param>
            <param name="rhs">Another ArchetypeChunk</param>
            <returns>True, if the ArchetypeChunk instances reference different blocks of memory.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Equals(System.Object)">
            <summary>
            Two ArchetypeChunk instances are equal if they reference the same block of chunk memory.
            </summary>
            <param name="compare">An object</param>
            <returns>True if <paramref name="compare"/> is an `ArchetypeChunk` instance that references the same memory,
            or both contain null memory references; otherwise false.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetHashCode">
            <summary>
            Computes a hashcode to support hash-based collections.
            </summary>
            <returns>The computed hash.</returns>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.Archetype">
            <summary>
            The archetype of the entities stored in this chunk.
            </summary>
            <remarks>All entities in a chunk must have the same <see cref="P:Unity.Entities.ArchetypeChunk.Archetype"/>.</remarks>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.SequenceNumber">
            <summary>
            SequenceNumber is a unique number for each chunk, across all worlds.
            </summary>
        </member>
        <member name="P:Unity.Entities.ArchetypeChunk.Null">
            <summary>
            A special "null" ArchetypeChunk that you can use to test whether ArchetypeChunk instances are valid.
            </summary>
            <remarks>An ArchetypeChunk struct that refers to a chunk of memory that has been freed will be equal to
            this "null" ArchetypeChunk instance.</remarks>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Equals(Unity.Entities.ArchetypeChunk)">
            <summary>
            Two ArchetypeChunk instances are equal if they reference the same block of chunk and entity component store memory.
            </summary>
            <param name="archetypeChunk">Another ArchetypeChunk instance</param>
            <returns>True, if both ArchetypeChunk instances reference the same memory or both contain null memory
            references.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.NumSharedComponents">
            <summary>
            The number of shared components in the archetype associated with this chunk.
            </summary>
            <returns>The shared component count.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Invalid">
            <summary>
            Reports whether this ArchetypeChunk instance is invalid.
            </summary>
            <returns>True, if no <see cref="P:Unity.Entities.ArchetypeChunk.Archetype"/> is associated with the this ArchetypeChunk
            instance.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetNativeArray(Unity.Entities.EntityTypeHandle)">
            <summary>
            Provides a native array interface to entity instances stored in this chunk.
            </summary>
            <remarks>The native array returned by this method references existing data, not a copy.</remarks>
            <param name="entityTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityTypeHandle"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <returns>A native array containing the entities in the chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0}@,System.UInt32)">
             <summary>
             Reports whether the data in any of IComponentData components in the chunk, of the type identified by
             <paramref name="typeHandle"/>, could have changed since the specified version.
             </summary>
             <remarks>
             When you access a component in a chunk with write privileges, the ECS framework updates the change version
             of that component type to the current <see cref="P:Unity.Entities.EntityManager.GlobalSystemVersion"/> value. Since every
             system stores the global system version in its <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> field
             when it updates, you can compare these two versions with this function in order to determine whether
             the data of components in this chunk could have changed since the last time that system ran.
            
             Note that for efficiency, the change version applies to whole chunks not individual entities. The change
             version is updated even when another job or system that has declared write access to a component does
             not actually change the component value.</remarks>
             <param name="typeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
             public field you define as part of the job struct.
             </param>
             <param name="version">The version to compare. In a system, this parameter should be set to the
             current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
             scheduled.</param>
             <typeparam name="T">The component type.</typeparam>
             <returns>True, if the version number stored in the chunk for this component is more recent than the version
             passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0},System.UInt32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0}@,System.UInt32)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.
            </param>
            <param name="version">The version to compare. In a system, this parameter should be set to the
            current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
            scheduled.</param>
            <typeparam name="T">The component type.</typeparam>
            <returns>True, if the version number stored in the chunk for this component is more recent than the version
            passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicComponentTypeHandle@,System.UInt32)">
             <summary>
             Reports whether the data in any of IComponentData components in the chunk, of the type identified by
             <paramref name="typeHandle"/>, could have changed since the specified version.
             </summary>
             <remarks>
             When you access a component in a chunk with write privileges, the ECS framework updates the change version
             of that component type to the current <see cref="P:Unity.Entities.EntityManager.GlobalSystemVersion"/> value. Since every
             system stores the global system version in its <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> field
             when it updates, you can compare these two versions with this function in order to determine whether
             the data of components in this chunk could have changed since the last time that system ran.
            
             Note that for efficiency, the change version applies to whole chunks not individual entities. The change
             version is updated even when another job or system that has declared write access to a component does
             not actually change the component value.</remarks>
             <param name="typeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)"/>. Pass the object to a job
             using a public field you define as part of the job struct.
             </param>
             <param name="version">The version to compare. In a system, this parameter should be set to the
             current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
             scheduled.</param>
             <returns>True, if the version number stored in the chunk for this component is more recent than the version
             passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicComponentTypeHandle,System.UInt32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicComponentTypeHandle@,System.UInt32)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)"/>. Pass the object to a job
            using a public field you define as part of the job struct.
            </param>
            <param name="version">The version to compare. In a system, this parameter should be set to the
            current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
            scheduled.</param>
            <returns>True, if the version number stored in the chunk for this component is more recent than the version
            passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.BufferTypeHandle{``0}@,System.UInt32)">
             <summary>
             Reports whether any of the data in dynamic buffer components in the chunk, of the type identified by
             <paramref name="bufferTypeHandle"/>, could have changed since the specified version.
             </summary>
             <remarks>
             When you access a component in a chunk with write privileges, the ECS framework updates the change version
             of that component type to the current <see cref="P:Unity.Entities.EntityManager.GlobalSystemVersion"/> value. Since every
             system stores the global system version in its <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> field
             when it updates, you can compare these two versions with this function in order to determine whether
             the data of components in this chunk could have changed since the last time that system ran.
            
             Note that for efficiency, the change version applies to whole chunks not individual entities. The change
             version is updated even when another job or system that has declared write access to a component does
             not actually change the component value.</remarks>
             <param name="bufferTypeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
             public field you define as part of the job struct.</param>
             <param name="version">The version to compare. In a system, this parameter should be set to the
             current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
             scheduled.</param>
             <typeparam name="T">The data type of the elements in the dynamic buffer.</typeparam>
             <returns>True, if the version number stored in the chunk for this component is more recent than the version
             passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.BufferTypeHandle{``0},System.UInt32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.BufferTypeHandle{``0}@,System.UInt32)"/> instead.
            </summary>
            <param name="bufferTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <param name="version">The version to compare. In a system, this parameter should be set to the
            current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
            scheduled.</param>
            <typeparam name="T">The data type of the elements in the dynamic buffer.</typeparam>
            <returns>True, if the version number stored in the chunk for this component is more recent than the version
            passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.SharedComponentTypeHandle{``0},System.UInt32)">
             <summary>
             Reports whether the value of shared components associated with the chunk, of the type identified by
             <paramref name="chunkSharedComponentData"/>, could have changed since the specified version.
             </summary>
             <remarks>
             Shared components behave differently than other types of components in terms of change versioning because
             changing the value of a shared component can move an entity to a different chunk. If the change results
             in an entity moving to a different chunk, then only the order version is updated (for both the original and
             the receiving chunk). If you change the shared component value for all entities in a chunk at once, the
             change version for that chunk is updated. The order version is unaffected.
            
             Note that for efficiency, the change version applies to whole chunks not individual entities. The change
             version is updated even when another job or system that has declared write access to a component does
             not actually change the component value.</remarks>
             <typeparam name="T">The data type of the shared component.</typeparam>
             <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>. Pass the object to a job
             using a public field you define as part of the job struct.</param>
             <param name="version">The version to compare. In a system, this parameter should be set to the
             current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
             scheduled.</param>
             <returns>True, if the version number stored in the chunk for this component is more recent than the version
             passed to the <paramref name="version"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicSharedComponentTypeHandle@,System.UInt32)">
             <summary>
             Reports whether the value of shared components associated with the chunk, of the type identified by
             <paramref name="typeHandle"/>, could have changed since the specified version.
             </summary>
             <remarks>
             Shared components behave differently than other types of components in terms of change versioning because
             changing the value of a shared component can move an entity to a different chunk. If the change results
             in an entity moving to a different chunk, then only the order version is updated (for both the original and
             the receiving chunk). If you change the shared component value for all entities in a chunk at once, the
             change version for that chunk is updated. The order version is unaffected.
            
             Note that for efficiency, the change version applies to whole chunks not individual entities. The change
             version is updated even when another job or system that has declared write access to a component does
             not actually change the component value.</remarks>
             <param name="typeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
             <param name="version">The version to compare. In a system, this parameter should be set to the
             current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/>.</param>
             <returns>True, if the version number stored in the chunk for this component is more recent than the version
             passed to the <paramref name="version"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicSharedComponentTypeHandle,System.UInt32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.DidChange(Unity.Entities.DynamicSharedComponentTypeHandle@,System.UInt32)"/>
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <param name="version">The version to compare. In a system, this parameter should be set to the
            current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/>.</param>
            <returns>True, if the version number stored in the chunk for this component is more recent than the version
            passed to the <paramref name="version"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.ComponentTypeHandle{``0}@)">
             <summary>
             Gets the change version number assigned to the specified type of component in this chunk.
             </summary>
             <remarks>
             Every time a system accesses components in a chunk, the system updates the change version of any
             component types to which it has write access with the current
             <see cref="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion"/>. (A system updates the version whether or not you
             actually write any component data -- always specify read-only access when possible.)
            
             You can use the change version to filter out entities that have not changed since the last time a system ran.
             Implement change filtering using one of the following:
            
             - [Entities.ForEach.WithChangeFilter(ComponentType)](xref:Unity.Entities.SystemBase.Entities)
             - <see cref="M:Unity.Entities.EntityQuery.AddChangedVersionFilter(Unity.Entities.ComponentType)"/>
             - <see cref="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0}@,System.UInt32)"/> in an <see cref="T:Unity.Entities.IJobChunk"/> job.
            
             Note that change versions are stored at the chunk level. Thus when you use change filtering, the query system
             excludes or includes whole chunks not individual entities.
             </remarks>
             <param name="typeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
             public field you define as part of the job struct.</param>
             <typeparam name="T">The data type of component T.</typeparam>
             <returns>The current version number of the specified component, which is the version set the last time a system
             accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
             a component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.ComponentTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of component T.</typeparam>
            <returns>The current version number of the specified component, which is the version set the last time a system
            accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
            a component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion(Unity.Entities.DynamicComponentTypeHandle@)">
             <summary>
             Gets the change version number assigned to the specified type of component in this chunk.
             </summary>
             <remarks>
             Every time a system accesses components in a chunk, the system updates the change version of any
             component types to which it has write access with the current
             <see cref="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion"/>. (A system updates the version whether or not you
             actually write any component data -- always specify read-only access when possible.)
            
             You can use the change version to filter out entities that have not changed since the last time a system ran.
             Implement change filtering using one of the following:
            
             - [Entities.ForEach.WithChangeFilter(ComponentType)](xref:Unity.Entities.SystemBase.Entities)
             - <see cref="M:Unity.Entities.EntityQuery.AddChangedVersionFilter(Unity.Entities.ComponentType)"/>
             - <see cref="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0}@,System.UInt32)"/> in an <see cref="T:Unity.Entities.IJobChunk"/> job.
            
             Note that change versions are stored at the chunk level. Thus when you use change filtering, the query system
             excludes or includes whole chunks not individual entities.
             </remarks>
             <param name="typeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)"/>. Pass the object to a job using
             a public field you define as part of the job struct.</param>
             <returns>The current version number of the specified component, which is the version set the last time a system
             accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
             a component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion(Unity.Entities.DynamicComponentTypeHandle)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetChangeVersion(Unity.Entities.DynamicComponentTypeHandle@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)"/>. Pass the object to a job using
            a public field you define as part of the job struct.</param>
            <returns>The current version number of the specified component, which is the version set the last time a system
            accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
            a component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.BufferTypeHandle{``0}@)">
             <summary>
             Gets the change version number assigned to the specified type of dynamic buffer component in this chunk.
             </summary>
             <remarks>
             Every time a system accesses components in a chunk, the system updates the change version of any
             component types to which it has write access with the current
             <see cref="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion"/>. (A system updates the version whether or not you
             actually write any component data -- always specify read-only access when possible.)
            
             You can use the change version to filter out entities that have not changed since the last time a system ran.
             Implement change filtering using one of the following:
            
             - [Entities.ForEach.WithChangeFilter(ComponentType)](xref:Unity.Entities.SystemBase.Entities)
             - <see cref="M:Unity.Entities.EntityQuery.AddChangedVersionFilter(Unity.Entities.ComponentType)"/>
             - <see cref="M:Unity.Entities.ArchetypeChunk.DidChange``1(Unity.Entities.ComponentTypeHandle{``0}@,System.UInt32)"/> in an <see cref="T:Unity.Entities.IJobChunk"/> job.
            
             Note that change versions are stored at the chunk level. Thus if you use change filtering, the query system
             excludes or includes whole chunks not individual entities.
             </remarks>
             <param name="bufferTypeHandle">An object containing type and job safety information. To create this
             object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
             public field you define as part of the job struct.</param>
             <typeparam name="T">The data type of component T.</typeparam>
             <returns>The current version number of the specified dynamic buffer type, which is the version set the last time a system
             accessed a buffer component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
             a buffer component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.BufferTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.BufferTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="bufferTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of component T.</typeparam>
            <returns>The current version number of the specified dynamic buffer type, which is the version set the last time a system
            accessed a buffer component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
            a buffer component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion``1(Unity.Entities.SharedComponentTypeHandle{``0})">
            <summary>
            Gets the change version number assigned to the specified type of shared component in this chunk.
            </summary>
            <remarks>
            Shared components behave differently than other types of components in terms of change versioning because
            changing the value of a shared component can move an entity to a different chunk. If the change results
            in an entity moving to a different chunk, then only the order version is updated (for both the original and
            the receiving chunk). If you change the shared component value for all entities in a chunk at once,
            the entities remain in their current chunk. The change version for that chunk is updated and the order
            version is unaffected.
            </remarks>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of shared component T.</typeparam>
            <returns>The current version number of the specified shared component, which is the version set the last time a system
            accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
            a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion(Unity.Entities.DynamicSharedComponentTypeHandle@)">
            <summary>
            Gets the change version number assigned to the specified type of shared component in this chunk.
            </summary>
            <remarks>
            Shared components behave differently than other types of components in terms of change versioning because
            changing the value of a shared component can move an entity to a different chunk. If the change results
            in an entity moving to a different chunk, then only the order version is updated (for both the original and
            the receiving chunk). If you change the shared component value for all entities in a chunk at once,
            the entities remain in their current chunk. The change version for that chunk is updated and the order
            version is unaffected.
            </remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>The current version number of the specified shared component, which is the version set the last time a system
            accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
            a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChangeVersion(Unity.Entities.DynamicSharedComponentTypeHandle)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetChangeVersion(Unity.Entities.DynamicSharedComponentTypeHandle@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>The current version number of the specified shared component, which is the version set the last time a system
            accessed a component of that type in this chunk with write privileges. Returns 0 if the chunk does not contain
            a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.DidOrderChange(System.UInt32)">
            <summary>
            Reports whether a structural change has occured in this chunk since the specified version.
            </summary>
            <remarks>
            Typically, you set the <paramref name="version"/> parameter to the
            <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> of a system to detect whether the order version
            has changed since the last time that system ran.
            </remarks>
            <param name="version">The version number to compare. </param>
            <returns>True, if the order version number has changed since the specified version.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetOrderVersion">
            <summary>
            Gets the order version number assigned to this chunk.
            </summary>
            <remarks>
            Every time you perform a structural change affecting a chunk, the ECS framework updates the order
            version of the chunk to the current <see cref="P:Unity.Entities.ComponentSystemBase.GlobalSystemVersion"/> value.
            Structural changes include adding and removing entities, adding or removing the component of an
            entity, and changing the value of a shared component (except when you change the value for all entities
            in a chunk at the same time).
            </remarks>
            <returns>The current order version of this chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32)">
            <summary>
            Checks whether a given <see cref="T:Unity.Entities.IComponentData"/> is enabled on the specified <see cref="T:Unity.Entities.Entity"/>. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <typeparam name="T">The component type whose enabled status should be checked. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="typeHandle">A type handle for the component type that will be queried.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled. Also returns false if the <typeparamref name="T"/>
            is not present in this chunk.</returns>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0},System.Int32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32)"/> instead.
            </summary>
            <typeparam name="T">The component type whose enabled status should be checked. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="typeHandle">A type handle for the component type that will be queried.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled. Also returns false if the <typeparamref name="T"/>
            is not present in this chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32)">
            <summary>
            Checks whether a given <see cref="T:Unity.Entities.IBufferElementData"/> is enabled on the specified <see cref="T:Unity.Entities.Entity"/>. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <typeparam name="T">The buffer component type whose enabled status should be checked. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="bufferTypeHandle">A type handle for the component type that will be queried.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <returns>True if the specified buffer component is enabled, or false if it is disabled. Also returns false if the <typeparamref name="T"/>
            is not present in this chunk.</returns>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0},System.Int32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32)"/> instead.
            </summary>
            <typeparam name="T">The buffer component type whose enabled status should be checked. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="bufferTypeHandle">A type handle for the component type that will be queried.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <returns>True if the specified buffer component is enabled, or false if it is disabled. Also returns false if the <typeparamref name="T"/>
            is not present in this chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled(Unity.Entities.DynamicComponentTypeHandle@,System.Int32)">
            <summary>
            Checks whether a given <see cref="T:Unity.Entities.IBufferElementData"/> is enabled on the specified <see cref="T:Unity.Entities.Entity"/>. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="typeHandle">A type handle for the component type that will be queried.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <returns>True if the specified buffer component is enabled, or false if it is disabled. Also returns false if the <typeparamref name="T"/>
            is not present in this chunk.</returns>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled(Unity.Entities.DynamicComponentTypeHandle@,System.Int32,System.Boolean)">
            <summary>
            Enable or disable a <see cref="T:Unity.Entities.IComponentData"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation does
            not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <exception cref="T:System.ArgumentException">The target component type is not present in the this chunk.</exception>
            <param name="typeHandle">A type handle for the component type that will be enabled or disabled.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetEnableableBits(Unity.Entities.DynamicComponentTypeHandle@)">
            <summary>
            Gets a copy of all the Enableable bits for the specified type handle.
            </summary>
            <param name="handle">A type handle for the component type whose enabled bits you want to query.</param>
            <returns>A <see cref="T:Unity.Burst.Intrinsics.v128"/> is returned containing a copy of the bitarray.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetEnabledMask``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Provides a ComponentEnabledMask to the component enabled bits in this chunk.
            </summary>
            <typeparam name="T">The component type</typeparam>
            <param name="typeHandle">Type handle for the component type <typeparamref name="T"/>.</param>
            <returns>An <see cref="T:Unity.Entities.EnabledMask"/> instance for component <typeparamref name="T"/> in this chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32,System.Boolean)">
            <summary>
            Enable or disable a <see cref="T:Unity.Entities.IComponentData"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation does
            not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <exception cref="T:System.ArgumentException">The target component type <typeparamref name="T"/> is not present in the this chunk.</exception>
            <typeparam name="T">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="typeHandle">A type handle for the component type that will be enabled or disabled.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0},System.Int32,System.Boolean)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.ComponentTypeHandle{``0}@,System.Int32,System.Boolean)"/> instead.
            </summary>
            <typeparam name="T">The component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="typeHandle">A type handle for the component type that will be enabled or disabled.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose component should be checked.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32,System.Boolean)">
            <summary>
            Enable or disable a <see cref="T:Unity.Entities.IBufferElementData"/> on the specified <see cref="T:Unity.Entities.Entity"/>. This operation does
            not cause a structural change, or affect the value of the component. For the purposes
            of EntityQuery matching, an entity with a disabled component will behave as if it does not have that component.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <exception cref="T:System.ArgumentException">The target component type <typeparamref name="T"/> is not present in the this chunk.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="bufferTypeHandle"/> was created as read-only (in-Editor only, if the Jobs Debugger is enabled.</exception>
            <typeparam name="T">The buffer component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="bufferTypeHandle">A type handle for the buffer component type that will be enabled or disabled.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose buffer component should be checked.</param>
            <param name="value">True if the specified buffer component should be enabled, or false if it should be disabled.</param>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.IsComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0},System.Int32,System.Boolean)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.SetComponentEnabled``1(Unity.Entities.BufferTypeHandle{``0}@,System.Int32,System.Boolean)"/> instead.
            </summary>
            <typeparam name="T">The buffer component type to enable or disable. This type must implement the
            <see cref="T:Unity.Entities.IEnableableComponent"/> interface.</typeparam>
            <param name="bufferTypeHandle">A type handle for the buffer component type that will be enabled or disabled.</param>
            <param name="entityIndexInChunk">The index within this chunk of the entity whose buffer component should be checked.</param>
            <param name="value">True if the specified buffer component should be enabled, or false if it should be disabled.</param>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Gets the value of a chunk component.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <returns>A copy of the chunk component.</returns>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.SetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0}@,``0)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <returns>A copy of the chunk component.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0}@,``0)">
            <summary>
            Sets the value of a chunk component.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <param name="value">A struct of type T containing the new values for the chunk component.</param>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.GetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0}@)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.SetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0},``0)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.SetChunkComponentData``1(Unity.Entities.ComponentTypeHandle{``0}@,``0)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <param name="value">A struct of type T containing the new values for the chunk component.</param>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentIndex``1(Unity.Entities.SharedComponentTypeHandle{``0})">
            <summary>
            Gets the index into the array of unique values for the specified shared component.
            </summary>
            <remarks>
            Because shared components can contain managed types, you can only access the value index of a shared component
            inside a job, not the value itself. The index value indexes the array returned by
            <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0})"/>. If desired, you can create a native
            array that mirrors your unique value list, but which contains only unmanaged, blittable data and pass that
            into an <see cref="T:Unity.Entities.IJobChunk"/> job. The unique value list and a specific index is only valid until a
            structural change occurs.
            </remarks>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>The index value, or -1 if the chunk does not contain a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentIndex(Unity.Entities.DynamicSharedComponentTypeHandle@)">
            <summary>
            Gets the index into the array of unique values for the specified shared component.
            </summary>
            <remarks>
            Because shared components can contain managed types, you can only access the value index of a shared component
            inside a job, not the value itself. The index value indexes the array returned by
            <see cref="M:Unity.Entities.EntityManager.GetAllUniqueSharedComponentsManaged``1(System.Collections.Generic.List{``0})"/>. If desired, you can create a native
            array that mirrors your unique value list, but which contains only unmanaged, blittable data and pass that
            into an <see cref="T:Unity.Entities.IJobChunk"/> job. The unique value list and a specific index is only valid until a
            structural change occurs.
            </remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>The index value, or -1 if the chunk does not contain a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentIndex(Unity.Entities.DynamicSharedComponentTypeHandle)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetSharedComponentIndex(Unity.Entities.DynamicSharedComponentTypeHandle@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>The index value, or -1 if the chunk does not contain a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentData``1(Unity.Entities.SharedComponentTypeHandle{``0},Unity.Entities.EntityManager)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetSharedComponentManaged``1(Unity.Entities.SharedComponentTypeHandle{``0},Unity.Entities.EntityManager)"/> instead.</summary>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>.</param>
            <param name="entityManager">An EntityManager instance.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentManaged``1(Unity.Entities.SharedComponentTypeHandle{``0},Unity.Entities.EntityManager)">
            <summary>
            Gets the current value of a managed shared component.
            </summary>
            <remarks>You can't call this method inside a job.</remarks>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>.</param>
            <param name="entityManager">An EntityManager instance.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentDataUnmanaged``1(Unity.Entities.SharedComponentTypeHandle{``0})">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetSharedComponent``1(Unity.Entities.SharedComponentTypeHandle{``0})"/> instead.</summary>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponent``1(Unity.Entities.SharedComponentTypeHandle{``0},Unity.Entities.EntityManager)">
            <summary>
            Gets the current value of an unmanaged shared component.
            </summary>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>.</param>
            <param name="entityManager">The <see cref="T:Unity.Entities.EntityManager"/> through which the shared component value should be retrieved.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponent``1(Unity.Entities.SharedComponentTypeHandle{``0})">
            <summary>
            Gets the current value of an unmanaged shared component.
            </summary>
            <param name="chunkSharedComponentData">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>.</param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetDynamicSharedComponentDataAddress(Unity.Entities.DynamicSharedComponentTypeHandle@)">
            <summary>
            Provides an unsafe interface to shared components stored in this chunk.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>A pointer to the shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetDynamicSharedComponentDataAddress(Unity.Entities.DynamicSharedComponentTypeHandle)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetDynamicSharedComponentDataAddress(Unity.Entities.DynamicSharedComponentTypeHandle@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>A pointer to the shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentDataBoxed(Unity.Entities.DynamicSharedComponentTypeHandle@,Unity.Entities.EntityManager)">
            <summary>
            Gets the current value of a shared component.
            </summary>
            <remarks>You cannot call this function inside a job.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <param name="entityManager">An EntityManager instance.</param>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetSharedComponentDataBoxed(Unity.Entities.DynamicSharedComponentTypeHandle,Unity.Entities.EntityManager)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetSharedComponentDataBoxed(Unity.Entities.DynamicSharedComponentTypeHandle@,Unity.Entities.EntityManager)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <param name="entityManager">An EntityManager instance.</param>
            <returns>The shared component value.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Reports whether this chunk contains the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components (using
            <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may contain such components and some
            may not. Use this function to determine whether or not the current chunk contains one of these optional
            component types.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.
            </param>
            <typeparam name="T">The data type of the component.</typeparam>
            <returns>True, if this chunk contains an array of the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.ComponentTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.
            </param>
            <typeparam name="T">The data type of the component.</typeparam>
            <returns>True, if this chunk contains an array of the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has``1">
            <summary>
            Reports whether this chunk contains the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components (using
            <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may contain such components and some
            may not. Use this function to determine whether or not the current chunk contains one of these optional
            component types. </remarks>
            <typeparam name="T">The data type of the component.</typeparam>
            <returns>True, if this chunk contains an array of the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has(Unity.Entities.DynamicComponentTypeHandle@)">
            <summary>
            Reports whether this chunk contains the specified component type.
            </summary>
            <param name="typeHandle">Type handle for the component type to query.</param>
            <returns>True, if this chunk contains an array of the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has(Unity.Entities.DynamicComponentTypeHandle)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.Has(Unity.Entities.DynamicComponentTypeHandle@)"/> instead.
            </summary>
            <param name="typeHandle">Type handle for the component type to query.</param>
            <returns>True, if this chunk contains an array of the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.HasChunkComponent``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Reports whether this chunk contains a chunk component of the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components used as chunk
            components (with <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may have these chunk
            components and some may not. Use this function to determine whether or not the current chunk contains one of
            these optional component types as a chunk component.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.
            </param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <returns>True, if this chunk contains a chunk component of the specified type.</returns>
            <seealso cref="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.ComponentTypeHandle{``0}@)"/>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.HasChunkComponent``1(Unity.Entities.ComponentTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.HasChunkComponent``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.
            </param>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <returns>True, if this chunk contains a chunk component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.HasChunkComponent``1">
            <summary>
            Reports whether this chunk contains a chunk component of the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components used as chunk
            components (with <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may have these chunk
            components and some may not. Use this function to determine whether or not the current chunk contains one of
            these optional component types as a chunk component.</remarks>
            <typeparam name="T">The data type of the chunk component.</typeparam>
            <returns>True, if this chunk contains a chunk component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.SharedComponentTypeHandle{``0})">
            <summary>
            Reports whether this chunk contains a shared component of the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components used as shared
            components (with <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may have these shared
            components and some may not. Use this function to determine whether or not the current chunk contains one of
            these optional component types as a shared component.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>. Pass the object to a job
            using a public field you define as part of the job struct.
            </param>
            <typeparam name="T">The data type of the shared component.</typeparam>
            <returns>True, if this chunk contains a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has(Unity.Entities.DynamicSharedComponentTypeHandle@)">
            <summary>
            Reports whether this chunk contains a shared component of the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components used as shared
            components (with <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may have these shared
            components and some may not. Use this function to determine whether or not the current chunk contains one of
            these optional component types as a shared component.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>True, if this chunk contains a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has(Unity.Entities.DynamicSharedComponentTypeHandle)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.Has(Unity.Entities.DynamicSharedComponentTypeHandle@)"/> instead.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional components used as shared
            components (with <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may have these shared
            components and some may not. Use this function to determine whether or not the current chunk contains one of
            these optional component types as a shared component.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>.</param>
            <returns>True, if this chunk contains a shared component of the specified type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.BufferTypeHandle{``0}@)">
            <summary>
            Reports whether this chunk contains a dynamic buffer containing the specified component type.
            </summary>
            <remarks>When an <see cref="T:Unity.Entities.EntityQuery"/> includes optional dynamic buffer types
            (with <see cref="M:Unity.Entities.EntityQueryBuilder.WithAny``1"/>), some chunks returned by the query may have these dynamic buffers
            components and some may not. Use this function to determine whether or not the current chunk contains one of
            these optional dynamic buffers.</remarks>
            <param name="bufferTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component stored in the dynamic buffer.</typeparam>
            <returns>True, if this chunk contains an array of the dynamic buffers containing the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.BufferTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.Has``1(Unity.Entities.BufferTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="bufferTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component stored in the dynamic buffer.</typeparam>
            <returns>True, if this chunk contains an array of the dynamic buffers containing the specified component type.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetNativeArray``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Provides a native array interface to components stored in this chunk.
            </summary>
            <remarks>The native array returned by this method references existing data, not a copy.</remarks>
            <remarks>For raw unsafe access to a chunk's component data, see <see cref="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRO``1(Unity.Entities.ComponentTypeHandle{``0}@)"/>
            and <see cref="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRW``1(Unity.Entities.ComponentTypeHandle{``0}@)"/>.</remarks>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <exception cref="T:System.ArgumentException">If you call this function on a "tag" component type (which is an empty
            component with no fields).</exception>
            <returns>A native array containing the components in the chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetNativeArray``1(Unity.Entities.ComponentTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetNativeArray``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <returns>A native array containing the components in the chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetEntityDataPtrRO(Unity.Entities.EntityTypeHandle)">
            <summary>
            Provides an unsafe read-only interface to array of Entities stored in this chunk.
            </summary>
            <param name="entityTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityTypeHandle"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <returns>A pointer to the component data stored in the chunk.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRO``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Provides an unsafe read-only interface to components stored in this chunk.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <exception cref="T:System.ArgumentException">If you call this function on a "tag" component type (which is an empty
            component with no fields).</exception>
            <returns>A pointer to the component data stored in the chunk. Returns null if the chunk's archetype does not include
            component type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRW``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Provides an unsafe read/write interface to components stored in this chunk.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <exception cref="T:System.ArgumentException">If you call this function on a "tag" component type (which is an empty
            component with no fields).</exception>
            <exception cref="T:System.InvalidOperationException">If the provided type handle is read-only.</exception>
            <returns>A pointer to the component data stored in the chunk. Returns null if the chunk's archetype does not include
            component type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetRequiredComponentDataPtrRO``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Provides an unsafe read-only interface to components stored in this chunk. This variant assumes that the
            component is present in the chunk; use <see cref="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRO``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> in cases where the caller
            can't guarantee this.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <exception cref="T:System.ArgumentException">If you call this function on a "tag" component type (which is an empty
            component with no fields).</exception>
            <returns>A pointer to the component data stored in the chunk. Results are undefined if the chunk's archetype
            does not include component type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetRequiredComponentDataPtrRW``1(Unity.Entities.ComponentTypeHandle{``0}@)">
            <summary>
            Provides an unsafe read/write interface to components stored in this chunk. This variant assumes that the
            component is present in the chunk; use <see cref="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRW``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> in cases where the caller
            can't guarantee this.
            </summary>
            <param name="typeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. Pass the object to a job
            using a public field you define as part of the job struct.</param>
            <typeparam name="T">The data type of the component.</typeparam>
            <exception cref="T:System.ArgumentException">If you call this function on a "tag" component type (which is an empty
            component with no fields).</exception>
            <exception cref="T:System.InvalidOperationException">If the provided type handle is read-only.</exception>
            <returns>A pointer to the component data stored in the chunk. Returns null if the chunk's archetype does not include
            component type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetDynamicComponentDataArrayReinterpret``1(Unity.Entities.DynamicComponentTypeHandle@,System.Int32)">
            <summary>
            Construct a NativeArray view of a chunk's component data.
            </summary>
            <param name="typeHandle">Type handle for the target component type</param>
            <param name="expectedTypeSize">The expected size (in bytes) of the target component type. It is an error to
            pass a size that does not match the target type's actual size.</param>
            <typeparam name="T">The target component type</typeparam>
            <returns>A NativeArray which aliases the chunk's component value array for type <typeparamref name="T"/>.
            The array does not own this data, and does not need to be disposed when it goes out of scope.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <typeparamref name="T"/> is an <see cref="T:Unity.Entities.IBufferElementData"/>. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetBufferAccessor``1(Unity.Entities.BufferTypeHandle{``0}@)"/> instead.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="expectedTypeSize"/> does not match the actual size of <typeparamref name="T"/>,
            or if the data may not be safely aliased due to size constraints.</exception>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetDynamicComponentDataArrayReinterpret``1(Unity.Entities.DynamicComponentTypeHandle,System.Int32)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetDynamicComponentDataArrayReinterpret``1(Unity.Entities.DynamicComponentTypeHandle@,System.Int32)"/> instead.
            </summary>
            <param name="typeHandle">Type handle for the target component type</param>
            <param name="expectedTypeSize">The expected size (in bytes) of the target component type. It is an error to
            pass a size that does not match the target type's actual size.</param>
            <typeparam name="T">The target component type</typeparam>
            <returns>A NativeArray which aliases the chunk's component value array for type <typeparamref name="T"/>.
            The array does not own this data, and does not need to be disposed when it goes out of scope.</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetManagedComponentAccessor``1(Unity.Entities.ComponentTypeHandle{``0}@,Unity.Entities.EntityManager)">
            <summary>
            Provides access to a chunk's array of component values for a specific managed component type.
            </summary>
            <param name="typeHandle">The type handle for the target component type.</param>
            <param name="manager">The EntityManager which owns this chunk.</param>
            <typeparam name="T">The target component type</typeparam>
            <returns>An interface to this chunk's component values for type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetManagedComponentAccessor``1(Unity.Entities.ComponentTypeHandle{``0},Unity.Entities.EntityManager)">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetManagedComponentAccessor``1(Unity.Entities.ComponentTypeHandle{``0}@,Unity.Entities.EntityManager)"/> instead.
            </summary>
            <param name="typeHandle">The type handle for the target component type.</param>
            <param name="manager">The EntityManager which owns this chunk.</param>
            <typeparam name="T">The target component type</typeparam>
            <returns>An interface to this chunk's component values for type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetBufferAccessor``1(Unity.Entities.BufferTypeHandle{``0}@)">
            <summary>
            Provides access to a chunk's array of component values for a specific buffer component type.
            </summary>
            <param name="bufferTypeHandle">The type handle for the target component type.</param>
            <typeparam name="T">The target component type, which must inherit <see cref="T:Unity.Entities.IBufferElementData"/>.</typeparam>
            <returns>An interface to this chunk's component values for type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetBufferAccessor``1(Unity.Entities.BufferTypeHandle{``0})">
            <summary>
            Obsolete. Use <see cref="M:Unity.Entities.ArchetypeChunk.GetBufferAccessor``1(Unity.Entities.BufferTypeHandle{``0}@)"/> instead.
            </summary>
            <param name="bufferTypeHandle">The type handle for the target component type.</param>
            <typeparam name="T">The target component type, which must inherit <see cref="T:Unity.Entities.IBufferElementData"/>.</typeparam>
            <returns>An interface to this chunk's component values for type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunk.GetUntypedBufferAccessor(Unity.Entities.DynamicComponentTypeHandle@)">
            <summary>
            Give unsafe access to the buffers with type <paramref name="chunkBufferTypeHandle"/> in the chunk.
            </summary>
            <param name="chunkBufferTypeHandle">An object containing type and job safety information. To create this
            object, call <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. Pass the object to a job using a
            public field you define as part of the job struct.</param>
            <returns>An interface to this chunk's component values for the target buffer component type.</returns>
        </member>
        <member name="T:Unity.Entities.ChunkHeader">
            <summary>
            Wrapper around the header data for a specific chunk
            </summary>
        </member>
        <member name="F:Unity.Entities.ChunkHeader.ArchetypeChunk">
            <summary>
            Summary of the current chunk.
            </summary>
        </member>
        <member name="P:Unity.Entities.ChunkHeader.Null">
            <summary>
            Constructs a ChunkHeader representing an empty chunk.
            </summary>
        </member>
        <member name="T:Unity.Entities.BufferAccessor`1">
            <summary>
            Interface to a chunk's array of component values for a buffer component type
            </summary>
            <typeparam name="T">Buffer component type.</typeparam>
        </member>
        <member name="P:Unity.Entities.BufferAccessor`1.Length">
            <summary>
            The number of buffer elements
            </summary>
        </member>
        <member name="P:Unity.Entities.BufferAccessor`1.IsReadOnly">
            <summary>
            Reports whether this type handle was created in read-only mode.
            </summary>
        </member>
        <member name="P:Unity.Entities.BufferAccessor`1.Item(System.Int32)">
            <summary>
            Look up the <see cref="T:Unity.Entities.DynamicBuffer`1"/> value at a specific array index within the chunk.
            </summary>
            <param name="index">The index of the entity within the chunk whose value for <typeparamref name="T"/> should be returned.</param>
            <returns>The <see cref="T:Unity.Entities.DynamicBuffer`1"/> value at a specific array index within the chunk</returns>
        </member>
        <member name="M:Unity.Entities.BufferAccessor`1.ToFixedString">
            <summary>
            Returns the formatted FixedString "BufferAccessor[type_name_here]".
            </summary>
            <returns>Returns the formatted FixedString "BufferAccessor[type_name_here]".</returns>
        </member>
        <member name="M:Unity.Entities.ArchetypeChunkArray.TotalEntityCountInChunksIgnoreFiltering(Unity.Collections.NativeArray{Unity.Entities.ArchetypeChunk})">
            <summary>
            Helper function to compute the total number of entities in an array of chunks
            </summary>
            <param name="chunks">The array of chunks</param>
            <returns>This count ignores enableable components; it's just the raw chunk count for all chunks in the array.</returns>
        </member>
        <member name="T:Unity.Entities.ComponentTypeHandle`1">
             <summary>
             A handle to a specific component type, used to access an <see cref="T:Unity.Entities.ArchetypeChunk"/>'s component data in a job.
             </summary>
             <remarks>
             Passing a type handle to a job automatically registers the job as a reader
             or writer of that type, which allows the DOTS safety system to detect potential race conditions between concurrent
             jobs which access the same component type.
            
             To create a ComponentTypeHandle, use <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/>. While type handles
             can be created just in time before they're used, it is more efficient to create them once during system creation,
             cache them in a private field on the system, and incrementally update them with
             <see cref="M:Unity.Entities.ComponentTypeHandle`1.Update(Unity.Entities.SystemState@)"/> just before use.
            
             If the component type is not known at compile time, use <seealso cref="T:Unity.Entities.DynamicComponentTypeHandle"/>.
             </remarks>
             <typeparam name="T">The component type</typeparam>
        </member>
        <member name="P:Unity.Entities.ComponentTypeHandle`1.GlobalSystemVersion">
            <summary>The global system version for which this handle is valid.</summary>
            <remarks>Attempting to use this type handle with a different
            system version indicates that the handle is no longer valid; use the <see cref="M:Unity.Entities.ComponentTypeHandle`1.Update(Unity.Entities.SystemBase)"/>
            method to incrementally update the version just before use.
            </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentTypeHandle`1.IsReadOnly">
            <summary>
            Reports whether this type handle was created in read-only mode.
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentTypeHandle`1.IsZeroSized">
            <summary>
            Reports whether this type will consume chunk space when used in an archetype.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHandle`1.Update(Unity.Entities.SystemState@)">
            <summary>
            When a ComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="state">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHandle`1.Update(Unity.Entities.SystemBase)">
            <summary>
            When a ComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.ComponentTypeHandle`1.ToFixedString">
            <summary>
            Returns the formatted FixedString "ComponentTypeHandle[type_name_here]".
            </summary>
            <returns>Returns the formatted FixedString "ComponentTypeHandle[type_name_here]".</returns>
        </member>
        <member name="T:Unity.Entities.DynamicComponentTypeHandle">
             <summary>
             A handle to a specific component type, used to access an <see cref="T:Unity.Entities.ArchetypeChunk"/>'s component data in a job.
             </summary>
             <remarks>
             Passing a type handle to a job automatically registers the job as a reader or writer of that type, which allows
             the DOTS safety system to detect potential race conditions between concurrent jobs which access the same component type.
            
             To create a DynamicComponentTypeHandle, use <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicComponentTypeHandle(Unity.Entities.ComponentType)"/>. While type handles
             can be created just in time before they're used, it is more efficient to create them once during system creation,
             cache them in a private field on the system, and incrementally update them with
             <see cref="M:Unity.Entities.DynamicComponentTypeHandle.Update(Unity.Entities.SystemBase)"/> just before use.
            
             If the component type is known at compile time, use <seealso cref="T:Unity.Entities.ComponentTypeHandle`1"/>.
             </remarks>
        </member>
        <member name="P:Unity.Entities.DynamicComponentTypeHandle.GlobalSystemVersion">
            <summary>The global system version for which this handle is valid.</summary>
            <remarks>Attempting to use this type handle with a different
            system version indicates that the handle is no longer valid; use the <see cref="M:Unity.Entities.DynamicComponentTypeHandle.Update(Unity.Entities.SystemBase)"/>
            method to incrementally update the version just before use.
            </remarks>
        </member>
        <member name="P:Unity.Entities.DynamicComponentTypeHandle.IsReadOnly">
            <summary>
            Reports whether this type handle was created in read-only mode.
            </summary>
        </member>
        <member name="P:Unity.Entities.DynamicComponentTypeHandle.IsZeroSized">
            <summary>
            Reports whether this type will consume chunk space when used in an archetype.
            </summary>
        </member>
        <member name="M:Unity.Entities.DynamicComponentTypeHandle.Update(Unity.Entities.SystemBase)">
            <summary>
            When a DynamicComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.DynamicComponentTypeHandle.Update(Unity.Entities.SystemState@)">
            <summary>
            When a DynamicComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="state">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.DynamicComponentTypeHandle.ToFixedString">
            <summary>
            Returns the formatted FixedString "DynamicComponentTypeHandle[type_name_here]".
            </summary>
            <returns>Returns the formatted FixedString "DynamicComponentTypeHandle[type_name_here]".</returns>
        </member>
        <member name="M:Unity.Entities.DynamicComponentTypeHandle.CopyToReadOnly">
            <summary>
            API that allows user-code to fetch chunk component data as read-only (to avoid bumping change versions when unnecessary).
            </summary>
            <remarks>Note: This API is one-way. Making a RO DCTH RW is invalid due to job safety.</remarks>
            <returns>A RO version of this RW DCTH.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.InvalidOperationException">If the DCTH is already read-only.</exception>
        </member>
        <member name="T:Unity.Entities.BufferTypeHandle`1">
             <summary>
             A handle to a specific buffer component type, used to access an <see cref="T:Unity.Entities.ArchetypeChunk"/>'s component data in a job.
             </summary>
             <remarks>
             Passing a type handle to a job automatically registers the job as a reader or writer of that type, which allows
             the DOTS safety system to detect potential race conditions between concurrent jobs which access the same component type.
            
             To create a BufferTypeHandle, use <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferTypeHandle``1(System.Boolean)"/>. While type handles
             can be created just in time before they're used, it is more efficient to create them once during system creation,
             cache them in a private field on the system, and incrementally update them with
             <see cref="M:Unity.Entities.BufferTypeHandle`1.Update(Unity.Entities.SystemBase)"/> just before use.
            
             If the component type is not known at compile time, use <seealso cref="T:Unity.Entities.DynamicComponentTypeHandle"/>.
             </remarks>
             <typeparam name="T">The buffer element type</typeparam>
        </member>
        <member name="P:Unity.Entities.BufferTypeHandle`1.GlobalSystemVersion">
            <summary>The global system version for which this handle is valid.</summary>
            <remarks>Attempting to use this type handle with a different
            system version indicates that the handle is no longer valid; use the <see cref="M:Unity.Entities.BufferTypeHandle`1.Update(Unity.Entities.SystemBase)"/>
            method to incrementally update the version just before use.
            </remarks>
        </member>
        <member name="P:Unity.Entities.BufferTypeHandle`1.IsReadOnly">
            <summary>
            Reports whether this type handle was created in read-only mode.
            </summary>
        </member>
        <member name="M:Unity.Entities.BufferTypeHandle`1.Update(Unity.Entities.SystemBase)">
            <summary>
            When a BufferTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.BufferTypeHandle`1.Update(Unity.Entities.SystemState@)">
            <summary>
            When a BufferTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="state">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.BufferTypeHandle`1.ToFixedString">
            <summary>
            Returns the formatted FixedString "BufferTypeHandle[type_name_here]".
            </summary>
            <returns>Returns the formatted FixedString "BufferTypeHandle[type_name_here]".</returns>
        </member>
        <member name="T:Unity.Entities.SharedComponentTypeHandle`1">
             <summary>
             A handle to a specific shared component type, used to access an <see cref="T:Unity.Entities.ArchetypeChunk"/>'s component data in a job.
             </summary>
             <remarks>
             Passing a type handle to a job automatically registers the job as a reader or writer of that type, which allows
             the DOTS safety system to detect potential race conditions between concurrent jobs which access the same component type.
            
             To create a SharedComponentTypeHandle, use <see cref="M:Unity.Entities.ComponentSystemBase.GetSharedComponentTypeHandle``1"/>. While type handles
             can be created just in time before they're used, it is more efficient to create them once during system creation,
             cache them in a private field on the system, and incrementally update them with
             <see cref="M:Unity.Entities.SharedComponentTypeHandle`1.Update(Unity.Entities.SystemBase)"/> just before use.
            
             If the component type is not known at compile time, use <seealso cref="T:Unity.Entities.DynamicSharedComponentTypeHandle"/>.
             </remarks>
             <typeparam name="T">Shared component type.</typeparam>
        </member>
        <member name="M:Unity.Entities.SharedComponentTypeHandle`1.Update(Unity.Entities.SystemBase)">
            <summary>
            When a SharedComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.SharedComponentTypeHandle`1.Update(Unity.Entities.SystemState@)">
            <summary>
            When a SharedComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="state">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.SharedComponentTypeHandle`1.ToFixedString">
            <summary>
            Returns the formatted FixedString "SharedComponentTypeHandle[type_name_here]".
            </summary>
            <returns>Returns the formatted FixedString "SharedComponentTypeHandle[type_name_here]".</returns>
        </member>
        <member name="T:Unity.Entities.DynamicSharedComponentTypeHandle">
             <summary>
             A handle to a specific shared component type, used to access an <see cref="T:Unity.Entities.ArchetypeChunk"/>'s component data in a job.
             </summary>
             <remarks>
             Passing a type handle to a job automatically registers the job as a reader or writer of that type, which allows
             the DOTS safety system to detect potential race conditions between concurrent jobs which access the same component type.
            
             To create a DynamicSharedComponentTypeHandle, use <see cref="M:Unity.Entities.ComponentSystemBase.GetDynamicSharedComponentTypeHandle(Unity.Entities.ComponentType)"/>. While type handles
             can be created just in time before they're used, it is more efficient to create them once during system creation,
             cache them in a private field on the system, and incrementally update them with
             <see cref="M:Unity.Entities.DynamicSharedComponentTypeHandle.Update(Unity.Entities.SystemBase)"/> just before use.
            
             If the component type is known at compile time, use <seealso cref="T:Unity.Entities.SharedComponentTypeHandle`1"/>.
             </remarks>
        </member>
        <member name="M:Unity.Entities.DynamicSharedComponentTypeHandle.Update(Unity.Entities.SystemBase)">
            <summary>
            When a DynamicSharedComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.DynamicSharedComponentTypeHandle.Update(Unity.Entities.SystemState@)">
            <summary>
            When a DynamicSharedComponentTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="state">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.DynamicSharedComponentTypeHandle.ToFixedString">
            <summary>
            Returns the formatted FixedString "DynamicSharedComponentTypeHandle[type_name_here]".
            </summary>
            <returns>Returns the formatted FixedString "DynamicSharedComponentTypeHandle[type_name_here]".</returns>
        </member>
        <member name="T:Unity.Entities.EntityTypeHandle">
             <summary>
             A handle to the <see cref="T:Unity.Entities.Entity"/> component type, used to access an <see cref="T:Unity.Entities.ArchetypeChunk"/>'s entities in a job.
             </summary>
             <remarks>
             Passing a type handle to a job automatically registers the job as a reader or writer of that type, which allows
             the DOTS safety system to detect potential race conditions between concurrent jobs which access the same component type.
            
             To create a EntityTypeHandle, use <see cref="M:Unity.Entities.ComponentSystemBase.GetEntityTypeHandle"/>. While type handles
             can be created just in time before they're used, it is more efficient to create them once during system creation,
             cache them in a private field on the system, and incrementally update them with
             <see cref="M:Unity.Entities.EntityTypeHandle.Update(Unity.Entities.SystemBase)"/> just before use.
             </remarks>
        </member>
        <member name="M:Unity.Entities.EntityTypeHandle.Update(Unity.Entities.SystemBase)">
            <summary>
            When a EntityTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.EntityTypeHandle.Update(Unity.Entities.SystemState@)">
            <summary>
            When a EntityTypeHandle is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="state">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.EntityTypeHandle.ToFixedString">
            <summary>
            Returns "EntityTypeHandle".
            </summary>
            <returns>Returns "EntityTypeHandle".</returns>
        </member>
        <member name="T:Unity.Entities.ManagedComponentAccessor`1">
            <summary>
            Interface to a chunk's array of component values for managed component type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target component type</typeparam>
        </member>
        <member name="P:Unity.Entities.ManagedComponentAccessor`1.Item(System.Int32)">
            <summary>
            Access an element by index
            </summary>
            <param name="index">The array index of the buffer to query</param>
            <returns>The value of component <typeparamref name="T"/> at array index <paramref name="index"/></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="index"/> is out of range</exception>
        </member>
        <member name="P:Unity.Entities.ManagedComponentAccessor`1.Length">
            <summary>
            The number of elements in this accessor
            </summary>
        </member>
        <member name="M:Unity.Entities.ManagedComponentAccessor`1.ToString">
            <summary>
            Returns the formatted string "ManagedComponentAccessor[type_name_here]".
            </summary>
            <returns>Returns the formatted string "ManagedComponentAccessor[type_name_here]".</returns>
        </member>
        <member name="T:Unity.Entities.FastEquality">
            <summary>
            Utility to look up equality and hashcode functions for component types.
            </summary>
            <remarks>The TypeManager uses this type internally and you shouldn't need to create or directly use
            this in the majority of use cases. When possible, a Burst-compilable implementation is preferred,
            but if an IEquatable{T} method isn't marked as Burst compiled, the managed
            version is used instead.</remarks>
        </member>
        <member name="T:Unity.Entities.FastEquality.TypeInfo">
            <summary>
            Type holding one component's Equals and GetHashCode implementations as well as the size
            of the underlying unmanaged component type
            </summary>
        </member>
        <member name="T:Unity.Entities.FastEquality.TypeInfo.CompareEqualDelegate">
            <summary>
            Equals method delegate for comparing two component instances whose type is not known at compile time.
            </summary>
        </member>
        <member name="T:Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegate">
            <summary>
            GetHashCode method delegate for hashing a component whose type is not known at compile time.
            </summary>
        </member>
        <member name="T:Unity.Entities.FastEquality.TypeInfo.ManagedCompareEqualDelegate">
            <summary>
            Equals method delegate for comparing two managed components.
            </summary>
        </member>
        <member name="T:Unity.Entities.FastEquality.TypeInfo.ManagedGetHashCodeDelegate">
            <summary>
            GetHashCode method delegate for hashing a managed component.
            </summary>
        </member>
        <member name="F:Unity.Entities.FastEquality.TypeInfo.EqualsDelegateIndex">
            <summary>
            Holds the index for the Equals delegate to use when comparing two instances of a component.
            </summary>
        </member>
        <member name="F:Unity.Entities.FastEquality.TypeInfo.GetHashCodeDelegateIndex">
            <summary>
            Holds the index for the GetHashCode delegate to use for a component.
            </summary>
        </member>
        <member name="P:Unity.Entities.FastEquality.TypeInfo.Null">
            <summary>
            Represents an invalid TypeInfo instance.
            </summary>
        </member>
        <member name="M:Unity.Entities.FastEquality.ManagedGetHashCode(System.Object,Unity.Entities.FastEquality.TypeInfo)">
            <summary>
            Returns the hash code for a managed component. Internally, this is exclusively used for managed shared
            components.
            </summary>
            <param name="lhs">Boxed managed component.</param>
            <param name="typeInfo">TypeInfo to provide the GetHashCode method to invoke.</param>
            <returns>Hash code of the managed component</returns>
        </member>
        <member name="M:Unity.Entities.FastEquality.ManagedEquals(System.Object,System.Object,Unity.Entities.FastEquality.TypeInfo)">
            <summary>
            Compares two managed component types.
            </summary>
            <param name="lhs">Component on the left-side of the comparison.</param>
            <param name="rhs">Component on the right-side of the comparison.</param>
            <param name="typeInfo">TypeInfo to provide the Equals method to invoke.</param>
            <returns>Returns true if the components are equal. False otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.FastEquality.Equals(System.Void*,System.Void*,Unity.Entities.FastEquality.TypeInfo@)">
            <summary>
            Compares two component types.
            </summary>
            <param name="lhsPtr">Pointer to the component on the left-side of the comparison.</param>
            <param name="rhsPtr">Pointer to the component on the right-side of the comparison.</param>
            <param name="typeInfo">TypeInfo to provide the Equals method to invoke.</param>
            <returns>Returns true if the components are equal. False otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.FastEquality.AddExtraAOTTypes(System.Type,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Internal method used for populating closed forms of generic equality methods to ensure IL2CPP
            can generate transpiled implementations and ensure they are not-stripped from builds.
            </summary>
            <param name="type">Type to close</param>
            <param name="output">Set of fully qualified closed generic type names to preserve</param>
        </member>
        <member name="T:Unity.Entities.GenerateBurstMonoInteropAttribute">
            <summary>
            Attribute used to signal this type should be scanned for <see cref="T:Unity.Entities.BurstMonoInteropMethodAttribute"/> decorated methods.
            </summary>
        </member>
        <member name="P:Unity.Entities.GenerateBurstMonoInteropAttribute.AssetName">
            <summary>
            Name of source file (without the .cs suffix) to generate interop code for. 
            </summary>
            <remarks> The interop file is placed beside this file in a `*.interop.gen.cs` file.
            </remarks>
        </member>
        <member name="M:Unity.Entities.GenerateBurstMonoInteropAttribute.#ctor(System.String)">
            <summary>
            <see cref="P:Unity.Entities.GenerateBurstMonoInteropAttribute.AssetName"/>
            </summary>
            <param name="assetName">Name of source file (without the .cs suffix) to generate interop code for.</param>
        </member>
        <member name="T:Unity.Entities.BurstMonoInteropMethodAttribute">
            <summary>
            Attribute that indicates that a method should have Burst to mono interop code generated.
            </summary>
            <remarks>
            Methods decorated with this attribute must be in a type also decorated with <see cref="T:Unity.Entities.GenerateBurstMonoInteropAttribute"/>.
            </remarks>
        </member>
        <member name="F:Unity.Entities.BurstMonoInteropMethodAttribute.MakePublic">
            <summary>
            If set, the generated method will be exposed as public. Otherwise it will have the same access modifier as
            the original method.
            </summary>
        </member>
        <member name="M:Unity.Entities.BurstMonoInteropMethodAttribute.#ctor(System.Boolean)">
            <summary>
            <see cref="F:Unity.Entities.BurstMonoInteropMethodAttribute.MakePublic"/>
            </summary>
            <param name="makePublic">If set, the generated method will be exposed as public</param>
        </member>
        <member name="T:Unity.Entities.Hash128">
            <summary>
            A 128 bit hash, for cases where 32 or 64 bits are insufficient. Built on top of Unity.Mathematics types
            that will Burst-compile to SIMD instructions, for efficiency comparable to a 32-bit hash.
            </summary>
        </member>
        <member name="F:Unity.Entities.Hash128.Value">
            <summary>
            The 128-bit hash value, as four consecutive 32-bit unsigned integers.
            </summary>
        </member>
        <member name="M:Unity.Entities.Hash128.#ctor(Unity.Mathematics.uint4)">
            <summary>
            Construct a hash from a 128-bit input value.
            </summary>
            <param name="value">Value to hash.</param>
        </member>
        <member name="M:Unity.Entities.Hash128.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Construct a hash from four 32-bit input values.
            </summary>
            <param name="x">Value to hash.</param>
            <param name="y">Value to hash.</param>
            <param name="z">Value to hash.</param>
            <param name="w">Value to hash.</param>
        </member>
        <member name="M:Unity.Entities.Hash128.#ctor(System.String)">
            <summary>
            Construct a hash from a 32 character hex string
            </summary>
            <remarks>
            If the given string has the incorrect length or contains non-hex characters the Value will be all 0
            </remarks>
            <param name="value">32 character hex string.</param>
        </member>
        <member name="M:Unity.Entities.Hash128.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a hash from a 32 character hex string
            If the string has the incorrect length or non-hex characters the Value will be all 0
            </summary>
            <param name="value">32 character hex string.</param>
            <param name="guidFormatted">True, if the string value is formatted as a UnityEngine.GUID</param>
        </member>
        <member name="M:Unity.Entities.Hash128.ToString">
            <summary>
            Convert a Hash128 to a 32-character UTF-16 string of hexadecimal symbols.
            </summary>
            <returns>Returns the 32-character UTF-16 string of hexadecimal symbols.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_Equality(Unity.Entities.Hash128,Unity.Entities.Hash128)">
            <summary>
            Compares two hashes for equality.
            </summary>
            <param name="obj1">The first hash to compare.</param>
            <param name="obj2">The second hash to compare.</param>
            <returns>Whether the two hashes are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_Inequality(Unity.Entities.Hash128,Unity.Entities.Hash128)">
            <summary>
            Compares two hashes for inequality.
            </summary>
            <param name="obj1">The first hash to compare.</param>
            <param name="obj2">The second hash to compare.</param>
            <returns>Whether the two hashes are unequal.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.Equals(Unity.Entities.Hash128)">
            <summary>
            Determines whether a hash is equal to this hash.
            </summary>
            <param name="obj">The hash to compare with this hash.</param>
            <returns>Whether the two hashes are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.Equals(System.Object)">
            <summary>
            Determines whether some object is equal to this hash.
            </summary>
            <param name="obj">The object to compare with this one.</param>
            <returns>Whether the two hashes are equal.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_LessThan(Unity.Entities.Hash128,Unity.Entities.Hash128)">
            <summary>
            Determines whether one hash's value is less than another hash's value
            </summary>
            <param name="a">The first hash to compare.</param>
            <param name="b">The second hash to compare.</param>
            <returns>Whether the first hash is less than the second hash, or not.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_GreaterThan(Unity.Entities.Hash128,Unity.Entities.Hash128)">
            <summary>
            Determines whether one hash's value is greater than another hash's value
            </summary>
            <param name="a">The first hash to compare.</param>
            <param name="b">The second hash to compare.</param>
            <returns>Whether the first hash is greater than the second hash, or not.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.CompareTo(Unity.Entities.Hash128)">
            <summary>
            Compares this hash's value to another hash's, and returns an integer that is negative
            if this hash's value is less, 0 if the same, or positive if more than the other hash.
            </summary>
            <param name="other">The hash to compare to this hash.</param>
            <returns>
            a negative number, if this hash's value is less than the other hash's.
            zero, if the hash's values are the same.
            a positive number, if this hash's value is more than the other hash's.
            </returns>
        </member>
        <member name="M:Unity.Entities.Hash128.GetHashCode">
            <summary>
            Computes a hashcode to support hash-based collections.
            </summary>
            <returns>The computed hash.</returns>
        </member>
        <member name="P:Unity.Entities.Hash128.IsValid">
            <summary>
            A Hash128 is valid, only if at least one of its 128 bits has value 1.
            </summary>
            <returns>
            True if the Hash128 is valid, and False if the Hash128 is invalid (is all 0 bits).
            </returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_Implicit(UnityEditor.GUID)~Unity.Entities.Hash128">
            <summary>
            Implicitly convert a UnityEditor.GUID to a Hash128.
            </summary>
            <param name="guid">The UnityEditor.GUID to convert.</param>
            <returns>The corresponding Hash128.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_Implicit(Unity.Entities.Hash128)~UnityEditor.GUID">
            <summary>
            Implicitly convert a Hash128 to a UnityEditor.GUID.
            </summary>
            <param name="guid">The Hash128 to convert.</param>
            <returns>The corresponding UnityEditor.GUID.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_Implicit(UnityEngine.Hash128)~Unity.Entities.Hash128">
            <summary>
            Implicitly convert a UnityEngine.Hash128 to a Hash128.
            </summary>
            <param name="guid">The UnityEngine.Hash128 to convert.</param>
            <returns>The corresponding Hash128.</returns>
        </member>
        <member name="M:Unity.Entities.Hash128.op_Implicit(Unity.Entities.Hash128)~UnityEngine.Hash128">
            <summary>
            Implicitly convert a Hash128 to a UnityEngine.Hash128.
            </summary>
            <param name="guid">The Hash128 to convert.</param>
            <returns>The corresponding UnityEngine.Hash128.</returns>
        </member>
        <member name="T:Unity.Entities.MemsetNativeArray`1">
            <summary>
                Assign Value to each element of NativeArray
            </summary>
            <typeparam name="T">Type of element in NativeArray</typeparam>
        </member>
        <member name="F:Unity.Entities.MemsetNativeArray`1.Source">
            <summary>
            The destination array, to which the value is copied repeatedly.
            </summary>
        </member>
        <member name="F:Unity.Entities.MemsetNativeArray`1.Value">
            <summary>
            The value to copy repeatedly to the destination array.
            </summary>
        </member>
        <member name="M:Unity.Entities.MemsetNativeArray`1.Execute(System.Int32)">
            <summary>
            This function is executed once for each work unit of the job, potentially concurrently.
            Each work unit copies one value into the destination array.
            </summary>
            <param name="index">The work unit index to process</param>
        </member>
        <member name="T:Unity.Entities.UpdateBeforeAttribute">
            <summary>
            Apply to a system to specify an update ordering constraint with another system in the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.
            </summary>
            <remarks>Updating before or after a system constrains the scheduler ordering of these systems within a ComponentSystemGroup.
            Both the before and after systems must be a members of the same ComponentSystemGroup.</remarks>
        </member>
        <member name="M:Unity.Entities.UpdateBeforeAttribute.#ctor(System.Type)">
            <summary>
            Specify a system which the tagged system must update before.
            </summary>
            <param name="systemType">The target system which the tagged system must update before. This system must be
            a member of the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the system type is empty.</exception>
        </member>
        <member name="P:Unity.Entities.UpdateBeforeAttribute.SystemType">
            <summary>
            The type of the target system, which the tagged system must update before.
            </summary>
        </member>
        <member name="T:Unity.Entities.UpdateAfterAttribute">
            <summary>
            Apply to a system to specify an update ordering constraint with another system in the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.
            </summary>
            <remarks>Updating before or after a system constrains the scheduler ordering of these systems within a ComponentSystemGroup.
            Both the before and after systems must be a members of the same ComponentSystemGroup.</remarks>
        </member>
        <member name="M:Unity.Entities.UpdateAfterAttribute.#ctor(System.Type)">
            <summary>
            Specify a system which the tagged system must update after.
            </summary>
            <param name="systemType">The target system which the tagged system must update after. This system must be
            a member of the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the system type is empty.</exception>
        </member>
        <member name="P:Unity.Entities.UpdateAfterAttribute.SystemType">
            <summary>
            The type of the target system, which the tagged system must update after.
            </summary>
        </member>
        <member name="T:Unity.Entities.CreateBeforeAttribute">
            <summary>
            Apply to a system to specify a creation ordering constraint with another system in the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.
            </summary>
            <remarks>Create before or after a system constrains the creation order of these systems when initializing a default world.
            System destruction order is defined as the reverse of creation order.</remarks>
        </member>
        <member name="M:Unity.Entities.CreateBeforeAttribute.#ctor(System.Type)">
            <summary>
            Specify a system which the tagged system must be created before.
            </summary>
            <param name="systemType">The target system which the tagged system must be created before. This system must be
            a member of the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the system type is empty.</exception>
        </member>
        <member name="P:Unity.Entities.CreateBeforeAttribute.SystemType">
            <summary>
            The type of the target system, which the tagged system must be created before.
            </summary>
        </member>
        <member name="T:Unity.Entities.CreateAfterAttribute">
            <summary>
            Apply to a system to specify a creation ordering constraint with another system in the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.
            </summary>
            <remarks>Create before or after a system constrains the creation order of these systems when initializing a default world.
            System destruction order is defined as the reverse of creation order.</remarks>
        </member>
        <member name="M:Unity.Entities.CreateAfterAttribute.#ctor(System.Type)">
            <summary>
            Specify a system which the tagged system must be created after.
            </summary>
            <param name="systemType">The target system which the tagged system must be created after. This system must be
            a member of the same <see cref="T:Unity.Entities.ComponentSystemGroup"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the system type is empty.</exception>
        </member>
        <member name="P:Unity.Entities.CreateAfterAttribute.SystemType">
            <summary>
            The type of the target system, which the tagged system must be created after.
            </summary>
        </member>
        <member name="T:Unity.Entities.UpdateInGroupAttribute">
             <summary>
             The specified Type must be a ComponentSystemGroup.
             Updating in a group means this system will be automatically updated by the specified ComponentSystemGroup when the group is updated.
             The system may order itself relative to other systems in the group with UpdateBefore and UpdateAfter. This ordering takes
             effect when the system group is sorted.
            
             If the optional OrderFirst parameter is set to true, this system will act as if it has an implicit [UpdateBefore] targeting all other
             systems in the group that do *not* have OrderFirst=true, but it may still order itself relative to other systems with OrderFirst=true.
            
             If the optional OrderLast parameter is set to true, this system will act as if it has an implicit [UpdateAfter] targeting all other
             systems in the group that do *not* have OrderLast=true, but it may still order itself relative to other systems with OrderLast=true.
            
             An UpdateInGroup attribute with both OrderFirst=true and OrderLast=true is invalid, and will throw an exception.
             </summary>
        </member>
        <member name="F:Unity.Entities.UpdateInGroupAttribute.OrderFirst">
            <summary>
            If true, the tagged system will be sorted earlier than all systems in the <see cref="T:Unity.Entities.ComponentSystemGroup"/>
            which do not have OrderFirst=true.
            </summary>
        </member>
        <member name="F:Unity.Entities.UpdateInGroupAttribute.OrderLast">
            <summary>
            If true, the tagged system will be sorted later than all systems in the <see cref="T:Unity.Entities.ComponentSystemGroup"/>
            which do not have OrderLast=true.
            </summary>
        </member>
        <member name="M:Unity.Entities.UpdateInGroupAttribute.#ctor(System.Type)">
            <summary>
            Specify the <see cref="T:Unity.Entities.ComponentSystemGroup"/> which the tagged system should be added to. The tagged system
            will be updated as part of this system group's Update() method.
            </summary>
            <param name="groupType">The <see cref="T:Unity.Entities.ComponentSystemGroup"/> type/</param>
            <exception cref="T:System.ArgumentNullException">Thrown id the group type is empty.</exception>
        </member>
        <member name="P:Unity.Entities.UpdateInGroupAttribute.GroupType">
            <summary>
            Retrieve the <see cref="T:Unity.Entities.ComponentSystemGroup"/> type.
            </summary>
        </member>
        <member name="T:Unity.Entities.ScriptBehaviourUpdateOrder">
            <summary>
            Contains helpers to add and remove systems to the UnityEngine player loop.
            </summary>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.AppendToPlayerLoop(System.Type,UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction,UnityEngine.LowLevel.PlayerLoopSystem@,System.Type)">
            <summary>
            Append the update function to the matching player loop system type.
            </summary>
            <param name="updateType">The update function type.</param>
            <param name="updateFunction">The update function.</param>
            <param name="playerLoop">The player loop.</param>
            <param name="playerLoopSystemType">The player loop system type.</param>
            <returns><see langword="true"/> if successfully appended to player loop, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.AppendToCurrentPlayerLoop(System.Type,UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction,System.Type)">
            <summary>
            Append the update function to the current player loop matching system type.
            </summary>
            <remarks>
            The player loop is not updated when failing to find the player loop system type.
            </remarks>
            <param name="updateType">The type of the update function.</param>
            <param name="updateFunction">The update function.</param>
            <param name="playerLoopSystemType">The player loop system type to add to.</param>
            <returns><see langword="true"/> if successfully appended to player loop, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.IsInPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction,UnityEngine.LowLevel.PlayerLoopSystem@)">
            <summary>
            Determine if the update function is part of the player loop.
            </summary>
            <param name="updateFunction">The update function.</param>
            <param name="playerLoop">The player loop.</param>
            <returns><see langword="true"/> if update function is part of player loop, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.IsInCurrentPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction)">
            <summary>
            Determine if the update function is part of the current player loop.
            </summary>
            <param name="updateFunction">The update function.</param>
            <param name="playerLoop">The player loop.</param>
            <returns><see langword="true"/> if update function is part of player loop, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.RemoveFromPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction,UnityEngine.LowLevel.PlayerLoopSystem@)">
            <summary>
            Remove the update function from the player loop.
            </summary>
            <param name="updateFunction">The update function.</param>
            <param name="playerLoop">The player loop.</param>
            <returns><see langword="true"/> if successfully removed from player loop, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.RemoveFromCurrentPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem.UpdateFunction)">
            <summary>
            Remove the update function from the current player loop.
            </summary>
            <param name="updateFunction">The update function.</param>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.AppendWorldToPlayerLoop(Unity.Entities.World,UnityEngine.LowLevel.PlayerLoopSystem@)">
             <summary>
             Add this World's three default top-level system groups to a PlayerLoopSystem object.
             </summary>
             <remarks>
             This function performs the following modifications to the provided PlayerLoopSystem:
             - If an instance of InitializationSystemGroup exists in this World, it is appended to the
               Initialization player loop phase.
             - If an instance of SimulationSystemGroup exists in this World, it is appended to the
               Update player loop phase.
             - If an instance of PresentationSystemGroup exists in this World, it is appended to the
               PreLateUpdate player loop phase.
             If instances of any or all of these system groups don't exist in this World, then no entry is added to the player
             loop for that system group.
            
             This function does not change the currently active player loop. If this behavior is desired, it's necessary
             to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed.
             </remarks>
             <param name="world">The three top-level system groups from this World will be added to the provided player loop.</param>
             <param name="playerLoop">Existing player loop to modify (e.g.  (e.g. PlayerLoop.GetCurrentPlayerLoop())</param>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.AppendWorldToCurrentPlayerLoop(Unity.Entities.World)">
             <summary>
             Append this World's three default top-level system groups to the current Unity player loop.
             </summary>
             <remarks>
             This is a convenience wrapper around AddWorldToPlayerLoop() that retrieves the current player loop,
             adds a World's top-level system groups to it, and sets the modified copy as the new active player loop.
            
             Note that modifications to the active player loop do not take effect until to the next iteration through the player loop.
             </remarks>
             <param name="world">The three top-level system groups from this World will be added to the provided player loop.</param>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.IsWorldInPlayerLoop(Unity.Entities.World,UnityEngine.LowLevel.PlayerLoopSystem)">
            <summary>
            Search the provided player loop for any systems added by this World.
            </summary>
            <remarks>
            Note that systems are not added to the player loop directly; they are wrapped by a DummyDelegate object that
            calls the system's Update() method. Any systems added to the loop using other wrapper mechanisms will not
            be detected by this function.
            </remarks>
            <param name="world">The function will search the provided PlayerLoopSystem for systems owned by this World.</param>
            <param name="playerLoop">Existing player loop to search (e.g. PlayerLoop.GetCurrentPlayerLoop())</param>
            <returns>True if any of this World's systems are found in the provided player loop; otherwise, false.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.IsWorldInCurrentPlayerLoop(Unity.Entities.World)">
            <summary>
            Search the currently active player loop for any systems added by this World.
            </summary>
            <remarks>
            This is a convenience wrapper around IsWorldInPlayerLoop() that always searches the currently active player loop.
            </remarks>
            <param name="world">The function will search the currently active player loop for systems owned by this World.</param>
            <returns>True if all of <paramref name="world"/>'s default system groups are in the player loop, or false if not.</returns>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.RemoveWorldFromPlayerLoop(Unity.Entities.World,UnityEngine.LowLevel.PlayerLoopSystem@)">
             <summary>
             Remove all of this World's systems from the specified player loop.
             </summary>
             <remarks>
             Only the systems from this World will be removed; other player loop modifications (including systems added
             by other Worlds) will not be affected.
            
             This function does not change the currently active player loop. If this behavior is desired, it's necessary
             to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed.
             </remarks>
             <param name="world">All systems in the provided player loop owned by this World will be removed from the player loop.</param>
             <param name="playerLoop">Existing player loop to modify (e.g. PlayerLoop.GetCurrentPlayerLoop())</param>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.RemoveWorldFromCurrentPlayerLoop(Unity.Entities.World)">
             <summary>
             Remove all of this World's systems from the currently active player loop.
             </summary>
             <remarks>
             This is a convenience wrapper around RemoveWorldToPlayerLoop() that retrieves the current player loop,
             removes a World's systems from it, and sets the modified copy as the new active player loop.
            
             Note that modifications to the active player loop do not take effect until to the next iteration through the player loop.
             </remarks>
             <param name="world">All systems in the current player loop owned by this World will be removed from the player loop.</param>
        </member>
        <member name="M:Unity.Entities.ScriptBehaviourUpdateOrder.AppendSystemToPlayerLoop(Unity.Entities.ComponentSystemBase,UnityEngine.LowLevel.PlayerLoopSystem@,System.Type)">
            <summary>
            Add an ECS system to a specific point in the Unity player loop, so that it is updated every frame.
            </summary>
            <remarks>
            This function does not change the currently active player loop. If this behavior is desired, it's necessary
            to call PlayerLoop.SetPlayerLoop(playerLoop) after the systems have been removed.
            </remarks>
            <param name="system">The ECS system to add to the player loop.</param>
            <param name="playerLoop">Existing player loop to modify (e.g. PlayerLoop.GetCurrentPlayerLoop())</param>
            <param name="playerLoopSystemType">The Type of the PlayerLoopSystem subsystem to which the ECS system should be appended.
            See the UnityEngine.PlayerLoop namespace for valid values.</param>
        </member>
        <member name="T:Unity.Entities.EntityQueryEnumerator">
            <summary>
            This exists only for use by code-gen. It is the backend implementation used for enumerating all entities matching a query.
            Used to code-gen enumerators for aspects.
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryEnumerator.IndexInChunk">
            <summary>
            The index of the current entity within its chunk
            </summary>
        </member>
        <member name="F:Unity.Entities.EntityQueryEnumerator.EntityCount">
            <summary>
            The number of entities in the current chunk
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryEnumerator.#ctor(Unity.Entities.EntityQuery)">
            <summary>
            Construct an enumerator instance for a query
            </summary>
            <remarks>
            This method includes a sync point on any jobs writing to the query's "filter types"; see
            <see cref="M:Unity.Entities.EntityQueryImpl.SyncFilterTypes"/> for details.
            </remarks>
            <param name="query">The query whose matching entities will be enumerated</param>
        </member>
        <member name="M:Unity.Entities.EntityQueryEnumerator.Dispose">
            <summary>
            Clean up this enumerator instance
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityQueryEnumerator.MoveNextHotLoop">
            <summary>
            Attempt to advance to the next entity in the current chunk, updating <see cref="F:Unity.Entities.EntityQueryEnumerator.IndexInChunk"/>.
            </summary>
            <returns>True if another entity in the current chunk was found, or false if the end of the chunk was reached
            (in which case, <see cref="M:Unity.Entities.EntityQueryEnumerator.MoveNextColdLoop(Unity.Entities.ArchetypeChunk@)"/> should be called).</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryEnumerator.MoveNextEntityRange(System.Boolean@,Unity.Entities.ArchetypeChunk@,System.Int32@,System.Int32@)">
            <summary>
            This method retrieves the next range of entities that fulfill the criteria of the `EntityQuery` passed to the constructor.
            If the current chunk has been exhausted, the search is continued in the next chunk (if any).
            </summary>
            <param name="movedToNewChunk">True if the next range of entities are stored in a different chunk than the previous range. In this case, the new chunk is stored in <paramref name="chunk"/>.</param>
            <param name="chunk">The next chunk instance if <paramref name="movedToNewChunk"/> is true; `default(ArchetypeChunk)` is returned otherwise.</param>
            <param name="entityStartIndex">The index within the chunk of the first entity in the next range of entities.</param>
            <param name="entityCount">The number of entities in the next range.</param>
            <returns>True if a new range of entities is found; false otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryEnumerator.MoveNextColdLoop(Unity.Entities.ArchetypeChunk@)">
            <summary>
            Attempt to advance to the first entity of the next chunk that matches the query, updating <see cref="F:Unity.Entities.EntityQueryEnumerator.IndexInChunk"/>
            and <see cref="F:Unity.Entities.EntityQueryEnumerator.EntityCount"/>.
            </summary>
            <param name="chunk">If successful, the new chunk's metadata is stored here.</param>
            <returns>True if a new non-empty matching chunk was found (in which case iteration can continue immediately),
            or false if the end of the matching chunk list was reached (in which case iteration should terminate).</returns>
        </member>
        <member name="M:Unity.Entities.EntityQueryEnumerator.CheckDisposed">
            <summary>
            Debug method to ensure that the enumerator is in a valid state
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the enumerator has been disposed, or has outlived its validity.</exception>
        </member>
        <member name="M:Unity.Entities.BufferAllocatorHeap.#ctor(System.Int32,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Constructs an allocator.
            </summary>
            <param name="budgetInBytes">Budget of the allocator in bytes.</param>
            <param name="bufferSizeInBytes">Size of each buffer to be allocated in bytes.</param>
            <param name="handle">An AllocatorHandle to use for buffer allocations and internal bookkeeping structures.</param>
        </member>
        <member name="M:Unity.Entities.BufferAllocatorHeap.Allocate">
            <summary>
            Allocates an index which corresponds to a buffer.
            </summary>
            <returns>Allocated index. If allocation fails, returned index is negative.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when allocator is exhausted.</exception>
        </member>
        <member name="M:Unity.Entities.BufferAllocatorHeap.Free(System.Int32)">
            <summary>
            Frees the buffer represented by the given index.
            </summary>
            <param name="index">Index to buffer.</param>
            <exception cref="T:System.ArgumentException">Thrown when index is less than zero or when greater than or equal to BufferCapacity</exception>
        </member>
        <member name="P:Unity.Entities.BufferAllocatorHeap.Item(System.Int32)">
            <summary>
            Converts an index to a pointer.
            </summary>
            <param name="index">Index to a buffer.</param>
        </member>
        <member name="P:Unity.Entities.BufferAllocatorHeap.BufferCapacity">
            <summary>
            Maximum number of buffers that can be allocated at once.
            </summary>
        </member>
        <member name="P:Unity.Entities.BufferAllocatorHeap.IsEmpty">
            <summary>
            Checks if all the buffers in the allocator have been allocated.
            </summary>
        </member>
        <member name="M:Unity.Entities.BufferAllocatorHeap.Dispose">
            <summary>
            Disposes the allocator.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the reserved address range cannot be freed.</exception>
        </member>
        <member name="T:Unity.Entities.BufferFromEntity`1">
            <summary> Obsolete. Use <see cref="T:Unity.Entities.BufferLookup`1"/> instead.</summary>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> to access.</typeparam>
        </member>
        <member name="T:Unity.Entities.BufferLookup`1">
             <summary>
             A [NativeContainer] that provides access to all instances of DynamicBuffer components with elements of type T,
             indexed by <see cref="T:Unity.Entities.Entity"/>.
             </summary>
             <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> to access.</typeparam>
             <remarks>
             BufferLookup is a native container that provides array-like access to DynamicBuffer components of a specific
             type. For example, while iterating over a set of entities, you can use BufferLookup to get and set  DynamicBuffers of unrelated entities.
            
             To get a BufferLookup, call <see cref="M:Unity.Entities.SystemAPI.GetBufferLookup``1(System.Boolean)"/>.
            
             Pass a BufferLookup container to a job by defining a public field of the appropriate type
             in your IJob implementation. You can safely read from BufferLookup in any job, but by
             default, you cannot write to components in the container in parallel jobs (including
             <see cref="T:Unity.Entities.IJobEntity"/>, <see cref="M:Unity.Entities.SystemAPI.Query``1"/> and <see cref="T:Unity.Entities.IJobChunk"/>). If you know that two instances of a parallel
             job can never write to the same index in the container, you can disable the restriction on parallel writing
             by adding [NativeDisableParallelForRestrictionAttribute] to the BufferLookup field definition in the job struct.
            
            
             [NativeContainer]: https://docs.unity3d.com/ScriptReference/Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute
             [NativeDisableParallelForRestrictionAttribute]: https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeDisableParallelForRestrictionAttribute.html
             </remarks>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.TryGetBuffer(Unity.Entities.Entity,Unity.Entities.DynamicBuffer{`0}@)">
            <summary>
            Retrieves the buffer components associated with the specified <see cref="T:Unity.Entities.Entity"/>, if it exists. Then reports if the instance still refers to a valid entity and that it has a
            buffer component of type T.
            </summary>
            <param name="entity">The entity.</param>
            /// <param name="bufferData">The buffer component of type T for the given entity, if it exists.</param>
            <returns>True if the entity has a buffer component of type T, and false if it does not.</returns>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.HasBuffer(Unity.Entities.Entity)">
            <summary>
            Reports whether the specified <see cref="T:Unity.Entities.Entity"/> instance still refers to a valid entity and that it has a
            buffer component of type T.
            </summary>
            <param name="entity">The entity.</param>
            <returns>True if the entity has a buffer component of type T, and false if it does not. Also returns false if
            the Entity instance refers to an entity that has been destroyed.</returns>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.HasComponent(Unity.Entities.Entity)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.BufferLookup`1.HasBuffer(Unity.Entities.Entity)"/> instead.</summary>
            <param name="entity">The entity.</param>
            <returns>True if the entity has a buffer component of type T, and false if it does not. Also returns false if
            the Entity instance refers to an entity that has been destroyed.</returns>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.DidChange(Unity.Entities.Entity,System.UInt32)">
            <summary>
            Reports whether any of IBufferElementData components of the type T, in the chunk containing the
            specified <see cref="T:Unity.Entities.Entity"/>, could have changed.
            </summary>
            <remarks>
            Note that for efficiency, the change version applies to whole chunks not individual entities. The change
            version is incremented even when another job or system that has declared write access to a component does
            not actually change the component value.</remarks>
            <param name="entity">The entity.</param>
            <param name="version">The version to compare. In a system, this parameter should be set to the
            current <see cref="P:Unity.Entities.ComponentSystemBase.LastSystemVersion"/> at the time the job is run or
            scheduled.</param>
            <returns>True, if the version number stored in the chunk for this component is more recent than the version
            passed to the <paramref name="version"/> parameter.</returns>
        </member>
        <member name="P:Unity.Entities.BufferLookup`1.Item(Unity.Entities.Entity)">
             <summary>
             Gets the <see cref="T:Unity.Entities.DynamicBuffer`1"/> instance of type <typeparamref name="T"/> for the specified entity.
             </summary>
             <param name="entity">The entity.</param>
             <returns>A <see cref="T:Unity.Entities.DynamicBuffer`1"/> type.</returns>
             <remarks>
             Normally, you cannot write to buffers accessed using a BufferLookup instance
             in a parallel Job. This restriction is in place because multiple threads could write to the same buffer,
             leading to a race condition and nondeterministic results. However, when you are certain that your algorithm
             cannot write to the same buffer from different threads, you can manually disable this safety check
             by putting the [NativeDisableParallelForRestrictions] attribute on the BufferLookup field in the Job.
            
             [NativeDisableParallelForRestrictionAttribute]: https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeDisableParallelForRestrictionAttribute.html
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="entity"/> does not have a buffer
             component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.IsBufferEnabled(Unity.Entities.Entity)">
            <summary>
            Checks whether the <see cref="T:Unity.Entities.IBufferElementData"/> of type T is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be checked.</param>
            <returns>True if the specified component is enabled, or false if it is disabled.</returns>
            <seealso cref="M:Unity.Entities.BufferLookup`1.SetBufferEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.IsComponentEnabled(Unity.Entities.Entity)">
             <summary>Obsolete. Use <see cref="M:Unity.Entities.BufferLookup`1.IsBufferEnabled(Unity.Entities.Entity)"/> instead.</summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.BufferLookup`1.IsBufferEnabled(Unity.Entities.Entity)"/> instead.
            
             Checks whether the <see cref="T:Unity.Entities.IBufferElementData"/> of type T is enabled on the specified <see cref="T:Unity.Entities.Entity"/>.
             For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
             have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity whose component should be checked.</param>
             <seealso cref="M:Unity.Entities.BufferLookup`1.SetBufferEnabled(Unity.Entities.Entity,System.Boolean)"/>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.SetComponentEnabled(Unity.Entities.Entity,System.Boolean)">
             <summary>Obsolete. Use <see cref="M:Unity.Entities.BufferLookup`1.SetBufferEnabled(Unity.Entities.Entity,System.Boolean)"/> instead.</summary>
             <remarks>**Obsolete.** Use <see cref="M:Unity.Entities.BufferLookup`1.SetBufferEnabled(Unity.Entities.Entity,System.Boolean)"/> instead.
            
             Enable or disable the <see cref="T:Unity.Entities.IBufferElementData"/> of type T on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
             does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
             For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
             have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
             </remarks>
             <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
             <param name="entity">The entity whose component should be enabled or disabled.</param>
             <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
             <seealso cref="M:Unity.Entities.BufferLookup`1.IsBufferEnabled(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.SetBufferEnabled(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Enable or disable the <see cref="T:Unity.Entities.IBufferElementData"/> of type T on the specified <see cref="T:Unity.Entities.Entity"/>. This operation
            does not cause a structural change (even if it occurs on a worker thread), or affect the value of the component.
            For the purposes of EntityQuery matching, an entity with a disabled component will behave as if it does not
            have that component. The type T must implement the <see cref="T:Unity.Entities.IEnableableComponent"/> interface.
            </summary>
            <exception cref="T:System.ArgumentException">The <see cref="T:Unity.Entities.Entity"/> does not exist.</exception>
            <param name="entity">The entity whose component should be enabled or disabled.</param>
            <param name="value">True if the specified component should be enabled, or false if it should be disabled.</param>
            <seealso cref="M:Unity.Entities.BufferLookup`1.IsBufferEnabled(Unity.Entities.Entity)"/>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.Update(Unity.Entities.SystemBase)">
            <summary>
            When a BufferLookup is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="system">The system on which this type handle is cached.</param>
        </member>
        <member name="M:Unity.Entities.BufferLookup`1.Update(Unity.Entities.SystemState@)">
            <summary>
            When a BufferLookup is cached by a system across multiple system updates, calling this function
            inside the system's OnUpdate() method performs the minimal incremental updates necessary to make the
            type handle safe to use.
            </summary>
            <param name="systemState">The SystemState of the system on which this type handle is cached.</param>
        </member>
        <member name="T:Unity.Entities.ISystem">
            <summary>
            Interface implemented by unmanaged component systems.
            </summary>
        </member>
        <member name="M:Unity.Entities.ISystem.OnCreate(Unity.Entities.SystemState@)">
             <summary>
             Called when this system is created.
             </summary>
             <remarks>
             Implement an `OnCreate` function to set up system resources when it is created.
            
             `OnCreate` is invoked before the the first time <see cref="M:Unity.Entities.ISystemStartStop.OnStartRunning(Unity.Entities.SystemState@)"/>
             and <see cref="M:Unity.Entities.ISystem.OnUpdate(Unity.Entities.SystemState@)"/> are invoked.
             </remarks>
             <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing this system instance</param>
        </member>
        <member name="M:Unity.Entities.ISystem.OnDestroy(Unity.Entities.SystemState@)">
            <summary>
            Called when this system is destroyed.
            </summary>
            <remarks>
            Systems are destroyed when the application shuts down, the World is destroyed, or you
            call <see cref="M:Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle)"/>. In the Unity Editor, system destruction occurs when you exit
            Play Mode and when scripts are reloaded.
            </remarks>
            <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing this system instance</param>
        </member>
        <member name="M:Unity.Entities.ISystem.OnUpdate(Unity.Entities.SystemState@)">
             <summary>
             Implement `OnUpdate` to perform the major work of this system.
             </summary>
             <remarks>
             <p>
             By default, the system invokes `OnUpdate` once every frame on the main thread.
             To skip OnUpdate if all of the system's [EntityQueries] are empty, use the
             [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can
             specify components that must exist, or queries that match specific Entities. To do
             this, call <see cref="M:Unity.Entities.SystemState.RequireForUpdate``1"/> or
             <see cref="M:Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery)"/>
             in the system's OnCreate method. For more information, see <see cref="M:Unity.Entities.SystemState.ShouldRunSystem"/>.
             </p>
             <p>
             You can instantiate and schedule an <see cref="T:Unity.Entities.IJobChunk"/> instance; you can use the
             [C# Job System] or you can perform work on the main thread. If you call <see cref="T:Unity.Entities.EntityManager"/> methods
             that perform structural changes on the main thread, be sure to arrange the system order to minimize the
             performance impact of the resulting [sync points].
             </p>
            
             [sync points]: xref:concepts-structural-changes
             [C# Job System]: https://docs.unity3d.com/Manual/JobSystem.html
             [EntityQueries]: xref:Unity.Entities.EntityQuery
             [RequireMatchingQueriesForUpdateAttribute]: xref:Unity.Entities.RequireMatchingQueriesForUpdateAttribute
             </remarks>
             <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing this system instance</param>
        </member>
        <member name="T:Unity.Entities.SystemBaseDelegates">
            <summary>
            Delegates only used by compiler
            </summary>
        </member>
        <member name="T:Unity.Entities.SystemBaseDelegates.Function">
            <summary>
            Used by compilation pipeline internally to support optional burst compilation of ISystem methods
            </summary>
            <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing a system instance</param>
        </member>
        <member name="T:Unity.Entities.ISystemStartStop">
            <summary>
            Optional interface for start/stop notifications on systems.
            </summary>
        </member>
        <member name="M:Unity.Entities.ISystemStartStop.OnStartRunning(Unity.Entities.SystemState@)">
             <summary>
             Called before the first call to OnUpdate and when a system resumes updating after being stopped or disabled.
             </summary>
             <remarks>
             If the <see cref="T:Unity.Entities.EntityQuery"/> objects defined for a system do not match any existing entities
             then the system skips updates until a successful match is found. Likewise, if you set <see cref="P:Unity.Entities.SystemState.Enabled"/>
             to false, then the system stops running. In both cases, <see cref="M:Unity.Entities.ISystemStartStop.OnStopRunning(Unity.Entities.SystemState@)"/> is
             called when a running system stops updating; OnStartRunning is called when it starts updating again.
             </remarks>
             <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing this system instance</param>
            
        </member>
        <member name="M:Unity.Entities.ISystemStartStop.OnStopRunning(Unity.Entities.SystemState@)">
            <summary>
            Called when this system stops running because no entities match the system's <see cref="T:Unity.Entities.EntityQuery"/>
            objects or because you change the system <see cref="P:Unity.Entities.SystemState.Enabled"/> property to false.
            </summary>
            <remarks>
            If the <see cref="T:Unity.Entities.EntityQuery"/> objects defined for a system do not match any existing entities
            then the system skips updating until a successful match is found. Likewise, if you set <see cref="P:Unity.Entities.SystemState.Enabled"/>
            to false, then the system stops running. In both cases, OnStopRunning is
            called when a running system stops updating; <see cref="M:Unity.Entities.ISystemStartStop.OnStartRunning(Unity.Entities.SystemState@)"/> is called when it starts updating again.
            </remarks>
            <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing this system instance</param>
        </member>
        <member name="T:Unity.Entities.ISystemCompilerGenerated">
            <summary>
            Interface for methods only used by compiler
            </summary>
        </member>
        <member name="M:Unity.Entities.ISystemCompilerGenerated.OnCreateForCompiler(Unity.Entities.SystemState@)">
            <summary>
            Generated by compilation pipeline and used internally.
            </summary>
            <param name="state">The <see cref="T:Unity.Entities.SystemState"/> backing this system instance</param>
        </member>
        <member name="T:Unity.Entities.EnabledRefRW`1">
            <summary>
            Stores a safe reference to a read-writable component enable bit.
            Also keeps a pointer to the chunk disabled count, which is updated when the enabled bit is written to.
            </summary>
            <remarks>Do not store outside of stack</remarks>
            <typeparam name="T">Type of enabled component</typeparam>
        </member>
        <member name="M:Unity.Entities.EnabledRefRW`1.op_Implicit(Unity.Entities.EnabledRefRW{`0})~Unity.Entities.EnabledRefRO{`0}">
            <summary>
            Convert into a read-only version EnabledRefRO of this EnabledRefRW
            </summary>
            <param name="componentEnabledRefRW">The read-write reference to convert to read-only</param>
            <returns>The EnabledRefRO</returns>
        </member>
        <member name="M:Unity.Entities.EnabledRefRW`1.#ctor(Unity.Entities.SafeBitRef,System.Int32*)">
            <summary>
            Constructor for writable enable reference to enableable component.
            This is typically used by generated code inside of Aspects.
            </summary>
            <param name="ptr">Pointer to single bit and safety handle</param>
            <param name="ptrChunkDisabledCount"></param>
        </member>
        <member name="P:Unity.Entities.EnabledRefRW`1.Null">
            <summary>
            Null value for this reference.
            </summary>
        </member>
        <member name="P:Unity.Entities.EnabledRefRW`1.IsValid">
            <summary>
            Property that returns true if the reference is valid, false otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.EnabledRefRW`1.ValueRO">
            <summary>
            Property to get enabled value of this reference (true if enabled, false otherwise).
            </summary>
        </member>
        <member name="P:Unity.Entities.EnabledRefRW`1.ValueRW">
            <summary>
            Property to get or set enabled value of this reference  (true if enabled, false otherwise).
            </summary>
        </member>
        <member name="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute">
            <summary>
            Use RequireMatchingQueriesForUpdate to force a System to skip calling OnUpdate if every
            <see cref="T:Unity.Entities.EntityQuery"/> in the system is empty.
            </summary>
            <description>
            This is a more performant way of processing a system because it avoids any overhead that
            OnUpdate has if there are no Entities to operate on.
            <br/><br/>
            When you add RequireMatchingQueriesForUpdate to a System it calls
            <see cref="P:Unity.Entities.EntityQuery.IsEmptyIgnoreFilter"/> to check if each Entity Query is empty. If
            all Entity Queries are empty, the System doesn't call OnUpdate.
            <br/><br/>
            **Important:** IsEmptyIgnoreFilter does not take into account any filters on Entity Queries.
            If any of the Entity Queries in a System use change filters, shared component filters, or
            <see cref="T:Unity.Entities.IEnableableComponent"/>, then it is possible for the System to call OnUpdate
            in a situation where all Entity Queries are empty.
            </description>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/>
            <seealso cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)"/>
        </member>
        <member name="T:Unity.Entities.BlobBuilderArray`1">
            <summary>
            Used by the <see cref="T:Unity.Entities.BlobBuilder"/> methods to reference the arrays within a blob asset.
            </summary>
            <remarks>Use this reference to initialize the data of a newly created <see cref="T:Unity.Entities.BlobArray`1"/>.</remarks>
            <typeparam name="T">The data type of the elements in the array.</typeparam>
        </member>
        <member name="M:Unity.Entities.BlobBuilderArray`1.#ctor(System.Void*,System.Int32)">
            <summary>
            For internal, <see cref="T:Unity.Entities.BlobBuilder"/>, use only.
            </summary>
            <param name="data">The pointer to the allocated buffer.</param>
            <param name="length">The length of the buffer.</param>
        </member>
        <member name="P:Unity.Entities.BlobBuilderArray`1.Item(System.Int32)">
            <summary>
            Array index accessor for the elements in the array.
            </summary>
            <param name="index">The sequential index of an array item.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is less than zero or greater than the length of the array (minus one).</exception>
        </member>
        <member name="P:Unity.Entities.BlobBuilderArray`1.Length">
            <summary>
            Reports the number of elements in the array.
            </summary>
        </member>
        <member name="M:Unity.Entities.BlobBuilderArray`1.GetUnsafePtr">
            <summary>
            Provides a pointer to the data stored in the array.
            </summary>
            <remarks>You can only call this function in an [unsafe context].
            [unsafe context]: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code
            </remarks>
            <returns>A pointer to the first element in the array.</returns>
        </member>
        <member name="T:Unity.Entities.BlobBuilder">
             <summary>
             Creates blob assets.
             </summary>
             <remarks>
             A blob asset is an immutable data structure stored in unmanaged memory.
             Blob assets can contain primitive types, strings, structs, arrays, and arrays of arrays. Arrays and structs
             must only contain blittable types. Strings must be of type <see cref="T:Unity.Entities.BlobString"/> (or a specialized unmanaged
             string type).
            
             To use a BlobBuilder object to create a blob asset:
             1. Declare the structure of the blob asset as a struct.
             2. Create a BlobBuilder object.
             3. Call the <see cref="M:Unity.Entities.BlobBuilder.ConstructRoot``1"/> method, where `T` is the struct defining the asset structure.
             4. Initialize primitive values defined at the root level of the asset.
             5. Allocate memory for arrays, structs, and <see cref="T:Unity.Entities.BlobString"/> instances at the root.
             6. Initialize the values of those arrays, structs, and strings.
             7. Continue allocating memory and initializing values until you have fully constructed the asset.
             8. Call <see cref="M:Unity.Entities.BlobBuilder.CreateBlobAssetReference``1(Unity.Collections.Allocator)"/> to create a reference to the blob asset in memory.
             9. Dispose the BlobBuilder object.
            
             Use the <see cref="T:Unity.Entities.BlobAssetReference`1"/> returned by <see cref="M:Unity.Entities.BlobBuilder.CreateBlobAssetReference``1(Unity.Collections.Allocator)"/> to reference
             the blob asset. You can use a <see cref="T:Unity.Entities.BlobAssetReference`1"/> as a field of an <see cref="T:Unity.Entities.IComponentData"/>
             struct. More than one entity can reference the same blob asset.
            
             Call <see cref="M:Unity.Entities.BlobAssetReference`1.Dispose"/> to free the memory allocated for a blob asset.
            
             Blob assets cannot be modified once created. Instead, you must create a new blob asset, update any references
             to the old one and then dispose of it.
             </remarks>
             <example>
             <code source="../DocCodeSamples.Tests/BlobAssetExamples.cs" region="builderclassexample" title="BlobBuilder Example"/>
             </example>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.#ctor(Unity.Collections.Allocator,System.Int32)">
            <summary>
            Constructs a BlobBuilder object.
            </summary>
            <param name="allocator">The type of allocator to use for the BlobBuilder's internal, temporary data. Use
            <see cref="F:Unity.Collections.Allocator.Temp"/> unless the BlobBuilder exists across more than four Unity frames.</param>
            <param name="chunkSize">(Optional) The minimum amount of memory to allocate while building an asset.
            The default value should suit most use cases. A smaller chunkSize results in more allocations; a larger
            chunkSize could increase the BlobBuilder's total memory allocation (which is freed when you dispose of
            the BlobBuilder.</param>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.ConstructRoot``1">
            <summary>
            Creates the top-level fields of a single blob asset.
            </summary>
            <remarks>
            This function allocates memory for the top-level fields of a blob asset and returns a reference to it. Use
            this root reference to initialize field values and to allocate memory for arrays and structs.
            </remarks>
            <typeparam name="T">A struct that defines the structure of the blob asset.</typeparam>
            <returns>A reference to the blob data under construction.</returns>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.Construct``1(Unity.Entities.BlobArray{``0}@,``0[])">
            <summary>
            Copies an array of structs to an array in a blob asset after allocating the necessary memory.
            </summary>
            <param name="blobArray">A reference to a BlobArray field in a blob asset.</param>
            <param name="data">An array  containing structs of type <typeparamref name="T"/>.</param>
            <typeparam name="T">The struct data type.</typeparam>
            <returns>A reference to the newly constructed array as a mutable BlobBuilderArray instance.</returns>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.Allocate``1(Unity.Entities.BlobArray{``0}@,System.Int32)">
            <summary>
            Allocates enough memory to store <paramref name="length"/> elements of struct <typeparamref name="T"/>.
            </summary>
            <param name="ptr">A reference to a BlobArray field in a blob asset.</param>
            <param name="length">The number of elements to allocate.</param>
            <typeparam name="T">The struct data type.</typeparam>
            <returns>A reference to the newly allocated array as a mutable BlobBuilderArray instance.</returns>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.Allocate``1(Unity.Entities.BlobArray{``0}@,System.Int32,System.Int32)">
            <summary>
            Allocates enough memory to store <paramref name="length"/> elements of struct <typeparamref name="T"/>.
            </summary>
            <param name="ptr">A reference to a BlobArray field in a blob asset.</param>
            <param name="length">The number of elements to allocate.</param>
            <param name="alignment">The alignment of the allocated memory.</param>
            <typeparam name="T">The struct data type.</typeparam>
            <returns>A reference to the newly allocated array as a mutable BlobBuilderArray instance.</returns>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.Allocate``1(Unity.Entities.BlobPtr{``0}@)">
            <summary>
            Allocates enough memory to store a struct of type <typeparamref name="T"/>.
            </summary>
            <param name="ptr">A reference to a blob pointer field in a blob asset.</param>
            <typeparam name="T">The struct data type.</typeparam>
            <returns>A reference to the newly allocated struct.</returns>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.SetPointer``1(Unity.Entities.BlobPtr{``0}@,``0@)">
            <summary>
            Sets a BlobPtr to point to the given object inside the blob.
            </summary>
            <param name="ptr">A reference to a blob pointer field in a blob asset.</param>
            <param name="obj">The struct that exists in the blob that you want to point to.</param>
            <typeparam name="T">The type of the object stored in the blob.</typeparam>
            <returns>A reference to obj.</returns>
            <exception cref="T:System.ArgumentException">Throws if the object is not part of the blob.</exception>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.CreateBlobAssetReference``1(Unity.Collections.Allocator)">
            <summary>
            Completes construction of the blob asset and returns a reference to the asset in unmanaged memory.
            </summary>
            <remarks>Use the <see cref="T:Unity.Entities.BlobAssetReference`1"/> to access the blob asset. When the asset is no longer
            needed, call<see cref="M:Unity.Entities.BlobAssetReference`1.Dispose"/> to destroy the blob asset and free its allocated
            memory.</remarks>
            <param name="allocator">The type of memory to allocate. Unless the asset has a very short life span, use
            <see cref="F:Unity.Collections.Allocator.Persistent"/>.</param>
            <typeparam name="T">The data type of the struct used to construct the asset's root. Use the same struct type
            that you used when calling <see cref="M:Unity.Entities.BlobBuilder.ConstructRoot``1"/>.</typeparam>
            <returns>Returns a reference to the blob asset in unmanaged memory.</returns>
        </member>
        <member name="M:Unity.Entities.BlobBuilder.Dispose">
            <summary>
            Disposes of this BlobBuilder instance and frees its temporary memory allocations.
            </summary>
            <remarks>Call `Dispose()` after calling <see cref="M:Unity.Entities.BlobBuilder.CreateBlobAssetReference``1(Unity.Collections.Allocator)"/>.</remarks>
        </member>
        <member name="T:Unity.Entities.ComponentDependencyManager">
            <summary>
            The ComponentDependencyManager maintains JobHandles for each type with any jobs that read or write those component types.
            ComponentSafetyHandles which is embedded maintains a safety handle for each component type registered in the TypeManager.
            Safety and job handles are only maintained for components that can be modified by jobs:
            That means only dynamic buffer components and component data that are not tag components will have valid
            safety and job handles. For those components the safety handle represents ReadOnly or ReadWrite access to those
            components as well as their change versions.
            The Entity type is a special case: It can not be modified by jobs and its safety handle is used to represent the
            entire EntityManager state. Any job reading from any part of the EntityManager must contain either a safety handle
            for the Entity type OR a safety handle for any other component type.
            Job component systems that have no other type dependencies have their JobHandles registered on the Entity type
            to ensure that they are completed by CompleteAllJobsAndInvalidateArrays
            </summary>
        </member>
        <member name="T:Unity.Entities.EntityDebugProxy">
            <summary>
            EntityDebugProxy for an entity, the world isn't explicitly known, so there is some world disambiguation here.
            </summary>
        </member>
        <member name="T:Unity.Entities.Entity_">
            <summary>
            Entity debug proxy when the world is explicitly known
            </summary>
        </member>
        <member name="T:Unity.Entities.SceneSectionData">
            <summary>
            This component contains data relative to a <see cref="T:Unity.Entities.SceneSection"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSectionData.SceneGUID">
            <summary>
            Represents the unique GUID to identify the scene where the section is.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSectionData.SubSectionIndex">
            <summary>
            Represents the scene section index inside the scene.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSectionData.FileSize">
            <summary>
            Represents the file size for the compressed section.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSectionData.ObjectReferenceCount">
            <summary>
            Represents the number of Unity Objects referenced in the section.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSectionData.BoundingVolume">
            <summary>
            Represents the scene section bounding volume.
            </summary>
        </member>
        <member name="T:Unity.Entities.SectionMetadataSetup">
            <summary>
            This component identifies the entity which holds the meta data components that belong to the section with the specified <see cref="F:Unity.Entities.SectionMetadataSetup.SceneSectionIndex"/>.
            </summary>
            <remarks>
            These meta data components are serialized into the entity scene header and are added to the
            section entities after the scene is resolved at runtime.
            </remarks>
        </member>
        <member name="F:Unity.Entities.SectionMetadataSetup.SceneSectionIndex">
            <summary>
            Represents the scene section index inside the scene.
            </summary>
        </member>
        <member name="T:Unity.Entities.SceneReference">
            <summary>
            Component that references a scene.
            </summary>
            <remarks>
            This component uses the unique GUID to identify the scene.
            </remarks>
        </member>
        <member name="F:Unity.Entities.SceneReference.SceneGUID">
            <summary>
            Unique GUID to identify the scene.
            </summary>
        </member>
        <member name="M:Unity.Entities.SceneReference.#ctor(Unity.Entities.Serialization.EntitySceneReference)">
            <summary>
            Builds a <see cref="T:Unity.Entities.SceneReference"/> from an <see cref="T:Unity.Entities.Serialization.EntitySceneReference"/>.
            </summary>
            <param name="sceneReference">The <see cref="T:Unity.Entities.Serialization.EntitySceneReference"/> to reference.</param>
        </member>
        <member name="M:Unity.Entities.SceneReference.Equals(Unity.Entities.SceneReference)">
            <summary>
            Compares two <see cref="T:Unity.Entities.SceneReference"/> instances to determine if they are equal.
            </summary>
            <param name="other">A <see cref="T:Unity.Entities.SceneReference"/> to compare with.</param>
            <returns>Returns true if <paramref name="other"/> contains the same SceneGUID.</returns>
        </member>
        <member name="M:Unity.Entities.SceneReference.GetHashCode">
            <summary>
            Computes a hashcode to support hash-based collections.
            </summary>
            <returns>The computed hash.</returns>
        </member>
        <member name="T:Unity.Entities.PrefabRoot">
            <summary>
            This component contains the root entity of a prefab
            </summary>
        </member>
        <member name="F:Unity.Entities.PrefabRoot.Root">
            <summary>
            The root entity of a prefab.
            </summary>
        </member>
        <member name="T:Unity.Entities.SceneSection">
            <summary>
            Identifies the <see cref="T:Unity.Entities.SceneSection"/> where the entity belongs to.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSection.SceneGUID">
            <summary>
            Unique GUID that identifies the scene where the section is.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneSection.Section">
            <summary>
            Scene section index inside the scene.
            </summary>
        </member>
        <member name="M:Unity.Entities.SceneSection.Equals(Unity.Entities.SceneSection)">
            <summary>
            Compares two <see cref="T:Unity.Entities.SceneSection"/> instances to determine if they are equal.
            </summary>
            <param name="other">A <see cref="T:Unity.Entities.SceneSection"/>  to compare with.</param>
            <returns>True if <paramref name="other"/> contains the same scene GUID and section index.</returns>
        </member>
        <member name="M:Unity.Entities.SceneSection.GetHashCode">
            <summary>
            Computes a hashcode to support hash-based collections.
            </summary>
            <returns>The computed hash.</returns>
        </member>
        <member name="T:Unity.Entities.PostLoadCommandBuffer">
            <summary>
            Component that contains an <see cref="T:Unity.Entities.EntityCommandBuffer"/>, which is used to execute commands after a scene is loaded.
            </summary>
            <remarks>This component includes a reference counter. When the reference counter is equal to 0,
            the <see cref="F:Unity.Entities.PostLoadCommandBuffer.CommandBuffer"/> is disposed of.</remarks>
        </member>
        <member name="F:Unity.Entities.PostLoadCommandBuffer.CommandBuffer">
            <summary>
            Represents an <see cref="T:Unity.Entities.EntityCommandBuffer"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.PostLoadCommandBuffer.#ctor">
            <summary>
            Initializes and returns an instance of PostLoadCommandBuffer.
            </summary>
        </member>
        <member name="M:Unity.Entities.PostLoadCommandBuffer.Dispose">
            <summary>
            Decrements the reference counter. When the reference counter reaches 0, the <see cref="F:Unity.Entities.PostLoadCommandBuffer.CommandBuffer"/> is disposed.
            </summary>
        </member>
        <member name="M:Unity.Entities.PostLoadCommandBuffer.Clone">
            <summary>
            Increments the reference counter and returns a reference to the component.
            </summary>
            <returns>Returns a reference to the <see cref="T:Unity.Entities.PostLoadCommandBuffer"/> component.</returns>
        </member>
        <member name="T:Unity.Entities.SceneLoadFlags">
            <summary>
            Contains flags that control the load process for sub-scenes.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneLoadFlags.DisableAutoLoad">
            <summary>
            Prevents adding a RequestSceneLoaded to the SubScene section entities when it gets created. If loading a GameObject scene, setting this flag is equivalent to setting activateOnLoad to false.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneLoadFlags.BlockOnImport">
            <summary>
            Wait for the SubScene to be fully converted (only relevant for Editor and LiveLink) and its header loaded
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneLoadFlags.BlockOnStreamIn">
            <summary>
            Disable asynchronous streaming, SubScene section will be fully loaded during the next update of the streaming system
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneLoadFlags.LoadAdditive">
            <summary>
            [DEPRECATED] Set whether to load additive or not. This only applies to GameObject based scenes, not subscenes.
            </summary>
        </member>
        <member name="F:Unity.Entities.SceneLoadFlags.NewInstance">
            <summary>
            Loads a new instance of the subscene
            </summary>
        </member>
        <member name="T:Unity.Entities.RequestSceneLoaded">
            <summary>
            A component that requests the load of a sub scene.
            </summary>
        </member>
        <member name="F:Unity.Entities.RequestSceneLoaded.LoadFlags">
            <summary>
            Contains flags that control the load process for sub scenes.
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginInitializationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the beginning of the <see cref="T:Unity.Entities.InitializationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginInitializationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.BeginInitializationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.BeginInitializationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.BeginInitializationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.BeginInitializationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.BeginInitializationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.BeginInitializationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.EndInitializationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the end of the <see cref="T:Unity.Entities.InitializationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EndInitializationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.EndInitializationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EndInitializationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.EndInitializationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.EndInitializationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.EndInitializationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.EndInitializationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.InitializationSystemGroup">
            <summary>
            The earliest of the default system groups to run in each frame. Contains systems related to setting up each new frame.
            </summary>
        </member>
        <member name="M:Unity.Entities.InitializationSystemGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Unity.Entities.InitializationSystemGroup.OnUpdate">
            <inheritdoc cref="M:Unity.Entities.ComponentSystemGroup.OnUpdate"/>
        </member>
        <member name="T:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the beginning of the <see cref="T:Unity.Entities.FixedStepSimulationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.BeginFixedStepSimulationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the end of the <see cref="T:Unity.Entities.FixedStepSimulationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.EndFixedStepSimulationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.FixedStepSimulationSystemGroup">
            <summary>
            This system group is configured by default to use a fixed timestep for the duration of its
            updates.
            </summary>
            <remarks>
            The value of `Time.ElapsedTime` and `Time.DeltaTime` will be temporarily overriden
            while this group is updating. The systems in this group will update as many times as necessary
            at the fixed timestep in order to "catch up" to the actual elapsed time since the previous frame.
            The default fixed timestep is 1/60 seconds. This value can be overriden at runtime by modifying
            the system group's `Timestep` property.
            </remarks>
        </member>
        <member name="P:Unity.Entities.FixedStepSimulationSystemGroup.Timestep">
            <summary>
            Set the timestep use by this group, in seconds. The default value is 1/60 seconds.
            This value will be clamped to the range [0.0001f ... 10.0f].
            </summary>
        </member>
        <member name="M:Unity.Entities.FixedStepSimulationSystemGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the beginning of the <see cref="T:Unity.Entities.VariableRateSimulationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.BeginVariableRateSimulationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the end of the <see cref="T:Unity.Entities.VariableRateSimulationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.EndVariableRateSimulationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.VariableRateSimulationSystemGroup">
            <summary>
            This system group is configured by default to use a variable update rate of ~15fps (66ms).
            </summary>
            <remarks>
            The value of `Time.ElapsedTime` and `Time.DeltaTime` will be temporarily overriden
            while this group is updating to the value total elapsed time since the previous update.
            You can configure the update rate manually by replacing the <see cref="T:Unity.Entities.IRateManager"/>.
            </remarks>
        </member>
        <member name="P:Unity.Entities.VariableRateSimulationSystemGroup.Timestep">
            <summary>
            The timestep use by this group, in seconds. This value will reflect the total elapsed time since the last update.
            </summary>
        </member>
        <member name="M:Unity.Entities.VariableRateSimulationSystemGroup.#ctor">
            <summary>
            Construct a new VariableRateSimulationSystemGroup object
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginSimulationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the beginning of the <see cref="T:Unity.Entities.SimulationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginSimulationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.BeginSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.BeginSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.BeginSimulationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.BeginSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.BeginSimulationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.BeginSimulationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.EndSimulationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the end of the <see cref="T:Unity.Entities.SimulationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.EndSimulationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.EndSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.EndSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.EndSimulationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.EndSimulationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.EndSimulationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.EndSimulationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.LateSimulationSystemGroup">
            <summary>
            Default group that runs at the end of the <see cref="T:Unity.Entities.SimulationSystemGroup"/>. Contains systems that perform simulation logic,
            but which should run after the main simulation logic is complete.
            </summary>
        </member>
        <member name="T:Unity.Entities.SimulationSystemGroup">
            <summary>
            Default system group that contains systems that update the simulated world for a new frame.
            </summary>
        </member>
        <member name="M:Unity.Entities.SimulationSystemGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginPresentationEntityCommandBufferSystem">
            <summary>
            The <see cref="T:Unity.Entities.EntityCommandBufferSystem"/> at the beginning of the <see cref="T:Unity.Entities.PresentationSystemGroup"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.BeginPresentationEntityCommandBufferSystem.Singleton">
            <summary>
            Call <see cref="M:Unity.Entities.SystemAPI.GetSingletonRW``1"/> to get this component for this system, and then call
            <see cref="M:Unity.Entities.BeginPresentationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> on this singleton to create an ECB to be played back by this system.
            </summary>
            <remarks>
            Useful if you want to record entity commands now, but play them back at a later point in
            the frame, or early in the next frame.
            </remarks>
        </member>
        <member name="M:Unity.Entities.BeginPresentationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)">
            <summary>
            Create a command buffer for the parent system to play back.
            </summary>
            <remarks>The command buffers created by this method are automatically added to the system's list of
            pending buffers.</remarks>
            <param name="world">The world in which to play it back.</param>
            <returns>The command buffer to record to.</returns>
        </member>
        <member name="M:Unity.Entities.BeginPresentationEntityCommandBufferSystem.Singleton.SetPendingBufferList(Unity.Collections.LowLevel.Unsafe.UnsafeList{Unity.Entities.EntityCommandBuffer}@)">
            <summary>
            Sets the list of command buffers to play back when this system updates.
            </summary>
            <remarks>This method is only intended for internal use, but must be in the public API due to language
            restrictions. Command buffers created with <see cref="M:Unity.Entities.BeginPresentationEntityCommandBufferSystem.Singleton.CreateCommandBuffer(Unity.Entities.WorldUnmanaged)"/> are automatically added to
            the system's list of pending buffers to play back.</remarks>
            <param name="buffers">The list of buffers to play back. This list replaces any existing pending command buffers on this system.</param>
        </member>
        <member name="M:Unity.Entities.BeginPresentationEntityCommandBufferSystem.Singleton.SetAllocator(Unity.Collections.Allocator)">
            <summary>
            Set the allocator that command buffers created with this singleton should be allocated with.
            </summary>
            <param name="allocatorIn">The allocator to use</param>
        </member>
        <member name="M:Unity.Entities.BeginPresentationEntityCommandBufferSystem.OnCreate">
            <inheritdoc cref="M:Unity.Entities.EntityCommandBufferSystem.OnCreate"/>
        </member>
        <member name="T:Unity.Entities.PresentationSystemGroup">
            <summary>
            The system group containing systems related to rendering the simulated world.
            </summary>
        </member>
        <member name="M:Unity.Entities.PresentationSystemGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Unity.Entities.ComponentSystemGroup">
            <summary>
            A special-case system that encapsulates an ordered list of other systems. When the group is updated, the group's
            member systems are updated in order.
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentSystemGroup.EnableSystemSorting">
             <summary>If true (the default), calling SortSystems() will sort the system update list, respecting the constraints
             imposed by [UpdateBefore] and [UpdateAfter] attributes.</summary>
             <remarks>SortSystems() is called automatically during
             DefaultWorldInitialization, as well as at the beginning of ComponentSystemGroup.OnUpdate(), but may also be
             called manually.
            
             If false, calls to SortSystems() on this system group will have no effect on update order of systems in this
             group (though SortSystems() will still be called recursively on any child system groups). The group's systems
             will update in the order of the most recent sort operation, with any newly-added systems updating in
             insertion order at the end of the list.
            
             Setting this value to false is not recommended unless you know exactly what you're doing, and you have full
             control over the systems which will be updated in this group.
             </remarks>
        </member>
        <member name="P:Unity.Entities.ComponentSystemGroup.Created">
            <summary>
            Checks if the system group is in a fully initialized and valid state
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentSystemGroup.Systems">
            <summary>
            The ordered list of managed systems in this group.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.OnCreate">
            <inheritdoc cref="!:SystemBase.OnCreate"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.OnDestroy">
            <inheritdoc cref="!:SystemBase.OnDestroy"/>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.AddSystemToUpdateList(Unity.Entities.ComponentSystemBase)">
            <summary>
            Appends a managed system to the group's update list. The list will be sorted the next time the group is updated.
            </summary>
            <param name="sys">The system to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if a group is added to itself.</exception>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.AddSystemToUpdateList(Unity.Entities.SystemHandle)">
            <summary>
            Appends an unmanaged system to the group's update list. The list will be sorted the next time the group is updated.
            </summary>
            <param name="sysHandle">The system to add</param>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.RemoveSystemFromUpdateList(Unity.Entities.ComponentSystemBase)">
            <summary>
            Requests that a managed system be removed from the group's update list. The system will be removed the next time the group is sorted.
            </summary>
            <param name="sys">The system to remove</param>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.RemoveSystemFromUpdateList(Unity.Entities.SystemHandle)">
            <summary>
            Requests that an unmanaged system be removed from the group's update list. The system will be removed the next time the group is sorted.
            </summary>
            <param name="sys">The system to remove</param>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.SortSystems">
            <summary>
            Update the component system's sort order.
            </summary>
        </member>
        <member name="P:Unity.Entities.ComponentSystemGroup.FixedRateManager">
            <summary>Obsolete. Use <see cref="P:Unity.Entities.ComponentSystemGroup.RateManager"/> instead.</summary>
        </member>
        <member name="P:Unity.Entities.ComponentSystemGroup.RateManager">
            <summary>
            Optional field to control the update rate of this system group.
            </summary>
            <remarks>
            No group allocator is created when setting rate manager.
            </remarks>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.SetRateManagerCreateAllocator(Unity.Entities.IRateManager)">
            <summary>
            Set optional rate manager for the system group and create group allocator.
            </summary>
            <remarks>
            Create a group allocator for this system group if not created already.
            </remarks>
            <param name="rateManager">The <see cref="T:Unity.Entities.IRateManager"/> to set the allocator to</param>
        </member>
        <member name="P:Unity.Entities.ComponentSystemGroup.RateGroupAllocators">
            <summary>
            Retrieve double rewindable allocators of this rate system group.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.OnUpdate">
            <summary>
            Updates the group's systems
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.CreateRateGroupAllocators">
            <summary>
            Create a double rewindable allocators for rate sytem groups.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroup.DestroyRateGroupAllocators">
            <summary>
            Destroy the double rewindable allocators for rate sytem groups.
            </summary>
        </member>
        <member name="T:Unity.Entities.ComponentSystemGroupExtensions">
            <summary>
            Obsolete. This class only contains deprecated extension methods.
            </summary>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroupExtensions.RemoveUnmanagedSystemFromUpdateList(Unity.Entities.ComponentSystemGroup,Unity.Entities.SystemHandle)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ComponentSystemGroup.RemoveSystemFromUpdateList(Unity.Entities.ComponentSystemBase)"/> instead.</summary>
            <param name="self">The component system group.</param>
            <param name="sysHandle">TheSystemHandle</param>
        </member>
        <member name="M:Unity.Entities.ComponentSystemGroupExtensions.AddUnmanagedSystemToUpdateList(Unity.Entities.ComponentSystemGroup,Unity.Entities.SystemHandle)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.ComponentSystemGroup.AddSystemToUpdateList(Unity.Entities.ComponentSystemBase)"/> instead.</summary>
            <param name="self">The component system group.</param>
            <param name="sysHandle">TheSystemHandle</param>
        </member>
        <member name="T:Unity.Entities.EntityInChunk">
            <summary>
            Represents a single entity within a chunk. Mainly used internally to sort lists of entities into chunk order.
            </summary>
        </member>
        <member name="M:Unity.Entities.EntityInChunk.CompareTo(Unity.Entities.EntityInChunk)">
            <summary>
            Compares two <see cref="T:Unity.Entities.EntityInChunk"/> objects to determine their relative ordering
            </summary>
            <param name="other">The other instance to compare.</param>
            <returns>-1 if this entity should be ordered earlier than <paramref name="other"/>. 1 if this entity should
            be ordered later than <paramref name="other"/>. 0 if the two entities are equivalent.</returns>
        </member>
        <member name="M:Unity.Entities.EntityInChunk.Equals(Unity.Entities.EntityInChunk)">
            <summary>
            Compares two <see cref="T:Unity.Entities.EntityInChunk"/> instances for equality/
            </summary>
            <param name="other">The other instance to compare.</param>
            <returns>True if the two instances refer to the same entity in the same chunk.</returns>
        </member>
        <member name="T:Unity.Entities.SystemHandleUntyped">
            <summary> Obsolete. Use <see cref="T:Unity.Entities.SystemHandle"/> instead.</summary>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.CompareTo(Unity.Entities.SystemHandleUntyped)">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.CompareTo(Unity.Entities.SystemHandle)"/>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.Equals(System.Object)">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.Equals(System.Object)"/>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.Equals(Unity.Entities.SystemHandleUntyped)">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.Equals(Unity.Entities.SystemHandle)"/>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.GetHashCode">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.GetHashCode"/>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.op_Equality(Unity.Entities.SystemHandleUntyped,Unity.Entities.SystemHandleUntyped)">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.op_Equality(Unity.Entities.SystemHandle,Unity.Entities.SystemHandle)"/>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.op_Inequality(Unity.Entities.SystemHandleUntyped,Unity.Entities.SystemHandleUntyped)">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.op_Inequality(Unity.Entities.SystemHandle,Unity.Entities.SystemHandle)"/>
        </member>
        <member name="M:Unity.Entities.SystemHandleUntyped.Update(Unity.Entities.WorldUnmanaged)">
            <inheritdoc cref="M:Unity.Entities.SystemHandle.Update(Unity.Entities.WorldUnmanaged)"/>
        </member>
        <member name="T:Unity.Entities.SystemHandle">
            <summary>
            An identifier representing a system instance in a particular world.
            </summary>
        </member>
        <member name="M:Unity.Entities.SystemHandle.CompareTo(Unity.Entities.SystemHandle)">
            <summary>
            Implements IComparable interface for usage in generic sorted containers
            </summary>
            <param name="other">The SystemHandle being compared against</param>
            <returns>Value representing relative order compared to another SystemHandle</returns>
        </member>
        <member name="M:Unity.Entities.SystemHandle.Equals(System.Object)">
            <summary>
            SystemHandle instances are equal if they refer to the same system instance.
            </summary>
            <param name="obj">The object to compare to this SystemHandle.</param>
            <returns>True, if the obj is a SystemHandle object and both SystemHandles represent the same system instance.</returns>
        </member>
        <member name="M:Unity.Entities.SystemHandle.Equals(Unity.Entities.SystemHandle)">
            <summary>
            Implements IEquatable interface for usage in generic containers.
            SystemHandle instances are equal if they refer to the same system instance.
            </summary>
            <param name="other">Another SystemHandle instance.</param>
            <returns>True, if both SystemHandles represent the same system instance.</returns>
        </member>
        <member name="M:Unity.Entities.SystemHandle.GetHashCode">
            <summary>
            A hash used for comparisons.
            </summary>
            <returns>A reproducable hash code for this SystemHandle's contents</returns>
        </member>
        <member name="M:Unity.Entities.SystemHandle.op_Equality(Unity.Entities.SystemHandle,Unity.Entities.SystemHandle)">
            <summary>
            SystemHandle instances are equal if they refer to the same system instance.
            </summary>
            <param name="lhs">A SystemHandle instance.</param>
            <param name="rhs">Another SystemHandle instance.</param>
            <returns>True, if both SystemHandles represent the same system instance.</returns>
        </member>
        <member name="M:Unity.Entities.SystemHandle.op_Inequality(Unity.Entities.SystemHandle,Unity.Entities.SystemHandle)">
            <summary>
            SystemHandle instances are equal if they refer to the same system instance.
            </summary>
            <param name="lhs">A SystemHandle instance.</param>
            <param name="rhs">Another SystemHandle instance.</param>
            <returns>True, if the SystemHandles represent different system instances.</returns>
        </member>
        <member name="P:Unity.Entities.SystemHandle.Null">
            <summary>
            A "blank" SystemHandle that does not refer to an actual system.
            </summary>
        </member>
        <member name="M:Unity.Entities.SystemHandle.Update(Unity.Entities.WorldUnmanaged)">
            <summary>
            Update the system manually.
            </summary>
            <remarks>
            If a system manually calls another system's <see cref="M:Unity.Entities.SystemHandle.Update(Unity.Entities.WorldUnmanaged)"/> method from inside its own
            <see cref="M:Unity.Entities.ISystem.OnUpdate(Unity.Entities.SystemState@)"/> method, <see cref="T:Unity.Entities.EntityQuery"/> objects in the caller
            system might see unexpected and incorrect change version numbers based on the processing performed in the
            target system. For this reason, you shouldn't manually update one system from another if both systems are
            processing entity data, especially if either uses <see cref="M:Unity.Entities.EntityQuery.SetChangedVersionFilter(Unity.Entities.ComponentType[])"/>.
            This guidance doesn't apply to <see cref="T:Unity.Entities.ComponentSystemGroup"/> or other "pass-through" systems which only
            update other systems without manipulating entity data.
            </remarks>
            <param name="world">The <see cref="T:Unity.Entities.WorldUnmanaged"/> for the <see cref="T:Unity.Entities.World"/> instance this handle belongs to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if this SystemHandle is invalid or does not belong to this world.</exception>
        </member>
        <member name="T:Unity.Entities.WorldUnmanaged">
            <summary>
            A pointer-to-implementation for the unmanaged representation of a World.
            </summary>
            <remarks>This is intended to stay small (8 bytes without collections checks, 32 bytes with padding with
            collections checks), because it is intended to be cheaply passed around by value.
            </remarks>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.EntityManager">
            <summary>
            An interface to manipulate the World's entity data from the main thread
            </summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.Name">
            <summary>
            The name of the World
            </summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.Time">
            <summary>
            The world's simulated time, include elapsed time since World creation and the delta time since the previous update.
            </summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.Flags">
            <summary>
            The <see cref="T:Unity.Entities.WorldFlags"/> settings for this World
            </summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.MaximumDeltaTime">
            <summary>
            The maximum single-frame delta time permitted in this world.
            </summary>
            <remarks>If a frame takes longer than this to simulate and render, the delta time reported for the next
            frame will be clamped to this value. This can prevent an out-of-control negative feedback loop.</remarks>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.SequenceNumber">
            <summary>
            The World's current sequence number
            </summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.Version">
            <summary>
            The World's current version number
            </summary>
        </member>
        <member name="F:Unity.Entities.WorldUnmanaged.NextSequenceNumber">
            <summary>Increments whenever a world is created or destroyed, or when an EntityQuery is created.</summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.IsCreated">
            <summary>
            Has this World been successfully initialized?
            </summary>
        </member>
        <member name="P:Unity.Entities.WorldUnmanaged.UpdateAllocator">
            <summary>
            Rewindable allocator instance for this World.
            </summary>
            <remarks>Useful for fast, thread-safe temporary memory allocations which do not need to be explicitly disposed.
            All allocations from this allocator are automatically disposed en masse after two full World updates.  Behind
            the world update allocator are double rewindable allocators, and the two allocators are switched in each world
            update.  Therefore user should not cache the world update allocator. </remarks>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.TryGetSystemStateForId(System.Int32)">
            <returns>Null if not found.</returns>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.ResolveSystemStateRef(Unity.Entities.SystemHandle)">
            <summary>
            Resolves the system handle to a reference to its underlying system state.
            </summary>
            <param name="id">The system handle</param>
            <returns>A reference to the <see cref="T:Unity.Entities.SystemState"/> for this system</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the system handle is invalid or does not belong to this world.</exception>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.GetUnsafeSystemRef``1(Unity.Entities.SystemHandle)">
             <summary>
             Resolves the system handle to a reference to its underlying system instantiation.
             </summary>
             <remarks>
             This system reference is not guaranteed to be safe to use. If the system or world is destroyed then the reference
             becomes invalid and will likely lead to corrupted program state if used.
            
             Generally, instead of public member data, prefer using component data for system level data that needs to be
             shared between systems or externally to them. This defines a data protocol for the system which is separated
             from the system functionality.
            
             Private member data which is only used internally to the system is recommended.
            
             `GetUnsafeSystemRef`, though provided as a backdoor to system instance data, is not recommended for
             usage in production or any non-throwaway code, as it
             - encourages coupling of data and functionality
             - couples data to the system type with no direct path to decouple
             - does not provide lifetime or thread safety guarantees for data
             - does not provide lifetime or thread safety guarantees for system access through the returned ref
             </remarks>
             <typeparam name="T">The system type</typeparam>
             <param name="id">The system handle</param>
             <returns>A reference to the concrete <see cref="T:Unity.Entities.ISystem"/> compatible instance for this system</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if the system handle is invalid or does not belong to this world.</exception>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.GetExistingUnmanagedSystem``1">
            <summary>
            Return an existing instance of a system of type <typeparamref name="T"/> in this World.
            </summary>
            <typeparam name="T">The system type</typeparam>
            <returns>The existing instance of system type <typeparamref name="T"/> in this World. If no such instance exists, the method returns default.</returns>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.GetExistingSystemState``1">
            <summary>
            Return the system state for an existing instance of a system of type <typeparamref name="T"/> in this World.
            </summary>
            <typeparam name="T">The system type</typeparam>
            <returns>The system state for the existing instance of system type <typeparamref name="T"/> in this World. If no such instance exists, throws.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no such system of type <typeparamref name="T"/> exists in the World.</exception>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.GetExistingUnmanagedSystem(System.Type)">
            <summary>
            Return an existing instance of a system of type <paramref name="type"/> in this World.
            </summary>
            <param name="type">The system type</param>
            <returns>The existing instance of system type <paramref name="type"/> in this World. If no such instance exists, the method returns SystemHandle.Null.</returns>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.IsSystemValid(Unity.Entities.SystemHandle)">
            <summary>
            Checks whether a system identified by its system handle exists and is in a valid state
            </summary>
            <param name="id">The system handle</param>
            <returns>True if the system handle identifies a valid system, false otherwise</returns>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.ResolveSystem``1(Unity.Entities.SystemHandle)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.WorldUnmanaged.GetUnsafeSystemRef``1(Unity.Entities.SystemHandle)"/> instead.</summary>
            <param name="systemHandle">The system handle</param>
            <typeparam name="T">The unmanaged system</typeparam>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.GetAllUnmanagedSystems(Unity.Collections.Allocator)">
            <summary>
            Retrieve an array of all unmanaged systems in this world
            </summary>
            <param name="a">Allocator used for the returned container</param>
            <returns>An array of system instances</returns>
        </member>
        <member name="M:Unity.Entities.WorldUnmanaged.GetAllSystems(Unity.Collections.Allocator)">
            <summary>
            Retrieve an array of all systems in this world, both unmanaged and managed
            </summary>
            <param name="a">Allocator used for the returned container</param>
            <returns>An array of system instances</returns>
        </member>
        <member name="T:Unity.Entities.SystemBase">
             <summary>
             Implement SystemBase to create a system in ECS.
             </summary>
             <remarks>
             ### Systems in ECS
            
             A typical system operates on a set of entities that have specific components. The system identifies
             the components of interest, reading and writing data, and performing other entity operations as appropriate.
            
             The following example shows a basic system that iterates over entities using a [Entities.ForEach] construction.
             In this  example, the system iterates over all entities with both a Displacement and a Velocity component and
             updates the Displacement based on the delta time elapsed since the last frame.
            
             <example>
             <code source="../DocCodeSamples.Tests/SystemBaseExamples.cs" region="basic-system" title="Basic System Example" language="csharp"/>
             </example>
            
             #### System lifecycle callbacks
            
             You can define a set of system lifecycle event functions when you implement a system. The runtime invokes these
             functions in the following order:
            
             * <see cref="M:Unity.Entities.ComponentSystemBase.OnCreate"/> -- called when the system is created.
             * <see cref="M:Unity.Entities.ComponentSystemBase.OnStartRunning"/> -- before the first OnUpdate and whenever the system resumes
               running.
             * <see cref="M:Unity.Entities.SystemBase.OnUpdate"/> -- every frame as long as the system has work to do (see
               <see cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/>) and the system is <see cref="P:Unity.Entities.ComponentSystemBase.Enabled"/>.
             * <see cref="M:Unity.Entities.ComponentSystemBase.OnStopRunning"/> -- whenever the system stops updating because it finds no
               entities matching its queries. Also called before OnDestroy.
             * <see cref="M:Unity.Entities.ComponentSystemBase.OnDestroy"/> -- when the system is destroyed.
            
             All of these functions are executed on the main thread. To perform work on background threads, you can schedule
             jobs from the <see cref="M:Unity.Entities.SystemBase.OnUpdate"/> function.
            
             #### System update order
            
             The runtime executes systems in the order determined by their <see cref="T:Unity.Entities.ComponentSystemGroup"/>. Place a system
             in a group using <see cref="T:Unity.Entities.UpdateInGroupAttribute"/>. Use <see cref="T:Unity.Entities.UpdateBeforeAttribute"/> and
             <see cref="T:Unity.Entities.UpdateAfterAttribute"/> to specify the execution order within a group.
            
             If you do not explicitly place a system in a specific group, the runtime places it in the default <see cref="T:Unity.Entities.World"/>
             <see cref="T:Unity.Entities.SimulationSystemGroup"/>. By default, all systems are discovered, instantiated, and added to the
             default World. You can use the <see cref="T:Unity.Entities.DisableAutoCreationAttribute"/> to prevent a system from being
             created automatically.
            
             #### Entity queries
            
             A system caches all queries created through an [Entities.ForEach] construction, through
             [ComponentSystemBase.GetEntityQuery], or through [ComponentSystemBase.RequireForUpdate]. By default,
             a system calls `OnUpdate()` every frame. You can use the <see cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/>
             to make the system only update when one of these cached queries finds Entities. See
             <see cref="M:Unity.Entities.ComponentSystemBase.ShouldRunSystem"/> for more details on whether
             a system will update.
            
             #### Entities.ForEach and Job.WithCode constructions
            
             The <see cref="P:Unity.Entities.SystemBase.Entities"/> property provides a convenient mechanism for iterating over entity
             data. Using an [Entities.ForEach] construction, you can define your entity query, specify a lambda expression
             to run for each entity, and either schedule the work to be done on a background thread or execute the work
             immediately on the main thread.
            
             The [Entities.ForEach] construction uses a C# compiler extension to take a data query syntax that describes
             your intent and translate it into efficient (optionally) job-based code.
            
             The <see cref="P:Unity.Entities.SystemBase.Job"/> property provides a similar mechanism for defining a [C# Job]. You can only use
             `Schedule()`to run a [Job.WithCode] construction, which executes the lambda expression as a single job.
            
             #### System attributes
            
             You can use a number of attributes on your SystemBase implementation to control when it updates:
            
             * <seealso cref="T:Unity.Entities.UpdateInGroupAttribute"/> -- place the system in a <seealso cref="T:Unity.Entities.ComponentSystemGroup"/>.
             * <seealso cref="T:Unity.Entities.UpdateBeforeAttribute"/> -- always update the system before another system in the same group.
             * <seealso cref="T:Unity.Entities.UpdateAfterAttribute"/> -- always update the system after another system in the same group.
             * <seealso cref="T:Unity.Entities.RequireMatchingQueriesForUpdateAttribute"/> -- skip `OnUpdate` if every EntityQuery used by
               the system is empty.
             * <seealso cref="T:Unity.Entities.DisableAutoCreationAttribute"/> -- do not create the system automatically.
             * <seealso cref="T:Unity.Entities.AlwaysSynchronizeSystemAttribute"/> -- force a [sync point](xref:concepts-structural-changes) before invoking
               `OnUpdate`.
            
             [JobHandle]: xref:Unity.Jobs.JobHandle
             [JobHandle.CompleteDependencies]: xref:Unity.Jobs.JobHandle.CombineDependencies
             [C# Job]: xref:JobSystem
             [ECB]: xref:Unity.Entities.EntityCommandBuffer
             [ComponentSystemBase.GetEntityQuery]: xref:Unity.Entities.ComponentSystemBase.GetEntityQuery*
             [ComponentSystemBase.RequireForUpdate]: xref:Unity.Entities.ComponentSystemBase.RequireForUpdate*
             [Entities.ForEach]: xref:iterating-data-entities-foreach
             [Job.WithCode]: xref:iterating-data-entities-foreach
             </remarks>
        </member>
        <member name="P:Unity.Entities.SystemBase.Dependency">
             <summary>
             The ECS-related data dependencies of the system.
             </summary>
             <remarks>
             Before <see cref="M:Unity.Entities.SystemBase.OnUpdate"/>, the Dependency property represents the combined job handles of any job that
             writes to the same components that the current system reads -- or reads the same components that the current
             system writes to. When you use [Entities.ForEach] or [Job.WithCode], the system uses the Dependency property
             to specify a job’s dependencies when scheduling it. The system also combines the new job's [JobHandle]
             with Dependency so that any subsequent job scheduled in the system depends on the earlier jobs (in sequence).
            
             The following example illustrates an `OnUpdate()` implementation that relies on implicit dependency
             management. The function schedules three jobs, each depending on the previous one:
            
             <example>
             <code source="../DocCodeSamples.Tests/SystemBaseExamples.cs" region="simple-dependency" title="Implicit Dependency Example" language="csharp"/>
             </example>
            
             You can opt out of this default dependency management by explicitly passing a [JobHandle] to
             [Entities.ForEach] or [Job.WithCode]. When you pass in a [JobHandle], these constructions also return a
             [JobHandle] representing the input dependencies combined with the new job. The [JobHandle] objects of any
             jobs scheduled with explicit dependencies are not combined with the system’s Dependency property. You must set the Dependency
             property manually to make sure that later systems receive the correct job dependencies.
            
             The following <see cref="M:Unity.Entities.SystemBase.OnUpdate"/> function illustrates manual dependency management. The function uses
             two [Entity.ForEach] constructions that schedule jobs which do not depend upon each other, only the incoming
             dependencies of the system. Then a [Job.WithCode] construction schedules a job that depends on both of the
             prior jobs, who’s dependencies are combined using [JobHandle.CombineDependencies]. Finally, the [JobHandle]
             of the last job is assigned to the Dependency property so that the ECS safety manager can propagate the
             dependencies to subsequent systems.
            
             <example>
             <code source="../DocCodeSamples.Tests/SystemBaseExamples.cs" region="manual-dependency" title="Manual Dependency Example" language="csharp"/>
             </example>
            
             You can combine implicit and explicit dependency management (by using [JobHandle.CombineDependencies]);
             however, doing so can be error prone. When you set the Dependency property, the assigned [JobHandle]
             replaces any existing dependency, it is not combined with them.
            
             Note that the default, implicit dependency management does not include <see cref="T:Unity.Entities.IJobChunk"/> jobs.
             You must manage the dependencies for <see cref="T:Unity.Entities.IJobChunk"/> explicitly.
            
             [JobHandle]: https://docs.unity3d.com/ScriptReference/Unity.Jobs.JobHandle.html
             [JobHandle.CombineDependencies]: https://docs.unity3d.com/ScriptReference/Unity.Jobs.JobHandle.CombineDependencies.html
             [Entities.ForEach]: xref:iterating-data-entities-foreach
             [Job.WithCode]: xref:job-with-code
             </remarks>
        </member>
        <member name="P:Unity.Entities.SystemBase.CheckedStateRef">
            <summary>
            The <see cref="T:Unity.Entities.SystemState"/> for this SystemBase.
            </summary>
            <remarks>
            All systems are backed by a <see cref="T:Unity.Entities.SystemState"/>. This may be required in, for example, general purpose
            utility methods containing a `ref <see cref="T:Unity.Entities.SystemState"/>` parameter.
            </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.CompleteDependency">
            <summary>
            Completes job handles registered with this system. See <see cref="P:Unity.Entities.SystemBase.Dependency"/> for
            more information.
            </summary>
        </member>
        <member name="P:Unity.Entities.SystemBase.Entities">
             <summary>
             Provides a mechanism for defining an entity query and invoking a lambda expression on each entity
             selected by that query.
             </summary>
             <remarks>
             The Entities property provides a convenient mechanism for implementing the most common operation
             performed by systems in ECS, namely, iterating over a set of entities to read and update component
             data. Entities provides a LINQ method-style syntax that you use to describe the work to be performed.
             Unity uses a compiler extension to convert the description into efficient, (optionally) multi-threaded
             executable code.
            
             <example>
             <code source="../DocCodeSamples.Tests/SystemBaseExamples.cs" region="entities-foreach-basic" title="Basic ForEach Example" language="csharp"/>
             </example>
            
             ##### **Describing the entity query**
            
             The components that you specify as parameters for a lambda expression are automatically added to
             the entity query created for an Entities.Foreach construction. You can also add a number of "With"
             clauses to identify which entities that you want to process These clauses include:
            
             * **`WithAll`** -- An entity must have all of these component types (in addition to having all
             the component types found in the lambda parameter list).
            
             * **`WithAny`** -- An entity must have one or more of these component types.
            
             * **`WithNone`** -- An entity must not have any of these component types.
            
             * **`WithChangeFilter()`** -- Only selects entities in chunks in which the specified component might have
               changed since the last time this system instance updated.
            
             * **`WithSharedComponentFilter(ISharedComponentData)`** -- Only select chunks that have a specified value
               for a shared component.
            
             * **`WithOptions(EntityQueryOptions)`** -- Specify additonal options defined in a
               <see cref="T:Unity.Entities.EntityQueryOptions"/> object.
            
             * **`WithStoreEntityQueryInField(EntityQuery)`** -- Stores the <see cref="T:Unity.Entities.EntityQuery"/> object generated
               by the Entities.ForEach in an EntityQuery field on your system. You can use this EntityQuery object for
               such purposes as getting the number of entities that will be selected by the query. Note that this function
               assigns the EntityQuery instance to your field
               when the system is created. This means that you can use the query before the first execution of the
               lambda expression.
            
             ##### **Defining the lambda expression**
            
             Define the lambda expression inside the `ForEach()` method of the entities property. When the system invokes the
             lambda expression, it assigns values to the function parameters based on the current entity. You can pass ECS
             component types as parameters as well as a set of special, named parameters.
            
             1. Parameters passed-by-value first (no parameter modifiers)
             2. Writable parameters second(`ref` parameter modifier)
             3. Read-only parameters last(`in` parameter modifier)
            
             All components should use either the `ref` or the `in` parameter modifier keywords.
            
             You can pass up to eight parameters to the lambda expression. In addition to ECS component types, you can use
             the following:
            
             * **`Entity entity`** — the Entity instance of the current entity. (The parameter can be named anything as
               long as the type is Entity.)
            
             * **`int entityInQueryIndex`** — the index of the entity in the list of all entities selected by the query.
               Use the entity index value when you have a [native array] that you need to fill with a unique value for
               each entity. You can use the entityInQueryIndex as the index in that array. The entityInQueryIndex should
               also be used as the `sortKey` for adding commands to a concurrent <see cref="T:Unity.Entities.EntityCommandBuffer"/>.
            
             * **`int nativeThreadIndex`** — a unique index for the thread executing the current iteration of the
               lambda expression. When you execute the lambda expression using Run(), nativeThreadIndex is always zero.
            
             <example>
             <code source="../DocCodeSamples.Tests/SystemBaseExamples.cs" region="lambda-params" title="Lambda Parameters" language="csharp"/>
             </example>
            
             ##### **Capturing variables**
            
             You can capture local variables in the lambda expression. When you execute the function using a job (by
             calling `ScheduleParallel()` or `ScheduleSingle()` instead of `Run()`) there are some restrictions on the
             captured variables and how you use them:
            
             * Only native containers and blittable types can be captured.
             * A job can only write to captured variables that are native containers.
               (To “return” a single value, create a [native array] with one element.)
            
             You can use the following functions to apply modifiers and attributes to the captured [native container]
             variables, including [native arrays]. See [Job.WithCode] for a list of these modifiers and attributes.
            
             ##### **Executing the lambda expression**
            
             To execute a ForEach construction, you have three options:
            
             * **`ScheduleParallel()`** -- schedules the work to be done in parallel using the [C# Job] system. Each
               parallel job instance processes at least one chunk of entities at a time. In other words, if all the
               selected entities are in the same chunk, then only one job instance is spawned.
            
             * **`Schedule()`** -- schedules the work to be done in a single job (no matter how many entities are
               selected).
            
             * **`Run()`** -- evaluates the entity query and invokes the lambda expression for each selected entity
               immediately on the main thread. Calling `Run()` completes the system <see cref="P:Unity.Entities.SystemBase.Dependency"/> [JobHandle]
               before running, blocking the main thread, if necessary, while it waits for those jobs to finish.
            
             When you call Schedule() or ScheduleParallel() without parameters, then the scheduled jobs use the current
             value of <see cref="P:Unity.Entities.SystemBase.Dependency"/>. You can also pass a [JobHandle] to these functions to define the dependencies
             of the scheduled job. In this case, the Entities.forEach construction returns a new [JobHandle] that adds the
             scheduled job to the passed in [JobHandle]. See <see cref="P:Unity.Entities.SystemBase.Dependency"/> for more information.
            
             ##### **Additional options**
            
             * **`WithName(string)`** -— assigns the specified string as the name of the generated job class. Assigning
               a name is optional, but can help identify the function when debugging and profiling.
             * **`WithStructuralChanges()`** -— executes the lambda expression on the main thread and disables Burst so
               that you can make structural changes to your entity data within the function. For better performance, use
               an <see cref="T:Unity.Entities.EntityCommandBuffer"/> instead.
             * **`WithoutBurst()`** —- disables Burst compilation. Use this function when your lambda expression contains
               code not supported by Burst or while debugging.
             * **`WithBurst(FloatMode, FloatPrecision, bool)`** — sets options for the Burst compiler:
                * **floatMode** —- sets the floating point math optimization mode.Fast mode executes faster, but
                  produces larger floating point error than Strict mode.Defaults to Strict. See [Burst FloatMode].
                * **floatPrecision** —- sets the floating point math precision. See [Burst FloatPrecision].
                * **synchronousCompilation** —- compiles the function immediately instead of scheduling the function
                  for compilation later.
            
             [Job.WithCode]: xref:Unity.Entities.SystemBase.Job
             [JobHandle]: xref:Unity.Jobs.JobHandle
             [native array]: xref:Unity.Collections.NativeArray`1
             [native arrays]: xref:Unity.Collections.NativeArray`1
             [native container]: xref:Unity.Collections.NativeArray`1
             [C# Job]: xref:JobSystem
             [Burst FloatMode]: https://docs.unity3d.com/Packages/com.unity.burst@latest?subfolder=/api/Unity.Burst.FloatMode.html
             [Burst FloatPrecision]: https://docs.unity3d.com/Packages/com.unity.burst@latest?subfolder=/api/Unity.Burst.FloatPrecision.html
             </remarks>
        </member>
        <member name="P:Unity.Entities.SystemBase.Job">
             <summary>
             Provides a mechanism for defining and executing an [IJob].
             </summary>
             <remarks>
             The Jobs property provides a convenient mechanism for implementing single jobs. Unity uses a compiler
             extension to convert the job description you create with Job.WithCode into efficient, executable code that
             (optionally) runs in a background thread.
            
             <example>
             <code source="../DocCodeSamples.Tests/LambdaJobExamples.cs" region="job-with-code-example" title="Basic Job Example" language="csharp"/>
             </example>
            
             Implement your lambda expression inside the `Job.WithCode(lambda)` function. The lambda expression cannot
             take any parameters. You can capture local variables.
            
             * `Schedule()` -- executes the lambda expression as a single job.
             * `Run()` -- executes immediately on the main thread. Immediately before it invokes `Run()` the system
                completes all jobs with a [JobHandle] in the system <see cref="P:Unity.Entities.SystemBase.Dependency"/> property as well as any
                jobs with a [JobHandle] passed as a dependency to `Run()` as an (optional) parameter.
            
             When scheduling a job, you can pass a [JobHandle] to set the job's dependencies explicitly and the
             construction returns the updated [JobHandle] combining the earlier dependencies with the new job. If you
             do not provide a [JobHandle], the system uses <see cref="P:Unity.Entities.SystemBase.Dependency"/> when scheduling the job, and updates
             the property to include the new job automatically.
            
             You can use the additional options listed for [Entities.ForEach] with a `Job.WithCode` construction.
            
             ##### **Capturing variables**
            
             You can capture local variables in the lambda expression. When you execute the function using a job (by
             calling `Schedule()`, `ScheduleParallel()` or `ScheduleSingle()` instead of `Run()`) there are some
             restrictions on the captured variables and how you use them:
            
             * Only native containers and blittable types can be captured.
             * A job can only write to captured variables that are native containers.
               (To “return” a single value, create a [native array] with one element.)
            
             You can use the following functions to apply modifiers and attributes to the captured [native container]
             variables, including [native arrays]:
            
             * **`WithReadOnly(myvar)`** — restricts access to the variable as read-only.
            
             * **`WithDisposeOnCompletion(myvar)`** — indicates that you want captured NativeContainers or types that
               contain NativeContainers to be Disposed of after your lambda runs.
            
             * **`WithNativeDisableParallelForRestriction(myvar)`** — permits multiple threads to access the same
               writable native container. Parallel access is only safe when each thread only accesses its own, unique
               range of elements in the container. If more than one thread accesses the same element a race condition is
               created in which the timing of the access changes the result. See [NativeDisableParallelForRestriction].
            
             * **`WithNativeDisableContainerSafetyRestriction(myvar)`** — disables normal safety restrictions that
               prevent dangerous access to the native container. Disabling safety restrictions unwisely can lead to race
               conditions, subtle bugs, and crashes in your application. See [NativeDisableContainerSafetyRestrictionAttribute].
            
             * **`WithNativeDisableUnsafePtrRestrictionAttribute(myvar)`** — Allows you to use unsafe pointers provided
               by the native container. Incorrect pointer use can lead to subtle bugs, instability, and crashes in your
               application. See [NativeDisableUnsafePtrRestrictionAttribute].
            
             [DeallocateOnJobCompletionAttribute]: xref:Unity.Collections.DeallocateOnJobCompletionAttribute
             [NativeDisableParallelForRestriction]: xref:Unity.Collections.NativeDisableParallelForRestrictionAttribute
             [NativeDisableContainerSafetyRestrictionAttribute]: xref:Unity.Collections.LowLevel.Unsafe.NativeDisableContainerSafetyRestrictionAttribute
             [NativeDisableUnsafePtrRestrictionAttribute]: xref:Unity.Collections.LowLevel.Unsafe.NativeDisableUnsafePtrRestrictionAttribute
             [JobHandle]: xref:Unity.Jobs.JobHandle
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             [IJob]: xref:Unity.Jobs.IJob
             </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.Update">
             <summary>
             Update the system manually.
             </summary>
             <remarks>
             Systems should never override `Update()`. Instead, implement system behavior in <see cref="M:Unity.Entities.SystemBase.OnUpdate"/>.
            
             If a system manually calls another system's <see cref="M:Unity.Entities.SystemBase.Update"/> method from inside its own
             <see cref="M:Unity.Entities.SystemBase.OnUpdate"/> method, <see cref="T:Unity.Entities.EntityQuery"/> objects in the caller
             system might see unexpected and incorrect change version numbers based on the processing performed in the
             target system. For this reason, you shouldn't manually update one system from another if both systems are
             processing entity data, especially if either uses <see cref="M:Unity.Entities.EntityQuery.SetChangedVersionFilter(Unity.Entities.ComponentType[])"/>.
             This guidance doesn't apply to <see cref="T:Unity.Entities.ComponentSystemGroup"/> or other "pass-through" systems which only
             update other systems without manipulating entity data.
             </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.OnUpdate">
             <summary>Implement `OnUpdate()` to perform the major work of this system.</summary>
             <remarks>
             <p>
             By default, the system invokes `OnUpdate()` once every frame on the main thread.
             To skip OnUpdate if all of the system's [EntityQueries] are empty, use the
             [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can
             specify components that must exist, or queries that match specific Entities. To do
             this, call <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate``1"/> or
             <see cref="M:Unity.Entities.ComponentSystemBase.RequireForUpdate(Unity.Entities.EntityQuery)"/>
             in the system's OnCreate method. For more information, see [ShouldRunSystem].
             </p>
             <p>
             The [Entities.ForEach] and [Job.WithCode] constructions provide convenient mechanisms for defining jobs.
             You can also instantiate and schedule an <see cref="T:Unity.Entities.IJobChunk"/> instance; you can use the
             [C# Job System] or you can perform work on the main thread. If you call <see cref="T:Unity.Entities.EntityManager"/> methods
             that perform structural changes on the main thread, be sure to arrange the system order to minimize the
             performance impact of the resulting [sync points].
             </p>
            
             [sync points]: xref:concepts-structural-changes
             [C# Job System]: xref:JobSystem
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             [Job.WithCode]: xref:Unity.Entities.SystemBase.Job
             [EntityQueries]: xref:Unity.Entities.EntityQuery
             [RequireMatchingQueriesForUpdateAttribute]: xref:Unity.Entities.RequireMatchingQueriesForUpdateAttribute
             [ShouldRunSystem]: xref:Unity.Entities.ComponentSystemBase.ShouldRunSystem
             </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetComponent``1(Unity.Entities.Entity)">
             <summary>
             Look up the value of a component for an entity.
             </summary>
             <param name="entity">The entity.</param>
             <typeparam name="T">The type of component to retrieve.</typeparam>
             <returns>A struct of type T containing the component value.</returns>
             <remarks>
             Use this method to look up data in another entity using its <see cref="T:Unity.Entities.Entity"/> object. For example, if you
             have a component that contains an Entity field, you can look up the component data for the referenced
             entity using this method.
            
             When iterating over a set of entities via [Entities.ForEach], do not use this method to access data of the
             current entity in the set. This function is much slower than accessing the data directly (by passing the
             component containing the data to your lambda iteration function as a parameter).
            
             When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.EntityManager.GetComponentData``1(Unity.Entities.Entity)"/>.
             (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
             inside a job scheduled using [Entities.ForEach], this method gets replaced with component access methods
             through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
        </member>
        <member name="M:Unity.Entities.SystemBase.SetComponent``1(Unity.Entities.Entity,``0)">
             <summary>
             Sets the value of a component of an entity.
             </summary>
             <param name="entity">The entity.</param>
             <param name="component">The data to set.</param>
             <typeparam name="T">The component type.</typeparam>
             <remarks>
             Use this method to look up and set data in another entity using its <see cref="T:Unity.Entities.Entity"/> object. For example, if you
             have a component that contains an Entity field, you can update the component data for the referenced
             entity using this method.
            
             When iterating over a set of entities via [Entities.ForEach], do not use this method to update data of the
             current entity in the set. This function is much slower than accessing the data directly (by passing the
             component containing the data to your lambda iteration function as a parameter).
            
             When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.EntityManager.SetComponentData``1(Unity.Entities.Entity,``0)"/>.
             (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
             inside a job scheduled using [Entities.ForEach], this method gets replaced with component access methods
             through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <exception cref="T:System.ArgumentException">Thrown if the component type has no fields.</exception>
        </member>
        <member name="M:Unity.Entities.SystemBase.HasComponent``1(Unity.Entities.Entity)">
             <summary>
             Checks whether an entity has a specific type of component.
             </summary>
             <param name="entity">The Entity object.</param>
             <typeparam name="T">The data type of the component.</typeparam>
             <remarks>
             Always returns false for an entity that has been destroyed.
            
             Use this method to check if another entity has a given type of component using its <see cref="T:Unity.Entities.Entity"/>
             object. For example, if you have a component that contains an Entity field, you can check whether the
             referenced entity has a specific type of component using this method. (Entities in the set always have
             required components, so you don’t need to check for them.)
            
             When iterating over a set of entities via [Entities.ForEach], avoid using this method with the
             current entity in the set. It is generally faster to change your entity query methods to avoid
             optional components; this may require a different [Entities.ForEach] construction to handle
             each combination of optional and non-optional components.
            
             When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.EntityManager.HasComponent``1(Unity.Entities.Entity)"/>.
             (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
             inside a job scheduled using [Entities.ForEach], this method gets replaced with component access methods
             through <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <returns>True, if the specified entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.SystemBase.HasBuffer``1(Unity.Entities.Entity)">
             <summary>
             Checks whether an entity has a dynamic buffer of a specific IBufferElementData type.
             </summary>
             <param name="entity">The Entity object.</param>
             <typeparam name="T">The IBufferElementData type.</typeparam>
             <remarks>
             Always returns false for an entity that has been destroyed.
            
             Use this method to check if another entity has a dynamic buffer of a given IBufferElementData type using its <see cref="T:Unity.Entities.Entity"/>
             object.
            
             When iterating over a set of entities via [Entities.ForEach], avoid using this method with the
             current entity in the set. It is generally faster to change your entity query methods to avoid
             optional components; this may require a different [Entities.ForEach] construction to handle
             each combination of optional and non-optional components.
            
             When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.EntityManager.HasBuffer``1(Unity.Entities.Entity)"/>.
             (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
             inside a job scheduled using [Entities.ForEach], this method gets replaced with component access methods
             through <see cref="T:Unity.Entities.BufferLookup`1"/>.
            
             In both cases, this lookup method results in a slower, indirect memory access. When possible, organize your
             data to minimize the need for indirect lookups.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <returns>True, if the specified entity has the component.</returns>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetComponentLookup``1(System.Boolean)">
             <summary>
             Manually gets a dictionary-like container containing all components of type T, keyed by Entity.
             </summary>
             <remarks>Remember to call <see cref="M:Unity.Entities.ComponentLookup`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
             <param name="isReadOnly">Whether the data is only read, not written. Access data as
             read-only whenever possible.</param>
             <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
             <remarks>
             When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.ComponentSystemBase.GetComponentLookup``1(System.Boolean)"/>.
             (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
             inside a job scheduled using [Entities.ForEach], this method gets replaced direct access to
             <see cref="T:Unity.Entities.ComponentLookup`1"/>.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <returns>All component data of type T.</returns>
             <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetComponentLookup``1(System.Boolean)"/> as it will cache in OnCreate for you
             and call .Update(this) at the call-site. Also works in Entities.ForEach. </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetComponentDataFromEntity``1(System.Boolean)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemBase.GetComponentLookup``1(System.Boolean)"/> instead.</summary>
            <param name="isReadOnly">Whether the data is only read, not written. Access data as
            read-only whenever possible.</param>
            <typeparam name="T">A struct that implements <see cref="T:Unity.Entities.IComponentData"/>.</typeparam>
            <returns>All component data of type T.</returns>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetBuffer``1(Unity.Entities.Entity,System.Boolean)">
            <summary>
            Gets the dynamic buffer of an entity.
            </summary>
            <param name="entity">The entity.</param>
            <remarks>
            When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.EntityManager.GetBuffer``1(Unity.Entities.Entity,System.Boolean)"/>.
            (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
            inside a job scheduled using [Entities.ForEach], this method gets replaced with component access methods
            through <see cref="T:Unity.Entities.BufferLookup`1"/>.
            </remarks>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <typeparam name="T">The type of the buffer's elements.</typeparam>
            <returns>The DynamicBuffer object for accessing the buffer contents.</returns>
            <exception cref="T:System.ArgumentException">Thrown if T is an unsupported type.</exception>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetBufferLookup``1(System.Boolean)">
             <summary>
             Manually gets a BufferLookup&lt;T&gt; object that can access a <seealso cref="T:Unity.Entities.DynamicBuffer`1"/>.
             </summary>
             <remarks>Remember to call <see cref="M:Unity.Entities.BufferLookup`1.Update(Unity.Entities.SystemBase)"/>. </remarks>
             <remarks>Assign the returned object to a field of your Job struct so that you can access the
             contents of the buffer in a Job.
             When you call this method on the main thread, it invokes <see cref="M:Unity.Entities.ComponentSystemBase.GetBufferLookup``1(System.Boolean)"/>.
             (An [Entities.ForEach] function invoked with `Run()` executes on the main thread.) When you call this method
             inside a job scheduled using [Entities.ForEach], this method gets replaced direct access to
             <see cref="T:Unity.Entities.BufferLookup`1"/>.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
             a read-only fashion whenever possible.</param>
             <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
             <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
             <seealso cref="T:Unity.Entities.ComponentLookup`1"/>
             <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetBufferLookup``1(System.Boolean)"/> as it will cache in OnCreate for you
             and call .Update(this) at the call-site. Also works in Entities.ForEach. </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetBufferFromEntity``1(System.Boolean)">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemBase.GetBufferLookup``1(System.Boolean)"/> instead.</summary>
            <param name="isReadOnly">Whether the buffer data is only read or is also written. Access data in
            a read-only fashion whenever possible.</param>
            <typeparam name="T">The type of <see cref="T:Unity.Entities.IBufferElementData"/> stored in the buffer.</typeparam>
            <returns>An array-like object that provides access to buffers, indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetEntityStorageInfoLookup">
             <summary>
             Manually gets an EntityStorageInfoLookup object that can access a <see cref="T:Unity.Entities.EntityStorageInfo"/>.
             </summary>
             <remarks>Remember to call <see cref="M:Unity.Entities.EntityStorageInfoLookup.Update(Unity.Entities.SystemBase)"/>. </remarks>
             <remarks>Assign the returned object to a field of your Job struct so that you can access the
             contents in a Job.
            
             [Entities.ForEach]: xref:Unity.Entities.SystemBase.Entities
             </remarks>
             <returns>A dictionary-like object that provides access to information about how Entities are stored,
             indexed by <see cref="T:Unity.Entities.Entity"/>.</returns>
             <seealso cref="T:Unity.Entities.EntityStorageInfoLookup"/>
             <remarks> Prefer using <see cref="M:Unity.Entities.SystemAPI.GetEntityStorageInfoLookup"/> as it will cache in OnCreate for you
             and call .Update(this) at the call-site. </remarks>
        </member>
        <member name="M:Unity.Entities.SystemBase.GetStorageInfoFromEntity">
            <summary> Obsolete. Use <see cref="M:Unity.Entities.SystemBase.GetEntityStorageInfoLookup"/> instead.</summary>
            <returns>True if the given entity exists or the entity has a Cleanup Component that is yet to be destroyed</returns>
        </member>
        <member name="M:Unity.Entities.SystemBase.Exists(Unity.Entities.Entity)">
            <summary>
            Checks if the entity exists inside this system's EntityManager.
            </summary>
            <remarks>
            This returns true for an entity that was destroyed with DestroyEntity, but still has a cleanup component.
            Prefer <see cref="M:Unity.Entities.ComponentLookup`1.TryGetComponent(Unity.Entities.Entity,`0@)"/> where applicable.
            Can be used inside of Entities.ForEach.
            </remarks>
            <param name="entity">The entity to check</param>
            <returns>True if the given entity exists or the entity has a Cleanup Component that is yet to be destroyed</returns>
            <seealso cref="M:Unity.Entities.EntityManager.Exists(Unity.Entities.Entity)"/>
        </member>
        <member name="T:Unity.Entities.IJobEntity">
            <summary>
            Any type which implements this interface and also contains an `Execute()` method (with any number of parameters)
            will trigger source generation of a corresponding IJobChunk or IJobEntity type. The generated job in turn
            invokes the Execute() method on the IJobEntity type with the appropriate arguments.
            </summary>
            <remarks>
            If any SharedComponent, or ManagedComponent is part of the query, __EntityManager is generated.
            It's needed to access the components from the batch. This also means, that type of job has to run in main thread.
            </remarks>
        </member>
        <member name="T:Unity.Entities.IJobEntityChunkBeginEnd">
            <summary>
            When added to an implemented <see cref="T:Unity.Entities.IJobEntity"/> the two functions
            will be called at the beginning and end of each chunk iteration.
            </summary>
        </member>
        <member name="M:Unity.Entities.IJobEntityChunkBeginEnd.OnChunkBegin(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)">
            <summary>
            Called at the beginning of every chunk iteration in the <see cref="T:Unity.Entities.IJobEntity"/>.
            It also tells whether or not to run `Execute` on the current <see cref="T:Unity.Entities.IJobEntity"/>.
            </summary>
            <param name="chunk">An object providing access to the entities within a chunk.</param>
            <param name="unfilteredChunkIndex">The index of the current chunk within the list of all chunks in all
            archetypes matched by the <see cref="T:Unity.Entities.EntityQuery"/> that the job was run against.</param>
            <param name="useEnabledMask">If true, the contents of <paramref name="chunkEnabledMask"/> describe which
            entities in the chunk match the provided <see cref="T:Unity.Entities.EntityQuery"/> and should be processed by this job.
            If false, all entities in the chunk match the provided query, and the contents of
            <paramref name="chunkEnabledMask"/> are undefined.</param>
            <param name="chunkEnabledMask">If bit N in this mask is set, entity N in <paramref name="chunk"/> matches
            the <see cref="T:Unity.Entities.EntityQuery"/> used to schedule the job. If bit N is clear, entity N does not match the query
            and can be skipped. If N is greater than or equal to the number of entities in the chunk, bit N will always
            be clear. If <paramref name="useEnabledMask"/> is false, all entities in the chunk match the query, and the
            contents of this mask are undefined.</param>
            <returns>True if chunk should be executed.</returns>
        </member>
        <member name="M:Unity.Entities.IJobEntityChunkBeginEnd.OnChunkEnd(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@,System.Boolean)">
            <summary>
            Called at the end of every chunk iteration in the <see cref="T:Unity.Entities.IJobEntity"/>.
            Will still be called even if <see cref="M:Unity.Entities.IJobEntityChunkBeginEnd.OnChunkBegin(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/> returned false.
            You can handle this case by checking <paramref name="chunkWasExecuted"/>.
            </summary>
            <param name="chunk">An object providing access to the entities within a chunk.</param>
            <param name="unfilteredChunkIndex">The index of the current chunk within the list of all chunks in all
            archetypes matched by the <see cref="T:Unity.Entities.EntityQuery"/> that the job was run against.</param>
            <param name="useEnabledMask">If true, the contents of <paramref name="chunkEnabledMask"/> describe which
            entities in the chunk match the provided <see cref="T:Unity.Entities.EntityQuery"/> and should be processed by this job.
            If false, all entities in the chunk match the provided query, and the contents of
            <paramref name="chunkEnabledMask"/> are undefined.</param>
            <param name="chunkEnabledMask">If bit N in this mask is set, entity N in <paramref name="chunk"/> matches
            the <see cref="T:Unity.Entities.EntityQuery"/> used to schedule the job. If bit N is clear, entity N does not match the query
            and can be skipped. If N is greater than or equal to the number of entities in the chunk, bit N will always
            be clear. If <paramref name="useEnabledMask"/> is false, all entities in the chunk match the query, and the
            contents of this mask are undefined.</param>
            <param name="chunkWasExecuted">true if <see cref="M:Unity.Entities.IJobEntityChunkBeginEnd.OnChunkBegin(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/> returned true</param>
        </member>
        <member name="T:Unity.Entities.EntityInQueryIndex">
             <summary>Obsolete. Use <see cref="T:Unity.Entities.EntityIndexInQuery"/> instead.</summary>
             <remarks>**Obsolete.** Use <see cref="T:Unity.Entities.EntityIndexInQuery"/> instead.
            
             Specifies that this int parameter is used as a way to get the packed entity index inside the current query.
             Usage: An int parameter found inside the execute method of an IJobEntity.
            
             This is generally way more expensive than <see cref="T:Unity.Entities.ChunkIndexInQuery"/> and <see cref="T:Unity.Entities.EntityIndexInChunk"/>.
             As it it will schedule a <see cref="M:Unity.Entities.EntityQuery.CalculateBaseEntityIndexArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> job to get an offset buffer.
             If you just want a sortkey for your <see cref="T:Unity.Entities.EntityCommandBuffer.ParallelWriter"/> simply use <see cref="T:Unity.Entities.ChunkIndexInQuery"/>
             as it is different for every thread, which is all a ParallelWriter needs to sort with.
             </remarks>
             <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="T:Unity.Entities.EntityIndexInQuery">
            <summary>
            Specifies that this int parameter is used as a way to get the packed entity index inside the current query.
            Usage: An int parameter found inside the execute method of an IJobEntity.
            </summary>
            <remarks>
            This is generally way more expensive than <see cref="T:Unity.Entities.ChunkIndexInQuery"/> and <see cref="T:Unity.Entities.EntityIndexInChunk"/>.
            As it it will schedule a <see cref="M:Unity.Entities.EntityQuery.CalculateBaseEntityIndexArrayAsync(Unity.Collections.Allocator,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle@)"/> job to get an offset buffer.
            If you just want a sortkey for your <see cref="T:Unity.Entities.EntityCommandBuffer.ParallelWriter"/> simply use <see cref="T:Unity.Entities.ChunkIndexInQuery"/>
            as it is different for every thread, which is all a ParallelWriter needs to sort with.
            </remarks>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="T:Unity.Entities.EntityIndexInChunk">
            <summary>
            Specifies that this int parameter is used as the entity index inside the current chunk.
            Usage: An int parameter found inside the execute method of an IJobEntity.
            </summary>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="T:Unity.Entities.ChunkIndexInQuery">
            <summary>
            Specifies that this int parameter is used as the chunk index inside the current query.
            Usage: An int parameter found inside the execute method of an IJobEntity.
            </summary>
            <remarks>
            Efficient sort-key for <see cref="T:Unity.Entities.EntityCommandBuffer"/>.
            </remarks>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="T:Unity.Entities.WithAbsentAttribute">
            <summary>
            Specify that an IJobEntity should not include any of the component types specified as part of the attribute.
            </summary>
        </member>
        <member name="M:Unity.Entities.WithAbsentAttribute.#ctor(System.Type[])">
            <summary>
            Specifies that this IJobEntity should not include any of the component types specified as part of the attribute.
            </summary>
            <param name="types">Absent component types</param>
        </member>
        <member name="T:Unity.Entities.WithDisabledAttribute">
            <summary>
            Specify that an IJobEntity should include all of the component types specified as part of the attribute, but they must all be disabled.
            </summary>
        </member>
        <member name="M:Unity.Entities.WithDisabledAttribute.#ctor(System.Type[])">
            <summary>
            Specifies that this IJobEntity should include all of the component types specified as part of the attribute, but they must all be disabled.
            </summary>
            <param name="types">The required disabled component types</param>
        </member>
        <member name="T:Unity.Entities.WithAllAttribute">
            <summary>
            Specifies that this IJobEntity should include all ComponentTypes found as attributes of the IJobEntity
            </summary>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="M:Unity.Entities.WithAllAttribute.#ctor(System.Type[])">
            <summary>
            Specifies that this IJobEntity should include all ComponentTypes found as attributes of the IJobEntity
            </summary>
            <param name="types">The required component types</param>
        </member>
        <member name="T:Unity.Entities.WithNoneAttribute">
            <summary>
            Specifies that this IJobEntity should include no ComponentTypes found as attributes of the IJobEntity
            </summary>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="M:Unity.Entities.WithNoneAttribute.#ctor(System.Type[])">
            <summary>
            Specifies that this IJobEntity should include no ComponentTypes found as attributes of the IJobEntity
            </summary>
            <param name="types">The excluded component types</param>
        </member>
        <member name="T:Unity.Entities.WithAnyAttribute">
            <summary>
            Specifies that this IJobEntity should include any ComponentTypes found as attributes of the IJobEntity
            </summary>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="M:Unity.Entities.WithAnyAttribute.#ctor(System.Type[])">
            <summary>
            Specifies that this IJobEntity should include any ComponentTypes found as attributes of the IJobEntity
            </summary>
            <param name="types">The optional component types</param>
        </member>
        <member name="T:Unity.Entities.WithChangeFilterAttribute">
            <summary>
            Specifies that this IJobEntity should only process a chunk if any of the ComponentTypes found as attributes of the IJobEntity have changed.
            </summary>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="M:Unity.Entities.WithChangeFilterAttribute.#ctor(System.Type[])">
            <summary>
            Specifies that this IJobEntity should only process a chunk if any of the ComponentTypes found as attributes of the IJobEntity have changed.
            </summary>
            <param name="types">The component types for which change filtering should be enabled</param>
        </member>
        <member name="T:Unity.Entities.WithEntityQueryOptionsAttribute">
             <summary>
             Obsolete. Use <see cref="T:Unity.Entities.WithOptionsAttribute"/> instead.
             </summary>
             <remarks>**Obsolete.** Use <see cref="T:Unity.Entities.WithOptionsAttribute"/> instead.
            
             Specifies that this IJobEntity should include a given EntityQueryOption found as attributes of the IJobEntity</remarks>
             <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="M:Unity.Entities.WithEntityQueryOptionsAttribute.#ctor(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specifies that this IJobEntity should include a given EntityQueryOption found as attributes of the IJobEntity
            </summary>
            <param name="option">The query options</param>
        </member>
        <member name="M:Unity.Entities.WithEntityQueryOptionsAttribute.#ctor(Unity.Entities.EntityQueryOptions[])">
            <summary>
            Specifies that this IJobEntity should include a given EntityQueryOption found as attributes of the IJobEntity
            </summary>
            <param name="options">The query options</param>
        </member>
        <member name="T:Unity.Entities.WithOptionsAttribute">
            <summary>
            Specifies that this IJobEntity should include a given EntityQueryOption found as attributes of the IJobEntity
            </summary>
            <seealso cref="T:Unity.Entities.IJobEntity"/>
        </member>
        <member name="M:Unity.Entities.WithOptionsAttribute.#ctor(Unity.Entities.EntityQueryOptions)">
            <summary>
            Specifies that this IJobEntity should include a given EntityQueryOption found as attributes of the IJobEntity
            </summary>
            <param name="option">The query options</param>
        </member>
        <member name="M:Unity.Entities.WithOptionsAttribute.#ctor(Unity.Entities.EntityQueryOptions[])">
            <summary>
            Specifies that this IJobEntity should include a given EntityQueryOption found as attributes of the IJobEntity
            </summary>
            <param name="options">The query options</param>
        </member>
        <member name="T:Unity.Entities.IJobEntityExtensions">
            <summary>
            Extension methods for IJobEntity job type
            </summary>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.Schedule``1(``0,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleByRef``1(``0@,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.Schedule``1(``0,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleByRef``1(``0@,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.Schedule``1(``0)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleByRef``1(``0@)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.Schedule``1(``0,Unity.Entities.EntityQuery)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleByRef``1(``0@,Unity.Entities.EntityQuery)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for sequential (non-parallel) execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallel``1(``0,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallelByRef``1(``0@,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallel``1(``0,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallelByRef``1(``0@,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <param name="dependsOn">The handle identifying already scheduled jobs that could constrain this job.
            A job that writes to a component cannot run in parallel with other jobs that read or write that component.
            Jobs that only read the same components can run in parallel.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <returns>A handle that combines the current Job with previous dependencies identified by the `dependsOn`
            parameter.</returns>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallel``1(``0)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallelByRef``1(``0@)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallel``1(``0,Unity.Entities.EntityQuery)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.ScheduleParallelByRef``1(``0@,Unity.Entities.EntityQuery)">
            <summary>
            Adds an <see cref="T:Unity.Entities.IJobEntity"/> instance to the job scheduler queue for parallel execution.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
            <remarks>This job automatically uses the system's Dependency property as the input and output dependency.</remarks>
            <remarks>Can't schedule managed components or managed shared components, use Run instead.</remarks>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.Run``1(``0)">
            <summary>
            Runs the job immediately on the current thread.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.RunByRef``1(``0@)">
            <summary>
            Runs the job immediately on the current thread.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.Run``1(``0,Unity.Entities.EntityQuery)">
            <summary>
            Runs the job immediately on the current thread.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
        </member>
        <member name="M:Unity.Entities.IJobEntityExtensions.RunByRef``1(``0@,Unity.Entities.EntityQuery)">
            <summary>
            Runs the job immediately on the current thread.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobEntity"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobEntity"/> implementation type.</typeparam>
        </member>
        <member name="T:Unity.Entities.IJobChunk">
             <summary>
             IJobChunk is a type of [IJob] that iterates over a set of chunks. For each chunk the job runs on,
             the job code receives an <see cref="T:Unity.Entities.ArchetypeChunk"/> instance representing the full [chunk], plus a bitmask
             indicating which entities in the chunk should be processed.
            
             [IJob]: xref:Unity.Jobs.IJob
             [chunk]: xref:concepts-archetypes#archetype-chunks
             </summary>
             <remarks>
             Schedule or run an IJobChunk job inside the <see cref="M:Unity.Entities.SystemBase.OnUpdate"/> function of a
             <see cref="T:Unity.Entities.SystemBase"/> implementation. When the system schedules or runs an IJobChunk job, it uses
             the specified <see cref="T:Unity.Entities.EntityQuery"/> to select a set of [chunks]. The entities in each chunk are examined to
             determine which have the necessary components enabled, according to the <see cref="T:Unity.Entities.EntityQuery"/> provided at
             schedule time. The job struct's `Execute` function is called for each chunk, along with a bitmask indicating
             which entities in the chunk should be processed.
            
             To pass data to your Execute function (beyond the `Execute` parameters), add public fields to the IJobChunk
             struct declaration and set those fields immediately before scheduling the job. You must always pass the
             component type information for any components that the job reads or writes using a field of type,
             <seealso cref="T:Unity.Entities.ComponentTypeHandle`1"/>. Get this type information by calling the appropriate
             <seealso cref="M:Unity.Entities.ComponentSystemBase.GetComponentTypeHandle``1(System.Boolean)"/> function for the type of
             component.
            
             [chunks]: xref:concepts-archetypes#archetype-chunks
             </remarks>
             <seealso cref="T:Unity.Entities.JobChunkExtensions"/>
        </member>
        <member name="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)">
             <summary>
             Implement the `Execute` function to perform a unit of work on an <see cref="T:Unity.Entities.ArchetypeChunk"/> representing
             a chunk.
             </summary>
             <remarks>
             The chunks selected by the <see cref="T:Unity.Entities.EntityQuery"/> used to schedule the job are the input to your `Execute`
             function. The `Execute` function is called once per matching chunk.
            
             Note that <paramref name="unfilteredChunkIndex"/> is not necessarily guaranteed to be a zero-based,
             tightly-packed index into the chunks the job actually runs on. For example, if the query matches 100 chunks,
             but the query's uses <see cref="M:Unity.Entities.EntityQuery.SetSharedComponentFilter``1(``0)"/> and the first 50 chunks get
             filtered out, the <paramref name="unfilteredChunkIndex"/> will range from 50 to 99. If the index relative
             to the filtered chunk list is required, use <see cref="M:Unity.Entities.EntityQuery.CalculateFilteredChunkIndexArray(Unity.Collections.Allocator)"/></remarks>
             <param name="chunk">An object providing access to the entities within a chunk.</param>
             <param name="unfilteredChunkIndex">The index of the current chunk within the list of all chunks in all
             archetypes matched by the <see cref="T:Unity.Entities.EntityQuery"/> that the job was run against.</param>
             <param name="useEnabledMask">If true, the contents of <paramref name="chunkEnabledMask"/> describe which
             entities in the chunk match the provided <see cref="T:Unity.Entities.EntityQuery"/> and should be processed by this job.
             If false, all entities in the chunk match the provided query, and the contents of
             <paramref name="chunkEnabledMask"/> are undefined.</param>
             <param name="chunkEnabledMask">If bit N in this mask is set, entity N in <paramref name="chunk"/> matches
             the <see cref="T:Unity.Entities.EntityQuery"/> used to schedule the job. If bit N is clear, entity N does not match the query
             and can be skipped. If N is greater than or equal to the number of entities in the chunk, bit N will always
             be clear. If <paramref name="useEnabledMask"/> is false, all entities in the chunk match the query, and the
             contents of this mask are undefined.</param>
        </member>
        <member name="T:Unity.Entities.JobChunkExtensions">
            <summary>
            Extensions for scheduling and running <see cref="T:Unity.Entities.IJobChunk"/> jobs.
            </summary>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.EarlyJobInit``1">
             <summary>
             Gathers and caches reflection data for the internal job system's managed bindings. Unity is responsible for calling this method - don't call it yourself.
             </summary>
             <typeparam name="T"></typeparam>
             <remarks>
             When the Jobs package is included in the project, Unity generates code to call EarlyJobInit at startup. This allows Burst compiled code to schedule jobs because the reflection part of initialization, which is not compatible with burst compiler constraints, has already happened in EarlyJobInit.
            
             __Note__: While the Jobs package code generator handles this automatically for all closed job types, you must register those with generic arguments (like IJobChunk&amp;lt;MyJobType&amp;lt;T&amp;gt;&amp;gt;) manually for each specialization with [[Unity.Jobs.RegisterGenericJobTypeAttribute]].
             </remarks>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.Schedule``1(``0,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
             <summary>
             Adds an <see cref="T:Unity.Entities.IJobChunk"/> instance to the job scheduler queue for sequential (non-parallel) execution.
             </summary>
             <param name="jobData">An <see cref="T:Unity.Entities.IJobChunk"/> instance.</param>
             <param name="query">The query selecting chunks with the necessary components.</param>
             <param name="dependsOn">The handle identifying already scheduled jobs that must complete before this job is executed.
             For example, a job that writes to a component cannot run in parallel with other jobs that read or write that component.
             Jobs that only read the same components can run in parallel.
            
             Most frequently, an appropriate value for this parameter is <see cref="P:Unity.Entities.SystemState.Dependency"/> to ensure
             that jobs registered with the safety system are taken into account as input dependencies.</param>
             <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobChunk"/> implementation type.</typeparam>
             <returns>A handle that combines the current Job with previous dependencies identified by the <paramref name="dependsOn"/>
             parameter.</returns>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.ScheduleByRef``1(``0@,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
             <summary>
             Adds an <see cref="T:Unity.Entities.IJobChunk"/> instance to the job scheduler queue for sequential (non-parallel) execution.
             </summary>
             <param name="jobData">An <see cref="T:Unity.Entities.IJobChunk"/> instance. In this variant, the jobData is passed by
             reference, which may be necessary for unusually large job structs.</param>
             <param name="query">The query selecting chunks with the necessary components.</param>
             <param name="dependsOn">The handle identifying already scheduled jobs that must complete before this job is executed.
             For example, a job that writes to a component cannot run in parallel with other jobs that read or write that component.
             Jobs that only read the same components can run in parallel.
            
             Most frequently, an appropriate value for this parameter is <see cref="P:Unity.Entities.SystemState.Dependency"/> to ensure
             that jobs registered with the safety system are taken into account as input dependencies.</param>
             <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobChunk"/> implementation type.</typeparam>
             <returns>A handle that combines the current Job with previous dependencies identified by the <paramref name="dependsOn"/>
             parameter.</returns>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.ScheduleParallel``1(``0,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
             <summary>
             Adds an <see cref="T:Unity.Entities.IJobChunk"/> instance to the job scheduler queue for parallel execution.
             </summary>
             <param name="jobData">An <see cref="T:Unity.Entities.IJobChunk"/> instance.</param>
             <param name="query">The query selecting chunks with the necessary components.</param>
             <param name="dependsOn">The handle identifying already scheduled jobs that must complete before this job is executed.
             For example, a job that writes to a component cannot run in parallel with other jobs that read or write that component.
             Jobs that only read the same components can run in parallel.
            
             Most frequently, an appropriate value for this parameter is <see cref="P:Unity.Entities.SystemState.Dependency"/> to ensure
             that jobs registered with the safety system are taken into account as input dependencies.</param>
             <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobChunk"/> implementation type.</typeparam>
             <returns>A handle that combines the current Job with previous dependencies identified by the <paramref name="dependsOn"/>
             parameter.</returns>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.ScheduleParallelByRef``1(``0@,Unity.Entities.EntityQuery,Unity.Jobs.JobHandle)">
             <summary>
             Adds an <see cref="T:Unity.Entities.IJobChunk"/> instance to the job scheduler queue for parallel execution.
             </summary>
             <param name="jobData">An <see cref="T:Unity.Entities.IJobChunk"/> instance. In this variant, the jobData is passed by
             reference, which may be necessary for unusually large job structs.</param>
             <param name="query">The query selecting chunks with the necessary components.</param>
             <param name="dependsOn">The handle identifying already scheduled jobs that must complete before this job is executed.
             For example, a job that writes to a component cannot run in parallel with other jobs that read or write that component.
             Jobs that only read the same components can run in parallel.
            
             Most frequently, an appropriate value for this parameter is <see cref="P:Unity.Entities.SystemState.Dependency"/> to ensure
             that jobs registered with the safety system are taken into account as input dependencies.</param>
             <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobChunk"/> implementation type.</typeparam>
             <returns>A handle that combines the current Job with previous dependencies identified by the <paramref name="dependsOn"/>
             parameter.</returns>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.Run``1(``0,Unity.Entities.EntityQuery)">
            <summary>
            Runs the job immediately on the current thread.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobChunk"/> instance.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobChunk"/> implementation type.</typeparam>
        </member>
        <member name="M:Unity.Entities.JobChunkExtensions.RunByRef``1(``0@,Unity.Entities.EntityQuery)">
            <summary>
            Runs the job immediately on the current thread.
            </summary>
            <param name="jobData">An <see cref="T:Unity.Entities.IJobChunk"/> instance. In this variant, the jobData is passed by
            reference, which may be necessary for unusually large job structs.</param>
            <param name="query">The query selecting chunks with the necessary components.</param>
            <typeparam name="T">The specific <see cref="T:Unity.Entities.IJobChunk"/> implementation type.</typeparam>
        </member>
        <member name="T:Unity.Entities.ChunkEntityEnumerator">
            <summary>
            Helper utility to quickly identify the next available entity or component within a chunk (e.g. the index of
            the <see cref="T:Unity.Collections.NativeArray`1"/> retrieved via <see cref="M:Unity.Entities.ArchetypeChunk.GetComponentDataPtrRW``1(Unity.Entities.ComponentTypeHandle{``0}@)"/> or
            <see cref="M:Unity.Entities.ArchetypeChunk.GetEntityDataPtrRO(Unity.Entities.EntityTypeHandle)"/>)
            </summary>
        </member>
        <member name="M:Unity.Entities.ChunkEntityEnumerator.#ctor(System.Boolean,Unity.Burst.Intrinsics.v128,System.Int32)">
            <summary>
            Construct a new instance.
            </summary>
            <param name="useEnabledMask">If true, <paramref name="chunkEnabledMask"/> contains valid data and should be used
            to determine which entities to include in the iteration. If false, the mask is ignored and all entities in the chunk
            are included. You can pass this value directly from the argument provided to <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="chunkEnabledMask">A bitmask for all entities in the chunk. If bit N is set, entity N within
            this chunk should be included in the iteration. This mask is ignored if <paramref name="useEnabledMask"/>
            is false. You can pass this value directly from the argument provided to <see cref="M:Unity.Entities.IJobChunk.Execute(Unity.Entities.ArchetypeChunk@,System.Int32,System.Boolean,Unity.Burst.Intrinsics.v128@)"/>.</param>
            <param name="chunkEntityCount">The number of entities in the chunk.</param>
        </member>
        <member name="M:Unity.Entities.ChunkEntityEnumerator.NextEntityIndex(System.Int32@)">
            <summary>
            Iterates through the given <see cref="T:Unity.Entities.ArchetypeChunk"/>, retrieving the index of the next available entity.
            This function will pass over any entities whose components implement <see cref="T:Unity.Entities.IEnableableComponent"/> and
            are currently disabled.
            </summary>
            <param name="nextIndex">The index of the next available entity in the ArchetypeChunk. when the function
            returns false, this result is undefined. </param>
            <returns>whether or not there is another available index within the ArchetypeChunk,
            based on the last available iteration</returns>
        </member>
        <member name="T:Unity.Core.TimeData">
            <summary>
            Encapsulates state to measure a <see cref="T:Unity.Entities.World"/>'s simulation time.
            </summary>
            <remarks>
            This data is most frequently read using <see cref="P:Unity.Entities.World.Time"/>. It is updated every frame by
            <see cref="!:Unity.Entities.UpdateWorldTimeSystem"/>. To temporarily override the time values,
            use <see cref="M:Unity.Entities.World.SetTime(Unity.Core.TimeData)"/> or <see cref="M:Unity.Entities.World.PushTime(Unity.Core.TimeData)"/>.
            </remarks>
        </member>
        <member name="F:Unity.Core.TimeData.ElapsedTime">
            <summary>
            The total cumulative elapsed time in seconds.
            </summary>
            <remarks>The ElapsedTime for each World is initialized to zero when the World is created. Thus,
            comparing timestamps across Worlds (or between Worlds and MonoBehaviours) is generally an error.</remarks>
        </member>
        <member name="F:Unity.Core.TimeData.DeltaTime">
            <summary>
            The time in seconds since the last time-updating event occurred. (For example, a frame.)
            </summary>
        </member>
        <member name="M:Unity.Core.TimeData.#ctor(System.Double,System.Single)">
            <summary>
            Create a new TimeData struct with the given values.
            </summary>
            <param name="elapsedTime">Time since the start of time collection.</param>
            <param name="deltaTime">Elapsed time since the last time-updating event occurred.</param>
        </member>
        <member name="P:Unity.Core.TimeData.fixedDeltaTime">
            <summary>
            Currently, an alias to <see cref="P:UnityEngine.Time.fixedDeltaTime"/>.
            </summary>
            <remarks>This member will be deprecated once a native fixed delta time is introduced in Unity.Entities.</remarks>
        </member>
        <member name="T:Unity.Core.Compression.CodecService">
            <summary>
            Provides codec agnostic helper functions for compression/decompression
            </summary>
        </member>
        <member name="M:Unity.Core.Compression.CodecService.CompressUpperBound(Unity.Core.Compression.Codec,System.Int32)">
            <summary>
            Return the maximum size that a codec may output in a "worst case" scenario when compressing data
            </summary>
            <param name="codec"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Core.Compression.CodecService.Compress(Unity.Core.Compression.Codec,System.Byte*@,System.Int32,System.Byte*@,Unity.Collections.Allocator)">
            <summary>
            Compresses the passed in `src` data into newly allocated `dst` buffer. Users must free `dst` manually after calling `Compress`
            </summary>
            <param name="codec"></param>
            <param name="src"></param>
            <param name="size"></param>
            <param name="dst"></param>
            <param name="allocator"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Core.Compression.CodecService.Decompress(Unity.Core.Compression.Codec,System.Byte*@,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Decompresses data in `src` buffer and returns true with the decompressed data stored in the passed in, previously allocated `decompressedData` buffer.
            Users thus should know ahead of time how large a `decompressedData` buffer to use before calling this function. Not
            passing a large enough buffer will result in this function failing and returning false.
            </summary>
            <param name="codec"></param>
            <param name="compressedData"></param>
            <param name="compressedSize"></param>
            <param name="decompressedData"></param>
            <param name="decompressedSize"></param>
            <returns></returns>
        </member>
        <member name="T:Unity.Core.XXHash">
            <summary>
            XXHash implementation.
            </summary>
        </member>
        <member name="M:Unity.Core.XXHash.Hash32(System.Byte*,System.Int32,System.UInt32)">
            <summary>
            Generate a 32-bit xxHash value.
            </summary>
            <param name="buffer">Input buffer.</param>
            <param name="bufferLength">Input buffer length.</param>
            <param name="seed">Optional seed.</param>
            <returns>32-bit hash value.</returns>
        </member>
        <member name="M:Unity.Core.XXHash.Hash32(System.IO.Stream,System.UInt32)">
            <summary>
            Generate a 32-bit xxHash value from a stream.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="seed">Optional seed.</param>
            <returns>32-bit hash value.</returns>
        </member>
        <member name="M:Unity.Core.XXHash.Hash64(System.Byte*,System.Int32,System.UInt64)">
            <summary>
            Generate a 64-bit xxHash value.
            </summary>
            <param name="buffer">Input buffer.</param>
            <param name="bufferLength">Input buffer length.</param>
            <param name="seed">Optional seed.</param>
            <returns>Computed 64-bit hash value.</returns>
        </member>
        <member name="M:Unity.Core.XXHash.Hash64(System.IO.Stream,System.UInt64)">
            <summary>
            Generate a 64-bit xxHash value from a stream.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="seed">Optional seed.</param>
            <returns>Computed 64-bit hash value.</returns>
        </member>
        <member name="T:Unity.Core.XXHash.Bits">
            <summary>
            Bit operations.
            </summary>
        </member>
        <member name="T:Unity.Transforms.Static">
            <summary>
            This component is added during conversion by GameObjects that are marked with StaticOptimizeEntity.
            </summary>
        </member>
        <member name="T:Unity.Assertions.Assert">
            <summary>
            The intent of this class is to provide debug assert utilities that don't rely on UnityEngine, for compatibility
            with code that needs to run in the DOTS Runtime environment. The current implement just wraps the equivalent
            <see cref="T:UnityEngine.Assertions.Assert"/> calls.
            </summary>
        </member>
        <member name="M:Unity.Assertions.Assert.IsTrue(System.Boolean)">
            <summary>
            Assert that a condition must be true. Throws an exception if the assertion fails.
            </summary>
            <param name="condition">The expression that the caller expects to be true.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Assert that a condition must be true. Throws an exception if the assertion fails.
            </summary>
            <param name="condition">The expression that the caller expects to be true.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsFalse(System.Boolean)">
            <summary>
            Assert that a condition must be false. Throws an exception if the assertion fails.
            </summary>
            <param name="condition">The expression that the caller expects to be false.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Assert that a condition must be false. Throws an exception if the assertion fails.
            </summary>
            <param name="condition">The expression that the caller expects to be false.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsNull``1(``0)">
            <summary>
            Assert that a value is a null reference. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the object being tested.</typeparam>
            <param name="value">The value that the caller expects to be a null reference.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsNull``1(``0,System.String)">
            <summary>
            Assert that a value is a null reference. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the object being tested.</typeparam>
            <param name="value">The value that the caller expects to be a null reference.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsNotNull``1(``0)">
            <summary>
            Assert that a value is not a null reference. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the object being tested.</typeparam>
            <param name="value">The value that the caller expects to be a non-null reference to <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.IsNotNull``1(``0,System.String)">
            <summary>
            Assert that a value is not a null reference. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the object being tested.</typeparam>
            <param name="value">The value that the caller expects to be a non-null reference to <typeparamref name="T"/>.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Assert that two float expressions are approximately equal to each other, within a default tolerance. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value of the float expression.</param>
            <param name="actual">The actual value of the float expression.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Assert that two float expressions are approximately equal to each other, within a default tolerance. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value of the float expression.</param>
            <param name="actual">The actual value of the float expression.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Assert that two float expressions are approximately equal to each other, within a caller-provided tolerance. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value of the float expression.</param>
            <param name="actual">The actual value of the float expression.</param>
            <param name="tolerance">The maximum absolute difference between <paramref name="expected"/> and
            <paramref name="actual"/> for the two values to be considered equal.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreEqual``1(``0,``0)">
            <summary>
            Assert that two values are exactly equal to each other, according to their type's definition of equality. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the values to test.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Assert that two values are exactly equal to each other, according to their type's definition of equality. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the values to test.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Assert that two values are not equal to each other, according to their type's definition of equality. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the values to test.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            Assert that two values are not equal to each other, according to their type's definition of equality. Throws an exception if the assertion fails.
            </summary>
            <typeparam name="T">The type of the values to test.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">If the assertion fails, this message will be logged.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Assert that two 32-bit integer values are equal to each other. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Assert that two 32-bit integer values are not equal to each other. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreEqual(System.Boolean,System.Boolean)">
            <summary>
            Assert that two boolean values are equal to each other. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreEqual(System.Type,System.Type)">
            <summary>
            Assert that two boolean values are not equal to each other. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreEqual(System.IntPtr,System.IntPtr)">
            <summary>
            Assert that two <see cref="T:System.IntPtr"/> values are equal to each other. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:Unity.Assertions.Assert.AreNotEqual(System.Boolean,System.Boolean)">
            <summary>
            Assert that two <see cref="T:System.IntPtr"/> values are not equal to each other. Throws an exception if the assertion fails.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
    </members>
</doc>
