<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.RenderPipelines.Universal.Runtime</name>
    </assembly>
    <members>
        <member name="T:UnityEngine.Rendering.Universal.ColorLookup">
            <summary>
            A volume component that holds settings for the color lookup effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorLookup.texture">
            <summary>
            A 2D Lookup Texture (LUT) to use for color grading.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorLookup.contribution">
            <summary>
            Controls how much of the lookup texture will contribute to the color grading effect.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorLookup.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorLookup.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorLookup.ValidateLUT">
            <summary>
            Validates the lookup texture assigned to the volume component.
            </summary>
            <returns>True if the texture is valid, false otherwise.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ColorAdjustments">
            <summary>
            A volume component that holds settings for the Color Adjustments effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorAdjustments.postExposure">
            <summary>
            Adjusts the overall exposure of the scene in EV100.
            This is applied after HDR effect and right before tonemapping so it won't affect previous effects in the chain.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorAdjustments.contrast">
            <summary>
            Controls the overall range of the tonal values.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorAdjustments.colorFilter">
            <summary>
            Specifies the color that URP tints the render to.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorAdjustments.hueShift">
            <summary>
            Controls the hue of all colors in the render.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorAdjustments.saturation">
            <summary>
            Controls the intensity of all colors in the render.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorAdjustments.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorAdjustments.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalEntityChunk">
            <summary>
            Contains <see cref="T:UnityEngine.Rendering.Universal.DecalEntity"/> and shared material.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalEntityManager">
            <summary>
            Manages lifetime between <see cref="T:UnityEngine.Rendering.Universal.DecalProjector"></see> and <see cref="T:UnityEngine.Rendering.Universal.DecalEntity"/>.
            Contains all <see cref="T:UnityEngine.Rendering.Universal.DecalChunk"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Renderer2DData">
            <summary>
            Class <c>Renderer2DData</c> contains resources for a <c>Renderer2D</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Renderer2DData.hdrEmulationScale">
            <summary>
            HDR Emulation Scale allows platforms to use HDR lighting by compressing the number of expressible colors in exchange for extra intensity range.
            Scale describes this extra intensity range. Increasing this value too high may cause undesirable banding to occur.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Renderer2DData.lightBlendStyles">
            <summary>
            Returns a list Light2DBlendStyle
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Renderer2DData.Create">
            <summary>
            Creates the instance of the Renderer2D.
            </summary>
            <returns>The instance of Renderer2D</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Renderer2DData.OnEnable">
            <summary>
            OnEnable implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DrawSkyboxPass">
             <summary>
             Draw the skybox into the given color buffer using the given depth buffer for depth testing.
            
             This pass renders the standard Unity skybox.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DrawSkyboxPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent)">
            <summary>
            Creates a new <c>DrawSkyboxPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DrawSkyboxPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightCookieManager.LightCookieShaderData">
            Must match light data layout.
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LightCookieManager.Dispose">
            <summary>
            Release LightCookieManager resources.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceShadows.Create">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceShadows.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceShadows.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceShadows.ScreenSpaceShadowsPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceShadows.ScreenSpaceShadowsPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRendererFeature">
            <summary>
            You can add a <c>ScriptableRendererFeature</c> to the <c>ScriptableRenderer</c>. Use this scriptable renderer feature to inject render passes into the renderer.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRendererFeature.isActive">
            <summary>
            Returns the state of the ScriptableRenderFeature (true: the feature is active, false: the feature is inactive). Use the method ScriptableRenderFeature.SetActive to change the value of this variable.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.Create">
            <summary>
            Initializes this feature's resources. This is called every time serialization happens.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.OnCameraPreCull(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Callback before cull happens in renderer.
            </summary>
            <param name="renderer">Renderer of callback.</param>
            <param name="cameraData">CameraData contains all relevant render target information for the camera.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Injects one or multiple <c>ScriptableRenderPass</c> in the renderer.
            </summary>
            <param name="renderer">Renderer used for adding render passes.</param>
            <param name="renderingData">Rendering state. Use this to setup render passes.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.SetupRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Callback after render targets are initialized. This allows for accessing targets from renderer after they are created and ready.
            </summary>
            <param name="renderer">Renderer used for adding render passes.</param>
            <param name="renderingData">Rendering state. Use this to setup render passes.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.SupportsNativeRenderPass">
            <summary>
            Override this method and return true if the feature should use the Native RenderPass API
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.RequireRenderingLayers(System.Boolean,UnityEngine.Rendering.Universal.RenderingLayerUtils.Event@,UnityEngine.Rendering.Universal.RenderingLayerUtils.MaskSize@)">
            <summary>
            Override this method and return true that renderer would produce rendering layers texture.
            </summary>
            <param name="isDeferred">True if renderer is using deferred rendering mode</param>
            <param name="atEvent">Requeted event at which rendering layers texture will be produced</param>
            <param name="maskSize">Requested bit size of rendering layers texture</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.SetActive(System.Boolean)">
            <summary>
            Sets the state of ScriptableRenderFeature (true: the feature is active, false: the feature is inactive).
            If the feature is active, it is added to the renderer it is attached to, otherwise the feature is skipped while rendering.
            </summary>
            <param name="active">The true value activates the ScriptableRenderFeature and the false value deactivates it.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.Dispose">
            <summary>
            Disposable pattern implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.Dispose(System.Boolean)">
            <summary>
            Called by Dispose().
            Override this function to clean up resources in your renderer.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.ForwardLights">
            <summary>
            Computes and submits lighting data to the GPU.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ForwardLights.#ctor">
            <summary>
            Creates a new <c>ForwardLights</c> instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ForwardLights.Setup(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Sets up the keywords and data for forward lighting.
            </summary>
            <param name="context"></param>
            <param name="renderingData"></param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.CopyColorPass">
             <summary>
             Copy the given color buffer to the given destination color buffer.
            
             You can use this pass to copy a color buffer to the destination,
             so you can use it later in rendering. For example, you can copy
             the opaque texture to use it for distortion effects.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Creates a new <c>CopyColorPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="samplingMaterial">The <c>Material</c> to use for downsampling quarter-resolution image with box filtering.</param>
            <param name="copyColorMaterial">The <c>Material</c> to use for other downsampling options.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.Downsampling"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.ConfigureDescriptor(UnityEngine.Rendering.Universal.Downsampling,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode@)">
            <summary>
            Get a descriptor and filter mode for the required texture for this pass
            </summary>
            <param name="downsamplingMethod"></param>
            <param name="descriptor"></param>
            <param name="filterMode"></param>
            <seealso cref="T:UnityEngine.Rendering.Universal.Downsampling"/>
            <seealso cref="T:UnityEngine.RenderTextureDescriptor"/>
            <seealso cref="T:UnityEngine.FilterMode"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.Setup(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.Universal.RenderTargetHandle,UnityEngine.Rendering.Universal.Downsampling)">
            <summary>
            Configure the pass with the source and destination to execute on.
            </summary>
            <param name="source">Source render target.</param>
            <param name="destination">Destination render target.</param>
            <param name="downsampling">The downsampling method to use.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.Setup(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.Universal.Downsampling)">
            <summary>
            Configure the pass with the source and destination to execute on.
            </summary>
            <param name="source">Source render target.</param>
            <param name="destination">Destination render target.</param>
            <param name="downsampling">The downsampling method to use.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyColorPass.OnCameraCleanup(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.FinalBlitPass">
             <summary>
             Copy the given color target to the current camera target
            
             You can use this pass to copy the result of rendering to
             the camera target. The pass takes the screen viewport into
             consideration.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.FinalBlitPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Material)">
            <summary>
            Creates a new <c>FinalBlitPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="blitMaterial">The <c>Material</c> to use for copying the executing the final blit.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.FinalBlitPass.Dispose">
            <summary>
            Cleans up resources used by the pass.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.FinalBlitPass.Setup(UnityEngine.RenderTextureDescriptor,UnityEngine.Rendering.Universal.RenderTargetHandle)">
            <summary>
            Configure the pass
            </summary>
            <param name="baseDescriptor"></param>
            <param name="colorHandle"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.FinalBlitPass.Setup(UnityEngine.RenderTextureDescriptor,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configure the pass
            </summary>
            <param name="baseDescriptor"></param>
            <param name="colorHandle"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.FinalBlitPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.DrawObjectsWithRenderingLayersPass">
            <summary>
            Extension of DrawObjectPass that also output Rendering Layers Texture as second render target.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.DrawObjectsPass">
             <summary>
             Draw  objects into the given color and depth target
            
             You can use this pass to render objects that have a material and/or shader
             with the pass names UniversalForward or SRPDefaultUnlit.
             </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Internal.DrawObjectsPass.m_ShouldTransparentsReceiveShadows">
            <summary>
            Used to indicate whether transparent objects should receive shadows or not.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DrawObjectsPass.#ctor(System.String,UnityEngine.Rendering.ShaderTagId[],System.Boolean,UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Rendering.RenderQueueRange,UnityEngine.LayerMask,UnityEngine.Rendering.StencilState,System.Int32)">
            <summary>
            Creates a new <c>DrawObjectsPass</c> instance.
            </summary>
            <param name="profilerTag"></param>
            <param name="shaderTagIds"></param>
            <param name="opaque"></param>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="renderQueueRange"></param>
            <param name="layerMask"></param>
            <param name="stencilState"></param>
            <param name="stencilReference"></param>
            <seealso cref="T:UnityEngine.Rendering.ShaderTagId"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.RenderQueueRange"/>
            <seealso cref="T:UnityEngine.LayerMask"/>
            <seealso cref="T:UnityEngine.Rendering.StencilState"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DrawObjectsPass.#ctor(System.String,System.Boolean,UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Rendering.RenderQueueRange,UnityEngine.LayerMask,UnityEngine.Rendering.StencilState,System.Int32)">
            <summary>
            Creates a new <c>DrawObjectsPass</c> instance.
            </summary>
            <param name="profilerTag"></param>
            <param name="opaque"></param>
            <param name="evt"></param>
            <param name="renderQueueRange"></param>
            <param name="layerMask"></param>
            <param name="stencilState"></param>
            <param name="stencilReference"></param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.RenderQueueRange"/>
            <seealso cref="T:UnityEngine.LayerMask"/>
            <seealso cref="T:UnityEngine.Rendering.StencilState"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DrawObjectsPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DrawObjectsPass.OnExecute(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Called before ExecutePass draws the objects.
            </summary>
            <param name="cmd">The command buffer to use.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.NormalReconstruction">
            <summary>
            Util class for normal reconstruction.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.NormalReconstruction.SetupProperties(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Setup properties needed for normal reconstruction from depth using shader functions in NormalReconstruction.hlsl
            </summary>
            <param name="cmd">Command Buffer used for properties setup.</param>
            <param name="cameraData">CameraData containing camera matrices information.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass">
            <summary>
            Render all objects that have a 'DepthNormals' and/or 'DepthNormalsOnly' pass into the given depth and normal buffers.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Rendering.RenderQueueRange,UnityEngine.LayerMask)">
            <summary>
            Creates a new <c>DepthNormalOnlyPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="renderQueueRange">The <c>RenderQueueRange</c> to use for creating filtering settings that control what objects get rendered.</param>
            <param name="layerMask">The layer mask to use for creating filtering settings that control what objects get rendered.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.RenderQueueRange"/>
            <seealso cref="T:UnityEngine.LayerMask"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.GetGraphicsFormat">
            <summary>
            Finds the format to use for the normals texture.
            </summary>
            <returns>The GraphicsFormat to use with the Normals texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.Setup(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures the pass.
            </summary>
            <param name="depthHandle">The <c>RTHandle</c> used to render depth to.</param>
            <param name="normalHandle">The <c>RTHandle</c> used to render normals.</param>
            <seealso cref="T:UnityEngine.Rendering.RTHandle"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.Setup(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures the pass.
            </summary>
            <param name="depthHandle">The <c>RTHandle</c> used to render depth to.</param>
            <param name="normalHandle">The <c>RTHandle</c> used to render normals.</param>
            <param name="decalLayerHandle">The <c>RTHandle</c> used to render decals.</param>
            <seealso cref="T:UnityEngine.Rendering.RTHandle"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthNormalOnlyPass.OnCameraCleanup(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass">
            <summary>
            Renders a shadow map for the main Light.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent)">
            <summary>
            Creates a new <c>MainLightShadowCasterPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass.Dispose">
            <summary>
            Cleans up resources used by the pass.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass.Setup(UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Sets up the pass.
            </summary>
            <param name="renderingData"></param>
            <returns>True if the pass should be enqueued, otherwise false.</returns>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderingData"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.MainLightShadowCasterPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass">
            <summary>
            Renders a shadow map atlas for additional shadow-casting Lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.m_AdditionalShadowsBufferId">
            <summary>
            The ID for the additional shadows buffer ID.
            This has been deprecated. Shadow slice matrix is now passed to the GPU using an entry in buffer m_AdditionalLightsWorldToShadow_SSBO.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.m_AdditionalShadowsIndicesId">
            <summary>
            The ID for the additional shadows buffer ID.
            This has been deprecated. hadow slice index is now passed to the GPU using last member of an entry in buffer m_AdditionalShadowParams_SSBO.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.c_DefaultShadowParams">
            <summary>
            x is used in RenderAdditionalShadowMapAtlas to skip shadow map rendering for non-shadow-casting lights.
            w is perLightFirstShadowSliceIndex, used in Lighting shader to find if Additional light casts shadows.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent)">
            <summary>
            Creates a new <c>AdditionalLightsShadowCasterPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.Dispose">
            <summary>
            Cleans up resources used by the pass.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.Setup(UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Sets up the pass.
            </summary>
            <param name="renderingData"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.AdditionalLightsShadowCasterPass.GetShadowLightIndexFromLightIndex(System.Int32)">
            <summary>
            Gets the additional light index from the global visible light index, which is used to index arrays _AdditionalLightsPosition, _AdditionalShadowParams, etc.
            </summary>
            <param name="visibleLightIndex">The index of the visible light.</param>
            <returns>The additional light index.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass">
            <summary>
            Renders a color grading LUT texture.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Rendering.Universal.PostProcessData)">
            <summary>
            Creates a new <c>ColorGradingLutPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="data">The <c>PostProcessData</c> resources to use.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.PostProcessData"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass.Setup(UnityEngine.Rendering.RTHandle@)">
            <summary>
            Sets up the pass.
            </summary>
            <param name="internalLut">The RTHandle to use to render to.</param>
            <seealso cref="T:UnityEngine.Rendering.RTHandle"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass.ConfigureDescriptor(UnityEngine.Rendering.Universal.PostProcessingData@,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode@)">
            <summary>
            Get a descriptor and filter mode for the required texture for this pass
            </summary>
            <param name="postProcessingData"></param>
            <param name="descriptor"></param>
            <param name="filterMode"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.ColorGradingLutPass.Cleanup">
            <summary>
            Cleans up resources used by the pass.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.DepthOnlyPass">
             <summary>
             Render all objects that have a 'DepthOnly' pass into the given depth buffer.
            
             You can use this pass to prime a depth buffer for subsequent rendering.
             Use it as a z-prepass, or use it to generate a depth buffer.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthOnlyPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Rendering.RenderQueueRange,UnityEngine.LayerMask)">
            <summary>
            Creates a new <c>DepthOnlyPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="renderQueueRange">The <c>RenderQueueRange</c> to use for creating filtering settings that control what objects get rendered.</param>
            <param name="layerMask">The layer mask to use for creating filtering settings that control what objects get rendered.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.RenderQueueRange"/>
            <seealso cref="T:UnityEngine.LayerMask"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthOnlyPass.Setup(UnityEngine.RenderTextureDescriptor,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures the pass.
            </summary>
            <param name="baseDescriptor">The <c>RenderTextureDescriptor</c> used for the depthStencilFormat.</param>
            <param name="depthAttachmentHandle">The <c>RTHandle</c> used to render to.</param>
            <seealso cref="T:UnityEngine.RenderTextureDescriptor"/>
            <seealso cref="T:UnityEngine.Rendering.RTHandle"/>
            <seealso cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthOnlyPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.DepthOnlyPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Internal.CopyDepthPass">
             <summary>
             Copy the given depth buffer into the given destination depth buffer.
            
             You can use this pass to copy a depth buffer to a destination,
             so you can use it later in rendering. If the source texture has MSAA
             enabled, the pass uses a custom MSAA resolve. If the source texture
             does not have MSAA enabled, the pass uses a Blit or a Copy Texture
             operation, depending on what the current platform supports.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyDepthPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Material,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <c>CopyDepthPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="copyDepthMaterial">The <c>Material</c> to use for copying the depth.</param>
            <param name="shouldClear">Controls whether it should do a clear before copying the depth.</param>
            <param name="copyToDepth">Controls whether it should do a copy to a depth format target.</param>
            <param name="copyResolvedDepth">Set to true if the source depth is MSAA resolved.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyDepthPass.Setup(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configure the pass with the source and destination to execute on.
            </summary>
            <param name="source">Source Render Target</param>
            <param name="destination">Destination Render Target</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyDepthPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyDepthPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Internal.CopyDepthPass.OnCameraCleanup(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.TransparentSettingsPass">
            <summary>
            Applies relevant settings before rendering transparent objects
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources">
            <summary>
            Class containing shader and texture resources needed in URP.
            </summary>
            <seealso cref="T:UnityEngine.Shader"/>
            <seealso cref="T:UnityEngine.Material"/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources">
            <summary>
            Class containing shader resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.autodeskInteractivePS">
            <summary>
            Autodesk Interactive ShaderGraph shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.autodeskInteractiveTransparentPS">
            <summary>
            Autodesk Interactive Transparent ShaderGraph shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.autodeskInteractiveMaskedPS">
            <summary>
            Autodesk Interactive Masked ShaderGraph shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.terrainDetailLitPS">
            <summary>
            Terrain Detail Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.terrainDetailGrassPS">
            <summary>
            Terrain Detail Grass shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.terrainDetailGrassBillboardPS">
            <summary>
            Waving Grass Billboard shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.defaultSpeedTree7PS">
            <summary>
            SpeedTree7 shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.ShaderResources.defaultSpeedTree8PS">
            <summary>
            SpeedTree8 ShaderGraph shader.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.MaterialResources">
            <summary>
            Class containing material resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.MaterialResources.lit">
            <summary>
            Lit material.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.MaterialResources.particleLit">
            <summary>
            Particle Lit material.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.MaterialResources.terrainLit">
            <summary>
            Terrain Lit material.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.MaterialResources.decal">
            <summary>
            Decal material.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.shaders">
            <summary>
            Shader resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResources.materials">
            <summary>
            Material resources used in URP.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineEditorResourcesEditor.OnInspectorGUI">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings">
            <summary>
            Universal Render Pipeline's Global Settings.
            Global settings are unique per Render Pipeline type. In URP, Global Settings contain:
            - light layer names
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.shaderVariantLogLevel">
            <summary>
            Specifies the level of the logging for shader variants
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.exportShaderVariants">
            <summary>
            Specifies if the stripping of the shaders that variants needs to be exported
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.instance">
            <summary>
            Active URP Global Settings asset. If the value is null then no UniversalRenderPipelineGlobalSettings has been registered to the Graphics Settings with the UniversalRenderPipeline.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.defaultAssetName">
            <summary>Default name when creating an URP Global Settings asset.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.renderingLayerMaskNames">
            <summary>Names used for display of rendering layer masks.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.prefixedRenderingLayerMaskNames">
            <summary>Names used for display of rendering layer masks with a prefix.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.validRenderingLayers">
            <summary>Valid rendering layers that can be used by graphics. </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.UpdateRenderingLayerNames">
            <summary>Regenerate Rendering Layer names and their prefixed versions.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.prefixedLightLayerNames">
            <summary>
            Names used for display of light layers with Layer's index as prefix.
            For example: "0: Light Layer Default"
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName0">
            <summary>Name for light layer 0.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName1">
            <summary>Name for light layer 1.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName2">
            <summary>Name for light layer 2.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName3">
            <summary>Name for light layer 3.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName4">
            <summary>Name for light layer 4.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName5">
            <summary>Name for light layer 5.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName6">
            <summary>Name for light layer 6.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerName7">
            <summary>Name for light layer 7.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.lightLayerNames">
            <summary>
            Names used for display of light layers.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.supportRuntimeDebugDisplay">
            <summary>
            Controls whether debug display shaders for Rendering Debugger are available in Player builds.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.stripDebugVariants">
            <summary>
            Controls whether debug display shaders for Rendering Debugger are available in Player builds.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.stripUnusedPostProcessingVariants">
            <summary>
            Controls whether strips automatically post processing shader variants based on <see cref="T:UnityEngine.Rendering.VolumeProfile"/> components.
            It strips based on VolumeProfiles in project and not scenes that actually uses it.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.stripUnusedVariants">
            <summary>
            Controls whether strip off variants if the feature is enabled.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.stripUnusedLODCrossFadeVariants" -->
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineGlobalSettings.stripScreenCoordOverrideVariants">
            <summary>
            Controls whether Screen Coordinates Override shader variants are automatically stripped.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Light2D">
             <summary>
             Class <c>Light2D</c> is a 2D light which can be used with the 2D Renderer.
             </summary>
            
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Light2D.DeprecatedLightType">
            <summary>
            Deprecated Light types that are no supported. Please migrate to either Freeform or Point lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.DeprecatedLightType.Parametric">
            <summary>
            N-gon shaped lights.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Light2D.LightType">
            <summary>
            An enumeration of the types of light
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.LightType.Parametric">
            <summary>
            N-gon shaped lights. Deprecated.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.LightType.Freeform">
            <summary>
            The shape of the light is based on a user defined closed shape with multiple points.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.LightType.Sprite">
            <summary>
            The shape of the light is based on a Sprite.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.LightType.Point">
            <summary>
            The shape of light is circular and can also be configured into a pizza shape.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.LightType.Global">
            <summary>
            Shapeless light that affects the entire screen.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Light2D.NormalMapQuality">
            <summary>
            The accuracy of how the normal map calculation.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.NormalMapQuality.Disabled">
            <summary>
            Normal map not used.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.NormalMapQuality.Fast">
            <summary>
            Faster calculation with less accuracy suited for small shapes on screen.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.NormalMapQuality.Accurate">
            <summary>
            Accurate calculation useful for better output on bigger shapes on screen.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Light2D.OverlapOperation">
            <summary>
            Determines how the final color is calculated when multiple lights overlap each other
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.OverlapOperation.Additive">
            <summary>
            Colors are added together
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2D.OverlapOperation.AlphaBlend">
            <summary>
            Colors are blended using standard blending (alpha, 1-alpha)
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.lightType">
            <summary>
            The light's current type
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.blendStyleIndex">
            <summary>
            The lights current operation index
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shadowIntensity">
            <summary>
            Specifies the darkness of the shadow
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shadowsEnabled">
            <summary>
            Specifies that the shadows are enabled
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shadowVolumeIntensity">
            <summary>
            Specifies the darkness of the shadow
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.volumetricShadowsEnabled">
            <summary>
            Specifies that the volumetric shadows are enabled
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.color">
            <summary>
            The lights current color
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.intensity">
            <summary>
            The lights current intensity
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.volumeOpacity">
             <summary>
             The lights current intensity
             </summary>
            
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.volumeIntensity">
            <summary>
            Controls the visibility of the light's volume
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.volumeIntensityEnabled">
            <summary>
            Enables or disables the light's volume
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.lightCookieSprite">
            <summary>
            The Sprite that's used by the Sprite Light type to control the shape light
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.falloffIntensity">
            <summary>
            Controls the brightness and distance of the fall off (edge) of the light
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.alphaBlendOnOverlap">
            <summary>
            Checks if the alpha overlap operation is alpha blend.
            This is obsolete.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.overlapOperation">
            <summary>
            Controls the overlap operation mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.lightOrder">
            <summary>
            Gets or sets the light order. The lightOrder determines the order in which the lights are rendered onto the light textures.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.normalMapDistance">
            <summary>
            The simulated z distance of the light from the surface used in normal map calculation.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.normalMapQuality">
            <summary>
            Returns the calculation quality for the normal map rendering. Please refer to NormalMapQuality.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.renderVolumetricShadows">
            <summary>
            Returns if volumetric shadows should be rendered.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Light2D.OnBeforeSerialize">
            <summary>
            OnBeforeSerialize implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Light2D.OnAfterDeserialize">
            <summary>
            OnAfterSerialize implementation.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shapeLightParametricSides">
            <summary>
            The number of sides in the parametric shape.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shapeLightParametricAngleOffset">
            <summary>
            The offset of the shape from the light's origin.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shapeLightParametricRadius">
            <summary>
            The size of the shape.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shapeLightFalloffSize">
            <summary>
            The size of the fall-off area. Bigger value corresponds to bigger fall off size.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.shapePath">
            <summary>
            Returns the path that represents the shape light. Values are in object space.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Light2D.SetShapePath(UnityEngine.Vector3[])">
            <summary>
            Set the shape that represents the freeform light. Values are in object space.
            </summary>
            <param name="path">Array of Vector3 defining the shape.</param>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.pointLightInnerAngle">
            <summary>
            The inner angle of the point light shape. The bigger the angle, the wider the gap.
            The gap between the innner and outer angle will determine the size of the light's penumbra.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.pointLightOuterAngle">
            <summary>
            The angle that determins the shape of the inner light area.
            The gap between the innner and outer angle will determine the size of the light's penumbra.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.pointLightInnerRadius">
            <summary>
            The radius of the inner light area that has full brightness.
            The gap between the inner and outer radius will determine the size of the light's penumbra.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.pointLightOuterRadius">
            <summary>
            The outer radius that determines the size of the light.
            The gap between the inner and outer radius will determine the size of the light's penumbra.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.pointLightDistance">
            <summary>
            The point light distance.
            This is obsolete and has been changed to normalMapDistance.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.Light2D.pointLightQuality">
            <summary>
            The quality of the point light.
            This is obsolete and has been changed to normalMapQuality.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowSliceData">
            <summary>
            Struct container for shadow slice data.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.viewMatrix">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.projectionMatrix">
            <summary>
            The projection matrix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.shadowTransform">
            <summary>
            The shadow transform matrix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.offsetX">
            <summary>
            The X offset to the shadow map.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.offsetY">
            <summary>
            The Y offset to the shadow map.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.resolution">
            <summary>
            The maximum tile resolution in an Atlas.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowSliceData.splitData">
            <summary>
            The shadow split data containing culling information.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowSliceData.Clear">
            <summary>
            Clears and resets the data.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowUtils">
            <summary>
            Various utility functions used for shadows.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ExtractDirectionalLightMatrix(UnityEngine.Rendering.CullingResults@,UnityEngine.Rendering.Universal.ShadowData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,UnityEngine.Vector4@,UnityEngine.Rendering.Universal.ShadowSliceData@,UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
            <summary>
            Extracts the directional light matrix.
            </summary>
            <param name="cullResults"></param>
            <param name="shadowData"></param>
            <param name="shadowLightIndex"></param>
            <param name="cascadeIndex"></param>
            <param name="shadowmapWidth"></param>
            <param name="shadowmapHeight"></param>
            <param name="shadowResolution"></param>
            <param name="shadowNearPlane"></param>
            <param name="cascadeSplitDistance"></param>
            <param name="shadowSliceData"></param>
            <param name="viewMatrix"></param>
            <param name="projMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ExtractDirectionalLightMatrix(UnityEngine.Rendering.CullingResults@,UnityEngine.Rendering.Universal.ShadowData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,UnityEngine.Vector4@,UnityEngine.Rendering.Universal.ShadowSliceData@)">
            <summary>
            Extracts the directional light matrix.
            </summary>
            <param name="cullResults"></param>
            <param name="shadowData"></param>
            <param name="shadowLightIndex"></param>
            <param name="cascadeIndex"></param>
            <param name="shadowmapWidth"></param>
            <param name="shadowmapHeight"></param>
            <param name="shadowResolution"></param>
            <param name="shadowNearPlane"></param>
            <param name="cascadeSplitDistance"></param>
            <param name="shadowSliceData"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ExtractSpotLightMatrix(UnityEngine.Rendering.CullingResults@,UnityEngine.Rendering.Universal.ShadowData@,System.Int32,UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@,UnityEngine.Rendering.ShadowSplitData@)">
            <summary>
            Extracts the spot light matrix.
            </summary>
            <param name="cullResults"></param>
            <param name="shadowData"></param>
            <param name="shadowLightIndex"></param>
            <param name="shadowMatrix"></param>
            <param name="viewMatrix"></param>
            <param name="projMatrix"></param>
            <param name="splitData"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ExtractPointLightMatrix(UnityEngine.Rendering.CullingResults@,UnityEngine.Rendering.Universal.ShadowData@,System.Int32,UnityEngine.CubemapFace,System.Single,UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@,UnityEngine.Rendering.ShadowSplitData@)">
            <summary>
            Extracts the spot light matrix.
            </summary>
            <param name="cullResults"></param>
            <param name="shadowData"></param>
            <param name="shadowLightIndex"></param>
            <param name="cubemapFace"></param>
            <param name="fovBias"></param>
            <param name="shadowMatrix"></param>
            <param name="viewMatrix"></param>
            <param name="projMatrix"></param>
            <param name="splitData"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.RenderShadowSlice(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ScriptableRenderContext@,UnityEngine.Rendering.Universal.ShadowSliceData@,UnityEngine.Rendering.ShadowDrawingSettings@,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
            <summary>
            Renders shadows to a shadow slice.
            </summary>
            <param name="cmd"></param>
            <param name="context"></param>
            <param name="shadowSliceData"></param>
            <param name="settings"></param>
            <param name="proj"></param>
            <param name="view"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.RenderShadowSlice(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ScriptableRenderContext@,UnityEngine.Rendering.Universal.ShadowSliceData@,UnityEngine.Rendering.ShadowDrawingSettings@)">
            <summary>
            Renders shadows to a shadow slice.
            </summary>
            <param name="cmd"></param>
            <param name="context"></param>
            <param name="shadowSliceData"></param>
            <param name="settings"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.GetMaxTileResolutionInAtlas(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the maximum tile resolution in an Atlas.
            </summary>
            <param name="atlasWidth"></param>
            <param name="atlasHeight"></param>
            <param name="tileCount"></param>
            <returns>The maximum tile resolution in an Atlas.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ApplySliceTransform(UnityEngine.Rendering.Universal.ShadowSliceData@,System.Int32,System.Int32)">
            <summary>
            Used for baking bake cascade transforms in each shadow matrix.
            </summary>
            <param name="shadowSliceData"></param>
            <param name="atlasWidth"></param>
            <param name="atlasHeight"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.GetShadowBias(UnityEngine.Rendering.VisibleLight@,System.Int32,UnityEngine.Rendering.Universal.ShadowData@,UnityEngine.Matrix4x4,System.Single)">
            <summary>
            Calculates the depth and normal bias from a light.
            </summary>
            <param name="shadowLight"></param>
            <param name="shadowLightIndex"></param>
            <param name="shadowData"></param>
            <param name="lightProjectionMatrix"></param>
            <param name="shadowResolution"></param>
            <returns>The depth and normal bias from a visible light.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.GetScaleAndBiasForLinearDistanceFade(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Extract scale and bias from a fade distance to achieve a linear fading of the fade distance.
            </summary>
            <param name="fadeDistance">Distance at which object should be totally fade</param>
            <param name="border">Normalized distance of fade</param>
            <param name="scale">[OUT] Slope of the fading on the fading part</param>
            <param name="bias">[OUT] Ordinate of the fading part at abscissa 0</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.SetupShadowCasterConstantBuffer(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.VisibleLight@,UnityEngine.Vector4)">
            <summary>
            Sets up the shadow bias, light direction and position for rendering.
            </summary>
            <param name="cmd"></param>
            <param name="shadowLight"></param>
            <param name="shadowBias"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.GetTemporaryShadowTexture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a temporary render texture for shadows.
            This function has been deprecated. Use AllocShadowRT or ShadowRTReAllocateIfNeeded instead.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="bits">The number of depth bits.</param>
            <returns>A shadow render texture.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ShadowRTNeedsReAlloc(UnityEngine.Rendering.RTHandle,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.String)">
            <summary>
            Return true if handle does not match the requirements
            </summary>
            <param name="handle">RTHandle to check (can be null).</param>
            <param name="width">Width of the RTHandle to match.</param>
            <param name="height">Height of the RTHandle to match.</param>
            <param name="bits">Depth bits of the RTHandle to match.</param>
            <param name="anisoLevel">Anisotropic filtering level of the RTHandle to match.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering of the RTHandle to match.</param>
            <param name="name">Name of the RTHandle of the RTHandle to match.</param>
            <returns>If the RTHandle needs to be re-allocated</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.AllocShadowRT(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.String)">
            <summary>
            Allocate a Shadow Map
            </summary>
            <param name="width">Width of the Shadow Map.</param>
            <param name="height">Height of the Shadow Map.</param>
            <param name="bits">Minimum depth bits of the Shadow Map.</param>
            <param name="anisoLevel">Anisotropic filtering level of the Shadow Map.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering of the Shadow Map.</param>
            <param name="name">Name of the Shadow Map.</param>
            <returns>If an RTHandle for the Shadow Map</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowUtils.ShadowRTReAllocateIfNeeded(UnityEngine.Rendering.RTHandle@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.String)">
            <summary>
            Allocate a Shadow Map or re-allocate if it doesn't match requirements.
            For use only if the map requirements changes at runtime.
            </summary>
            <param name="handle">RTHandle to check (can be null).</param>
            <param name="width">Width of the Shadow Map.</param>
            <param name="height">Height of the Shadow Map.</param>
            <param name="bits">Minimum depth bits of the Shadow Map.</param>
            <param name="anisoLevel">Anisotropic filtering level of the Shadow Map.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering of the Shadow Map.</param>
            <param name="name">Name of the Shadow Map.</param>
            <returns>If the RTHandle was re-allocated</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CameraOverrideOption">
            <summary>
            Holds information about whether to override certain camera rendering options from the render pipeline asset.
            When set to <c>Off</c> option will be disabled regardless of what is set on the pipeline asset.
            When set to <c>On</c> option will be enabled regardless of what is set on the pipeline asset.
            When set to <c>UsePipelineSetting</c> value set in the <see cref="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraOverrideOption.Off">
            <summary>
            Use this to disable regardless of what is set on the pipeline asset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraOverrideOption.On">
            <summary>
            Use this to enable regardless of what is set on the pipeline asset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraOverrideOption.UsePipelineSettings">
            <summary>
            Use this to choose the setting set on the pipeline asset.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RendererOverrideOption">
            <summary>
            Options to control the renderer override.
            This enum is no longer in use.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RendererOverrideOption.Custom">
            <summary>
            Use this to choose a custom override.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RendererOverrideOption.UsePipelineSettings">
            <summary>
            Use this to choose the setting set on the pipeline asset.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.AntialiasingMode">
            <summary>
            Holds information about the post-processing anti-aliasing mode.
            When set to <c>None</c> no post-processing anti-aliasing pass will be performed.
            When set to <c>Fast</c> a fast approximated anti-aliasing pass will render when resolving the camera to screen.
            When set to <c>SubpixelMorphologicalAntiAliasing</c> SMAA pass will render when resolving the camera to screen.
            You can choose the SMAA quality by setting <seealso cref="T:UnityEngine.Rendering.Universal.AntialiasingQuality"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingMode.None">
            <summary>
            Use this to have no post-processing anti-aliasing pass performed.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingMode.FastApproximateAntialiasing">
            <summary>
            Use this to have a fast approximated anti-aliasing pass rendered when resolving the camera to screen
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingMode.SubpixelMorphologicalAntiAliasing">
            <summary>
            Use this to have a <c>SubpixelMorphologicalAntiAliasing</c> SMAA pass rendered when resolving the camera to screen
            You can choose the SMAA quality by setting <seealso cref="T:UnityEngine.Rendering.Universal.AntialiasingQuality"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingMode.TemporalAntiAliasing">
            <summary>
            Use this to have a temporal anti-aliasing pass rendered when resolving camera to screen.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CameraRenderType">
            <summary>
            Holds information about the render type of a camera. Options are Base or Overlay.
            Base rendering type allows the camera to render to either the screen or to a texture.
            Overlay rendering type allows the camera to render on top of a previous camera output, thus compositing camera results.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraRenderType.Base">
            <summary>
            Use this to select the base camera render type.
            Base rendering type allows the camera to render to either the screen or to a texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraRenderType.Overlay">
            <summary>
            Use this to select the overlay camera render type.
            Overlay rendering type allows the camera to render on top of a previous camera output, thus compositing camera results.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.AntialiasingQuality">
            <summary>
            Controls <c>SubpixelMorphologicalAntiAliasing</c> SMAA anti-aliasing quality.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingQuality.Low">
            <summary>
            Use this to select the low <c>SubpixelMorphologicalAntiAliasing</c> SMAA quality
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingQuality.Medium">
            <summary>
            Use this to select the medium <c>SubpixelMorphologicalAntiAliasing</c> SMAA quality
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.AntialiasingQuality.High">
            <summary>
            Use this to select the high <c>SubpixelMorphologicalAntiAliasing</c> SMAA quality
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CameraExtensions">
            <summary>
            Contains extension methods for Camera class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.GetUniversalAdditionalCameraData(UnityEngine.Camera)">
            <summary>
            Universal Render Pipeline exposes additional rendering data in a separate component.
            This method returns the additional data component for the given camera or create one if it doesn't exist yet.
            </summary>
            <param name="camera"></param>
            <returns>The <c>UniversalAdditionalCameraData</c> for this camera.</returns>
            <see cref="T:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.GetVolumeFrameworkUpdateMode(UnityEngine.Camera)">
            <summary>
            Returns the VolumeFrameworkUpdateMode set on the camera.
            </summary>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.SetVolumeFrameworkUpdateMode(UnityEngine.Camera,UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode)">
            <summary>
            Sets the VolumeFrameworkUpdateMode for the camera.
            </summary>
            <param name="camera"></param>
            <param name="mode"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.UpdateVolumeStack(UnityEngine.Camera)">
            <summary>
            Updates the volume stack for this camera.
            This function will only update the stack when the camera has VolumeFrameworkUpdateMode set to ViaScripting
            or when it set to UsePipelineSettings and the update mode on the Render Pipeline Asset is set to ViaScripting.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.UpdateVolumeStack(UnityEngine.Camera,UnityEngine.Rendering.Universal.UniversalAdditionalCameraData)">
            <summary>
            Updates the volume stack for this camera.
            This function will only update the stack when the camera has ViaScripting selected or if
            the camera is set to UsePipelineSettings and the Render Pipeline Asset is set to ViaScripting.
            </summary>
            <param name="camera"></param>
            <param name="cameraData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.DestroyVolumeStack(UnityEngine.Camera)">
            <summary>
            Destroys the volume stack for this camera.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.DestroyVolumeStack(UnityEngine.Camera,UnityEngine.Rendering.Universal.UniversalAdditionalCameraData)">
            <summary>
            Destroys the volume stack for this camera.
            </summary>
            <param name="camera"></param>
            <param name="cameraData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraExtensions.GetVolumeLayerMaskAndTrigger(UnityEngine.Camera,UnityEngine.Rendering.Universal.UniversalAdditionalCameraData,UnityEngine.LayerMask@,UnityEngine.Transform@)">
            <summary>
            Returns the mask and trigger assigned for volumes on the camera.
            </summary>
            <param name="camera"></param>
            <param name="cameraData"></param>
            <param name="layerMask"></param>
            <param name="trigger"></param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData">
            <summary>
            Class containing various additional camera data used by URP.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.version">
            <summary>
            The serialized version of the class. Used for upgrading.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.renderShadows">
            <summary>
            Controls if this camera should render shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.requiresDepthOption">
            <summary>
            Controls if a camera should render depth.
            The depth is available to be bound in shaders as _CameraDepthTexture.
            <seealso cref="T:UnityEngine.Rendering.Universal.CameraOverrideOption"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.requiresColorOption">
            <summary>
            Controls if a camera should copy the color contents of a camera after rendering opaques.
            The color texture is available to be bound in shaders as _CameraOpaqueTexture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.renderType">
            <summary>
            Returns the camera renderType.
            <see cref="T:UnityEngine.Rendering.Universal.CameraRenderType"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.cameraStack">
            <summary>
            Returns the camera stack. Only valid for Base cameras.
            Will return null if it is not a Base camera.
            <seealso cref="T:UnityEngine.Rendering.Universal.CameraRenderType"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.clearDepth">
            <summary>
            If true, this camera will clear depth value before rendering. Only valid for Overlay cameras.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.requiresDepthTexture">
            <summary>
            Returns true if this camera needs to render depth information in a texture.
            If enabled, depth texture is available to be bound and read from shaders as _CameraDepthTexture after rendering skybox.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.requiresColorTexture">
            <summary>
            Returns true if this camera requires to color information in a texture.
            If enabled, color texture is available to be bound and read from shaders as _CameraOpaqueTexture after rendering skybox.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.scriptableRenderer">
            <summary>
            Returns the <see cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/> that is used to render this camera.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.SetRenderer(System.Int32)">
            <summary>
            Use this to set this Camera's current <see cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/> to one listed on the Render Pipeline Asset. Takes an index that maps to the list on the Render Pipeline Asset.
            </summary>
            <param name="index">The index that maps to the RendererData list on the currently assigned Render Pipeline Asset</param>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.volumeLayerMask">
            <summary>
            Returns the selected scene-layers affecting this camera.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.volumeTrigger">
            <summary>
            Returns the Transform that acts as a trigger for Volume blending.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.volumeFrameworkUpdateMode">
            <summary>
            Returns the selected mode for Volume Frame Updates.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.requiresVolumeFrameworkUpdate">
            <summary>
            Returns true if this camera requires the volume framework to be updated every frame.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.volumeStack">
            <summary>
            Returns the current volume stack used by this camera.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.renderPostProcessing">
            <summary>
            Returns true if this camera should render post-processing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.antialiasing">
            <summary>
            Returns the current anti-aliasing mode used by this camera.
            <see cref="T:UnityEngine.Rendering.Universal.AntialiasingMode"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.antialiasingQuality">
            <summary>
            Returns the current anti-aliasing quality used by this camera.
            <seealso cref="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.antialiasingQuality"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.taaPersistentData">
            <summary>
            Temporal Anti-aliasing buffers and data that persists over a frame.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.motionVectorsPersistentData">
            <summary>
            Motion data that persists over a frame.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.resetHistory">
            <summary>
            Reset post-process history.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.stopNaN">
            <summary>
            Returns true if this camera should automatically replace NaN/Inf in shaders by a black pixel to avoid breaking some effects.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.dithering">
            <summary>
            Returns true if this camera applies 8-bit dithering to the final render to reduce color banding
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.allowXRRendering">
            <summary>
            Returns true if this camera allows render in XR.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.useScreenCoordOverride">
            <summary>
            Returns true if the camera uses Screen Coordinates Override.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.screenSizeOverride">
            <summary>
            Screen size used when Screen Coordinates Override is active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.screenCoordScaleBias">
            <summary>
            Transform applied to screen coordinates when Screen Coordinates Override is active.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.OnBeforeSerialize">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.OnAfterDeserialize">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.OnDrawGizmos">
            <inheritdoc/>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.NoEmptyPolygons">
            <summary>
            If true, will remove empty (zero area) polygons.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.UsePooling">
            <summary>
            If true, will use pooling to reduce GC (compare performance with/without, can vary wildly).
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.TessellateMonoRegion(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Face)">
             <summary>
             TessellateMonoRegion( face ) tessellates a monotone region
             (what else would it do??)  The region must consist of a single
             loop of half-edges (see mesh.h) oriented CCW.  "Monotone" in this
             case means that any vertical line intersects the interior of the
             region in a single interval.
            
             Tessellation consists of adding interior edges (actually pairs of
             half-edges), to split the region into non-overlapping triangles.
            
             The basic idea is explained in Preparata and Shamos (which I don't
             have handy right now), although their implementation is more
             complicated than this one.  The are two edge chains, an upper chain
             and a lower chain.  We process all vertices from both chains in order,
             from right to left.
            
             The algorithm ensures that the following invariant holds after each
             vertex is processed: the untessellated region consists of two
             chains, where one chain (say the upper) is a single edge, and
             the other chain is concave.  The left vertex of the single edge
             is always to the left of all vertices in the concave chain.
            
             Each step consists of adding the rightmost unprocessed vertex to one
             of the two chains, and forming a fan of triangles from the rightmost
             of two chain endpoints.  Determining whether we can add each triangle
             to the fan is a simple orientation test.  By making the fan as large
             as possible, we restore the invariant (check it yourself).
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.TessellateInterior">
            <summary>
            TessellateInterior( mesh ) tessellates each region of
            the mesh which is marked "inside" the polygon. Each such region
            must be monotone.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.DiscardExterior">
            <summary>
            DiscardExterior zaps (ie. sets to null) all faces
            which are not marked "inside" the polygon.  Since further mesh operations
            on NULL faces are not allowed, the main purpose is to clean up the
            mesh so that exterior loops are not represented in the data structure.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.SetWindingNumber(System.Int32,System.Boolean)">
             <summary>
             SetWindingNumber( value, keepOnlyBoundary ) resets the
             winding numbers on all edges so that regions marked "inside" the
             polygon have a winding number of "value", and regions outside
             have a winding number of 0.
            
             If keepOnlyBoundary is TRUE, it also deletes all edges which do not
             separate an interior region from an exterior one.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.EdgeLeq(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
             <summary>
             Both edges must be directed from right to left (this is the canonical
             direction for the upper edge of each region).
            
             The strategy is to evaluate a "t" value for each edge at the
             current sweep line position, given by tess->event. The calculations
             are designed to be very stable, but of course they are not perfect.
            
             Special case: if both edge destinations are at the sweep event,
             we sort the edges by slope (they would otherwise compare equally).
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.FixUpperEdge(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Replace an upper edge which needs fixing (see ConnectRightVertex).
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.AddRegionBelow(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Add a new active region to the sweep line, *somewhere* below "regAbove"
            (according to where the new edge belongs in the sweep-line dictionary).
            The upper edge of the new region will be "eNewUp".
            Winding number and "inside" flag are not updated.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.FinishRegion(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            Delete a region from the sweep line. This happens when the upper
            and lower chains of a region meet (at a vertex on the sweep line).
            The "inside" flag is copied to the appropriate mesh face (we could
            not do this before -- since the structure of the mesh is always
            changing, this face may not have even existed until now).
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.FinishLeftRegions(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            We are given a vertex with one or more left-going edges.  All affected
            edges should be in the edge dictionary.  Starting at regFirst->eUp,
            we walk down deleting all regions where both edges have the same
            origin vOrg.  At the same time we copy the "inside" flag from the
            active region to the face, since at this point each face will belong
            to at most one region (this was not necessarily true until this point
            in the sweep).  The walk stops at the region above regLast; if regLast
            is null we walk as far as possible.  At the same time we relink the
            mesh if necessary, so that the ordering of edges around vOrg is the
            same as in the dictionary.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.AddRightEdges(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,System.Boolean)">
            <summary>
            Purpose: insert right-going edges into the edge dictionary, and update
            winding numbers and mesh connectivity appropriately.  All right-going
            edges share a common origin vOrg.  Edges are inserted CCW starting at
            eFirst; the last edge inserted is eLast.Oprev.  If vOrg has any
            left-going edges already processed, then eTopLeft must be the edge
            such that an imaginary upward vertical segment from vOrg would be
            contained between eTopLeft.Oprev and eTopLeft; otherwise eTopLeft
            should be null.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.SpliceMergeVertices(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Two vertices with idential coordinates are combined into one.
            e1.Org is kept, while e2.Org is discarded.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.VertexWeights(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,System.Single@,System.Single@)">
            <summary>
            Find some weights which describe how the intersection vertex is
            a linear combination of "org" and "dest".  Each of the two edges
            which generated "isect" is allocated 50% of the weight; each edge
            splits the weight between its org and dst according to the
            relative distance to "isect".
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.GetIntersectData(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            We've computed a new intersection point, now we need a "data" pointer
            from the user so that we can refer to this new vertex in the
            rendering callbacks.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.CheckForRightSplice(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
             <summary>
             Check the upper and lower edge of "regUp", to make sure that the
             eUp->Org is above eLo, or eLo->Org is below eUp (depending on which
             origin is leftmost).
            
             The main purpose is to splice right-going edges with the same
             dest vertex and nearly identical slopes (ie. we can't distinguish
             the slopes numerically).  However the splicing can also help us
             to recover from numerical errors.  For example, suppose at one
             point we checked eUp and eLo, and decided that eUp->Org is barely
             above eLo.  Then later, we split eLo into two edges (eg. from
             a splice operation like this one).  This can change the result of
             our test so that now eUp->Org is incident to eLo, or barely below it.
             We must correct this condition to maintain the dictionary invariants.
            
             One possibility is to check these edges for intersection again
             (ie. CheckForIntersect).  This is what we do if possible.  However
             CheckForIntersect requires that tess->event lies between eUp and eLo,
             so that it has something to fall back on when the intersection
             calculation gives us an unusable answer.  So, for those cases where
             we can't check for intersection, this routine fixes the problem
             by just splicing the offending vertex into the other edge.
             This is a guaranteed solution, no matter how degenerate things get.
             Basically this is a combinatorial solution to a numerical problem.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.CheckForLeftSplice(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
             <summary>
             Check the upper and lower edge of "regUp", to make sure that the
             eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which
             destination is rightmost).
            
             Theoretically, this should always be true.  However, splitting an edge
             into two pieces can change the results of previous tests.  For example,
             suppose at one point we checked eUp and eLo, and decided that eUp->Dst
             is barely above eLo.  Then later, we split eLo into two edges (eg. from
             a splice operation like this one).  This can change the result of
             the test so that now eUp->Dst is incident to eLo, or barely below it.
             We must correct this condition to maintain the dictionary invariants
             (otherwise new edges might get inserted in the wrong place in the
             dictionary, and bad stuff will happen).
            
             We fix the problem by just splicing the offending vertex into the
             other edge.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.CheckForIntersect(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
             <summary>
             Check the upper and lower edges of the given region to see if
             they intersect.  If so, create the intersection and add it
             to the data structures.
            
             Returns TRUE if adding the new intersection resulted in a recursive
             call to AddRightEdges(); in this case all "dirty" regions have been
             checked for intersections, and possibly regUp has been deleted.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.WalkDirtyRegions(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion)">
            <summary>
            When the upper or lower edge of any region changes, the region is
            marked "dirty".  This routine walks through all the dirty regions
            and makes sure that the dictionary invariants are satisfied
            (see the comments at the beginning of this file).  Of course
            new dirty regions can be created as we make changes to restore
            the invariants.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ConnectRightVertex(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
             <summary>
             Purpose: connect a "right" vertex vEvent (one where all edges go left)
             to the unprocessed portion of the mesh.  Since there are no right-going
             edges, two regions (one above vEvent and one below) are being merged
             into one.  "regUp" is the upper of these two regions.
            
             There are two reasons for doing this (adding a right-going edge):
              - if the two regions being merged are "inside", we must add an edge
                to keep them separated (the combined region would not be monotone).
              - in any case, we must leave some record of vEvent in the dictionary,
                so that we can merge vEvent with features that we have not seen yet.
                For example, maybe there is a vertical edge which passes just to
                the right of vEvent; we would like to splice vEvent into this edge.
            
             However, we don't want to connect vEvent to just any vertex.  We don''t
             want the new edge to cross any other edges; otherwise we will create
             intersection vertices even when the input data had no self-intersections.
             (This is a bad thing; if the user's input data has no intersections,
             we don't want to generate any false intersections ourselves.)
            
             Our eventual goal is to connect vEvent to the leftmost unprocessed
             vertex of the combined region (the union of regUp and regLo).
             But because of unseen vertices with all right-going edges, and also
             new vertices which may be created by edge intersections, we don''t
             know where that leftmost unprocessed vertex is.  In the meantime, we
             connect vEvent to the closest vertex of either chain, and mark the region
             as "fixUpperEdge".  This flag says to delete and reconnect this edge
             to the next processed vertex on the boundary of the combined region.
             Quite possibly the vertex we connected to will turn out to be the
             closest one, in which case we won''t need to make any changes.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ConnectLeftDegenerate(UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ActiveRegion,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            The event vertex lies exacty on an already-processed edge or vertex.
            Adding the new vertex involves splicing it into the already-processed
            part of the mesh.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ConnectLeftVertex(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
             <summary>
             Purpose: connect a "left" vertex (one where both edges go right)
             to the processed portion of the mesh.  Let R be the active region
             containing vEvent, and let U and L be the upper and lower edge
             chains of R.  There are two possibilities:
            
             - the normal case: split R into two regions, by connecting vEvent to
               the rightmost vertex of U or L lying to the left of the sweep line
            
             - the degenerate case: if vEvent is close enough to U or L, we
               merge vEvent into that edge chain.  The subcases are:
                 - merging with the rightmost vertex of U or L
                 - merging with the active edge of U or L
                 - merging with an already-processed portion of U or L
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.SweepEvent(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Does everything necessary when the sweep line crosses a vertex.
            Updates the mesh and the edge dictionary.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.AddSentinel(System.Single,System.Single,System.Single)">
             <summary>
             Make the sentinel coordinates big enough that they will never be
             merged with real input features.
            
             We add two sentinel edges above and below all other edges,
             to avoid special cases at the top and bottom.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.InitEdgeDict">
            <summary>
            We maintain an ordering of edge intersections with the sweep line.
            This order is maintained in a dynamic dictionary.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.RemoveDegenerateEdges">
            <summary>
            Remove zero-length edges, and contours with fewer than 3 vertices.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.InitPriorityQ">
            <summary>
            Insert all vertices into the priority queue which determines the
            order in which vertices cross the sweep line.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.RemoveDegenerateFaces">
             <summary>
             Delete any degenerate faces with only two edges.  WalkDirtyRegions()
             will catch almost all of these, but it won't catch degenerate faces
             produced by splice operations on already-processed edges.
             The two places this can happen are in FinishLeftRegions(), when
             we splice in a "temporary" edge produced by ConnectRightVertex(),
             and in CheckForLeftSplice(), where we splice already-processed
             edges to ensure that our dictionary invariants are not violated
             by numerical errors.
            
             In both these cases it is *very* dangerous to delete the offending
             edge at the time, since one of the routines further up the stack
             will sometimes be keeping a pointer to that edge.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Tess.ComputeInterior">
            <summary>
            ComputeInterior computes the planar arrangement specified
            by the given contours, and further subdivides this arrangement
            into regions.  Each region is marked "inside" if it belongs
            to the polygon, according to the rule given by windingRule.
            Each interior region is guaranteed to be monotone.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.MakeEdge(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            MakeEdge creates a new pair of half-edges which form their own loop.
            No vertex or face structures are allocated, but these must be assigned
            before the current edge operation is completed.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Splice(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Splice( a, b ) is best described by the Guibas/Stolfi paper or the
            CS348a notes (see Mesh.cs). Basically it modifies the mesh so that
            a->Onext and b->Onext are exchanged. This can have various effects
            depending on whether a and b belong to different face or vertex rings.
            For more explanation see Mesh.Splice().
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.MakeVertex(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            MakeVertex( eOrig, vNext ) attaches a new vertex and makes it the
            origin of all edges in the vertex loop to which eOrig belongs. "vNext" gives
            a place to insert the new vertex in the global vertex list. We insert
            the new vertex *before* vNext so that algorithms which walk the vertex
            list will not see the newly created vertices.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.MakeFace(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Face)">
            <summary>
            MakeFace( eOrig, fNext ) attaches a new face and makes it the left
            face of all edges in the face loop to which eOrig belongs. "fNext" gives
            a place to insert the new face in the global face list. We insert
            the new face *before* fNext so that algorithms which walk the face
            list will not see the newly created faces.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.KillEdge(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),
            and removes from the global edge list.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.KillVertex(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            KillVertex( vDel ) destroys a vertex and removes it from the global
            vertex list. It updates the vertex loop to point to a given new vertex.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.KillFace(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Face,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Face)">
            <summary>
            KillFace( fDel ) destroys a face and removes it from the global face
            list. It updates the face loop to point to a given new face.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.FaceArea(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Face)">
            <summary>
            Return signed area of face.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.MakeEdge">
            <summary>
            Creates one edge, two vertices and a loop (face).
            The loop consists of the two new half-edges.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.Splice(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
             <summary>
             Splice is the basic operation for changing the
             mesh connectivity and topology.  It changes the mesh so that
                 eOrg->Onext = OLD( eDst->Onext )
                 eDst->Onext = OLD( eOrg->Onext )
             where OLD(...) means the value before the meshSplice operation.
            
             This can have two effects on the vertex structure:
              - if eOrg->Org != eDst->Org, the two vertices are merged together
              - if eOrg->Org == eDst->Org, the origin is split into two vertices
             In both cases, eDst->Org is changed and eOrg->Org is untouched.
            
             Similarly (and independently) for the face structure,
              - if eOrg->Lface == eDst->Lface, one loop is split into two
              - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one
             In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.
            
             Some special cases:
             If eDst == eOrg, the operation has no effect.
             If eDst == eOrg->Lnext, the new face will have a single edge.
             If eDst == eOrg->Lprev, the old face will have a single edge.
             If eDst == eOrg->Onext, the new vertex will have a single edge.
             If eDst == eOrg->Oprev, the old vertex will have a single edge.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.Delete(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Removes the edge eDel. There are several cases:
            if (eDel->Lface != eDel->Rface), we join two loops into one; the loop
            eDel->Lface is deleted. Otherwise, we are splitting one loop into two;
            the newly created loop will contain eDel->Dst. If the deletion of eDel
            would create isolated vertices, those are deleted as well.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.AddEdgeVertex(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Creates a new edge such that eNew == eOrg.Lnext and eNew.Dst is a newly created vertex.
            eOrg and eNew will have the same left face.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.SplitEdge(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
            <summary>
            Splits eOrg into two edges eOrg and eNew such that eNew == eOrg.Lnext.
            The new vertex is eOrg.Dst == eNew.Org.
            eOrg and eNew will have the same left face.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.Connect(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Edge)">
             <summary>
             Creates a new edge from eOrg->Dst to eDst->Org, and returns the corresponding half-edge eNew.
             If eOrg->Lface == eDst->Lface, this splits one loop into two,
             and the newly created loop is eNew->Lface.  Otherwise, two disjoint
             loops are merged into one, and the loop eDst->Lface is destroyed.
            
             If (eOrg == eDst), the new face will have only two edges.
             If (eOrg->Lnext == eDst), the old face is reduced to a single edge.
             If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Mesh.ZapFace(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Face)">
            <summary>
            Destroys a face and removes it from the global face list. All edges of
            fZap will have a NULL pointer as their left face. Any edges which
            also have a NULL pointer as their right face are deleted entirely
            (along with any isolated vertices this produces).
            An entire mesh can be deleted by zapping its faces, one at a time,
            in any order. Zapped faces cannot be used in further mesh operations!
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnityEngine.Rendering.Universal.LibTessDotNet.Geom.EdgeEval(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)" -->
        <!-- Badly formed XML comment ignored for member "M:UnityEngine.Rendering.Universal.LibTessDotNet.Geom.EdgeSign(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)" -->
        <member name="M:UnityEngine.Rendering.Universal.LibTessDotNet.Geom.EdgeIntersect(UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex,UnityEngine.Rendering.Universal.LibTessDotNet.MeshUtils.Vertex)">
            <summary>
            Given edges (o1,d1) and (o2,d2), compute their point of intersection.
            The computed point is guaranteed to lie in the intersection of the
            bounding rectangles defined by each edge.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalDrawCallChunk">
            <summary>
            Contains information about <see cref="T:UnityEngine.Rendering.Universal.DecalEntity"/> draw calls.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem">
            <summary>
            Outputs draw calls into <see cref="T:UnityEngine.Rendering.Universal.DecalDrawCallChunk"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalCreateDrawCallSystem.maxDrawDistance">
            <summary>
            Provides acces to the maximum draw distance.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights">
            <summary>
            A volume component that holds settings for the Shadows, Midtones, Highlights effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.shadows">
            <summary>
            Use this to control and apply a hue to the shadows.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.midtones">
            <summary>
            Use this to control and apply a hue to the midtones.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.highlights">
            <summary>
            Use this to control and apply a hue to the highlights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.shadowsStart">
            <summary>
            Start point of the transition between shadows and midtones.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.shadowsEnd">
            <summary>
            End point of the transition between shadows and midtones.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.highlightsStart">
            <summary>
            Start point of the transition between midtones and highlights
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.highlightsEnd">
            <summary>
            End point of the transition between midtones and highlights.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ChromaticAberration">
            <summary>
            A volume component that holds settings for the Chromatic Aberration effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChromaticAberration.intensity">
            <summary>
            Controls the strength of the chromatic aberration effect.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ChromaticAberration.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ChromaticAberration.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.TonemappingMode">
            <summary>
            Options to select a tonemapping algorithm to use for color grading.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TonemappingMode.None">
            <summary>
            Use this option if you do not want to apply tonemapping
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TonemappingMode.Neutral">
            <summary>
            Use this option if you only want range-remapping with minimal impact on color hue and saturation.
            It is generally a great starting point for extensive color grading.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TonemappingMode.ACES">
            <summary>
            Use this option to apply a close approximation of the reference ACES tonemapper for a more filmic look.
            It is more contrasted than Neutral and has an effect on actual color hue and saturation.
            Note that if you use this tonemapper all the grading operations will be done in the ACES color spaces for optimal precision and results.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Tonemapping">
            <summary>
            A volume component that holds settings for the tonemapping effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Tonemapping.mode">
            <summary>
            Use this to select a tonemapping algorithm to use for color grading.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Tonemapping.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Tonemapping.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.TonemappingModeParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.Universal.TonemappingMode"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TonemappingModeParameter.#ctor(UnityEngine.Rendering.Universal.TonemappingMode,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.Universal.TonemappingModeParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TilingJob.ViewToTileSpace(Unity.Mathematics.float3)">
            <summary>
            Project onto Z=1, scale and offset into [0, tileCount]
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TilingJob.ExpandY(Unity.Mathematics.float3)">
            <summary>
            Expands the tile Y range and the X range in the row containing the position.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TilingJob.ExpandX(Unity.Mathematics.float3)">
            <summary>
            Expands the X range in the row containing the position.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TilingJob.GetSphereHorizon(Unity.Mathematics.float2,System.Single,System.Single,System.Single,Unity.Mathematics.float2@,Unity.Mathematics.float2@)">
            <summary>
            Finds the two horizon points seen from (0, 0) of a sphere projected onto either XZ or YZ. Takes clipping into account.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TilingJob.GetCircleClipPoints(Unity.Mathematics.float3,Unity.Mathematics.float3,System.Single,System.Single,Unity.Mathematics.float3@,Unity.Mathematics.float3@)">
            <summary>
            Finds the two points of intersection of a 3D circle and the near plane.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.TilingJob.GetProjectedCircleHorizon(Unity.Mathematics.float2,System.Single,Unity.Mathematics.float2,Unity.Mathematics.float2,Unity.Mathematics.float2@,Unity.Mathematics.float2@)">
            <summary>
            Calculates the horizon of a circle orthogonally projected to a plane as seen from the origin on the plane.
            </summary>
            <param name="center">The center of the circle projected onto the plane.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="U">The major axis of the ellipse formed by the projection of the circle.</param>
            <param name="V">The minor axis of the ellipse formed by the projection of the circle.</param>
            <param name="uv1">The first horizon point expressed as factors of <paramref name="U"/> and <paramref name="V"/>.</param>
            <param name="uv2">The second horizon point expressed as factors of <paramref name="U"/> and <paramref name="V"/>.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial">
            <summary>
            Material-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset">
            <summary>
            Builtin presets for debug albedo validation.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.DefaultLuminance">
            <summary> Use this for default luminance. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.BlackAcrylicPaint">
            <summary> Use this for black acrylic paint. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.DarkSoil">
            <summary> Use this for dark soil. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.WornAsphalt">
            <summary> Use this for worn asphalt. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.DryClaySoil">
            <summary> Use this for dry clay soil. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.GreenGrass">
            <summary> Use this for green grass. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.OldConcrete">
            <summary> Use this for old concrete. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.RedClayTile">
            <summary> Use this for red clay tile. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.DrySand">
            <summary> Use this for dry sand. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.NewConcrete">
            <summary> Use this for new concrete. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.WhiteAcrylicPaint">
            <summary> Use this for white acrylic paint. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.FreshSnow">
            <summary> Use this for fresh snow. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.BlueSky">
            <summary> Use this for blue sky. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.Foliage">
            <summary> Use this for foliage. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AlbedoDebugValidationPreset.Custom">
            <summary> Use this for custom. </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.albedoValidationPreset">
            <summary>
            Current albedo debug validation preset.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.albedoMinLuminance">
            <summary>
            Current minimum luminance threshold value for albedo validation.
            Any albedo luminance values below this value will be considered invalid and will appear red on screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.albedoMaxLuminance">
            <summary>
            Current maximum luminance threshold value for albedo validation.
            Any albedo luminance values above this value will be considered invalid and will appear blue on screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.albedoHueTolerance">
            <summary>
            Current hue tolerance value for albedo validation.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.albedoSaturationTolerance">
            <summary>
            Current saturation tolerance value for albedo validation.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.albedoCompareColor">
            <summary>
            Current target color value for albedo validation.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.metallicMinValue">
            <summary>
            Current minimum threshold value for metallic validation.
            Any metallic values below this value will be considered invalid and will appear red on screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.metallicMaxValue">
            <summary>
            Current maximum threshold value for metallic validation.
            Any metallic values above this value will be considered invalid and will appear blue on screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.materialValidationMode">
            <summary>
            Current material validation mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.materialDebugMode">
            <summary>
            Current debug material mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.vertexAttributeDebugMode">
            <summary>
            Current debug vertex attribute mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.AreAnySettingsActive">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.IsPostProcessingAllowed">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.IsLightingActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.TryGetScreenClearColor(UnityEngine.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsMaterial.UnityEngine#Rendering#IDebugDisplaySettingsData#CreatePanel">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.NativeArrayExtensions.UnsafeElementAt``1(Unity.Collections.NativeArray{``0},System.Int32)">
            <summary>
            IMPORTANT: Make sure you do not write to the value! There are no checks for this!
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MixedLightingSetup">
            <summary>
            Options for mixed lighting setup.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MixedLightingSetup.None">
            <summary>
            Use this to disable mixed lighting.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MixedLightingSetup.ShadowMask">
            <summary>
            Use this to select shadow mask.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MixedLightingSetup.Subtractive">
            <summary>
            Use this to select subtractive.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ImageScalingMode">
            <summary>
            Enumeration that indicates what kind of image scaling is occurring if any
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ImageScalingMode.None">
            No scaling
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ImageScalingMode.Upscaling">
            Upscaling to a larger image
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ImageScalingMode.Downscaling">
            Downscaling to a smaller image
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ImageUpscalingFilter">
            <summary>
            Enumeration that indicates what kind of upscaling filter is being used
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ImageUpscalingFilter.Linear">
            Bilinear filtering
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ImageUpscalingFilter.Point">
            Nearest-Neighbor filtering
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ImageUpscalingFilter.FSR">
            FidelityFX Super Resolution
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RenderingData">
            <summary>
            Struct that flattens several rendering settings used to render a camera stack.
            URP builds the <c>RenderingData</c> settings from several places, including the pipeline asset, camera and light settings.
            The settings also might vary on different platforms and depending on if Adaptive Performance is used.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.cullResults">
            <summary>
            Returns culling results that exposes handles to visible objects, lights and probes.
            You can use this to draw objects with <c>ScriptableRenderContext.DrawRenderers</c>
            <see cref="T:UnityEngine.Rendering.CullingResults"/>
            <seealso cref="T:UnityEngine.Rendering.ScriptableRenderContext"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.cameraData">
            <summary>
            Holds several rendering settings related to camera.
            <see cref="T:UnityEngine.Rendering.Universal.CameraData"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.lightData">
            <summary>
            Holds several rendering settings related to lights.
            <see cref="T:UnityEngine.Rendering.Universal.LightData"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.shadowData">
            <summary>
            Holds several rendering settings related to shadows.
            <see cref="T:UnityEngine.Rendering.Universal.ShadowData"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.postProcessingData">
            <summary>
            Holds several rendering settings and resources related to the integrated post-processing stack.
            <see cref="T:UnityEngine.Rendering.Universal.PostProcessData"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.supportsDynamicBatching">
            <summary>
            True if the pipeline supports dynamic batching.
            This settings doesn't apply when drawing shadow casters. Dynamic batching is always disabled when drawing shadow casters.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.perObjectData">
            <summary>
            Holds per-object data that are requested when drawing
            <see cref="T:UnityEngine.Rendering.PerObjectData"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingData.postProcessingEnabled">
            <summary>
            True if post-processing effect is enabled while rendering the camera stack.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightData">
            <summary>
            Struct that holds settings related to lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.mainLightIndex">
            <summary>
            Holds the main light index from the <c>VisibleLight</c> list returned by culling. If there's no main light in the scene, <c>mainLightIndex</c> is set to -1.
            The main light is the directional light assigned as Sun source in light settings or the brightest directional light.
            <seealso cref="T:UnityEngine.Rendering.CullingResults"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.additionalLightsCount">
            <summary>
            The number of additional lights visible by the camera.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.maxPerObjectAdditionalLightsCount">
            <summary>
            Maximum amount of lights that can be shaded per-object. This value only affects forward rendering.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.visibleLights">
            <summary>
            List of visible lights returned by culling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.shadeAdditionalLightsPerVertex">
            <summary>
            True if additional lights should be shaded in vertex shader, otherwise additional lights will be shaded per pixel.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.supportsMixedLighting">
            <summary>
            True if mixed lighting is supported.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.reflectionProbeBoxProjection">
            <summary>
            True if box projection is enabled for reflection probes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.reflectionProbeBlending">
            <summary>
            True if blending is enabled for reflection probes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.supportsLightLayers">
            <summary>
            True if light layers are enabled.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightData.supportsAdditionalLights">
            <summary>
            True if additional lights enabled.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CameraData">
            <summary>
            Struct that holds settings related to camera.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.GetViewMatrix(System.Int32)">
            <summary>
            Returns the camera view matrix.
            </summary>
            <param name="viewIndex"> View index in case of stereo rendering. By default <c>viewIndex</c> is set to 0. </param>
            <returns> The camera view matrix. </returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.GetProjectionMatrix(System.Int32)">
            <summary>
            Returns the camera projection matrix. Might be jittered for temporal features.
            </summary>
            <param name="viewIndex"> View index in case of stereo rendering. By default <c>viewIndex</c> is set to 0. </param>
            <returns> The camera projection matrix. </returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.GetGPUProjectionMatrix(System.Int32)">
            <summary>
            Returns the camera GPU projection matrix. This contains platform specific changes to handle y-flip and reverse z. Includes camera jitter if required by active features.
            Similar to <c>GL.GetGPUProjectionMatrix</c> but queries URP internal state to know if the pipeline is rendering to render texture.
            For more info on platform differences regarding camera projection check: https://docs.unity3d.com/Manual/SL-PlatformDifferences.html
            </summary>
            <param name="viewIndex"> View index in case of stereo rendering. By default <c>viewIndex</c> is set to 0. </param>
            <seealso cref="M:UnityEngine.GL.GetGPUProjectionMatrix(UnityEngine.Matrix4x4,System.Boolean)"/>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.GetGPUProjectionMatrixNoJitter(System.Int32)">
            <summary>
            Returns the camera GPU projection matrix. This contains platform specific changes to handle y-flip and reverse z. Does not include any camera jitter.
            Similar to <c>GL.GetGPUProjectionMatrix</c> but queries URP internal state to know if the pipeline is rendering to render texture.
            For more info on platform differences regarding camera projection check: https://docs.unity3d.com/Manual/SL-PlatformDifferences.html
            </summary>
            <param name="viewIndex"> View index in case of stereo rendering. By default <c>viewIndex</c> is set to 0. </param>
            <seealso cref="M:UnityEngine.GL.GetGPUProjectionMatrix(UnityEngine.Matrix4x4,System.Boolean)"/>
            <returns></returns>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.camera">
            <summary>
            The camera component.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.renderType">
            <summary>
            The camera render type used for camera stacking.
            <see cref="T:UnityEngine.Rendering.Universal.CameraRenderType"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.targetTexture">
            <summary>
            Controls the final target texture for a camera. If null camera will resolve rendering to screen.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.cameraTargetDescriptor">
            <summary>
            Render texture settings used to create intermediate camera textures for rendering.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.renderScale">
            <summary>
            Render scale to apply when creating camera textures.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.clearDepth">
            <summary>
            True if this camera should clear depth buffer. This setting only applies to cameras of type <c>CameraRenderType.Overlay</c>
            <seealso cref="T:UnityEngine.Rendering.Universal.CameraRenderType"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.cameraType">
            <summary>
            The camera type.
            <seealso cref="T:UnityEngine.CameraType"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.isDefaultViewport">
            <summary>
            True if this camera is drawing to a viewport that maps to the entire screen.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.isHdrEnabled">
            <summary>
            True if this camera should render to high dynamic range color targets.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.requiresDepthTexture">
            <summary>
            True if this camera requires to write _CameraDepthTexture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.requiresOpaqueTexture">
            <summary>
            True if this camera requires to copy camera color texture to _CameraOpaqueTexture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.postProcessingRequiresDepthTexture">
            <summary>
            Returns true if post processing passes require depth texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.xrRendering">
            <summary>
            Returns true if XR rendering is enabled.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.CameraData.isSceneViewCamera">
            <summary>
            True if the camera rendering is for the scene window in the editor.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.CameraData.isPreviewCamera">
            <summary>
            True if the camera rendering is for the preview window in the editor.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.IsHandleYFlipped(UnityEngine.Rendering.RTHandle)">
            <summary>
            True is the handle has its content flipped on the y axis.
            This happens only with certain rendering APIs.
            On those platforms, any handle will have its content flipped unless rendering to a backbuffer, however,
            the scene view will always be flipped.
            When transitioning from a flipped space to a non-flipped space - or vice-versa - the content must be flipped
            in the shader:
            shouldPerformYFlip = IsHandleYFlipped(source) != IsHandleYFlipped(target)
            </summary>
            <param name="handle">Handle to check the flipped status on.</param>
            <returns>True is the content is flipped in y.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.IsCameraProjectionMatrixFlipped">
            <summary>
            True if the camera device projection matrix is flipped. This happens when the pipeline is rendering
            to a render texture in non OpenGL platforms. If you are doing a custom Blit pass to copy camera textures
            (_CameraColorTexture, _CameraDepthAttachment) you need to check this flag to know if you should flip the
            matrix when rendering with for cmd.Draw* and reading from camera textures.
            </summary>
            <returns> True if the camera device projection matrix is flipped. </returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CameraData.IsRenderTargetProjectionMatrixFlipped(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle)">
            <summary>
            True if the render target's projection matrix is flipped. This happens when the pipeline is rendering
            to a render texture in non OpenGL platforms. If you are doing a custom Blit pass to copy camera textures
            (_CameraColorTexture, _CameraDepthAttachment) you need to check this flag to know if you should flip the
            matrix when rendering with for cmd.Draw* and reading from camera textures.
            </summary>
            <param name="color">Color render target to check whether the matrix is flipped.</param>
            <param name="depth">Depth render target which is used if color is null. By default <c>depth</c> is set to null.</param>
            <returns> True if the render target's projection matrix is flipped. </returns>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.defaultOpaqueSortFlags">
            <summary>
            The sorting criteria used when drawing opaque objects by the internal URP render passes.
            When a GPU supports hidden surface removal, URP will rely on that information to avoid sorting opaque objects front to back and
            benefit for more optimal static batching.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.SortingCriteria"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.CameraData.xr">
            <summary>
            XRPass holds the render target information and a list of XRView.
            XRView contains the parameters required to render (projection and view matrices, viewport, etc)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.isStereoEnabled">
            <summary>
            Is XR enabled or not.
            This is obsolete, please use xr.enabled instead.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.maxShadowDistance">
            <summary>
            Maximum shadow distance visible to the camera. When set to zero shadows will be disable for that camera.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.postProcessEnabled">
            <summary>
            True if post-processing is enabled for this camera.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.captureActions">
            <summary>
            Provides set actions to the renderer to be triggered at the end of the render loop for camera capture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.volumeLayerMask">
            <summary>
            The camera volume layer mask.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.volumeTrigger">
            <summary>
            The camera volume trigger.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.isStopNaNEnabled">
            <summary>
            If set to true, the integrated post-processing stack will replace any NaNs generated by render passes prior to post-processing with black/zero.
            Enabling this option will cause a noticeable performance impact. It should be used while in development mode to identify NaN issues.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.isDitheringEnabled">
            <summary>
            If set to true a final post-processing pass will be applied to apply dithering.
            This can be combined with post-processing antialiasing.
            <seealso cref="F:UnityEngine.Rendering.Universal.CameraData.antialiasing"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.antialiasing">
            <summary>
            Controls the anti-alising mode used by the integrated post-processing stack.
            When any other value other than <c>AntialiasingMode.None</c> is chosen, a final post-processing pass will be applied to apply anti-aliasing.
            This pass can be combined with dithering.
            <see cref="T:UnityEngine.Rendering.Universal.AntialiasingMode"/>
            <seealso cref="F:UnityEngine.Rendering.Universal.CameraData.isDitheringEnabled"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.antialiasingQuality">
            <summary>
            Controls the anti-alising quality of the anti-aliasing mode.
            <see cref="F:UnityEngine.Rendering.Universal.CameraData.antialiasingQuality"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.AntialiasingMode"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.renderer">
            <summary>
            Returns the current renderer used by this camera.
            <see cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.resolveFinalTarget">
            <summary>
            True if this camera is resolving rendering to the final camera render target.
            When rendering a stack of cameras only the last camera in the stack will resolve to camera target.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.worldSpaceCameraPos">
            <summary>
            Camera position in world space.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.backgroundColor">
            <summary>
            Final background color in the active color space.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.taaPersistentData">
            <summary>
            Persistent TAA data, primarily for the accumulation texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CameraData.baseCamera">
            <summary>
            Camera at the top of the overlay camera stack
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowData">
            <summary>
            Container struct for various data used for shadows in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.supportsMainLightShadows">
            <summary>
            True if main light shadows are enabled.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.requiresScreenSpaceShadowResolve">
            <summary>
            True if screen space shadows are required.
            Obsolete, this feature was replaced by new 'ScreenSpaceShadows' renderer feature
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.mainLightShadowmapWidth">
            <summary>
            The width of the main light shadow map.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.mainLightShadowmapHeight">
            <summary>
            The height of the main light shadow map.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.mainLightShadowCascadesCount">
            <summary>
            The number of shadow cascades.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.mainLightShadowCascadesSplit">
            <summary>
            The split between cascades.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.mainLightShadowCascadeBorder">
            <summary>
            Main light last cascade shadow fade border.
            Value represents the width of shadow fade that ranges from 0 to 1.
            Where value 0 is used for no shadow fade.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.supportsAdditionalLightShadows">
            <summary>
            True if additional lights shadows are enabled.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.additionalLightsShadowmapWidth">
            <summary>
            The width of the additional light shadow map.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.additionalLightsShadowmapHeight">
            <summary>
            The height of the additional light shadow map.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.supportsSoftShadows">
            <summary>
            True if soft shadows are enabled.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.shadowmapDepthBufferBits">
            <summary>
            The number of bits used.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.bias">
            <summary>
            A list of shadow bias.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowData.resolution">
            <summary>
            A list of resolution for the shadow maps.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PreTile">
            <summary>
            Precomputed tile data.
            Tile left, right, bottom and top plane equations in view space.
            Normals are pointing out.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PreTile.planeLeft">
            <summary>
            The left plane.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PreTile.planeRight">
            <summary>
            The right plane.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PreTile.planeBottom">
            <summary>
            The bottom plane.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PreTile.planeTop">
            <summary>
            The top plane.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.TileData">
            <summary>
            The tile data passed to the deferred shaders.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TileData.tileID">
            <summary>
            The tile ID.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TileData.listBitMask">
            <summary>
            The list bit mask.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TileData.relLightOffset">
            <summary>
            The relative light offset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.TileData.unused">
            <summary>
            Unused variable.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PunctualLightData">
            <summary>
            The point/spot light data passed to the deferred shaders.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.wsPos">
            <summary>
            The world position.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.radius">
            <summary>
            The radius of the light.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.color">
            <summary>
            The color of the light.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.attenuation">
            <summary>
            The attenuation of the light.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.spotDirection">
            <summary>
            The direction for spot lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.flags">
            <summary>
            The flags used.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.occlusionProbeInfo">
            <summary>
            The occlusion probe info.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PunctualLightData.layerMask">
            <summary>
            The layer mask used.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessingData">
            <summary>
            Settings used for Post Processing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessingData.gradingMode">
            <summary>
            The <c>ColorGradingMode</c> to use.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.Universal.ColorGradingMode"/>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessingData.lutSize">
            <summary>
            The size of the Look Up Table (LUT)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessingData.useFastSRGBLinearConversion">
            <summary>
            True if fast approximation functions are used when converting between the sRGB and Linear color spaces, false otherwise.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShaderKeywordStrings">
            <summary>
            Container class for keywords used in URP shaders.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.MainLightShadows">
            <summary> Keyword used for shadows without cascades. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.MainLightShadowCascades">
            <summary> Keyword used for shadows with cascades. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.MainLightShadowScreen">
            <summary> Keyword used for screen space shadows. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.CastingPunctualLightShadow">
            <summary> Keyword used during shadow map generation to differentiate between directional and punctual light shadows, as they use different formulas to apply Normal Bias. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.AdditionalLightsVertex">
            <summary> Keyword used for per vertex additional lights. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.AdditionalLightsPixel">
            <summary> Keyword used for per pixel additional lights. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.ForwardPlus">
            <summary> Keyword used for Forward+. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.AdditionalLightShadows">
            <summary> Keyword used for shadows on additional lights. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.ReflectionProbeBoxProjection">
            <summary> Keyword used for Box Projection with Reflection Probes. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.ReflectionProbeBlending">
            <summary> Keyword used for Reflection probe blending. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.SoftShadows">
            <summary> Keyword used for soft shadows. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.MixedLightingSubtractive">
            <summary> Keyword used for Mixed Lights in Subtractive lighting mode. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.LightmapShadowMixing">
            <summary> Keyword used for mixing lightmap shadows. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.ShadowsShadowMask">
            <summary> Keyword used for Shadowmask. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.LightLayers">
            <summary> Keyword used for Light Layers. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.RenderPassEnabled">
            <summary> Keyword used for RenderPass. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.BillboardFaceCameraPos">
            <summary> Keyword used for Billboard cameras. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.LightCookies">
            <summary> Keyword used for Light Cookies. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DepthNoMsaa">
            <summary> Keyword used for no Multi Sampling Anti-Aliasing (MSAA). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DepthMsaa2">
            <summary> Keyword used for Multi Sampling Anti-Aliasing (MSAA) with 2 per pixel sample count. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DepthMsaa4">
            <summary> Keyword used for Multi Sampling Anti-Aliasing (MSAA) with 4 per pixel sample count. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DepthMsaa8">
            <summary> Keyword used for Multi Sampling Anti-Aliasing (MSAA) with 8 per pixel sample count. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.LinearToSRGBConversion">
            <summary> Keyword used for Linear to SRGB conversions. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.UseFastSRGBLinearConversion">
            <summary> Keyword used for less expensive Linear to SRGB conversions. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DBufferMRT1">
            <summary> Keyword used for first target in the DBuffer. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DBufferMRT2">
            <summary> Keyword used for second target in the DBuffer. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DBufferMRT3">
            <summary> Keyword used for third target in the DBuffer. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DecalNormalBlendLow">
            <summary> Keyword used for low quality normal reconstruction in Decals. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DecalNormalBlendMedium">
            <summary> Keyword used for medium quality normal reconstruction in Decals. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DecalNormalBlendHigh">
            <summary> Keyword used for high quality normal reconstruction in Decals. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DecalLayers">
            <summary> Keyword used for Decal Layers. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.WriteRenderingLayers">
            <summary> Keyword used for writing Rendering Layers. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.SmaaLow">
            <summary> Keyword used for low quality Subpixel Morphological Anti-aliasing (SMAA). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.SmaaMedium">
            <summary> Keyword used for medium quality Subpixel Morphological Anti-aliasing (SMAA). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.SmaaHigh">
            <summary> Keyword used for high quality Subpixel Morphological Anti-aliasing (SMAA). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.PaniniGeneric">
            <summary> Keyword used for generic Panini Projection. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.PaniniUnitDistance">
            <summary> Keyword used for unit distance Panini Projection. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.BloomLQ">
            <summary> Keyword used for low quality Bloom. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.BloomHQ">
            <summary> Keyword used for high quality Bloom. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.BloomLQDirt">
            <summary> Keyword used for low quality Bloom dirt. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.BloomHQDirt">
            <summary> Keyword used for high quality Bloom dirt. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.UseRGBM">
            <summary> Keyword used for RGBM format for Bloom. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.Distortion">
            <summary> Keyword used for Distortion. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.ChromaticAberration">
            <summary> Keyword used for Chromatic Aberration. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.HDRGrading">
            <summary> Keyword used for HDR Color Grading. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.TonemapACES">
            <summary> Keyword used for ACES Tonemapping. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.TonemapNeutral">
            <summary> Keyword used for Neutral Tonemapping. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.FilmGrain">
            <summary> Keyword used for Film Grain. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.Fxaa">
            <summary> Keyword used for Fast Approximate Anti-aliasing (FXAA). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.Dithering">
            <summary> Keyword used for Dithering. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.ScreenSpaceOcclusion">
            <summary> Keyword used for Screen Space Occlusion, such as Screen Space Ambient Occlusion (SSAO). </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.PointSampling">
            <summary> Keyword used for Point sampling when doing upsampling. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.Rcas">
            <summary> Keyword used for Robust Contrast-Adaptive Sharpening (RCAS) when doing upsampling. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.Gamma20">
            <summary> Keyword used for Gamma 2.0. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.HighQualitySampling">
            <summary> Keyword used for high quality sampling for Depth Of Field. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._SPOT">
            <summary> Keyword used for Spot lights. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DIRECTIONAL">
            <summary> Keyword used for Directional lights. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._POINT">
            <summary> Keyword used for Point lights. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DEFERRED_STENCIL">
            <summary> Keyword used for stencils when rendering with the Deferred rendering path. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DEFERRED_FIRST_LIGHT">
            <summary> Keyword used for the first light when rendering with the Deferred rendering path. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DEFERRED_MAIN_LIGHT">
            <summary> Keyword used for the main light when rendering with the Deferred rendering path. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._GBUFFER_NORMALS_OCT">
            <summary> Keyword used for Accurate G-buffer normals when rendering with the Deferred rendering path. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DEFERRED_MIXED_LIGHTING">
            <summary> Keyword used for Mixed Lighting when rendering with the Deferred rendering path. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.LIGHTMAP_ON">
            <summary> Keyword used for Lightmaps. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DYNAMICLIGHTMAP_ON">
            <summary> Keyword used for dynamic Lightmaps. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._ALPHATEST_ON">
            <summary> Keyword used for Alpha testing. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DIRLIGHTMAP_COMBINED">
            <summary> Keyword used for combined directional Lightmaps. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DETAIL_MULX2">
            <summary> Keyword used for 2x detail mapping. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._DETAIL_SCALED">
            <summary> Keyword used for scaled detail mapping. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._CLEARCOAT">
            <summary> Keyword used for Clear Coat. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._CLEARCOATMAP">
            <summary> Keyword used for Clear Coat maps. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DEBUG_DISPLAY">
            <summary> Keyword used for Debug Display. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.LOD_FADE_CROSSFADE">
            <summary> Keyword used for LOD Crossfade. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.USE_UNITY_CROSSFADE">
            <summary> Keyword used for LOD Crossfade with ShaderGraph shaders. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._EMISSION">
            <summary> Keyword used for Emission. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._RECEIVE_SHADOWS_OFF">
            <summary> Keyword used for receiving shadows. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._SURFACE_TYPE_TRANSPARENT">
            <summary> Keyword used for opaque or transparent surface types. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._ALPHAPREMULTIPLY_ON">
            <summary> Keyword used for Alpha premultiply. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._ALPHAMODULATE_ON">
            <summary> Keyword used for Alpha modulate. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings._NORMALMAP">
            <summary> Keyword used for Normal maps. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.EDITOR_VISUALIZATION">
            <summary> Keyword used for editor visualization. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.SCREEN_COORD_OVERRIDE">
            <summary> Keyword used for applying scale and bias. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DOWNSAMPLING_SIZE_2">
            <summary> Keyword used for half size downsampling. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DOWNSAMPLING_SIZE_4">
            <summary> Keyword used for quarter size downsampling. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DOWNSAMPLING_SIZE_8">
            <summary> Keyword used for eighth size downsampling. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.DOWNSAMPLING_SIZE_16">
            <summary> Keyword used for sixteenth size downsampling. </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderKeywordStrings.FoveatedRenderingNonUniformRaster">
            <summary> Keyword used for foveated rendering. </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipeline">
            <summary>
            The main class for the Universal Render Pipeline (URP).
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.IsGameCamera(UnityEngine.Camera)">
            <summary>
            Checks if a camera is a game camera.
            </summary>
            <param name="camera">Camera to check state from.</param>
            <returns>true if given camera is a game camera, false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.IsStereoEnabled(UnityEngine.Camera)">
            <summary>
            Checks if a camera is rendering in stereo mode.
            </summary>
            <param name="camera">Camera to check state from.</param>
            <returns>Returns true if the given camera is rendering in stereo mode, false otherwise.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.asset">
            <summary>
            Returns the current render pipeline asset for the current quality setting.
            If no render pipeline asset is assigned in QualitySettings, then returns the one assigned in GraphicsSettings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.GetLightAttenuationAndSpotDirection(UnityEngine.LightType,System.Single,UnityEngine.Matrix4x4,System.Single,System.Nullable{System.Single},UnityEngine.Vector4@,UnityEngine.Vector4@)">
            <summary>
            Calculates the attenuation for a given light and also direction for spot lights.
            </summary>
            <param name="lightType">The type of light.</param>
            <param name="lightRange">The range of the light.</param>
            <param name="lightLocalToWorldMatrix">The local to world light matrix.</param>
            <param name="spotAngle">The spotlight angle.</param>
            <param name="innerSpotAngle">The spotlight inner angle.</param>
            <param name="lightAttenuation">The light attenuation.</param>
            <param name="lightSpotDir">The spot light direction.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.InitializeLightConstants_Common(Unity.Collections.NativeArray{UnityEngine.Rendering.VisibleLight},System.Int32,UnityEngine.Vector4@,UnityEngine.Vector4@,UnityEngine.Vector4@,UnityEngine.Vector4@,UnityEngine.Vector4@)">
            <summary>
            Initializes common light constants.
            </summary>
            <param name="lights">List of lights to iterate.</param>
            <param name="lightIndex">The index of the light.</param>
            <param name="lightPos">The position of the light.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="lightAttenuation">The attenuation of the light.</param>
            <param name="lightSpotDir">The direction of the light.</param>
            <param name="lightOcclusionProbeChannel">The occlusion probe channel for the light.</param>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipeline.k_ShaderTagName">
            <summary>
            The shader tag used in the Universal Render Pipeline (URP)
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.maxShadowBias">
            <summary>
            The maximum amount of bias allowed for shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.minRenderScale">
            <summary>
            The minimum value allowed for render scale.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.maxRenderScale">
            <summary>
            The maximum value allowed for render scale.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.maxNumIterationsEnclosingSphere">
            <summary>
            The max number of iterations allowed calculating enclosing sphere.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.maxPerObjectLights">
            <summary>
            The max number of lights that can be shaded per object (in the for loop in the shader).
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.maxVisibleAdditionalLights">
            <summary>
            The max number of additional lights that can can affect each GameObject.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipeline.defaultSettings">
            <summary>
            The default Render Pipeline Global Settings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.ToString">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.#ctor(UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset)">
            <summary>
            Creates a new <c>UniversalRenderPipeline</c> instance.
            </summary>
            <param name="asset">The <c>UniversalRenderPipelineAsset</c> asset to initialize the pipeline.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.Render(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[])">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.Render(UnityEngine.Rendering.ScriptableRenderContext,System.Collections.Generic.List{UnityEngine.Camera})">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.IsRenderRequestSupported``1(UnityEngine.Camera,``0)">
            <summary>
            Check whether RenderRequest is supported
            </summary>
            <param name="camera"></param>
            <param name="data"></param>
            <typeparam name="RequestData"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.ProcessRenderRequests``1(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera,``0)">
            <summary>
            Process a render request
            </summary>
            <param name="context"></param>
            <param name="camera"></param>
            <param name="renderRequest"></param>
            <typeparam name="RequestData"></typeparam>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.RenderSingleCamera(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera)">
            <summary>
            Standalone camera rendering. Use this to render procedural cameras.
            This method doesn't call <c>BeginCameraRendering</c> and <c>EndCameraRendering</c> callbacks.
            </summary>
            <param name="context">Render context used to record commands during execution.</param>
            <param name="camera">Camera to render.</param>
            <seealso cref="T:UnityEngine.Rendering.ScriptableRenderContext"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.RenderSingleCamera(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.CameraData@,System.Boolean)">
            <summary>
            Renders a single camera. This method will do culling, setup and execution of the renderer.
            </summary>
            <param name="context">Render context used to record commands during execution.</param>
            <param name="cameraData">Camera rendering data. This might contain data inherited from a base camera.</param>
            <param name="anyPostProcessingEnabled">True if at least one camera has post-processing enabled in the stack, false otherwise.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.RenderCameraStack(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera)">
            <summary>
            Renders a camera stack. This method calls RenderSingleCamera for each valid camera in the stack.
            The last camera resolves the final target to screen.
            </summary>
            <param name="context">Render context used to record commands during execution.</param>
            <param name="camera">Camera to render.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.InitializeStackedCameraData(UnityEngine.Camera,UnityEngine.Rendering.Universal.UniversalAdditionalCameraData,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Initialize camera data settings common for all cameras in the stack. Overlay cameras will inherit
            settings from base camera.
            </summary>
            <param name="baseCamera">Base camera to inherit settings from.</param>
            <param name="baseAdditionalCameraData">Component that contains additional base camera data.</param>
            <param name="cameraData">Camera data to initialize setttings.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.InitializeAdditionalCameraData(UnityEngine.Camera,UnityEngine.Rendering.Universal.UniversalAdditionalCameraData,System.Boolean,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Initialize settings that can be different for each camera in the stack.
            </summary>
            <param name="camera">Camera to initialize settings from.</param>
            <param name="additionalCameraData">Additional camera data component to initialize settings from.</param>
            <param name="resolveFinalTarget">True if this is the last camera in the stack and rendering should resolve to camera target.</param>
            <param name="cameraData">Settings to be initilized.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipeline.ResolveUpscalingFilterSelection(UnityEngine.Vector2,System.Single,UnityEngine.Rendering.Universal.UpscalingFilterSelection)">
            <summary>
            Returns the best supported image upscaling filter based on the provided upscaling filter selection
            </summary>
            <param name="imageSize">Size of the final image</param>
            <param name="renderScale">Scale being applied to the final image size</param>
            <param name="selection">Upscaling filter selected by the user</param>
            <returns>Either the original filter provided, or the best replacement available</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipeline.SingleCameraRequest">
            <summary>
            Data structure describing the data for a specific render request
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipeline.SingleCameraRequest.destination">
            <summary>
            Target texture
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipeline.SingleCameraRequest.mipLevel">
            <summary>
            Target texture mip level
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipeline.SingleCameraRequest.face">
            <summary>
            Target texture cubemap face
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipeline.SingleCameraRequest.slice">
            <summary>
            Target texture slice
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.IntermediateTextureMode">
            <summary>
            Controls when URP renders via an intermediate texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.IntermediateTextureMode.Auto">
            <summary>
            Uses information declared by active Renderer Features to automatically determine whether to render via an intermediate texture or not. <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureInput(UnityEngine.Rendering.Universal.ScriptableRenderPassInput)"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.IntermediateTextureMode.Always">
            <summary>
            Forces rendering via an intermediate texture if any Render Feature is active. Use this option for compatibility with Renderer Features that do not support rendering directly to backbuffer or RenderFeatures that do not declare their inputs with <see cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureInput(UnityEngine.Rendering.Universal.ScriptableRenderPassInput)"/>. Using this option might have a significant performance impact on some platforms such as Quest.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ForwardRendererData">
            <summary>
            Deprecated, kept for backward compatibility with existing ForwardRendererData asset files.
            Use UniversalRendererData instead.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources">
            <summary>
            Class containing shader resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.blitPS">
            <summary>
            Blit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.copyDepthPS">
            <summary>
            Copy depth shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.screenSpaceShadowPS">
            <summary>
            Screen space shadows shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.samplingPS">
            <summary>
            Sampling shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.stencilDeferredPS">
            <summary>
            Stencil deferred shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.fallbackErrorPS">
            <summary>
            Fallback error shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.fallbackLoadingPS">
            <summary>
            Fallback loading shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.materialErrorPS">
            <summary>
            Material error shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.cameraMotionVector">
            <summary>
            Camera motion vectors shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.ShaderResources.objectMotionVector">
            <summary>
            Object motion vectors shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.shaders">
            <summary>
            Shader resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.postProcessData">
            <summary>
            Resources needed for post processing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ForwardRendererData.xrSystemData">
            <summary>
            Shader resources needed in URP for XR.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRendererData.Create">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ForwardRendererData.opaqueLayerMask">
            <summary>
            Use this to configure how to filter opaque objects.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ForwardRendererData.transparentLayerMask">
            <summary>
            Use this to configure how to filter transparent objects.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ForwardRendererData.defaultStencilState">
            <summary>
            The default stencil state settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ForwardRendererData.shadowTransparentReceive">
            <summary>
            True if transparent objects receive shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ForwardRendererData.renderingMode">
            <summary>
            Rendering mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ForwardRendererData.accurateGbufferNormals">
            <summary>
            Use Octahedron normal vector encoding for gbuffer normals.
            The overhead is negligible from desktop GPUs, while it should be avoided for mobile GPUs.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CinemachineUniversalPixelPerfect">
            <summary>
            (Deprecated) An add-on module for Cinemachine Virtual Camera that tweaks the orthographic size
            of the virtual camera. It detects the presence of the Pixel Perfect Camera component and use the
            settings from that Pixel Perfect Camera to correct the orthographic size so that pixel art
            sprites would appear pixel perfect when the virtual camera becomes live.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowQuality">
            <summary>
            The elements in this enum define how Unity renders shadows.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowQuality.Disabled">
            <summary>
            Disables the shadows.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowQuality.HardShadows">
            <summary>
            Shadows have hard edges.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowQuality.SoftShadows">
            <summary>
            Filtering is applied when sampling shadows. Shadows have smooth edges.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.SoftShadowQuality">
            <summary>
            Softness quality of soft shadows. Higher means better quality, but lower performance.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SoftShadowQuality.UsePipelineSettings">
            <summary>
            Use this to choose the setting set on the pipeline asset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SoftShadowQuality.Low">
            <summary>
            Low quality soft shadows. Recommended for mobile. 4 PCF sample filtering.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SoftShadowQuality.Medium">
            <summary>
            Medium quality soft shadows. The default. 5x5 tent filtering.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SoftShadowQuality.High">
            <summary>
            High quality soft shadows. Low performance due to high sample count. 7x7 tent filtering.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowResolution">
            <summary>
            This controls the size of the shadow map texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowResolution._256">
            <summary>
            Use this for 256x256 shadow resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowResolution._512">
            <summary>
            Use this for 512x512 shadow resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowResolution._1024">
            <summary>
            Use this for 1024x1024 shadow resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowResolution._2048">
            <summary>
            Use this for 2048x2048 shadow resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowResolution._4096">
            <summary>
            Use this for 4096x4096 shadow resolution.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightCookieResolution">
            <summary>
            This controls the size of the Light Cookie atlas texture for additional lights (point, spot).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieResolution._256">
            <summary>
            Use this for 256x256 Light Cookie resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieResolution._512">
            <summary>
            Use this for 512x512 Light Cookie resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieResolution._1024">
            <summary>
            Use this for 1024x1024 Light Cookie resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieResolution._2048">
            <summary>
            Use this for 2048x2048 Light Cookie resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieResolution._4096">
            <summary>
            Use this for 4096x4096 Light Cookie resolution.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightCookieFormat">
            <summary>
            Options for selecting the format for the Light Cookie atlas texture for additional lights (point, spot).
            Low precision saves memory and bandwidth.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieFormat.GrayscaleLow">
            <summary>
            Use this to select Grayscale format with low precision.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieFormat.GrayscaleHigh">
            <summary>
            Use this to select Grayscale format with high precision.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieFormat.ColorLow">
            <summary>
            Use this to select Color format with low precision.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieFormat.ColorHigh">
            <summary>
            Use this to select Color format with high precision.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightCookieFormat.ColorHDR">
            <summary>
            Use this to select High Dynamic Range format.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.HDRColorBufferPrecision">
            <summary>
            The default color buffer format in HDR (only).
            Affects camera rendering and postprocessing color buffers.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.HDRColorBufferPrecision._32Bits">
            <summary> Typically R11G11B10f for faster rendering. Recommend for mobile.
            R11G11B10f can cause a subtle blue/yellow banding in some rare cases due to lower precision of the blue component.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.HDRColorBufferPrecision._64Bits">
            <summary>Typically R16G16B16A16f for better quality. Can reduce banding at the cost of memory and performance.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MsaaQuality">
            <summary>
            Options for setting MSAA Quality.
            This defines how many samples URP computes per pixel for evaluating the effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MsaaQuality.Disabled">
            <summary>
            Disables MSAA.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MsaaQuality._2x">
            <summary>
            Use this for 2 samples per pixel.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MsaaQuality._4x">
            <summary>
            Use this for 4 samples per pixel.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MsaaQuality._8x">
            <summary>
            Use this for 8 samples per pixel.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Downsampling">
            <summary>
            Options for selecting downsampling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Downsampling.None">
            <summary>
            Use this to disable downsampling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Downsampling._2xBilinear">
            <summary>
            Use this to produce a half-resolution image with bilinear filtering.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Downsampling._4xBox">
            <summary>
            Use this to produce a quarter-resolution image with box filtering. This produces a softly blurred copy.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Downsampling._4xBilinear">
            <summary>
            Use this to produce a quarter-resolution image with bi-linear filtering.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightRenderingMode">
            <summary>
            Options for light rendering mode.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightRenderingMode.Disabled">
            <summary>
            Use this to disable lighting.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightRenderingMode.PerVertex">
            <summary>
            Use this to select lighting to be calculated per vertex.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightRenderingMode.PerPixel">
            <summary>
            Use this to select lighting to be calculated per pixel.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PipelineDebugLevel">
            <summary>
            Defines if profiling is logged or not. This enum is not longer in use, use the Profiler instead.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PipelineDebugLevel.Disabled">
            <summary>
            Disabled logging for profiling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PipelineDebugLevel.Profiling">
            <summary>
            Enabled logging for profiling.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RendererType">
            <summary>
            Options to select the type of Renderer to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RendererType.Custom">
            <summary>
            Use this for Custom Renderer.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RendererType.UniversalRenderer">
            <summary>
            Use this for Universal Renderer.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RendererType._2DRenderer">
            <summary>
            Use this for 2D Renderer.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RendererType.ForwardRenderer">
            <summary>
            This name was used before the Universal Renderer was implemented.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ColorGradingMode">
            <summary>
            Options for selecting Color Grading modes, Low Dynamic Range (LDR) or High Dynamic Range (HDR)
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorGradingMode.LowDynamicRange">
            <summary>
            This mode follows a more classic workflow. Unity applies a limited range of color grading after tonemapping.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorGradingMode.HighDynamicRange">
            <summary>
            This mode works best for high precision grading similar to movie production workflows. Unity applies color grading before tonemapping.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.StoreActionsOptimization">
            <summary>
            Defines if Unity discards or stores the render targets of the DrawObjects Passes. Selecting the Store option significantly increases the memory bandwidth on mobile and tile-based GPUs.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StoreActionsOptimization.Auto">
            <summary>Unity uses the Discard option by default, and falls back to the Store option if it detects any injected Passes.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StoreActionsOptimization.Discard">
            <summary>Unity discards the render targets of render Passes that are not reused later (lower memory bandwidth).</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StoreActionsOptimization.Store">
            <summary>Unity stores all render targets of each Pass (higher memory bandwidth).</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode">
            <summary>
            Defines the update frequency for the Volume Framework.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode.EveryFrame">
            <summary>
            Use this to have the Volume Framework update every frame.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode.ViaScripting">
            <summary>
            Use this to disable Volume Framework updates or to update it manually via scripting.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.VolumeFrameworkUpdateMode.UsePipelineSettings">
            <summary>
            Use this to choose the setting set on the pipeline asset.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UpscalingFilterSelection">
            <summary>
            Defines the upscaling filter selected by the user the universal render pipeline asset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UpscalingFilterSelection.Auto">
            <summary>
            Unity selects a filtering option automatically based on the Render Scale value and the current screen resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UpscalingFilterSelection.Linear">
            <summary>
            Unity uses Bilinear filtering to perform upscaling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UpscalingFilterSelection.Point">
            <summary>
            Unity uses Nearest-Neighbour filtering to perform upscaling.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UpscalingFilterSelection.FSR">
            <summary>
            Unity uses the AMD FSR 1.0 technique to perform upscaling.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LODCrossFadeDitheringType">
            <summary>
            Type of the LOD cross-fade.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LODCrossFadeDitheringType.BayerMatrix">
            <summary>Unity uses the Bayer matrix texture to compute the LOD cross-fade dithering.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LODCrossFadeDitheringType.BlueNoise">
            <summary>Unity uses the precomputed blue noise texture to compute the LOD cross-fade dithering.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset">
            <summary>
            The asset that contains the URP setting.
            You can use this asset as a graphics quality level.
            <see cref="T:UnityEngine.Rendering.RenderPipelineAsset"/>
            <see cref="T:UnityEngine.Rendering.Universal.UniversalRenderPipeline"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.k_MinLutSize">
            <summary>
            The minimum size of the color grading LUT.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.k_MaxLutSize">
            <summary>
            The maximum size of the color grading LUT.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.AdditionalLightsDefaultShadowResolutionTierLow">
            <summary>
            The default value of `additionalLightsShadowResolutionTierLow`.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.AdditionalLightsDefaultShadowResolutionTierMedium">
            <summary>
            The default value of `additionalLightsShadowResolutionTierMedium`.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.AdditionalLightsDefaultShadowResolutionTierHigh">
            <summary>
            The default value of `additionalLightsShadowResolutionTierHigh`.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.LoadBuiltinRendererData(UnityEngine.Rendering.Universal.RendererType)">
            <summary>
            Use this class to initialize the rendererData element that is required by the renderer.
            </summary>
            <param name="type">The <c>RendererType</c> of the new renderer that is initialized within this asset.</param>
            <returns></returns>
            <see cref="T:UnityEngine.Rendering.Universal.RendererType"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.CreatePipeline">
            <summary>
            Creates a <c>UniversalRenderPipeline</c> from the <c>UniversalRenderPipelineAsset</c>.
            </summary>
            <returns>Returns a <c>UniversalRenderPipeline</c> created from this UniversalRenderPipelineAsset.</returns>
            <see cref="T:UnityEngine.Rendering.RenderPipeline"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.OnValidate">
            <summary>
            Unity calls this function when it loads the asset or when the asset is changed with the Inspector.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.OnDisable">
            <summary>
            Unity calls this function when the asset is disabled.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.scriptableRenderer">
            <summary>
            Returns the default renderer being used by this pipeline.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.GetRenderer(System.Int32)">
            <summary>
            Returns a renderer from the current pipeline asset
            </summary>
            <param name="index">Index to the renderer. If invalid index is passed, the default renderer is returned instead.</param>
            <returns></returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsCameraDepthTexture">
            <summary>
            When true, the pipeline creates a depth texture that can be read in shaders. The depth texture can be accessed as _CameraDepthTexture. This setting can be overridden per camera.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsCameraOpaqueTexture">
            <summary>
            When true, the pipeline creates a texture that contains a copy of the color buffer after rendering opaque objects. This texture can be accessed in shaders as _CameraOpaqueTexture. This setting can be overridden per camera.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.opaqueDownsampling">
            <summary>
            Returns the downsampling method used when copying the camera color texture after rendering opaques.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsTerrainHoles">
            <summary>
            This settings controls if the asset <c>UniversalRenderPipelineAsset</c> supports terrain holes.
            </summary>
            <see href="https://docs.unity3d.com/Manual/terrain-PaintHoles.html"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.storeActionsOptimization">
            <summary>
            Returns the active store action optimization value.
            </summary>
            <returns>Returns the active store action optimization value.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsHDR">
            <summary>
            When enabled, the camera renders to HDR buffers. This setting can be overridden per camera.
            </summary>
            <see href="https://docs.unity3d.com/Manual/HDR.html"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.hdrColorBufferPrecision">
            <summary>
            Graphics format requested for HDR color buffers.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.msaaSampleCount">
            <summary>
            Specifies the msaa sample count used by this <c>UniversalRenderPipelineAsset</c>
            </summary>
            <see cref="T:UnityEngine.Rendering.Universal.SampleCount"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.renderScale">
            <summary>
            Specifies the render scale which scales the render target resolution used by this <c>UniversalRenderPipelineAsset</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.enableLODCrossFade">
            <summary>
            Returns true if the cross-fade style blending between the current LOD and the next LOD is enabled.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.lodCrossFadeDitheringType">
            <summary>
            Returns the type of active LOD cross-fade.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.upscalingFilter">
            <summary>
            Returns the upscaling filter desired by the user
            Note: Filter selections differ from actual filters in that they may include "meta-filters" such as
                  "Automatic" which resolve to an actual filter at a later time.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.fsrOverrideSharpness">
            <summary>
            If this property is set to true, the value from the fsrSharpness property will control the intensity of the
            sharpening filter associated with FidelityFX Super Resolution.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.fsrSharpness">
             <summary>
             Controls the intensity of the sharpening filter associated with FidelityFX Super Resolution.
             A value of 1.0 produces maximum sharpness while a value of 0.0 disables the sharpening filter entirely.
            
             Note: This value only has an effect when the fsrOverrideSharpness property is set to true.
             </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.mainLightRenderingMode">
            <summary>
            Specifies the <c>LightRenderingMode</c> for the main light used by this <c>UniversalRenderPipelineAsset</c>.
            </summary>
            <see cref="T:UnityEngine.Rendering.Universal.LightRenderingMode"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsMainLightShadows">
            <summary>
            Specifies if objects lit by main light cast shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.mainLightShadowmapResolution">
            <summary>
            Returns the main light shadowmap resolution used for this <c>UniversalRenderPipelineAsset</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.additionalLightsRenderingMode">
            <summary>
            Specifies the <c>LightRenderingMode</c> for the additional lights used by this <c>UniversalRenderPipelineAsset</c>.
            </summary>
            <see cref="T:UnityEngine.Rendering.Universal.LightRenderingMode"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.maxAdditionalLightsCount">
            <summary>
            Specifies the maximum amount of per-object additional lights which can be used by this <c>UniversalRenderPipelineAsset</c>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsAdditionalLightShadows">
            <summary>
            Specifies if objects lit by additional lights cast shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.additionalLightsShadowmapResolution">
            <summary>
            Additional light shadows are rendered into a single shadow map atlas texture. This setting controls the resolution of the shadow map atlas texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.additionalLightsShadowResolutionTierLow">
            <summary>
            Returns the additional light shadow resolution defined for tier "Low" in the UniversalRenderPipeline asset.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.additionalLightsShadowResolutionTierMedium">
            <summary>
            Returns the additional light shadow resolution defined for tier "Medium" in the UniversalRenderPipeline asset.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.additionalLightsShadowResolutionTierHigh">
            <summary>
            Returns the additional light shadow resolution defined for tier "High" in the UniversalRenderPipeline asset.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.reflectionProbeBlending">
            <summary>
            Specifies if this <c>UniversalRenderPipelineAsset</c> should use Probe blending for the reflection probes in the scene.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.reflectionProbeBoxProjection">
            <summary>
            Specifies if this <c>UniversalRenderPipelineAsset</c> should allow box projection for the reflection probes in the scene.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.shadowDistance">
            <summary>
            Controls the maximum distance at which shadows are visible.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.shadowCascadeCount">
            <summary>
            Returns the number of shadow cascades.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.cascade2Split">
            <summary>
            Returns the split value.
            </summary>
            <returns>Returns a Float with the split value.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.cascade3Split">
            <summary>
            Returns the split values.
            </summary>
            <returns>Returns a Vector2 with the split values.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.cascade4Split">
            <summary>
            Returns the split values.
            </summary>
            <returns>Returns a Vector3 with the split values.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.cascadeBorder">
            <summary>
            Last cascade fade distance in percentage.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.shadowDepthBias">
            <summary>
            The Shadow Depth Bias, controls the offset of the lit pixels.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.shadowNormalBias">
            <summary>
            Controls the distance at which the shadow casting surfaces are shrunk along the surface normal.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsSoftShadows">
            <summary>
            Supports Soft Shadows controls the Soft Shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.softShadowQuality">
            <summary>
            Light default Soft Shadow Quality.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsDynamicBatching">
            <summary>
            Specifies if this <c>UniversalRenderPipelineAsset</c> should use dynamic batching.
            </summary>
            <see href="https://docs.unity3d.com/Manual/DrawCallBatching.html"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsMixedLighting">
            <summary>
            Returns true if the Render Pipeline Asset supports mixed lighting, false otherwise.
            </summary>
            <see href="https://docs.unity3d.com/Manual/LightMode-Mixed.html"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsLightCookies">
            <summary>
            Returns true if the Render Pipeline Asset supports light cookies, false otherwise.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.supportsLightLayers">
            <summary>
            Returns true if the Render Pipeline Asset supports light layers, false otherwise.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.useRenderingLayers">
            <summary>
            Returns true if the Render Pipeline Asset supports rendering layers for lights, false otherwise.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.volumeFrameworkUpdateMode">
            <summary>
            Returns the selected update mode for volumes.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.debugLevel">
            <summary>
            Previously returned the debug level for this Render Pipeline Asset but is now deprecated. Replaced to use the profiler and is no longer used.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.useSRPBatcher">
            <summary>
            Specifies if SRPBacher is used by this <c>UniversalRenderPipelineAsset</c>.
            </summary>
            <see href="https://docs.unity3d.com/Manual/SRPBatcher.html"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.enableRenderGraph">
            <summary>
            Controls whether the RenderGraph render path is enabled.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.colorGradingMode">
            <summary>
            Returns the selected ColorGradingMode in the URP Asset.
            <see cref="T:UnityEngine.Rendering.Universal.ColorGradingMode"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.colorGradingLutSize">
            <summary>
            Specifies the color grading LUT (lookup table) size in the URP Asset.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.useFastSRGBLinearConversion">
            <summary>
            Returns true if fast approximation functions are used when converting between the sRGB and Linear color spaces, false otherwise.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.useAdaptivePerformance">
            <summary>
            Set to true to allow Adaptive performance to modify graphics quality settings during runtime.
            Only applicable when Adaptive performance package is available.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.conservativeEnclosingSphere">
            <summary>
            Set to true to enable a conservative method for calculating the size and position of the minimal enclosing sphere around the frustum cascade corner points for shadow culling.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.numIterationsEnclosingSphere">
            <summary>
            Set the number of iterations to reduce the cascade culling enlcosing sphere to be closer to the absolute minimun enclosing sphere, but will also require more CPU computation for increasing values.
            This parameter is used only when conservativeEnclosingSphere is set to true. Default value is 64.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultMaterial">
            <summary>
            Returns the default Material.
            </summary>
            <returns>Returns the default Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultParticleMaterial">
            <summary>
            Returns the default particle Material.
            </summary>
            <returns>Returns the default particle Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultLineMaterial">
            <summary>
            Returns the default line Material.
            </summary>
            <returns>Returns the default line Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultTerrainMaterial">
            <summary>
            Returns the default terrain Material.
            </summary>
            <returns>Returns the default terrain Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultUIMaterial">
            <summary>
            Returns the default UI Material.
            </summary>
            <returns>Returns the default UI Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultUIOverdrawMaterial">
            <summary>
            Returns the default UI overdraw Material.
            </summary>
            <returns>Returns the default UI overdraw Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultUIETC1SupportedMaterial">
            <summary>
            Returns the default UIETC1 supported Material for this asset.
            </summary>
            <returns>Returns the default UIETC1 supported Material.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.default2DMaterial">
            <summary>
            Returns the default material for the 2D renderer.
            </summary>
            <returns>Returns the material containing the default lit and unlit shader passes for sprites in the 2D renderer.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.default2DMaskMaterial">
            <summary>
            Returns the default sprite mask material for the 2D renderer.
            </summary>
            <returns>Returns the material containing the default shader pass for sprite mask in the 2D renderer.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.decalMaterial">
            <summary>
            Returns the Material that Unity uses to render decals.
            </summary>
            <returns>Returns the Material containing the Unity decal shader.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultShader">
            <summary>
            Returns the default shader for the specified renderer. When creating new objects in the editor, the materials of those objects will use the selected default shader.
            </summary>
            <returns>Returns the default shader for the specified renderer.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.autodeskInteractiveShader">
            <summary>
            Returns the Autodesk Interactive shader that this asset uses.
            </summary>
            <returns>Returns the Autodesk Interactive shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.autodeskInteractiveTransparentShader">
            <summary>
            Returns the Autodesk Interactive transparent shader that this asset uses.
            </summary>
            <returns>Returns the Autodesk Interactive transparent shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.autodeskInteractiveMaskedShader">
            <summary>
            Returns the Autodesk Interactive mask shader that this asset uses.
            </summary>
            <returns>Returns the Autodesk Interactive mask shader that this asset uses</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.terrainDetailLitShader">
            <summary>
            Returns the terrain detail lit shader that this asset uses.
            </summary>
            <returns>Returns the terrain detail lit shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.terrainDetailGrassShader">
            <summary>
            Returns the terrain detail grass shader that this asset uses.
            </summary>
            <returns>Returns the terrain detail grass shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.terrainDetailGrassBillboardShader">
            <summary>
            Returns the terrain detail grass billboard shader that this asset uses.
            </summary>
            <returns>Returns the terrain detail grass billboard shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultSpeedTree7Shader">
            <summary>
            Returns the default SpeedTree7 shader that this asset uses.
            </summary>
            <returns>Returns the default SpeedTree7 shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.defaultSpeedTree8Shader">
            <summary>
            Returns the default SpeedTree8 shader that this asset uses.
            </summary>
            <returns>Returns the default SpeedTree8 shader that this asset uses.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.renderPipelineShaderTag">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.renderingLayerMaskNames">
            <summary>Names used for display of rendering layer masks.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.prefixedRenderingLayerMaskNames">
            <summary>Names used for display of rendering layer masks with prefix.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.lightLayerMaskNames">
            <summary>
            Names used for display of light layers.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.textures">
            <summary>
            Returns asset texture resources
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.OnBeforeSerialize">
            <summary>
            Unity raises a callback to this method before it serializes the asset.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.OnAfterDeserialize">
            <summary>
            Unity raises a callback to this method after it deserializes the asset.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.ValidateRendererDataList(System.Boolean)">
            <summary>
            Check to see if the RendererData list contains valid RendererData references.
            </summary>
            <param name="partial">This bool controls whether to test against all or any, if false then there has to be no invalid RendererData</param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.TextureResources">
            <summary>
            Class containing texture resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.TextureResources.blueNoise64LTex">
            <summary>
            Pre-baked blue noise textures.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.TextureResources.bayerMatrixTex">
            <summary>
            Bayer matrix texture.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.TextureResources.NeedsReload">
            <summary>
            Check if the textures need reloading.
            </summary>
            <returns>True if any of the textures need reloading.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.shaderVariantLogLevel">
            <summary>
            Previously returned the shader variant log level for this Render Pipeline Asset but is now deprecated.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineAsset.shadowCascadeOption">
            <summary>
            Previously used instead of shadowCascadeCount. Please use that instead.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PaniniProjection">
            <summary>
            A volume component that holds settings for the Panini Projection effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PaniniProjection.distance">
            <summary>
            Controls the panini projection distance. This controls the strength of the distorion.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PaniniProjection.cropToFit">
            <summary>
            Controls how much cropping HDRP applies to the screen with the panini projection effect. A value of 1 crops the distortion to the edge of the screen.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PaniniProjection.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PaniniProjection.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessData">
            <summary>
            Class containing shader and texture resources needed for Post Processing in URP.
            </summary>
            <seealso cref="T:UnityEngine.Shader"/>
            <seealso cref="T:UnityEngine.Texture"/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources">
            <summary>
            Class containing shader resources used for Post Processing in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.stopNanPS">
            <summary>
            The StopNan Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.subpixelMorphologicalAntialiasingPS">
            <summary>
            The <c>SubpixelMorphologicalAntiAliasing</c> SMAA Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.gaussianDepthOfFieldPS">
            <summary>
            The Gaussian Depth Of Field Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.bokehDepthOfFieldPS">
            <summary>
            The Bokeh Depth Of Field Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.cameraMotionBlurPS">
            <summary>
            The Motion Blur Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.paniniProjectionPS">
            <summary>
            The Panini Projection Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.lutBuilderLdrPS">
            <summary>
            The LUT Builder LDR Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.lutBuilderHdrPS">
            <summary>
            The LUT Builder HDR Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.bloomPS">
            <summary>
            The Bloom Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.temporalAntialiasingPS">
            <summary>
            The Temporal-antialiasing Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.LensFlareDataDrivenPS">
            <summary>
            The Lens Flare Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.scalingSetupPS">
            <summary>
            The Scaling Setup Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.easuPS">
            <summary>
            The Edge Adaptive Spatial Upsampling shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.uberPostPS">
            <summary>
            The Uber Post Processing shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.ShaderResources.finalPostPassPS">
            <summary>
            The Final Post Processing shader.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessData.TextureResources">
            <summary>
            Class containing texture resources used for Post Processing in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.TextureResources.blueNoise16LTex">
            <summary>
            Pre-baked Blue noise texture
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.TextureResources.filmGrainTex">
            <summary>
            Film Grain textures.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.TextureResources.smaaAreaTex">
            <summary>
            <c>SubpixelMorphologicalAntiAliasing</c> SMAA area texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.TextureResources.smaaSearchTex">
            <summary>
            <c>SubpixelMorphologicalAntiAliasing</c> SMAA search texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.shaders">
            <summary>
            Shader resources used for Post Processing in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessData.textures">
            <summary>
            Texture resources used for Post Processing in URP.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsCommon.AreAnySettingsActive">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsCommon.IsPostProcessingAllowed">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsCommon.IsLightingActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsCommon.TryGetScreenClearColor(UnityEngine.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsCommon.CreatePanel">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowCasterGroup2D">
            <summary>
            Class for 2D shadow caster groups.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCasterGroup2D.GetShadowCasters">
            <summary>
            Returns a list of registered 2D shadow casters.
            </summary>
            <returns>A list of 2D shadow casters that have been registered..</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCasterGroup2D.GetShadowGroup">
            <summary>
            Returns the shadow group.
            </summary>
            <returns>The shadow group used.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCasterGroup2D.RegisterShadowCaster2D(UnityEngine.Rendering.Universal.ShadowCaster2D)">
            <summary>
            Registers a 2D shadow caster.
            </summary>
            <param name="shadowCaster2D">The 2D shadow to register.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCasterGroup2D.UnregisterShadowCaster2D(UnityEngine.Rendering.Universal.ShadowCaster2D)">
            <summary>
            Unregisters a 2D shadow caster.
            </summary>
            <param name="shadowCaster2D">The 2D shadow to unregister.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Light2DBlendStyle">
            <summary>
            Controls how the light texture is used when rendering Sprites and other 2D renderers.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Light2DBlendStyle.name">
            <summary>
            Returns the name of the blend style
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ColorCurves">
            <summary>
            A volume component that holds settings for the Color Adjustments effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.master">
            <summary>
            Affects the luminance across the whole image.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.red">
            <summary>
            Affects the red channel intensity across the whole image.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.green">
            <summary>
            Affects the green channel intensity across the whole image.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.blue">
            <summary>
            Affects the blue channel intensity across the whole image.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.hueVsHue">
            <summary>
            Shifts the input hue (x-axis) according to the output hue (y-axis).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.hueVsSat">
            <summary>
            Adjusts saturation (y-axis) according to the input hue (x-axis).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.satVsSat">
            <summary>
            Adjusts saturation (y-axis) according to the input saturation (x-axis).
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ColorCurves.lumVsSat">
            <summary>
            Adjusts saturation (y-axis) according to the input luminance (x-axis).
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorCurves.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ColorCurves.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderer">
            <summary>
            Default renderer for Universal RP.
            This renderer is supported on all Universal RP supported platforms.
            It uses a classic forward rendering strategy with per-object light culling.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.SupportedCameraStackingTypes">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderer.depthPrimingMode">
            <summary>Property to control the depth priming behavior of the forward rendering path.</summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.#ctor(UnityEngine.Rendering.Universal.UniversalRendererData)">
            <summary>
            Constructor for the Universal Renderer.
            </summary>
            <param name="data">The settings to create the renderer with.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.Setup(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.SetupLights(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.SetupCullingParameters(UnityEngine.Rendering.ScriptableCullingParameters@,UnityEngine.Rendering.Universal.CameraData@)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.FinishRendering(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc />
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderer.RequiresIntermediateColorTexture(UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Checks if the pipeline needs to create a intermediate render texture.
            </summary>
            <param name="cameraData">CameraData contains all relevant render target information for the camera.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.CameraData"/>
            <returns>Return true if pipeline needs to render to a intermediate render texture.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRenderer">
             <summary>
              Class <c>ScriptableRenderer</c> implements a rendering strategy. It describes how culling and lighting works and
             the effects supported.
            
              A renderer can be used for all cameras or be overridden on a per-camera basis. It will implement light culling and setup
             and describe a list of <c>ScriptableRenderPass</c> to execute in a frame. The renderer can be extended to support more effect with additional
              <c>ScriptableRendererFeature</c>. Resources for the renderer are serialized in <c>ScriptableRendererData</c>.
            
             The renderer resources are serialized in <c>ScriptableRendererData</c>.
             <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRendererData"/>
             <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRendererFeature"/>
             <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SupportedCameraStackingTypes">
            <summary>
            This setting controls if the camera editor should display the camera stack category.
            If your renderer is not supporting stacking this one should return 0.
            For the UI to show the Camera Stack widget this must support CameraRenderType.Base.
            <see cref="T:UnityEngine.Rendering.Universal.CameraRenderType"/>
            Returns the bitmask of the supported camera render types in the renderer's current state.
            </summary>
            <returns>The bitmask of the supported camera render types in the renderer's current state.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SupportsCameraStackingType(UnityEngine.Rendering.Universal.CameraRenderType)">
            <summary>
            Returns true if the given camera render type is supported in the renderer's current state.
            </summary>
            <param name="cameraRenderType">The camera render type that is checked if supported.</param>
            <returns>True if the given camera render type is supported in the renderer's current state.</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.profilingExecute">
            <summary>
            Override to provide a custom profiling name
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderer.hasReleasedRTs">
            <summary>
            Used to determine whether to release render targets used by the renderer when the renderer is no more active
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRenderer.RenderingFeatures">
            <summary>
            Configures the supported features for this renderer. When creating custom renderers
            for Universal Render Pipeline you can choose to opt-in or out for specific features.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.RenderingFeatures.cameraStacking">
            <summary>
            This setting controls if the camera editor should display the camera stack category.
            Renderers that don't support camera stacking will only render camera of type CameraRenderType.Base
            <see cref="T:UnityEngine.Rendering.Universal.CameraRenderType"/>
            <seealso cref="P:UnityEngine.Rendering.Universal.UniversalAdditionalCameraData.cameraStack"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.RenderingFeatures.msaa">
            <summary>
            This setting controls if the Universal Render Pipeline asset should expose MSAA option.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.DebugHandler">
            <summary>
            The class responsible for providing access to debug view settings to renderers and render passes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderer.current">
            <summary>
            The renderer we are currently rendering with, for low-level render control only.
            <c>current</c> is null outside rendering scope.
            Similar to https://docs.unity3d.com/ScriptReference/Camera-current.html
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetCameraMatrices(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.CameraData@,System.Boolean)">
            <summary>
            Set camera matrices. This method will set <c>UNITY_MATRIX_V</c>, <c>UNITY_MATRIX_P</c>, <c>UNITY_MATRIX_VP</c> to camera matrices.
            Additionally this will also set <c>unity_CameraProjection</c> and <c>unity_CameraProjection</c>.
            If <c>setInverseMatrices</c> is set to true this function will also set <c>UNITY_MATRIX_I_V</c> and <c>UNITY_MATRIX_I_VP</c>.
            This function has no effect when rendering in stereo. When in stereo rendering you cannot override camera matrices.
            If you need to set general purpose view and projection matrices call <see cref="!:SetViewAndProjectionMatrices(CommandBuffer, Matrix4x4, Matrix4x4, bool)"/> instead.
            </summary>
            <param name="cmd">CommandBuffer to submit data to GPU.</param>
            <param name="cameraData">CameraData containing camera matrices information.</param>
            <param name="setInverseMatrices">Set this to true if you also need to set inverse camera matrices.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetPerCameraShaderVariables(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Set camera and screen shader variables as described in https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html
            </summary>
            <param name="cmd">CommandBuffer to submit data to GPU.</param>
            <param name="cameraData">CameraData containing camera matrices information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetPerCameraBillboardProperties(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Set the Camera billboard properties.
            </summary>
            <param name="cmd">CommandBuffer to submit data to GPU.</param>
            <param name="cameraData">CameraData containing camera matrices information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetShaderTimeValues(UnityEngine.Rendering.CommandBuffer,System.Single,System.Single,System.Single)">
            <summary>
            Set shader time variables as described in https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html
            </summary>
            <param name="cmd">CommandBuffer to submit data to GPU.</param>
            <param name="time">Time.</param>
            <param name="deltaTime">Delta time.</param>
            <param name="smoothDeltaTime">Smooth delta time.</param>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.cameraColorTarget">
            <summary>
            Returns the camera color target for this renderer.
            It's only valid to call cameraColorTarget in the scope of <c>ScriptableRenderPass</c>.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.cameraColorTargetHandle">
            <summary>
            Returns the camera color target for this renderer.
            It's only valid to call cameraColorTarget in the scope of <c>ScriptableRenderPass</c>.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.GetCameraColorFrontBuffer(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Returns the frontbuffer color target. Returns null if not implemented by the renderer.
            It's only valid to call GetCameraColorFrontBuffer in the scope of <c>ScriptableRenderPass</c>.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.GetCameraColorBackBuffer(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Returns the backbuffer color target. Returns null if not implemented by the renderer.
            It's only valid to call GetCameraColorBackBuffer in the scope of <c>ScriptableRenderPass</c>.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.cameraDepthTarget">
            <summary>
            Returns the camera depth target for this renderer.
            It's only valid to call cameraDepthTarget in the scope of <c>ScriptableRenderPass</c>.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.cameraDepthTargetHandle">
            <summary>
            Returns the camera depth target for this renderer.
            It's only valid to call cameraDepthTarget in the scope of <c>ScriptableRenderPass</c>.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.rendererFeatures">
            <summary>
            Returns a list of renderer features added to this renderer.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRendererFeature"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.activeRenderPassQueue">
            <summary>
            Returns a list of render passes scheduled to be executed by this renderer.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.supportedRenderingFeatures">
            <summary>
            Supported rendering features by this renderer.
            <see cref="T:UnityEngine.Rendering.SupportedRenderingFeatures"/>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.unsupportedGraphicsDeviceTypes">
            <summary>
            List of unsupported Graphics APIs for this renderer.
            <see cref="P:UnityEngine.Rendering.Universal.ScriptableRenderer.unsupportedGraphicsDeviceTypes"/>
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderer.k_CameraTarget">
            <summary>
            The RTHandle for the Camera Target.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.#ctor(UnityEngine.Rendering.Universal.ScriptableRendererData)">
            <summary>
            Creates a new <c>ScriptableRenderer</c> instance.
            </summary>
            <param name="data">The <c>ScriptableRendererData</c> data to initialize the renderer.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRendererData"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.Dispose">
            <summary>
            Disposable pattern implementation.
            Cleans up resources used by the renderer.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.Dispose(System.Boolean)">
            <summary>
            Called by Dispose().
            Override this function to clean up resources in your renderer.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.ConfigureCameraTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Configures the camera target.
            </summary>
            <param name="colorTarget">Camera color target. Pass BuiltinRenderTextureType.CameraTarget if rendering to backbuffer.</param>
            <param name="depthTarget">Camera depth target. Pass BuiltinRenderTextureType.CameraTarget if color has depth or rendering to backbuffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.ConfigureCameraTarget(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures the camera target.
            </summary>
            <param name="colorTarget">Camera color target. Pass k_CameraTarget if rendering to backbuffer.</param>
            <param name="depthTarget">Camera depth target. Pass k_CameraTarget if color has depth or rendering to backbuffer.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.Setup(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Configures the render passes that will execute for this renderer.
            This method is called per-camera every frame.
            </summary>
            <param name="context">Use this render context to issue any draw commands during execution.</param>
            <param name="renderingData">Current render state information.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderPass"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRendererFeature"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetupLights(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Override this method to implement the lighting setup for the renderer. You can use this to
            compute and upload light CBUFFER for example.
            </summary>
            <param name="context">Use this render context to issue any draw commands during execution.</param>
            <param name="renderingData">Current render state information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetupCullingParameters(UnityEngine.Rendering.ScriptableCullingParameters@,UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Override this method to configure the culling parameters for the renderer. You can use this to configure if
            lights should be culled per-object or the maximum shadow distance for example.
            </summary>
            <param name="cullingParameters">Use this to change culling parameters used by the render pipeline.</param>
            <param name="cameraData">Current render state information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.FinishRendering(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Called upon finishing rendering the camera stack. You can release any resources created by the renderer here.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.OnRecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph,UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Override this method to record the RenderGraph passes to be used by the RenderGraph render path.
            </summary>
            <param name="context">Use this render context to issue any draw commands during execution.</param>
            <param name="renderingData">Current render state information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.DrawRenderGraphGizmos(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph,UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle,UnityEngine.Experimental.Rendering.RenderGraphModule.TextureHandle,UnityEngine.Rendering.GizmoSubset,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            TODO RENDERGRAPH
            </summary>
            <param name="color"></param>
            <param name="depth"></param>
            <param name="gizmoSubset"></param>
            <param name="renderingData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph,UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            TODO RENDERGRAPH
            </summary>
            <param name="context"></param>
            <param name="renderingData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.FinishRenderGraphRendering(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            TODO RENDERGRAPH
            </summary>
            <param name="context"></param>
            <param name="renderingData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.OnFinishRenderGraphRendering(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            TODO RENDERGRAPH
            </summary>
            <param name="context"></param>
            <param name="renderingData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.RecordCustomRenderGraphPasses(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph,UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Rendering.Universal.RenderPassEvent)">
            <summary>
            TODO RENDERGRAPH
            </summary>
            <param name="context"></param>
            <param name="renderingData"></param>
            <param name="injectionPoint"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Execute the enqueued render passes. This automatically handles editor and stereo rendering.
            </summary>
            <param name="context">Use this render context to issue any draw commands during execution.</param>
            <param name="renderingData">Current render state information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.EnqueuePass(UnityEngine.Rendering.Universal.ScriptableRenderPass)">
            <summary>
            Enqueues a render pass for execution.
            </summary>
            <param name="pass">Render pass to be enqueued.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.GetCameraClearFlag(UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Returns a clear flag based on CameraClearFlags.
            </summary>
            <param name="cameraData">The Camera data.</param>
            <returns>A clear flag that tells if color and/or depth should be cleared.</returns>
            <seealso cref="T:UnityEngine.Rendering.Universal.CameraData"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.OnPreCullRenderPasses(UnityEngine.Rendering.Universal.CameraData@)">
            <summary>
            Calls <c>OnCull</c> for each feature added to this renderer.
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.OnCameraPreCull(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.CameraData@)"/>
            </summary>
            <param name="cameraData">Current render state information.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.AddRenderPasses(UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Calls <c>AddRenderPasses</c> for each feature added to this renderer.
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)"/>
            </summary>
            <param name="renderingData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderer.SetupRenderPasses(UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Calls <c>Setup</c> for each feature added to this renderer.
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.SetupRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)"/>
            </summary>
            <param name="renderingData"></param>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderer.cameraDepth">
            <summary>
            The render target identifier for camera depth.
            This is obsolete, cameraDepth has been renamed to cameraDepthTarget.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessParams">
            <summary>
            Run-time creation parameters for post process passes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessParams.blitMaterial">
            <summary>
            The blit <c>Material</c> to use.
            </summary>
            <seealso cref="T:UnityEngine.Material"/>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PostProcessParams.requestHDRFormat">
            <summary>
            Requested <c>GraphicsFormat</c> for HDR postprocess rendering.
            </summary>
            <seealso cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessParams.Create">
            <summary>
            A static factory function for default initialization of PostProcessParams.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessPasses">
            <summary>
            Type acts as wrapper for post process passes. Can we be recreated and destroyed at any point during runtime with post process data.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPasses.#ctor(UnityEngine.Rendering.Universal.PostProcessData,UnityEngine.Rendering.Universal.PostProcessParams@)">
            <summary>
            Creates post process passes with supplied data anda params.
            </summary>
            <param name="rendererPostProcessData">Post process resources.</param>
            <param name="postProcessParams">Post process run-time creation parameters.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPasses.Recreate(UnityEngine.Rendering.Universal.PostProcessData,UnityEngine.Rendering.Universal.PostProcessParams@)">
            <summary>
            Recreates post process passes with supplied data. If already contains valid post process passes, they will be replaced by new ones.
            </summary>
            <param name="data">Resources used for creating passes. In case of the null, no passes will be created.</param>
            <param name="ppParams">Run-time parameters used for creating passes.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ComponentUtility">
            <summary>
            Utility class for component checks.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ComponentUtility.IsUniversalCamera(UnityEngine.Camera)">
            <summary> Check if the provided camera is compatible with Universal Render Pipeline </summary>
            <param name="camera">The Camera to check</param>
            <returns>True if it is compatible, false otherwise</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ComponentUtility.IsUniversalLight(UnityEngine.Light)">
            <summary> Check if the provided light is compatible with Universal Render Pipeline </summary>
            <param name="light">The Light to check</param>
            <returns>True if it is compatible, false otherwise</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting">
            <summary>
            Lighting-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.lightingDebugMode">
            <summary>
            Current debug lighting mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.lightingFeatureFlags">
            <summary>
            Current debug lighting feature flags mask that allows selective disabling individual lighting components.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.AreAnySettingsActive">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.IsPostProcessingAllowed">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.IsLightingActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.TryGetScreenClearColor(UnityEngine.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsLighting.UnityEngine#Rendering#IDebugDisplaySettingsData#CreatePanel">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalUpdateCulledSystem">
            <summary>
            Writes culling results into <see cref="T:UnityEngine.Rendering.Universal.DecalCulledChunk"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CompositeShadowCaster2D">
            <summary>
            Class for 2D composite shadow casters.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CompositeShadowCaster2D.OnEnable">
            <summary>
            This function is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CompositeShadowCaster2D.OnDisable">
            <summary>
            This function is called when the behaviour becomes disabled.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DisallowMultipleRendererFeature">
            <summary>
              <para>Prevents <c>ScriptableRendererFeatures</c> of same type to be added more than once to a Scriptable Renderer.</para>
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DisallowMultipleRendererFeature.customTitle">
            <summary>
            Set the custom title for renderer feature.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DisallowMultipleRendererFeature.#ctor(System.String)">
            <summary>
            Constructor for the attribute to prevent <c>ScriptableRendererFeatures</c> of same type to be added more than once to a Scriptable Renderer.
            </summary>
            <param name="customTitle">Sets the custom title for renderer feature.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalSkipCulledSystem">
            <summary>
            System used for skipping culling. It is used with <see cref="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean,System.Boolean)"/> as it already handles culling.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CopyDepthMode">
            <summary>
            Defines if Unity will copy the depth that can be bound in shaders as _CameraDepthTexture after the opaques pass or after the transparents pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CopyDepthMode.AfterOpaques">
            <summary>Depth will be copied after the opaques pass</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CopyDepthMode.AfterTransparents">
            <summary>Depth will be copied after the transparents pass</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.CopyDepthMode.ForcePrepass">
            <summary>Depth will be written by a depth prepass</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRendererData">
            <summary>
            Class containing resources needed for the <c>UniversalRenderer</c>.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources">
            <summary>
            Class containing shader resources used in URP.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.blitPS">
            <summary>
            Blit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.copyDepthPS">
            <summary>
            Copy Depth shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.screenSpaceShadowPS">
            <summary>
            Screen Space Shadows shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.samplingPS">
            <summary>
            Sampling shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.stencilDeferredPS">
            <summary>
            Stencil Deferred shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.fallbackErrorPS">
            <summary>
            Fallback error shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.fallbackLoadingPS">
            <summary>
            Fallback loading shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.materialErrorPS">
            <summary>
            Material Error shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.cameraMotionVector">
            <summary>
            Camera Motion Vectors shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.ShaderResources.objectMotionVector">
            <summary>
            Object Motion Vectors shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.postProcessData">
            <summary>
            Resources needed for Post Processing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.xrSystemData">
            <summary>
            Shader resources needed in URP for XR.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalRendererData.shaders">
            <summary>
            Shader resources used in URP.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRendererData.Create">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.opaqueLayerMask">
            <summary>
            Use this to configure how to filter opaque objects.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.transparentLayerMask">
            <summary>
            Use this to configure how to filter transparent objects.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.defaultStencilState">
            <summary>
            The default stencil state settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.shadowTransparentReceive">
            <summary>
            True if transparent objects receive shadows.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.renderingMode">
            <summary>
            Rendering mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.depthPrimingMode">
            <summary>
            Depth priming mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.copyDepthMode">
            <summary>
            Copy depth mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.accurateGbufferNormals">
            <summary>
            Use Octaedron Octahedron normal vector encoding for gbuffer normals.
            The overhead is negligible from desktop GPUs, while it should be avoided for mobile GPUs.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRendererData.intermediateTextureMode">
            <summary>
            Controls when URP renders via an intermediate texture.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRendererData.OnEnable">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRendererData.UnityEngine#ISerializationCallbackReceiver#OnBeforeSerialize">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRendererData.UnityEngine#ISerializationCallbackReceiver#OnAfterDeserialize">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DepthOfFieldMode">
            <summary>
            Focusing modes for the depth of field effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfFieldMode.Off">
            <summary>
            Disables depth of field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfFieldMode.Gaussian">
            <summary>
            Use this for faster but non physical depth of field.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfFieldMode.Bokeh">
            <summary>
            Use this for a more realistic but slower depth of field.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DepthOfField">
            <summary>
            A volume component that holds settings for the Depth Of Field effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.mode">
            <summary>
            Use this to select Focusing modes for the depth of field effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.gaussianStart">
            <summary>
            The distance at which the blurring will start.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.gaussianEnd">
            <summary>
            The distance at which the blurring will reach its maximum radius.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.gaussianMaxRadius">
            <summary>
            The maximum radius of the gaussian blur. Values above 1 may show under-sampling artifacts.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.highQualitySampling">
            <summary>
            Use higher quality sampling to reduce flickering and improve the overall blur smoothness.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.focusDistance">
            <summary>
            The distance to the point of focus.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.aperture">
            <summary>
            The ratio of aperture (known as f-stop or f-number). The smaller the value is, the shallower the depth of field is.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.focalLength">
            <summary>
            The distance between the lens and the film. The larger the value is, the shallower the depth of field is.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.bladeCount">
            <summary>
            The number of aperture blades.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.bladeCurvature">
            <summary>
            The curvature of aperture blades. The smaller the value is, the more visible aperture blades are. A value of 1 will make the bokeh perfectly circular.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthOfField.bladeRotation">
            <summary>
            The rotation of aperture blades in degrees.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DepthOfField.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DepthOfField.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DepthOfFieldModeParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.Universal.DepthOfFieldMode"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DepthOfFieldModeParameter.#ctor(UnityEngine.Rendering.Universal.DepthOfFieldMode,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.Universal.DepthOfFieldModeParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessUtils">
            <summary>
            Utility class for post processing effects.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessUtils.ConfigureDithering(UnityEngine.Rendering.Universal.PostProcessData,System.Int32,UnityEngine.Camera,UnityEngine.Material)">
            <summary>
            Configures the blue noise dithering used.
            </summary>
            <param name="data">The <c>PostProcessData</c> resources to use.</param>
            <param name="index">The current array index to the Blue noise textures.</param>
            <param name="camera">The camera using the dithering effect.</param>
            <param name="material">The material used with the dithering effect.</param>
            <returns>The new array index to the Blue noise textures.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessUtils.ConfigureDithering(UnityEngine.Rendering.Universal.PostProcessData,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
            <summary>
            Configures the blue noise dithering used.
            </summary>
            <param name="data">The <c>PostProcessData</c> resources to use.</param>
            <param name="index">The current array index to the Blue noise textures.</param>
            <param name="cameraPixelWidth">The camera pixel width.</param>
            <param name="cameraPixelHeight">The camera pixel height.</param>
            <param name="material">The material used with the dithering effect.</param>
            <returns>The new array index to the Blue noise textures.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessUtils.ConfigureFilmGrain(UnityEngine.Rendering.Universal.PostProcessData,UnityEngine.Rendering.Universal.FilmGrain,UnityEngine.Camera,UnityEngine.Material)">
            <summary>
            Configures the Film grain shader parameters.
            </summary>
            <param name="data">The <c>PostProcessData</c> resources to use.</param>
            <param name="settings">The Film Grain settings. </param>
            <param name="camera">The camera using the dithering effect.</param>
            <param name="material">The material used with the dithering effect.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessUtils.ConfigureFilmGrain(UnityEngine.Rendering.Universal.PostProcessData,UnityEngine.Rendering.Universal.FilmGrain,System.Int32,System.Int32,UnityEngine.Material)">
            <summary>
            Configures the Film grain shader parameters.
            </summary>
            <param name="data">The <c>PostProcessData</c> resources to use.</param>
            <param name="settings">The Film Grain settings. </param>
            <param name="cameraPixelWidth">The camera pixel width.</param>
            <param name="cameraPixelHeight">The camera pixel height.</param>
            <param name="material">The material used with the dithering effect.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LensDistortion">
            <summary>
            A volume component that holds settings for the Lens Distortion effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LensDistortion.intensity">
            <summary>
            Total distortion amount.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LensDistortion.xMultiplier">
            <summary>
            Intensity multiplier on X axis. Set it to 0 to disable distortion on this axis.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LensDistortion.yMultiplier">
            <summary>
            Intensity multiplier on Y axis. Set it to 0 to disable distortion on this axis.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LensDistortion.center">
            <summary>
            Distortion center point. 0.5,0.5 is center of the screen
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LensDistortion.scale">
            <summary>
            Controls global screen scaling for the distortion effect. Use this to hide screen borders when using high \"Intensity.\"
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LensDistortion.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LensDistortion.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.XRSystemData">
            <summary>
            Class containing shader resources needed in URP for XR.
            </summary>
            <seealso cref="T:UnityEngine.Shader"/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.XRSystemData.ShaderResources">
            <summary>
            Class containing shader resources used in URP for XR.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.XRSystemData.ShaderResources.xrOcclusionMeshPS">
            <summary>
            XR Occlusion mesh shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.XRSystemData.ShaderResources.xrMirrorViewPS">
            <summary>
            XR Mirror View shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.XRSystemData.shaders">
            <summary>
            Shader resources used in URP for XR.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.XROcclusionMeshPass">
            <summary>
            Draw the XR occlusion mesh into the current depth buffer when XR is enabled.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.XROcclusionMeshPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ClipType">
            <summary>
            Options for clip types.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ClipType.ctIntersection">
            <summary>
            Use this for intersection.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ClipType.ctUnion">
            <summary>
            Use this for union.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ClipType.ctDifference">
            <summary>
            Use this for difference.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ClipType.ctXor">
            <summary>
            Use this for XOR.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PolyType">
            <summary>
            Options for polygon types.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PolyType.ptSubject">
            <summary>
            Use this for subject.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PolyType.ptClip">
            <summary>
            Use this for clip.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PolyFillType">
            <summary>
            Options for polygon filling types.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PolyFillType.pftEvenOdd">
            <summary>
            Use this for even odd.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PolyFillType.pftNonZero">
            <summary>
            Use this for non zero.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PolyFillType.pftPositive">
            <summary>
            Use this for positive.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.PolyFillType.pftNegative">
            <summary>
            Use this for negative.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.JoinType">
            <summary>
            Options for join types.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.JoinType.jtRound">
            <summary>
            Use this for round.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.EndType">
            <summary>
            Options for end types.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.EndType.etClosedPolygon">
            <summary>
            Use this for closed polygon.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.EndType.etClosedLine">
            <summary>
            Use this for closed line.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.SplitToning">
            <summary>
            A volume component that holds settings for the Split Toning effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SplitToning.shadows">
            <summary>
            The color to use for shadows.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SplitToning.highlights">
            <summary>
            The color to use for highlights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SplitToning.balance">
            <summary>
            Balance between the colors in the highlights and shadows.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.SplitToning.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.SplitToning.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RenderingLayerUtils">
            <summary>
            Helper class for handling rendering layers.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingLayerUtils.RequireRenderingLayers(UnityEngine.Rendering.Universal.UniversalRendererData,System.Int32,UnityEngine.Rendering.Universal.RenderingLayerUtils.Event@,UnityEngine.Rendering.Universal.RenderingLayerUtils.MaskSize@)">
            <summary>
            Returns True if <see cref="T:UnityEngine.Rendering.Universal.UniversalRendererData"/> will require rendering layers texture.
            </summary>
            <param name="universalRendererData"></param>
            <param name="combinedEvent">Event at which rendering layers texture needs to be created</param>
            <param name="combinedMaskSize">The mask size of rendering layers texture</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingLayerUtils.RequireRenderingLayers(UnityEngine.Rendering.Universal.UniversalRenderer,System.Collections.Generic.List{UnityEngine.Rendering.Universal.ScriptableRendererFeature},System.Int32,UnityEngine.Rendering.Universal.RenderingLayerUtils.Event@,UnityEngine.Rendering.Universal.RenderingLayerUtils.MaskSize@)">
            <summary>
            Returns True if <see cref="T:UnityEngine.Rendering.Universal.UniversalRenderer"/> will require rendering layers texture.
            </summary>
            <param name="UniversalRenderer"></param>
            <param name="combinedEvent">Event at which rendering layers texture needs to be created</param>
            <param name="combinedMaskSize">The mask size of rendering layers texture</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingLayerUtils.SetupProperties(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingLayerUtils.MaskSize)">
            <summary>
            Setups properties that are needed for accessing rendering layers texture.
            </summary>
            <param name="cmd">Used command buffer</param>
            <param name="maskSize">The mask size of rendering layers texture</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingLayerUtils.GetFormat(UnityEngine.Rendering.Universal.RenderingLayerUtils.MaskSize)">
            <summary>
            Converts rendering layers texture mask size to graphics format.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingLayerUtils.ToValidRenderingLayers(System.UInt32)">
            <summary>
            Masks rendering layers with those that available in urp global settings.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion.Create">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion.ScreenSpaceAmbientOcclusionPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion.ScreenSpaceAmbientOcclusionPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScreenSpaceAmbientOcclusion.ScreenSpaceAmbientOcclusionPass.OnCameraCleanup(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineVolumeDebugSettings">
            <summary>
            Volume debug settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineVolumeDebugSettings.targetRenderPipeline">
            <summary>
            Specifies the render pipeline for this volume settings
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineVolumeDebugSettings.selectedCameraVolumeStack">
            <summary>Selected camera volume stack.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineVolumeDebugSettings.selectedCameraLayerMask">
            <summary>Selected camera volume layer mask.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineVolumeDebugSettings.selectedCameraPosition">
            <summary>Selected camera volume position.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.BloomDownscaleMode">
            <summary>
            This controls the size of the bloom texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.BloomDownscaleMode.Half">
            <summary>
            Use this to select half size as the starting resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.BloomDownscaleMode.Quarter">
            <summary>
            Use this to select quarter size as the starting resolution.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Bloom">
            <summary>
            A volume component that holds settings for the Bloom effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.threshold">
            <summary>
            Set the level of brightness to filter out pixels under this level.
            This value is expressed in gamma-space.
            A value above 0 will disregard energy conservation rules.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.intensity">
            <summary>
            Controls the strength of the bloom filter.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.scatter">
            <summary>
            Controls the extent of the veiling effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.clamp">
            <summary>
            Set the maximum intensity that Unity uses to calculate Bloom.
            If pixels in your Scene are more intense than this, URP renders them at their current intensity, but uses this intensity value for the purposes of Bloom calculations.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.tint">
            <summary>
            Specifies the tint of the bloom filter.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.highQualityFiltering">
            <summary>
            Controls whether to use bicubic sampling instead of bilinear sampling for the upsampling passes.
            This is slightly more expensive but helps getting smoother visuals.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.downscale">
            <summary>
            Controls the starting resolution that this effect begins processing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.maxIterations">
            <summary>
            Controls the maximum number of iterations in the effect processing sequence.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.dirtTexture">
            <summary>
            Specifies a Texture to add smudges or dust to the bloom effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.dirtIntensity">
            <summary>
            Controls the strength of the lens dirt.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Bloom.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Bloom.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Bloom.skipIterations">
            <summary>
            The number of final iterations to skip in the effect processing sequence.
            This is obsolete, please use maxIterations instead.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DownscaleParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.Universal.BloomDownscaleMode"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DownscaleParameter.#ctor(UnityEngine.Rendering.Universal.BloomDownscaleMode,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.Universal.DownscaleParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DebugWireframeMode">
            <summary>
            Debug wireframe modes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugWireframeMode.None">
            <summary>No wireframe.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugWireframeMode.Wireframe">
            <summary>Unfilled wireframe.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugWireframeMode.SolidWireframe">
            <summary>Solid, filled wireframe.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugWireframeMode.ShadedWireframe">
            <summary>Solid, shaded wireframe.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering">
            <summary>
            Rendering-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.wireframeMode">
            <summary>
            Current debug wireframe mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.overdraw">
            <summary>
            Whether debug overdraw mode is active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.overdrawMode">
            <summary>
            Which overdraw debug mode is active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.maxOverdrawCount">
             <summary>
             Maximum overdraw count for a single pixel.
            
             This is used to setup the feedback range in when <see cref="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.overdrawMode"/> is active.
             </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.fullScreenDebugMode">
            <summary>
            Current debug fullscreen overlay mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.fullScreenDebugModeOutputSizeScreenPercent">
            <summary>
            Size of the debug fullscreen overlay, as percentage of the screen size.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.postProcessingDebugMode">
            <summary>
            Current debug post processing mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.enableMsaa">
            <summary>
            Whether MSAA is enabled.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.enableHDR">
            <summary>
            Whether HDR is enabled.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.TaaDebugMode">
            <summary>
            Current Temporal Anti-aliasing debug mode.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.TaaDebugMode.None">
            <summary>The default non-debug TAA rendering.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.TaaDebugMode.ShowRawFrame">
            <summary>Output the jittered raw frame render. TAA current frame influence 100%.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.TaaDebugMode.ShowRawFrameNoJitter">
            <summary>Output the raw frame render, but with jitter disabled. TAA current frame influence 100%.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.TaaDebugMode.ShowClampedHistory">
            <summary>Output the clamped (rectified), reprojected TAA history. Current frame influence 0%.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.taaDebugMode">
            <summary>
            Current TAA debug mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.validationMode">
            <summary>
            Current debug pixel validation mode.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.validationChannels">
            <summary>
            Current validation channels for DebugValidationMode.HighlightOutsideOfRange.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.validationRangeMin">
            <summary>
            Current minimum threshold value for pixel validation.
            Any values below this value will be considered invalid and will appear red on screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.validationRangeMax">
            <summary>
            Current maximum threshold value for pixel validation.
            Any values above this value will be considered invalid and will appear blue on screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.AreAnySettingsActive">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.IsPostProcessingAllowed">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.IsLightingActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.TryGetScreenClearColor(UnityEngine.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DebugDisplaySettingsRendering.UnityEngine#Rendering#IDebugDisplaySettingsData#CreatePanel">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightLayerEnum">
            <summary>Light Layers.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.Nothing">
            <summary>The light will no affect any object.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayerDefault">
            <summary>Light Layer 0.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer1">
            <summary>Light Layer 1.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer2">
            <summary>Light Layer 2.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer3">
            <summary>Light Layer 3.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer4">
            <summary>Light Layer 4.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer5">
            <summary>Light Layer 5.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer6">
            <summary>Light Layer 6.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.LightLayer7">
            <summary>Light Layer 7.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LightLayerEnum.Everything">
            <summary>Everything.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LightExtensions">
            <summary>
            Contains extension methods for Light class.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LightExtensions.GetUniversalAdditionalLightData(UnityEngine.Light)">
            <summary>
            Universal Render Pipeline exposes additional light data in a separate component.
            This method returns the additional data component for the given light or create one if it doesn't exist yet.
            </summary>
            <param name="light"></param>
            <returns>The <c>UniversalAdditionalLightData</c> for this light.</returns>
            <see cref="T:UnityEngine.Rendering.Universal.UniversalAdditionalLightData"/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalAdditionalLightData">
            <summary>
            Class containing various additional light data used by URP.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.usePipelineSettings">
            <summary>
            Controls if light Shadow Bias parameters use pipeline settings or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowResolutionTierCustom">
            <summary>
            Value used to indicate custom shadow resolution tier for additional lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowResolutionTierLow">
            <summary>
            Value used to indicate low shadow resolution tier for additional lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowResolutionTierMedium">
            <summary>
            Value used to indicate medium shadow resolution tier for additional lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowResolutionTierHigh">
            <summary>
            Value used to indicate high shadow resolution tier for additional lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowDefaultResolutionTier">
            <summary>
            The default shadow resolution tier for additional lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowDefaultCustomResolution">
            <summary>
            The default custom shadow resolution for additional lights.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.AdditionalLightsShadowMinimumResolution">
            <summary>
            The minimum shadow resolution for additional lights.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.additionalLightsShadowResolutionTier">
            <summary>
            Returns the selected shadow resolution tier.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.lightLayerMask">
            <summary>
            The layer(s) this light belongs to.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.renderingLayers">
            <summary>
            Specifies which rendering layers this light will affect.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.customShadowLayers">
            <summary>
            Indicates whether shadows need custom layers.
            If not, then it uses the same settings as lightLayerMask.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.shadowLayerMask">
            <summary>
            The layer(s) for shadow.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.shadowRenderingLayers">
            <summary>
            Specifies which rendering layers this light shadows will affect.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.lightCookieSize">
            <summary>
            Controls the size of the cookie mask currently assigned to the light.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.lightCookieOffset">
            <summary>
            Controls the offset of the cookie mask currently assigned to the light.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.softShadowQuality">
            <summary>
            Light soft shadow filtering quality.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.OnBeforeSerialize">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalAdditionalLightData.OnAfterDeserialize">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RenderingMode">
            <summary>
            Rendering modes for Universal renderer.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingMode.Forward">
            <summary>Render all objects and lighting in one pass, with a hard limit on the number of lights that can be applied on an object.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingMode.ForwardPlus">
            <summary>Render all objects and lighting in one pass using a clustered data structure to access lighting data.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderingMode.Deferred">
            <summary>Render all objects first in a g-buffer pass, then apply all lighting in a separate pass using deferred shading.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DepthPrimingMode">
            <summary>
            When the Universal Renderer should use Depth Priming in Forward mode.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthPrimingMode.Disabled">
            <summary>Depth Priming will never be used.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthPrimingMode.Auto">
            <summary>Depth Priming will only be used if there is a depth prepass needed by any of the render passes.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DepthPrimingMode.Forced">
            <summary>A depth prepass will be explicitly requested so Depth Priming can be used.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalCulledChunk">
            <summary>
            Contains culling results.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalUpdateCullingGroupSystem">
            <summary>
            Issues culling job with <see cref="T:UnityEngine.CullingGroup"/>.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalUpdateCullingGroupSystem.boundingDistance">
            <summary>
            Provides acces to the bounding distance.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RenderTargetHandle">
            <summary>
            Class for render target handles in URP.
            Deprecated in favor of RTHandle.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.RenderTargetHandle.id">
            <summary>
            The ID of the handle for the handle.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.RenderTargetHandle.rtid">
            <summary>
            The render target ID for the handle.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderTargetHandle.CameraTarget">
            <summary>
            The render target handle for the Camera target.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.#ctor(UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Constructor for a render target handle.
            </summary>
            <param name="renderTargetIdentifier">The render target ID for the new handle.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.#ctor(UnityEngine.Rendering.RTHandle)">
            <summary>
            Constructor for a render target handle.
            </summary>
            <param name="rtHandle">The rt handle for the new handle.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.Init(System.String)">
            <summary>
            Initializes the ID for the handle.
            </summary>
            <param name="shaderProperty">The shader property to initialize with.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.Init(UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Initializes the render target ID for the handle.
            </summary>
            <param name="renderTargetIdentifier">The render target ID to initialize with.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.Identifier">
            <summary>
            The render target ID for this render target handle.
            </summary>
            <returns>The render target ID for this render target handle.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.HasInternalRenderTargetId">
            <summary>
            Does this handle have internal render target ID?
            </summary>
            <returns>True if it has internal render target ID.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.Equals(UnityEngine.Rendering.Universal.RenderTargetHandle)">
            <summary>
            Equality check with another render target handle.
            </summary>
            <param name="other">Other render target handle to compare with.</param>
            <returns>True if the handles have the same ID, otherwise false.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.op_Equality(UnityEngine.Rendering.Universal.RenderTargetHandle,UnityEngine.Rendering.Universal.RenderTargetHandle)">
            <summary>
            Equality check between two render target handles.
            </summary>
            <param name="c1">First handle for the check.</param>
            <param name="c2">Second handle for the check.</param>
            <returns>True if the handles have the same ID, otherwise false.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderTargetHandle.op_Inequality(UnityEngine.Rendering.Universal.RenderTargetHandle,UnityEngine.Rendering.Universal.RenderTargetHandle)">
            <summary>
            Equality check between two render target handles.
            </summary>
            <param name="c1">First handle for the check.</param>
            <param name="c2">Second handle for the check.</param>
            <returns>True if the handles do not have the same ID, otherwise false.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.StencilStateData">
            <summary>
            Container class for stencil rendering settings.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StencilStateData.overrideStencilState">
            <summary>
            Used to mark whether the stencil values should be overridden or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StencilStateData.stencilReference">
            <summary>
            The stencil reference value.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StencilStateData.stencilCompareFunction">
            <summary>
            The comparison function to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StencilStateData.passOperation">
            <summary>
            The stencil operation to use when the stencil test passes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StencilStateData.failOperation">
            <summary>
            The stencil operation to use when the stencil test fails.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.StencilStateData.zFailOperation">
            <summary>
            The stencil operation to use when the stencil test fails because of depth.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowCaster2D">
            <summary>
            Class <c>ShadowCaster2D</c> contains properties used for shadow casting
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowCaster2D.ComponentVersions">
            <summary>
            Enum used for different component versions.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowCaster2D.ComponentVersions.Version_Unserialized">
            <summary>
            Used for unserialized version.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowCaster2D.ComponentVersions.Version_1">
            <summary>
            Used for version 1.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ShadowCaster2D.mesh">
            <summary>
            The mesh to draw with.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ShadowCaster2D.shapePath">
            <summary>
            The path for the shape.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ShadowCaster2D.useRendererSilhouette">
            <summary>
            If selfShadows is true, useRendererSilhoutte specifies that the renderer's sihouette should be considered part of the shadow. If selfShadows is false, useRendererSilhoutte specifies that the renderer's sihouette should be excluded from the shadow
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ShadowCaster2D.selfShadows">
            <summary>
            If true, the shadow casting shape is included as part of the shadow. If false, the shadow casting shape is excluded from the shadow.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ShadowCaster2D.castsShadows">
            <summary>
            Specifies if shadows will be cast.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCaster2D.OnEnable">
            <summary>
            This function is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCaster2D.OnDisable">
            <summary>
            This function is called when the behaviour becomes disabled.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCaster2D.Update">
            <summary>
            Update is called every frame, if the MonoBehaviour is enabled.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCaster2D.OnBeforeSerialize">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShadowCaster2D.OnAfterDeserialize">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.WhiteBalance">
            <summary>
            A volume component that holds settings for the White Balance effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.WhiteBalance.temperature">
            <summary>
            Controls the color temperature URP uses for white balancing.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.WhiteBalance.tint">
            <summary>
            Controls the white balance color to compensate for a green or magenta tint.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.WhiteBalance.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.WhiteBalance.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalDrawSystem">
            <summary>
            Abstract class that render decals using <see cref="T:UnityEngine.Rendering.Universal.DecalDrawCallChunk"/>.
            Supports rendering with <see cref="T:UnityEngine.Rendering.CommandBuffer"/> and graphics draw calls.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.IPostProcessComponent">
            <summary>
             Implement this interface on every post process volumes
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.IPostProcessComponent.IsActive">
            <summary>
            Tells if the post process needs to be rendered or not.
            </summary>
            <returns>True if the component is active, otherwise false.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.IPostProcessComponent.IsTileCompatible">
            <summary>
            Tells if the post process can run the effect on-tile or if it needs a full pass.
            </summary>
            <returns>True if it can run on-tile, otherwise false.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.PostProcessPass">
            <summary>
            Renders the post-processing effect stack.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.#ctor(UnityEngine.Rendering.Universal.RenderPassEvent,UnityEngine.Rendering.Universal.PostProcessData,UnityEngine.Rendering.Universal.PostProcessParams@)">
            <summary>
            Creates a new <c>PostProcessPass</c> instance.
            </summary>
            <param name="evt">The <c>RenderPassEvent</c> to use.</param>
            <param name="data">The <c>PostProcessData</c> resources to use.</param>
            <param name="postProcessParams">The <c>PostProcessParams</c> run-time params to use.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.RenderPassEvent"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.PostProcessData"/>
            <seealso cref="T:UnityEngine.Rendering.Universal.PostProcessParams"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.Cleanup">
            <summary>
            Cleans up the Material Library used in the passes.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.Dispose">
            <summary>
            Disposes used resources.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.Setup(UnityEngine.RenderTextureDescriptor@,UnityEngine.Rendering.RTHandle@,System.Boolean,UnityEngine.Rendering.RTHandle@,UnityEngine.Rendering.RTHandle@,UnityEngine.Rendering.RTHandle@,System.Boolean,System.Boolean)">
            <summary>
            Configures the pass.
            </summary>
            <param name="baseDescriptor"></param>
            <param name="source"></param>
            <param name="resolveToScreen"></param>
            <param name="depth"></param>
            <param name="internalLut"></param>
            <param name="hasFinalPass"></param>
            <param name="enableSRGBConversion"></param>
            <param name="hasExternalPostPasses"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.Setup(UnityEngine.RenderTextureDescriptor@,UnityEngine.Rendering.RTHandle@,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle@,UnityEngine.Rendering.RTHandle@,System.Boolean,System.Boolean)">
            <summary>
            Configures the pass.
            </summary>
            <param name="baseDescriptor"></param>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="depth"></param>
            <param name="internalLut"></param>
            <param name="hasFinalPass"></param>
            <param name="enableSRGBConversion"></param>
            <param name="hasExternalPostPasses"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.SetupFinalPass(UnityEngine.Rendering.RTHandle@,System.Boolean)">
            <summary>
            Configures the Final pass.
            </summary>
            <param name="source"></param>
            <param name="useSwapBuffer"></param>
            <param name="hasExternalPostPasses"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.PostProcessPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.CapturePass">
             <summary>
             Let customizable actions inject commands to capture the camera output.
            
             You can use this pass to inject capture commands into a command buffer
             with the goal of having camera capture happening in external code.
             </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.CapturePass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalScaleMode">
            <summary>The scaling mode to apply to decals that use the Decal Projector.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DecalScaleMode.ScaleInvariant">
            <summary>Ignores the transformation hierarchy and uses the scale values in the Decal Projector component directly.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.DecalScaleMode.InheritFromHierarchy">
            <summary>Multiplies the lossy scale of the Transform with the Decal Projector's own scale then applies this to the decal.</summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalProjector">
            <summary>
            Decal Projector component.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.material">
            <summary>
            The material used by the decal.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.drawDistance">
            <summary>
            Distance from camera at which the Decal is not rendered anymore.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.fadeScale">
            <summary>
            Percent of the distance from the camera at which this Decal start to fade off.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.startAngleFade">
            <summary>
            Angle between decal backward orientation and vertex normal of receiving surface at which the Decal start to fade off.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.endAngleFade">
            <summary>
            Angle between decal backward orientation and vertex normal of receiving surface at which the Decal end to fade off.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.uvScale">
            <summary>
            Tilling of the UV of the projected texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.uvBias">
            <summary>
            Offset of the UV of the projected texture.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.renderingLayerMask">
            <summary>
            The layer of the decal.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.scaleMode">
            <summary>
            The scaling mode to apply to decals that use this Decal Projector.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.pivot">
            <summary>
            Change the offset position.
            Do not expose: Could be changed by the inspector when manipulating the gizmo.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.size">
            <summary>
            The size of the projection volume.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.fadeFactor">
            <summary>
            Controls the transparency of the decal.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.effectiveScale">
            <summary>A scale that should be used for rendering and handles.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.decalSize">
            <summary>current size in a way the DecalSystem will be able to use it</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.decalOffset">
            <summary>current size in a way the DecalSystem will be able to use it</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.DecalProjector.uvScaleBias">
            <summary>current uv parameters in a way the DecalSystem will be able to use it</summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.DecalProjector.IsValid">
            <summary>
            Checks if material is valid for rendering decals.
            </summary>
            <returns>True if material is valid.</returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRenderPassInput">
            <summary>
            Input requirements for <c>ScriptableRenderPass</c>.
            </summary>
            <seealso cref="!:ConfigureInput"/>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderPassInput.None">
            <summary>
            Used when a <c>ScriptableRenderPass</c> does not require any texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderPassInput.Depth">
            <summary>
            Used when a <c>ScriptableRenderPass</c> requires a depth texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderPassInput.Normal">
            <summary>
            Used when a <c>ScriptableRenderPass</c> requires a normal texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderPassInput.Color">
            <summary>
            Used when a <c>ScriptableRenderPass</c> requires a color texture.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderPassInput.Motion">
            <summary>
            Used when a <c>ScriptableRenderPass</c> requires a motion vectors texture.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RenderPassEvent">
            <summary>
            Controls when the render pass executes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRendering">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering any other passes in the pipeline.
            Camera matrices and stereo rendering are not setup this point.
            You can use this to draw to custom input textures used later in the pipeline, f.ex LUT textures.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingShadows">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering shadowmaps.
            Camera matrices and stereo rendering are not setup this point.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingShadows">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering shadowmaps.
            Camera matrices and stereo rendering are not setup this point.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingPrePasses">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering prepasses, f.ex, depth prepass.
            Camera matrices and stereo rendering are already setup at this point.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingPrePasses">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering prepasses, f.ex, depth prepass.
            Camera matrices and stereo rendering are already setup at this point.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingGbuffer">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering gbuffer pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingGbuffer">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering gbuffer pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingDeferredLights">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering deferred shading pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingDeferredLights">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering deferred shading pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingOpaques">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering opaque objects.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingOpaques">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering opaque objects.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingSkybox">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering the sky.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingSkybox">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering the sky.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingTransparents">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering transparent objects.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingTransparents">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering transparent objects.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.BeforeRenderingPostProcessing">
            <summary>
            Executes a <c>ScriptableRenderPass</c> before rendering post-processing effects.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRenderingPostProcessing">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering post-processing effects but before final blit, post-processing AA effects and color grading.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.RenderPassEvent.AfterRendering">
            <summary>
            Executes a <c>ScriptableRenderPass</c> after rendering all effects.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRenderPass">
            <summary>
            <c>ScriptableRenderPass</c> implements a logical rendering pass that can be used to extend Universal RP renderer.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRenderPass.k_CameraTarget">
            <summary>
            RTHandle alias for BuiltinRenderTextureType.CameraTarget which is the backbuffer.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.renderPassEvent">
            <summary>
            The event when the render pass executes.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.colorAttachments">
            <summary>
            The render target identifiers for color attachments.
            This is obsolete, use colorAttachmentHandles instead.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.colorAttachment">
            <summary>
            The render target identifier for color attachment.
            This is obsolete, use colorAttachmentHandle instead.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.depthAttachment">
            <summary>
            The render target identifier for depth attachment.
            This is obsolete, use depthAttachmentHandle instead.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.colorAttachmentHandles">
            <summary>
            List for the g-buffer attachment handles.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.colorAttachmentHandle">
            <summary>
            The main color attachment handle.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.depthAttachmentHandle">
            <summary>
            The depth attachment handle.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.colorStoreActions">
            <summary>
            The store actions for Color.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.depthStoreAction">
            <summary>
            The store actions for Depth.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.input">
            <summary>
            The input requirements for the <c>ScriptableRenderPass</c>, which has been set using <c>ConfigureInput</c>
            </summary>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureInput(UnityEngine.Rendering.Universal.ScriptableRenderPassInput)"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.clearFlag">
            <summary>
            The flag to use when clearing.
            </summary>
            <seealso cref="T:UnityEngine.Rendering.ClearFlag"/>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.clearColor">
            <summary>
            The color value to use when clearing.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRenderPass.profilingSampler">
            <summary>
            A ProfilingSampler for the entire render pass. Used as a profiling name by <c>ScriptableRenderer</c> when executing the pass.
            Default is <c>Unnamed_ScriptableRenderPass</c>.
            Set <c>base.profilingSampler</c> from the sub-class constructor to set a profiling name for a custom <c>ScriptableRenderPass</c>.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.#ctor">
            <summary>
            Creates a new <c>ScriptableRenderPass"</c> instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureInput(UnityEngine.Rendering.Universal.ScriptableRenderPassInput)">
            <summary>
            Configures Input Requirements for this render pass.
            This method should be called inside <c>ScriptableRendererFeature.AddRenderPasses</c>.
            </summary>
            <param name="passInput">ScriptableRenderPassInput containing information about what requirements the pass needs.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRendererFeature.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureColorStoreAction(UnityEngine.Rendering.RenderBufferStoreAction,System.UInt32)">
            <summary>
            Configures the Store Action for a color attachment of this render pass.
            </summary>
            <param name="storeAction">RenderBufferStoreAction to use</param>
            <param name="attachmentIndex">Index of the color attachment</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureColorStoreActions(UnityEngine.Rendering.RenderBufferStoreAction[])">
            <summary>
            Configures the Store Actions for all the color attachments of this render pass.
            </summary>
            <param name="storeActions">Array of RenderBufferStoreActions to use</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureDepthStoreAction(UnityEngine.Rendering.RenderBufferStoreAction)">
            <summary>
            Configures the Store Action for the depth attachment of this render pass.
            </summary>
            <param name="storeAction">RenderBufferStoreAction to use</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ResetTarget">
            <summary>
            Resets render targets to default.
            This method effectively reset changes done by ConfigureTarget.
            </summary>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachment">Color attachment identifier.</param>
            <param name="depthAttachment">Depth attachment identifier.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachment">Color attachment handle.</param>
            <param name="depthAttachment">Depth attachment handle.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachments">Color attachment identifier.</param>
            <param name="depthAttachment">Depth attachment identifier.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RTHandle[],UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachments">Color attachment handle.</param>
            <param name="depthAttachment">Depth attachment handle.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachment">Color attachment identifier.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RTHandle)">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachment">Color attachment handle.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier[])">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachments">Color attachment identifiers.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RTHandle[])">
            <summary>
            Configures render targets for this render pass. Call this instead of CommandBuffer.SetRenderTarget.
            This method should be called inside Configure.
            </summary>
            <param name="colorAttachments">Color attachment handle.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureClear(UnityEngine.Rendering.ClearFlag,UnityEngine.Color)">
            <summary>
            Configures clearing for the render targets for this render pass. Call this inside Configure.
            </summary>
            <param name="clearFlag">ClearFlag containing information about what targets to clear.</param>
            <param name="clearColor">Clear color.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.OnCameraSetup(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            This method is called by the renderer before rendering a camera
            Override this method if you need to to configure render targets and their clear state, and to create temporary render target textures.
            If a render pass doesn't override this method, this render pass renders to the active Camera's render target.
            You should never call CommandBuffer.SetRenderTarget. Instead call <c>ConfigureTarget</c> and <c>ConfigureClear</c>.
            </summary>
            <param name="cmd">CommandBuffer to enqueue rendering commands. This will be executed by the pipeline.</param>
            <param name="renderingData">Current rendering state information</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)"/>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureClear(UnityEngine.Rendering.ClearFlag,UnityEngine.Color)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Configure(UnityEngine.Rendering.CommandBuffer,UnityEngine.RenderTextureDescriptor)">
            <summary>
            This method is called by the renderer before executing the render pass.
            Override this method if you need to to configure render targets and their clear state, and to create temporary render target textures.
            If a render pass doesn't override this method, this render pass renders to the active Camera's render target.
            You should never call CommandBuffer.SetRenderTarget. Instead call <c>ConfigureTarget</c> and <c>ConfigureClear</c>.
            </summary>
            <param name="cmd">CommandBuffer to enqueue rendering commands. This will be executed by the pipeline.</param>
            <param name="cameraTextureDescriptor">Render texture descriptor of the camera render target.</param>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)"/>
            <seealso cref="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.ConfigureClear(UnityEngine.Rendering.ClearFlag,UnityEngine.Color)"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.OnCameraCleanup(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Called upon finish rendering a camera. You can use this callback to release any resources created
            by this render
            pass that need to be cleanup once camera has finished rendering.
            This method be called for all cameras in a camera stack.
            </summary>
            <param name="cmd">Use this CommandBuffer to cleanup any generated data</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.OnFinishCameraStackRendering(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Called upon finish rendering a camera stack. You can use this callback to release any resources created
            by this render pass that need to be cleanup once all cameras in the stack have finished rendering.
            This method will be called once after rendering the last camera in the camera stack.
            Cameras that don't have an explicit camera stack are also considered stacked rendering.
            In that case the Base camera is the first and last camera in the stack.
            </summary>
            <param name="cmd">Use this CommandBuffer to cleanup any generated data</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            Execute the pass. This is where custom rendering occurs. Specific details are left to the implementation
            </summary>
            <param name="context">Use this render context to issue any draw commands during execution</param>
            <param name="renderingData">Current rendering state information</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.RecordRenderGraph(UnityEngine.Experimental.Rendering.RenderGraphModule.RenderGraph,UnityEngine.Rendering.Universal.RenderingData@)">
            <summary>
            TODO RENDERGRAPH
            </summary>
            <param name="renderingData"></param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Blit(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material,System.Int32)">
            <summary>
            Add a blit command to the context for execution. This changes the active render target in the ScriptableRenderer to
            destination.
            </summary>
            <param name="cmd">Command buffer to record command for execution.</param>
            <param name="source">Source texture or target identifier to blit from.</param>
            <param name="destination">Destination texture or target identifier to blit into. This becomes the renderer active render target.</param>
            <param name="material">Material to use.</param>
            <param name="passIndex">Shader pass to use. Default is 0.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Blit(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RTHandle,UnityEngine.Rendering.RTHandle,UnityEngine.Material,System.Int32)">
            <summary>
            Add a blit command to the context for execution. This changes the active render target in the ScriptableRenderer to
            destination.
            </summary>
            <param name="cmd">Command buffer to record command for execution.</param>
            <param name="source">Source texture or target handle to blit from.</param>
            <param name="destination">Destination texture or target handle to blit into. This becomes the renderer active render target.</param>
            <param name="material">Material to use.</param>
            <param name="passIndex">Shader pass to use. Default is 0.</param>
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Blit(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Material,System.Int32)">
            <summary>
            Add a blit command to the context for execution. This applies the material to the color target.
            </summary>
            <param name="cmd">Command buffer to record command for execution.</param>
            <param name="data">RenderingData to access the active renderer.</param>
            <param name="material">Material to use.</param>
            <param name="passIndex">Shader pass to use. Default is 0.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.Blit(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Rendering.RTHandle,UnityEngine.Material,System.Int32)">
            <summary>
            Add a blit command to the context for execution. This applies the material to the color target.
            </summary>
            <param name="cmd">Command buffer to record command for execution.</param>
            <param name="data">RenderingData to access the active renderer.</param>
            <param name="source">Source texture or target identifier to blit from.</param>
            <param name="material">Material to use.</param>
            <param name="passIndex">Shader pass to use. Default is 0.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.CreateDrawingSettings(UnityEngine.Rendering.ShaderTagId,UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Rendering.SortingCriteria)">
            <summary>
            Creates <c>DrawingSettings</c> based on current the rendering state.
            </summary>
            <param name="shaderTagId">Shader pass tag to render.</param>
            <param name="renderingData">Current rendering state.</param>
            <param name="sortingCriteria">Criteria to sort objects being rendered.</param>
            <returns></returns>
            <seealso cref="T:UnityEngine.Rendering.DrawingSettings"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.CreateDrawingSettings(System.Collections.Generic.List{UnityEngine.Rendering.ShaderTagId},UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Rendering.SortingCriteria)">
            <summary>
            Creates <c>DrawingSettings</c> based on current rendering state.
            </summary>
            /// <param name="shaderTagIdList">List of shader pass tag to render.</param>
            <param name="renderingData">Current rendering state.</param>
            <param name="sortingCriteria">Criteria to sort objects being rendered.</param>
            <returns></returns>
            <seealso cref="T:UnityEngine.Rendering.DrawingSettings"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.op_LessThan(UnityEngine.Rendering.Universal.ScriptableRenderPass,UnityEngine.Rendering.Universal.ScriptableRenderPass)">
            <summary>
            Compares two instances of <c>ScriptableRenderPass</c> by their <c>RenderPassEvent</c> and returns if <paramref name="lhs"/> is executed before <paramref name="rhs"/>.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.op_GreaterThan(UnityEngine.Rendering.Universal.ScriptableRenderPass,UnityEngine.Rendering.Universal.ScriptableRenderPass)">
            <summary>
            Compares two instances of <c>ScriptableRenderPass</c> by their <c>RenderPassEvent</c> and returns if <paramref name="lhs"/> is executed after <paramref name="rhs"/>.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRenderPass.FrameCleanup(UnityEngine.Rendering.CommandBuffer)">
            <summary>
            Cleanup any allocated resources that were created during the execution of this render pass.
            </summary>
            <param name="cmd">Use this CommandBuffer to cleanup any generated data. </param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.LiftGammaGain">
            <summary>
            A volume component that holds settings for the Split Toning effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LiftGammaGain.lift">
            <summary>
            Use this to control and apply a hue to the dark tones. This has a more exaggerated effect on shadows.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LiftGammaGain.gamma">
            <summary>
            Use this to control and apply a hue to the mid-range tones with a power function.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.LiftGammaGain.gain">
            <summary>
            Use this to increase and apply a hue to the signal and make highlights brighter.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LiftGammaGain.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.LiftGammaGain.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Renderer2D.SupportedCameraStackingTypes">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ForwardRenderer">
            <summary>
            Default renderer for Universal RP.
            This renderer is supported on all Universal RP supported platforms.
            It uses a classic forward rendering strategy with per-object light culling.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.#ctor(UnityEngine.Rendering.Universal.ForwardRendererData)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.Setup(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.SetupLights(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.SetupCullingParameters(UnityEngine.Rendering.ScriptableCullingParameters@,UnityEngine.Rendering.Universal.CameraData@)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.FinishRendering(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.SwapColorBuffer(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ForwardRenderer.GetCameraColorFrontBuffer(UnityEngine.Rendering.CommandBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShadowCascadesOption">
            <summary>
            Previously contained the settings to control how many cascades to use. It is now deprecated.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowCascadesOption.NoCascades">
            <summary>
            No cascades used for the shadows
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowCascadesOption.TwoCascades">
            <summary>
            Two cascades used for the shadows
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShadowCascadesOption.FourCascades">
            <summary>
            Four cascades used for the shadows
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShaderVariantLogLevel">
            <summary>
            Specifies the logging level for shader variants.
            This is obsolete, UnityEngine.Rendering.ShaderVariantLogLevel instead.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderVariantLogLevel.Disabled">
            <summary>Disable all log for shader variants.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderVariantLogLevel.OnlyUniversalRPShaders">
            <summary>Only logs SRP Shaders when logging shader variants.</summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderVariantLogLevel.AllShaders">
            <summary>Logs all shader variants.</summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.XRPassUniversal.isLateLatchEnabled">
            If true, late latching mechanism is available for the frame.
        </member>
        <member name="P:UnityEngine.Rendering.Universal.XRPassUniversal.canMarkLateLatch">
            Used by the render pipeline to control the granularity of late latching.
        </member>
        <member name="P:UnityEngine.Rendering.Universal.XRPassUniversal.hasMarkedLateLatch">
            Track the state of the late latching system.
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalCachedChunk">
            <summary>
            Contains <see cref="T:UnityEngine.Rendering.Universal.DecalProjector"/> cached properties needed for rendering.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.DecalUpdateCachedSystem">
            <summary>
            Caches <see cref="T:UnityEngine.Rendering.Universal.DecalProjector"/> properties into <see cref="T:UnityEngine.Rendering.Universal.DecalCachedChunk"/>.
            Uses jobs with <see cref="T:UnityEngine.Jobs.IJobParallelForTransform"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.Vignette">
            <summary>
            A volume component that holds settings for the Vignette effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Vignette.color">
            <summary>
            Specifies the color of the vignette.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Vignette.center">
            <summary>
            Sets the center point for the vignette.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Vignette.intensity">
            <summary>
            Controls the strength of the vignette effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Vignette.smoothness">
            <summary>
            Controls the smoothness of the vignette borders.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Vignette.rounded">
            <summary>
            Controls how round the vignette is, lower values result in a more square vignette.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Vignette.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.Vignette.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShaderPathID">
            <summary>
            Options to get a shader path to URP shaders when calling ShaderUtils.GetShaderGUID();
            <see cref="T:UnityEngine.Rendering.Universal.ShaderUtils"/>.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.Lit">
            <summary>
            Use this for URP Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.SimpleLit">
            <summary>
            Use this for URP Simple Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.Unlit">
            <summary>
            Use this for URP Unlit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.TerrainLit">
            <summary>
            Use this for URP Terrain Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.ParticlesLit">
            <summary>
            Use this for URP Particles Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.ParticlesSimpleLit">
            <summary>
            Use this for URP Particles Simple Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.ParticlesUnlit">
            <summary>
            Use this for URP Particles Simple Unlit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.BakedLit">
            <summary>
            Use this for URP Baked Lit shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.SpeedTree7">
            <summary>
            Use this for URP SpeedTree 7 shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.SpeedTree7Billboard">
            <summary>
            Use this for URP SpeedTree 7 Billboard shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ShaderPathID.SpeedTree8">
            <summary>
            Use this for URP SpeedTree 8 shader.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ShaderUtils">
            <summary>
            Various utility functions for shaders in URP.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShaderUtils.GetShaderPath(UnityEngine.Rendering.Universal.ShaderPathID)">
            <summary>
            Retrieves a shader path for the given URP Shader Path ID.
            </summary>
            <param name="id">The URP Shader Path ID.</param>
            <returns>The path to the URP shader.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShaderUtils.GetEnumFromPath(System.String)">
            <summary>
            Retrieves a URP Shader Path ID from a path given.
            </summary>
            <param name="path">The path to the shader.</param>
            <returns>The URP Shader Path ID.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShaderUtils.IsLWShader(UnityEngine.Shader)">
            <summary>
            Checks if a given shader is a URP shader or not.
            </summary>
            <param name="shader">The shader.</param>
            <returns>True or false if it's a URP shader or not.</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ShaderUtils.GetShaderGUID(UnityEngine.Rendering.Universal.ShaderPathID)">
            <summary>
            Returns a GUID for a URP shader from Shader Path ID.
            </summary>
            <param name="id">ID of shader path.</param>
            <returns>GUID for the shader.</returns>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.Documentation.packageName">
            <summary>
            The name of the package
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.InvokeOnRenderObjectCallbackPass">
            <summary>
            Invokes OnRenderObject callback
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.InvokeOnRenderObjectCallbackPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.RenderingUtils">
            <summary>
            Contains properties and helper functions that you can use when rendering.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.RenderingUtils.fullscreenMesh">
            <summary>
            Returns a mesh that you can use with <see cref="M:UnityEngine.Rendering.CommandBuffer.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material)"/> to render full-screen effects.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.SetViewAndProjectionMatrices(UnityEngine.Rendering.CommandBuffer,UnityEngine.Matrix4x4,UnityEngine.Matrix4x4,System.Boolean)">
            <summary>
            Set view and projection matrices.
            This function will set <c>UNITY_MATRIX_V</c>, <c>UNITY_MATRIX_P</c>, <c>UNITY_MATRIX_VP</c> to given view and projection matrices.
            If <c>setInverseMatrices</c> is set to true this function will also set <c>UNITY_MATRIX_I_V</c> and <c>UNITY_MATRIX_I_VP</c>.
            </summary>
            <param name="cmd">CommandBuffer to submit data to GPU.</param>
            <param name="viewMatrix">View matrix to be set.</param>
            <param name="projectionMatrix">Projection matrix to be set.</param>
            <param name="setInverseMatrices">Set this to true if you also need to set inverse camera matrices.</param>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat)">
            <summary>
            Checks if a render texture format is supported by the run-time system.
            Similar to <see cref="M:UnityEngine.SystemInfo.SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat)"/>, but doesn't allocate memory.
            </summary>
            <param name="format">The format to look up.</param>
            <returns>Returns true if the graphics card supports the given <c>RenderTextureFormat</c></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.SupportsGraphicsFormat(UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Experimental.Rendering.FormatUsage)">
            <summary>
            Checks if a texture format is supported by the run-time system.
            Similar to <see cref="M:UnityEngine.SystemInfo.IsFormatSupported(UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Experimental.Rendering.FormatUsage)"/>, but doesn't allocate memory.
            </summary>
            <param name="format">The format to look up.</param>
            <param name="usage">The format usage to look up.</param>
            <returns>Returns true if the graphics card supports the given <c>GraphicsFormat</c></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.GetLastValidColorBufferIndex(UnityEngine.Rendering.RenderTargetIdentifier[])">
            <summary>
            Return the last colorBuffer index actually referring to an existing RenderTarget
            </summary>
            <param name="colorBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.GetValidColorBufferCount(UnityEngine.Rendering.RenderTargetIdentifier[])">
            <summary>
            Return the number of items in colorBuffers actually referring to an existing RenderTarget
            </summary>
            <param name="colorBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.GetValidColorBufferCount(UnityEngine.Rendering.RTHandle[])">
            <summary>
            Return the number of items in colorBuffers actually referring to an existing RenderTarget
            </summary>
            <param name="colorBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.IsMRT(UnityEngine.Rendering.RenderTargetIdentifier[])">
            <summary>
            Return true if colorBuffers is an actual MRT setup
            </summary>
            <param name="colorBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.IsMRT(UnityEngine.Rendering.RTHandle[])">
            <summary>
            Return true if colorBuffers is an actual MRT setup
            </summary>
            <param name="colorBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.Contains(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Return true if value can be found in source (without recurring to Linq)
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.IndexOf(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Return the index where value was found source. Otherwise, return -1. (without recurring to Linq)
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.CountDistinct(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier)">
            <summary>
            Return the number of RenderTargetIdentifiers in "source" that are valid (not 0) and different from "value" (without recurring to Linq)
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.LastValid(UnityEngine.Rendering.RenderTargetIdentifier[])">
            <summary>
            Return the index of last valid (i.e different from 0) RenderTargetIdentifiers in "source" (without recurring to Linq)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.Contains(UnityEngine.Rendering.ClearFlag,UnityEngine.Rendering.ClearFlag)">
            <summary>
            Return true if ClearFlag a contains ClearFlag b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.SequenceEqual(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier[])">
            <summary>
            Return true if "left" and "right" are the same (without recurring to Linq)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.RTHandleNeedsReAlloc(UnityEngine.Rendering.RTHandle,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String,System.Boolean)">
            <summary>
            Return true if handle does not match descriptor
            </summary>
            <param name="handle">RTHandle to check (can be null)</param>
            <param name="descriptor">Descriptor for the RTHandle to match</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <param name="scaled">Check if the RTHandle has auto scaling enabled if not, check the widths and heights</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.ReAllocateIfNeeded(UnityEngine.Rendering.RTHandle@,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            Re-allocate fixed-size RTHandle if it is not allocated or doesn't match the descriptor
            </summary>
            <param name="handle">RTHandle to check (can be null)</param>
            <param name="descriptor">Descriptor for the RTHandle to match</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.ReAllocateIfNeeded(UnityEngine.Rendering.RTHandle@,UnityEngine.Vector2,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            Re-allocate dynamically resized RTHandle if it is not allocated or doesn't match the descriptor
            </summary>
            <param name="handle">RTHandle to check (can be null)</param>
            <param name="scaleFactor">Constant scale for the RTHandle size computation.</param>
            <param name="descriptor">Descriptor for the RTHandle to match</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>If the RTHandle should be re-allocated</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.ReAllocateIfNeeded(UnityEngine.Rendering.RTHandle@,UnityEngine.Rendering.ScaleFunc,UnityEngine.RenderTextureDescriptor@,UnityEngine.FilterMode,UnityEngine.TextureWrapMode,System.Boolean,System.Int32,System.Single,System.String)">
            <summary>
            Re-allocate dynamically resized RTHandle if it is not allocated or doesn't match the descriptor
            </summary>
            <param name="handle">RTHandle to check (can be null)</param>
            <param name="scaleFunc">Function used for the RTHandle size computation.</param>
            <param name="descriptor">Descriptor for the RTHandle to match</param>
            <param name="filterMode">Filtering mode of the RTHandle.</param>
            <param name="wrapMode">Addressing mode of the RTHandle.</param>
            <param name="isShadowMap">Set to true if the depth buffer should be used as a shadow map.</param>
            <param name="anisoLevel">Anisotropic filtering level.</param>
            <param name="mipMapBias">Bias applied to mipmaps during filtering.</param>
            <param name="name">Name of the RTHandle.</param>
            <returns>If an allocation was done</returns>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.CreateDrawingSettings(UnityEngine.Rendering.ShaderTagId,UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Rendering.SortingCriteria)">
            <summary>
            Creates <c>DrawingSettings</c> based on current the rendering state.
            </summary>
            <param name="shaderTagId">Shader pass tag to render.</param>
            <param name="renderingData">Current rendering state.</param>
            <param name="sortingCriteria">Criteria to sort objects being rendered.</param>
            <returns></returns>
            <seealso cref="T:UnityEngine.Rendering.DrawingSettings"/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.RenderingUtils.CreateDrawingSettings(System.Collections.Generic.List{UnityEngine.Rendering.ShaderTagId},UnityEngine.Rendering.Universal.RenderingData@,UnityEngine.Rendering.SortingCriteria)">
            <summary>
            Creates <c>DrawingSettings</c> based on current rendering state.
            </summary>
            /// <param name="shaderTagIdList">List of shader pass tag to render.</param>
            <param name="renderingData">Current rendering state.</param>
            <param name="sortingCriteria">Criteria to sort objects being rendered.</param>
            <returns></returns>
            <seealso cref="T:UnityEngine.Rendering.DrawingSettings"/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.SampleCount">
            <summary>
            Options for Sample Count.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SampleCount.One">
            <summary>
            Use this for 1 sample.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SampleCount.Two">
            <summary>
            Use this for 2 samples.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.SampleCount.Four">
            <summary>
            Use this for 4 samples.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ChannelMixer">
            <summary>
            A volume component that holds settings for the Channel Mixer effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.redOutRedIn">
            <summary>
            Modify influence of the red channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.redOutGreenIn">
            <summary>
            Modify influence of the green channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.redOutBlueIn">
            <summary>
            Modify influence of the blue channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.greenOutRedIn">
            <summary>
            Modify influence of the red channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.greenOutGreenIn">
            <summary>
            Modify influence of the green channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.greenOutBlueIn">
            <summary>
            Modify influence of the blue channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.blueOutRedIn">
            <summary>
            Modify influence of the red channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.blueOutGreenIn">
            <summary>
            Modify influence of the green channel in the overall mix.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ChannelMixer.blueOutBlueIn">
            <summary>
            Modify influence of the blue channel in the overall mix.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ChannelMixer.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ChannelMixer.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings">
            <summary>
            Class for the rendering debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.materialSettings">
            <summary>
            Material-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.renderingSettings">
            <summary>
            Rendering-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.lightingSettings">
            <summary>
            Lighting-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.volumeSettings">
            <summary>
            Volume-related Rendering Debugger settings.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.displayStats">
            <summary>
            Display stats.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.IsPostProcessingAllowed">
            <summary>
            Returns true if the current state of debug settings allows post-processing.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.#ctor">
            <summary>
            Creates a new <c>UniversalRenderPipelineDebugDisplaySettings</c> instance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.UniversalRenderPipelineDebugDisplaySettings.Reset">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.FilmGrainLookup">
            <summary>
            Presets for the <see cref="T:UnityEngine.Rendering.Universal.FilmGrain"/> effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Thin1">
            <summary>
            Thin grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Thin2">
            <summary>
            Thin grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Medium1">
            <summary>
            Medium grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Medium2">
            <summary>
            Medium grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Medium3">
            <summary>
            Medium grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Medium4">
            <summary>
            Medium grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Medium5">
            <summary>
            Medium grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Medium6">
            <summary>
            Medium grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Large01">
            <summary>
            Large grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Large02">
            <summary>
            Large grain preset.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrainLookup.Custom">
            <summary>
            Custom grain preset.
            </summary>
            <seealso cref="F:UnityEngine.Rendering.Universal.FilmGrain.texture"/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.FilmGrain">
            <summary>
            A volume component that holds settings for the Film Grain effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrain.type">
            <summary>
            The type of grain to use. You can select a preset or provide your own texture by selecting Custom.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrain.intensity">
            <summary>
            Use this to set the strength of the Film Grain effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrain.response">
            <summary>
            Controls the noisiness response curve based on scene luminance. Higher values mean less noise in light areas.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.FilmGrain.texture">
            <summary>
            A tileable texture to use for the grain. The neutral value is 0.5 where no grain is applied
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.FilmGrain.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.FilmGrain.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.FilmGrainLookupParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.Universal.FilmGrainLookup"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.FilmGrainLookupParameter.#ctor(UnityEngine.Rendering.Universal.FilmGrainLookup,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.Universal.FilmGrainLookupParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRendererData">
            <summary>
            Class <c>ScriptableRendererData</c> contains resources for a <c>ScriptableRenderer</c>.
            <seealso cref="T:UnityEngine.Rendering.Universal.ScriptableRenderer"/>
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.ScriptableRendererData.DebugShaderResources">
            <summary>
            Class contains references to shader resources used by Rendering Debugger.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRendererData.DebugShaderResources.debugReplacementPS">
            <summary>
            Debug shader used to output interpolated vertex attributes.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.ScriptableRendererData.debugShaders">
            <summary>
            Container for shader resources used by Rendering Debugger.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererData.Create">
            <summary>
            Creates the instance of the ScriptableRenderer.
            </summary>
            <returns>The instance of ScriptableRenderer</returns>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRendererData.rendererFeatures">
            <summary>
            List of additional render pass features for this renderer.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererData.SetDirty">
            <summary>
            Use SetDirty when changing seeings in the ScriptableRendererData.
            It will rebuild the render passes with the new data.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererData.OnValidate">
            <summary>
            Editor-only function that Unity calls when the script is loaded or a value changes in the Inspector.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererData.OnEnable">
            <summary>
            This function is called when the object becomes enabled and active.
            </summary>
        </member>
        <member name="P:UnityEngine.Rendering.Universal.ScriptableRendererData.useNativeRenderPass">
            <summary>
            Specifies whether the renderer should use Native Render Pass.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.ScriptableRendererData.TryGetRendererFeature``1(``0@)">
            <summary>
            Returns true if contains renderer feature with specified type.
            </summary>
            <typeparam name="T">Renderer Feature type.</typeparam>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MotionBlurMode">
            <summary>
            Option to control motion blur Mode.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlurMode.CameraOnly">
            <summary>
            Use this if you don't need object motion blur.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlurMode.CameraAndObjects">
            <summary>
            Use this if you need object motion blur.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MotionBlurQuality">
            <summary>
            Options to control the quality the motion blur effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlurQuality.Low">
            <summary>
            Use this to select low motion blur quality.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlurQuality.Medium">
            <summary>
            Use this to select medium motion blur quality.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlurQuality.High">
            <summary>
            Use this to select high motion blur quality.
            </summary>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MotionBlur">
            <summary>
            A volume component that holds settings for the motion blur effect.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlur.mode">
            <summary>
            The motion blur technique to use. If you don't need object motion blur, CameraOnly will result in better performance.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlur.quality">
            <summary>
            The quality of the effect. Lower presets will result in better performance at the expense of visual quality.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlur.intensity">
            <summary>
            Sets the intensity of the motion blur effect. Acts as a multiplier for velocities.
            </summary>
        </member>
        <member name="F:UnityEngine.Rendering.Universal.MotionBlur.clamp">
            <summary>
            Sets the maximum length, as a fraction of the screen's full resolution, that the velocity resulting from Camera rotation can have.
            Lower values will improve performance.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.MotionBlur.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.MotionBlur.IsTileCompatible">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MotionBlurModeParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.Universal.MotionBlurMode"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.MotionBlurModeParameter.#ctor(UnityEngine.Rendering.Universal.MotionBlurMode,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.Universal.MotionBlurModeParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Rendering.Universal.MotionBlurQualityParameter">
            <summary>
            A <see cref="T:UnityEngine.Rendering.VolumeParameter"/> that holds a <see cref="T:UnityEngine.Rendering.Universal.MotionBlurQuality"/> value.
            </summary>
        </member>
        <member name="M:UnityEngine.Rendering.Universal.MotionBlurQualityParameter.#ctor(UnityEngine.Rendering.Universal.MotionBlurQuality,System.Boolean)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Rendering.Universal.MotionBlurQualityParameter"/> instance.
            </summary>
            <param name="value">The initial value to store in the parameter.</param>
            <param name="overrideState">The initial override state for the parameter.</param>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass">
            <summary>
            The scriptable render pass used with the render objects renderer feature.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.overrideMaterial">
            <summary>
            The override material to use.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.overrideMaterialPassIndex">
            <summary>
            The pass index to use with the override material.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.overrideShader">
            <summary>
            The override shader to use.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.overrideShaderPassIndex">
            <summary>
            The pass index to use with the override shader.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.SetDetphState(System.Boolean,UnityEngine.Rendering.CompareFunction)">
            <summary>
            Sets the write and comparison function for depth.
            </summary>
            <param name="writeEnabled">Sets whether it should write to depth or not.</param>
            <param name="function">The depth comparison function to use.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.SetStencilState(System.Int32,UnityEngine.Rendering.CompareFunction,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp)">
            <summary>
            Sets up the stencil settings for the pass.
            </summary>
            <param name="reference">The stencil reference value.</param>
            <param name="compareFunction">The comparison function to use.</param>
            <param name="passOp">The stencil operation to use when the stencil test passes.</param>
            <param name="failOp">The stencil operation to use when the stencil test fails.</param>
            <param name="zFailOp">The stencil operation to use when the stencil test fails because of depth.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.#ctor(System.String,UnityEngine.Rendering.Universal.RenderPassEvent,System.String[],UnityEngine.Experimental.Rendering.Universal.RenderQueueType,System.Int32,UnityEngine.Experimental.Rendering.Universal.RenderObjects.CustomCameraSettings)">
            <summary>
            The constructor for render objects pass.
            </summary>
            <param name="profilerTag">The profiler tag used with the pass.</param>
            <param name="renderPassEvent">Controls when the render pass executes.</param>
            <param name="shaderTags">List of shader tags to render with.</param>
            <param name="renderQueueType">The queue type for the objects to render.</param>
            <param name="layerMask">The layer mask to use for creating filtering settings that control what objects get rendered.</param>
            <param name="cameraSettings">The settings for custom cameras values.</param>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjectsPass.Execute(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera">
            <summary>
            The Pixel Perfect Camera component ensures your pixel art remains crisp and clear at different resolutions, and stable in motion.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CropFrame">
            <summary>
            An enumeration of the types of display cropping.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CropFrame.None">
            <summary>
            No cropping.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CropFrame.Pillarbox">
            <summary>
            Black borders added to the left and right of viewport to match Reference Resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CropFrame.Letterbox">
            <summary>
            Black borders added to the top and bottom of viewport to match Reference Resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CropFrame.Windowbox">
            <summary>
            Black borders added to all sides of viewport to match Reference Resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CropFrame.StretchFill">
            <summary>
            Expands the viewport to fit the screen resolution while maintaining the viewport's aspect ratio.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.GridSnapping">
            <summary>
            Determines how pixels are snapped to the grid.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.GridSnapping.None">
            <summary>
            No snapping.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.GridSnapping.PixelSnapping">
            <summary>
            Prevent subpixel movement and make Sprites appear to move in pixel-by-pixel increments.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.GridSnapping.UpscaleRenderTexture">
            <summary>
            The scene is rendered to a temporary texture set as close as possible to the Reference Resolution, while maintaining the full screen aspect ratio. This temporary texture is then upscaled to fit the full screen.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.PixelPerfectFilterMode">
            <summary>
            Defines the filter mode use to render the final render target.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.PixelPerfectFilterMode.RetroAA">
            <summary>
            Uses point filter to upscale to closest multiple of Reference Resolution, followed by bilinear filter to the target resolution.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.PixelPerfectFilterMode.Point">
            <summary>
            Uses point filter to upscale to target resolution.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.cropFrame">
            <summary>
            Defines how the output display will be cropped.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.gridSnapping">
            <summary>
            Defines if pixels will be locked to a grid determined by assetsPPU.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.orthographicSize">
            <summary>
            The target orthographic size of the camera.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.assetsPPU">
            <summary>
            Match this value to to the Pixels Per Unit values of all Sprites within the Scene.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.refResolutionX">
            <summary>
            The original horizontal resolution your Assets are designed for.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.refResolutionY">
            <summary>
            Original vertical resolution your Assets are designed for.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.upscaleRT">
            <summary>
            Set to true to have the Scene rendered to a temporary texture set as close as possible to the Reference Resolution,
            while maintaining the full screen aspect ratio. This temporary texture is then upscaled to fit the full screen.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.pixelSnapping">
            <summary>
            Set to true to prevent subpixel movement and make Sprites appear to move in pixel-by-pixel increments.
            Only applicable when upscaleRT is false.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.cropFrameX">
            <summary>
            Set to true to crop the viewport with black bars to match refResolutionX in the horizontal direction.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.cropFrameY">
            <summary>
            Set to true to crop the viewport with black bars to match refResolutionY in the vertical direction.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.stretchFill">
            <summary>
            Set to true to expand the viewport to fit the screen resolution while maintaining the viewport's aspect ratio.
            Only applicable when both cropFrameX and cropFrameY are true.
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.pixelRatio">
            <summary>
            Ratio of the rendered Sprites compared to their original size (readonly).
            </summary>
        </member>
        <member name="P:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.requiresUpscalePass">
            <summary>
            Returns if an upscale pass is required.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.RoundToPixel(UnityEngine.Vector3)">
            <summary>
            Round a arbitrary position to an integer pixel position. Works in world space.
            </summary>
            <param name="position"> The position you want to round.</param>
            <returns>
            The rounded pixel position.
            Depending on the values of upscaleRT and pixelSnapping, it could be a screen pixel position or an art pixel position.
            </returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.CorrectCinemachineOrthoSize(System.Single)">
            <summary>
            Find a pixel-perfect orthographic size as close to targetOrthoSize as possible. Used by Cinemachine to solve compatibility issues with Pixel Perfect Camera.
            </summary>
            <param name="targetOrthoSize">Orthographic size from the live Cinemachine Virtual Camera.</param>
            <returns>The corrected orthographic size.</returns>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.OnBeforeSerialize">
            <summary>
            OnBeforeSerialize implementation.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.PixelPerfectCamera.OnAfterDeserialize">
            <summary>
            OnAfterSerialize implementation.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderQueueType">
            <summary>
            The queue type for the objects to render.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderQueueType.Opaque">
            <summary>
            Use this for opaque objects.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderQueueType.Transparent">
            <summary>
            Use this for transparent objects.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderObjects">
            <summary>
            The class for the render objects renderer feature.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings">
            <summary>
            Settings class used for the render objects renderer feature.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.passTag">
            <summary>
            The profiler tag used with the pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.Event">
            <summary>
            Controls when the render pass executes.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.filterSettings">
            <summary>
            The filter settings for the pass.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.overrideMaterial">
            <summary>
            The override material to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.overrideMaterialPassIndex">
            <summary>
            The pass index to use with the override material.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.overrideShader">
            <summary>
            The override shader to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.overrideShaderPassIndex">
            <summary>
            The pass index to use with the override shader.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.OverrideMaterialMode">
            <summary>
            Options to select which type of override mode should be used.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.OverrideMaterialMode.None">
            <summary>
            Use this to not override.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.OverrideMaterialMode.Material">
            <summary>
            Use this to use an override material.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.OverrideMaterialMode.Shader">
            <summary>
            Use this to use an override shader.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.overrideMode">
            <summary>
            The selected override mode.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.overrideDepthState">
            <summary>
            Sets whether it should override depth or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.depthCompareFunction">
            <summary>
            The depth comparison function to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.enableWrite">
            <summary>
            Sets whether it should write to depth or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.stencilSettings">
            <summary>
            The stencil settings to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.RenderObjectsSettings.cameraSettings">
            <summary>
            The camera settings to use.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderObjects.FilterSettings">
            <summary>
            The filter settings used.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.FilterSettings.RenderQueueType">
            <summary>
            The queue type for the objects to render.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.FilterSettings.LayerMask">
            <summary>
            The layer mask to use.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.FilterSettings.PassNames">
            <summary>
            The passes to render.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjects.FilterSettings.#ctor">
            <summary>
            The constructor for the filter settings.
            </summary>
        </member>
        <member name="T:UnityEngine.Experimental.Rendering.Universal.RenderObjects.CustomCameraSettings">
            <summary>
            The settings for custom cameras values.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.CustomCameraSettings.overrideCamera">
            <summary>
            Used to mark whether camera values should be changed or not.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.CustomCameraSettings.restoreCamera">
            <summary>
            Should the values be reverted after rendering the objects?
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.CustomCameraSettings.offset">
            <summary>
            Changes the camera offset.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.CustomCameraSettings.cameraFieldOfView">
            <summary>
            Changes the camera field of view.
            </summary>
        </member>
        <member name="F:UnityEngine.Experimental.Rendering.Universal.RenderObjects.settings">
            <summary>
            The settings used for the Render Objects renderer feature.
            </summary>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjects.Create">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.Experimental.Rendering.Universal.RenderObjects.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="T:FullScreenPassRendererFeature">
            <summary>
            FullScreenPass is a renderer feature used to change screen appearance such as post processing effect. This implementation
            lets it's user create an effect with minimal code involvement.
            </summary>
        </member>
        <member name="T:FullScreenPassRendererFeature.InjectionPoint">
            <summary>
            An injection point for the full screen pass. This is similar to RenderPassEvent enum but limits to only supported events.
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.InjectionPoint.BeforeRenderingTransparents">
            <summary>
            Inject a full screen pass before transparents are rendered
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.InjectionPoint.BeforeRenderingPostProcessing">
            <summary>
            Inject a full screen pass before post processing is rendered
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.InjectionPoint.AfterRenderingPostProcessing">
            <summary>
            Inject a full screen pass after post processing is rendered
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.passMaterial">
            <summary>
            Material the Renderer Feature uses to render the effect.
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.injectionPoint">
            <summary>
            Selection for when the effect is rendered.
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.requirements">
            <summary>
            One or more requirements for pass. Based on chosen flags certain passes will be added to the pipeline.
            </summary>
        </member>
        <member name="F:FullScreenPassRendererFeature.passIndex">
            <summary>
            An index that tells renderer feature which pass to use if passMaterial contains more than one. Default is 0.
            We draw custom pass index entry with the custom dropdown inside FullScreenPassRendererFeatureEditor that sets this value.
            Setting it directly will be overridden by the editor class.
            </summary>
        </member>
        <member name="M:FullScreenPassRendererFeature.Create">
            <inheritdoc/>
        </member>
        <member name="M:FullScreenPassRendererFeature.AddRenderPasses(UnityEngine.Rendering.Universal.ScriptableRenderer,UnityEngine.Rendering.Universal.RenderingData@)">
            <inheritdoc/>
        </member>
        <member name="M:FullScreenPassRendererFeature.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
