<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Entities.Editor</name>
    </assembly>
    <members>
        <member name="M:Unity.Entities.Editor.VisualElementExtensions.ElementAtTreePath(UnityEngine.UIElements.VisualElement,System.Collections.Generic.List{System.Int32})">
            <summary>
            Retrieves a specific child element by following a path of element indexes down through the visual tree.
            Use this method along with <see cref="M:Unity.Entities.Editor.VisualElementExtensions.FindElementInTree(UnityEngine.UIElements.VisualElement,UnityEngine.UIElements.VisualElement,System.Collections.Generic.List{System.Int32})"/>.
            </summary>
            <param name="childIndexes">An array of indexes that represents the path of elements that this method follows through the visual tree.</param>
            <returns>The child element, or null if the child is not found.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.EntityBakingPreview.State">
            <summary>
            Helper container to store session state data per <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.State.ShowAdditionalEntities">
            <summary>
            This field controls the toggle/foldout for additional entities. This is independent of the additional entity index.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.State.AdditionalEntityIndex">
            <summary>
            The selected index for additional entities. This value is preserved even when toggling <see cref="F:Unity.Entities.Editor.EntityBakingPreview.State.ShowAdditionalEntities"/>
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.State.SelectedComponentTypes">
            <summary>
            The set of currently selected component type indices. These are the components that have fields drawn in the preview window.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityBakingPreview.SharedState">
            <summary>
            Helper container to store session state data for the all instances of <see cref="T:Unity.Entities.Editor.EntityBakingPreview"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.SharedState.SelectedWorldIndex">
            <summary>
            The currently selected <see cref="T:Unity.Entities.World"/> in the drop-down.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.m_State">
            <summary>
            State data per <see cref="T:UnityEngine.GameObject"/>. This data is persisted between domain reloads.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.m_SharedState">
            <summary>
            State data for all instances of <see cref="T:Unity.Entities.Editor.EntityBakingPreview"/>. This data is persisted between domain reloads.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.m_RuntimeComponentsDrawer">
            <summary>
            Helper structure to drawn runtime component data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.m_ChangeTracker">
            <summary>
            Helper class to detect changes to entities that derive from a given set of gameObjects.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityBakingPreview.m_GameObjectTargets">
            <summary>
            This is used to keep the current targets of the preview. This should be used instead of `ObjectPreview.target`
            and `ObjectPreview.m_Targets` because we need to override the default behaviour of multi-selection. This is
            achieved by "forcing" single selection on the preview <see cref="M:Unity.Entities.Editor.EntityBakingPreview.Initialize(UnityEngine.Object[])"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.GetCurrentlySelectedWorld">
            <summary>
            Gets the currently selected <see cref="T:Unity.Entities.World"/> in the preview window for the current session.
            </summary>
            <returns>The currently selected <see cref="T:Unity.Entities.World"/>.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.Initialize(UnityEngine.Object[])">
            <summary>
            Called when the preview gets created.
            </summary>
            <param name="targets">The selected <see cref="T:UnityEngine.Object"/> to preview.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.HasPreviewGUI">
            <summary>
            Called to determine if the targeted <see cref="T:UnityEngine.Object"/> can be previewed in its current state.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.GetPreviewTitle">
            <summary>
            Called to get the content label of the preview header.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.OnPreviewSettings">
            <summary>
            Called to implement custom controls in the preview header.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
            <summary>
            Called to implement custom controls in the preview window.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.Update">
            <summary>
            Called by <see cref="F:UnityEditor.EditorApplication.update"/> ~100 per second.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.GetInspectorTargets(System.Collections.Generic.IReadOnlyList{Unity.Entities.Editor.EntityBakingData},Unity.Entities.Editor.EntityBakingPreview.State,System.Collections.Generic.List{Unity.Entities.EntityContainer})">
            <summary>
            Given a set of <see cref="T:Unity.Entities.Editor.EntityBakingData"/> and the current preview state, this method will return a set of <see cref="T:Unity.Entities.EntityContainer"/> which should be inspected.
            </summary>
            <param name="bakingDataEntries">The set of currently selected objects.</param>
            <param name="state">The current <see cref="T:Unity.Entities.Editor.EntityBakingPreview"/> state.</param>
            <param name="result">The <see cref="T:Unity.Entities.EntityContainer"/> instances which should be inspected.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityBakingPreview.GetCommonComponentTypes(System.Collections.Generic.IReadOnlyList{Unity.Entities.EntityContainer},System.Collections.Generic.List{Unity.Entities.ComponentType})">
            <summary>
            Given a set of <see cref="T:Unity.Entities.EntityContainer"/> this method will return the set of <see cref="T:Unity.Entities.ComponentType"/> that are common to all of them.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ISearchBackend">
            <summary>
            The <see cref="T:Unity.Entities.Editor.ISearchBackend"/> is responsible for parsing a given input string and generating an <see cref="T:Unity.Entities.Editor.ISearchQuery`1"/> object.
            </summary>
            <remarks>
            The backend is expected to manage the given search data properties and callback functions.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend.AddSearchDataProperty(Unity.Properties.PropertyPath)">
            <summary>
            Adds the given <see cref="T:Unity.Properties.PropertyPath"/> to the set of searchable data.
            </summary>
            <param name="path">The path to a member within the search data type.</param>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend.AddSearchFilterProperty(System.String,Unity.Properties.PropertyPath,Unity.Entities.Editor.SearchFilterOptions)">
            <summary>
            Adds a search filter callback to the backend. The value at the given <see cref="T:Unity.Properties.PropertyPath"/> will be compared in a strongly typed way with the parsed search text.
            </summary>
            <param name="token">The token which binds to the given path.</param>
            <param name="path">The path to a member within the search data that will be compared with the search text.</param>
            <param name="options">The set of filter options.</param>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend.AddSearchOperatorHandler``2(System.String,System.Func{``0,``1,System.Boolean})">
            <summary>
            Add a custom filter operator handler.
            </summary>
            <typeparam name="TFilterVariable">The operator's left hand side type. This is the type returned by a filter handler.</typeparam>
            <typeparam name="TFilterConstant">The operator's right hand side type.</typeparam>
            <param name="op">The filter operator.</param>
            <param name="handler">Callback to handle the operation. Takes a TFilterVariable (value returned by the filter handler, will vary for each element) and a TFilterConstant (right hand side value of the operator, which is constant), and returns a boolean indicating if the filter passes or not.</param>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend.AddSearchOperatorHandler``2(System.String,System.Func{``0,``1,System.StringComparison,System.Boolean})">
            <summary>
            Add a custom filter operator handler.
            </summary>
            <typeparam name="TFilterVariable">The operator's left hand side type. This is the type returned by a filter handler.</typeparam>
            <typeparam name="TFilterConstant">The operator's right hand side type.</typeparam>
            <param name="op">The filter operator.</param>
            <param name="handler">Callback to handle the operation. Takes a TFilterVariable (value returned by the filter handler, will vary for each element), a TFilterConstant (right hand side value of the operator, which is constant), a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchBackend.GlobalStringComparison">
            <summary>
            String comparison options for word matching and filter handling (if not overridden).
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ISearchBackend`1">
            <summary>
            The <see cref="T:Unity.Entities.Editor.ISearchBackend"/> is responsible for parsing a given input string and generating an <see cref="T:Unity.Entities.Editor.ISearchQuery`1"/> object.
            </summary>
            <remarks>
            The backend is expected to manage the given search data properties and callback functions.
            </remarks>
            <typeparam name="TData">The data type this backend handles.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend`1.AddSearchDataCallback(System.Func{`0,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds a search data callback to the backend. This function can be used to return a set of data which will be compared against the search string.
            </summary>
            <param name="getSearchDataFunc">The callback which can be used to return a set of searchable data for a given <see cref="!:TData"/>.</param>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend`1.AddSearchFilterCallback``1(System.String,System.Func{`0,``0},Unity.Entities.Editor.SearchFilterOptions)">
            <summary>
            Adds a search filter callback to the backend. This function can be used to return a strongly typed value which can be compared against the search string for a given token.
            </summary>
            <param name="token">The token which binds to the given filter function.</param>
            <param name="getFilterDataFunc">The filter callback which returns a strongly typed value from <see cref="!:TData"/>.</param>
            <param name="options">The set of filter options.</param>
            <typeparam name="TFilter">The strongly typed value.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchBackend`1.Parse(System.String)">
            <summary>
            Applies the given search text and generates a query object which can be applied to a collection of <see cref="!:TData"/> objects.
            </summary>
            <param name="text">The search string.</param>
            <returns>A <see cref="T:Unity.Entities.Editor.ISearchQuery`1"/> which can be applied to data to generate a filtered set.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.FilterOperator">
            <summary>
            Helper class to get and apply filters without using the com.unity.quicksearch package.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.FilterOperator.GetSupportedOperators``1">
            <summary>
            Gets the available operator types for the specified type.
            </summary>
            <typeparam name="T">The type to get filters for.</typeparam>
            <returns>An array of operator tokens.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyImmutableNodeData">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyImmutableNodeData"/> represents a node in the linear baked hierarchy.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/> represents a mutable tree data model to reflect the world hierarchy.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore.Immutable">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodeStore.Immutable"/> structure represents a baked out version of the <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/> in depth-first order.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.Immutable.m_HandleNodes">
            <summary>
            The depth first packed hierarchy data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.Immutable.m_EntityNodes">
            <summary>
            A set of custom root entities. This is to handle a high volume of root entities (something common in dots).
            </summary>
            <remarks>
            This array has a padding at the front since it uses negative indexing.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.Immutable.m_IndexByEntity">
            <summary>
            The packed index per entity which maps to the packed sets <see cref="F:Unity.Entities.Editor.HierarchyNodeStore.Immutable.m_HandleNodes"/> and <see cref="F:Unity.Entities.Editor.HierarchyNodeStore.Immutable.m_EntityNodes"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.Immutable.m_IndexByHandle">
            <summary>
            The packed index per non-entity handle.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeStore.Immutable.IsCreated">
            <summary>
            Gets a value indicating if the packed hierarchy has been initialized or not.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeStore.Immutable.ChangeVersion">
            <summary>
            Gets the current change version for the packed hierarchy.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeStore.Immutable.Count">
            <summary>
            Returns the number of valid nodes that exist in the hierarchy.
            </summary>
            <returns>The number of nodes that exist in the hierarchy.</returns>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeStore.Immutable.CountHierarchicalNodes">
            <summary>
            Returns the number of 'hierarchical' nodes. i.e. nodes which have some parent, child relationships.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Immutable.Clear">
            <summary>
            Clears the data from this packed hierarchy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Immutable.Exists(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns <see langword="true"/> if the given handle exists in the hierarchy.
            </summary>
            <param name="handle">The handle to check existence for.</param>
            <returns><see langword="true"/> if the given handle exists; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Immutable.GetRoot">
            <summary>
            Gets the root node for the <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Immutable.GetNode(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets the <see cref="T:Unity.Entities.Editor.HierarchyNode"/> for the given handle.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Immutable.GetNode(System.Int32)">
            <summary>
            Gets the <see cref="T:Unity.Entities.Editor.HierarchyNode"/> for the given handle.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Immutable.IndexOf(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns the packed index for the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the index for.</param>
            <returns>The packed index for the given handle.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore.ExportImmutableState">
            <summary>
            The state object used to execute the 'ExportImmutable' method over several ticks.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeStore.ExportImmutableEnumerator.Progress">
            <summary>
            Returns the enumerator progress. This is an estimate and should not be relied upon for any logic.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.CreateBuildImmutableEnumerator(Unity.Entities.World,Unity.Entities.Editor.HierarchyNodeStore.ExportImmutableState,Unity.Entities.Editor.HierarchyNodeStore.Immutable,Unity.Entities.Editor.HierarchyNodeStore.Immutable,System.Int32)">
            <summary>
            Creates an enumerator which will write out the immutable hierarchy over several ticks.
            </summary>
            <param name="world">The world holding the data.</param>
            <param name="state">The re-usable state object use to maintain state between ticks.</param>
            <param name="dstBuffer">The buffer to write to.</param>
            <param name="srcBuffer">The buffer to read from; this accelerates performance by allowing re-use of previously baked data.</param>
            <param name="batchSize">The amount of nodes to process per tick.</param>
            <returns>An enumerator which can be ticked.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore.ExportImmutableHierarchyNodesBatchJob">
            <summary>
            This job is responsible for baking out a linear set of nodes with offsets.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.ExportImmutableHierarchyNodesBatchJob.BeginBatch">
            <summary>
            Copy state values to local members to avoid pointer lookups in hot paths.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.ExportImmutableHierarchyNodesBatchJob.EndBatch">
            <summary>
            Copy state values back to the shared state.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore.HierarchyNodeData">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodeStore.HierarchyNodeData"/> represents the actual data for a given hierarchy node.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.HierarchyNodeData.ChangeVersion">
            <summary>
            The last change version for this node.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.HierarchyNodeData.Parent">
            <summary>
            The parent handle for this node.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.HierarchyNodeData.SortIndex">
            <summary>
            The sorting key for this node; this is relative to it's siblings.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.HierarchyNodeData.Flags">
            <summary>
            Additional node metadata. This information is passed along to the packed set.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.m_Nodes">
            <summary>
            Internal storage for node data. This abstracts the way we get and set node data and allows optimal performance and storage for specific node types.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.m_Children">
            <summary>
            The children mapping for nodes.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeStore.m_SceneReferenceEntityToScene">
            <summary>
            Mapping scene reference entity to the <see cref="T:UnityEngine.SceneManagement.Scene"/> it belongs to.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeStore.ChangeVersion">
            <summary>
            Returns the current change version for the hierarchy. This value is incremented every time the hierarchy is exported to the immutable set.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.#ctor(Unity.Collections.Allocator)">
            <summary>
            Initializes a new <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/> instance.
            </summary>
            <param name="allocator">The allocator to use for internal storage.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Clear">
            <summary>
            Clears the internal data for this hierarchy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Count">
            <summary>
            Returns the number of valid nodes that exist in the hierarchy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.Exists(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns <see langword="true"/> if the given handle exists in the hierarchy.
            </summary>
            <param name="handle">The handle to check existence for.</param>
            <returns><see langword="true"/> if the given handle exists; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetRoot">
            <summary>
            Gets the root node for the <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetNode(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets the <see cref="T:Unity.Entities.Editor.HierarchyNode"/> for the given handle.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.AddNode(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Adds a new node to the hierarchy.
            </summary>
            <param name="handle">The handle for the new node.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.AddNode(Unity.Entities.Editor.HierarchyNodeHandle,Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Adds a new node to the hierarchy with a specified parent node.
            </summary>
            <param name="handle">The handle for the new node.</param>
            <param name="parent">The parent for the new node.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.RemoveNode(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Removes the specified node from the hierarchy.
            </summary>
            <param name="handle">The node to remove.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetChildCount(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns the number of children for the specified <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the child count for.</param>
            <returns>The number of children for the specified handle.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetChildren(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets all children for the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/> and returns them as a new array.
            </summary>
            <param name="handle">The handle to get children for.</param>
            <returns>A new array containing all child nodes.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetChildren(Unity.Entities.Editor.HierarchyNodeHandle,System.Collections.Generic.List{Unity.Entities.Editor.HierarchyNode})">
            <summary>
            Gets all children for the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/> and adds them to the given <see cref="!:children"/> list.
            </summary>
            <param name="handle">The handle to get children for.</param>
            <param name="children">The list to add children to.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetDepth(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets the depth for the specified <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the depth for.</param>
            <returns>The depth of the specified node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetSortIndex(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets the sorting index for the specified <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the sort index for.</param>
            <returns>The sort index for the specified handle.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.SetSortIndex(Unity.Entities.Editor.HierarchyNodeHandle,System.Int32)">
            <summary>
            Sets the sorting index for the specified <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to set the sort index for.</param>
            <param name="index">The value to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.GetParent(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets the parent for the specified <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the parent for.</param>
            <returns>The parent of the specified node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.SetParent(Unity.Entities.Editor.HierarchyNodeHandle,Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Sets the parent for the specified <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to set the parent for.</param>
            <param name="parent">The parent value to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.SetPrefabStage(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Sets the specified node as part of a prefab stage.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.IncrementChangeVersion">
            <summary>
            Increments the internal change version.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore.HierarchyEntityChangesBatch">
            <summary>
            Represents a batch of changes to be integrated in to the dynamic hierarchy model.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeStore.HierarchyEntityChangesBatch.ChangeType">
            <summary>
            !!IMPORTANT!! This is the order we will process elements for the batch.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeStore.CreateIntegrateEntityChangesEnumerator(Unity.Entities.World,Unity.Entities.Editor.HierarchyEntityChanges,System.Int32,Unity.Collections.NativeParallelHashMap{Unity.Entities.SceneTag,Unity.Entities.Editor.HierarchyNodeHandle})">
            <summary>
            Creates an enumerator which will integrate the given entity changes over several ticks.
            </summary>
            <param name="world">The world being operated on.</param>
            <param name="changes">The entity changes to apply.</param>
            <param name="batchSize">The number of changes to integrate per tick.</param>
            <returns>An enumerator which can be ticked.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeHandle">
            <summary>
            A <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/> specifies the storage type and location for a specific node within the <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.Inspectors.EntityField">
            <summary>
              <para>Provides an Element displaying an <see cref="T:Unity.Entities.Entity"/>.</para>
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Inspectors.EntityField.World">
            <summary>
            Sets/Gets the <see cref="P:Unity.Entities.Editor.Inspectors.EntityField.World"/> that contains the <see cref="T:Unity.Entities.Entity"/>. If <see langword="null"/>, the field will not
            show the entity name.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.Inspectors.EntityField.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.Inspectors.EntityField"/> with no label.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.Inspectors.EntityField.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.Inspectors.EntityField"/> with a label.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="P:Unity.Entities.Editor.Inspectors.EntityField.value">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Editor.Inspectors.EntityField.SetValueWithoutNotify(Unity.Entities.Entity)">
            <inheritdoc/>
        </member>
        <member name="F:Unity.Entities.Editor.GameObjectBakingResultStatus.NotBaked">
            <summary>
            This <see cref="T:UnityEngine.GameObject"/> will not be baked.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.GameObjectBakingResultStatus.BakedBySubScene">
            <summary>
            This <see cref="T:UnityEngine.GameObject"/> will be baked because it is part of a sub-scene.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.GameObjectBakingEditorUtility.GetGameObjectBakingResultStatus(UnityEngine.GameObject)">
            <summary>
            Returns an enum detailing if the given <see cref="T:UnityEngine.GameObject"/> will be baked and how.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to be converted.</param>
            <returns>A <see cref="T:Unity.Entities.Editor.GameObjectBakingResultStatus"/> code detailing how the <see cref="T:UnityEngine.GameObject"/> will be baked.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.IPlayerLoopNode">
            <summary>
            Interface to abstract heterogeneous elements of the <see cref="T:UnityEngine.LowLevel.PlayerLoopSystem"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.Parent">
            <summary>
            Returns the <see cref="T:Unity.Entities.Editor.IPlayerLoopNode"/> parent of the node.
            </summary>
            <remarks>Will be <see langword="null"/> for root items.</remarks>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.Children">
            <summary>
            Returns the children of the node.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.Name">
            <summary>
            Returns the display name of the node.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.NameWithWorld">
            <summary>
            Returns the display name of the node when inspecting the full player loop.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.Enabled">
            <summary>
            Returns <see langword="true"/> if the current node is enabled, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.EnabledInHierarchy">
            <summary>
            Returns <see langword="true"/> if the current node and all its ancestors are enabled, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.Hash">
            <summary>
            Returns the hash code of the fullname.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IPlayerLoopNode.ShowForWorldProxy(Unity.Entities.Editor.WorldProxy)">
            <summary>
            Returns <see langword="true"/> if the current node is part of the provided world.
            </summary>
            <param name="world">The World.</param>
            <returns><see langword="true"/> if we should show the node for the current world; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Unity.Entities.Editor.IPlayerLoopNode.IsRunning">
            <summary>
            Returns <see langword="true"/> if the current node is considered as running.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ComponentDataDiffer">
            <summary>
            The <see cref="T:Unity.Entities.Editor.ComponentDataDiffer"/> is use to efficiently track changes for a given <see cref="T:Unity.Entities.IComponentData"/> type over time.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ComponentDataDiffer.ChangeSet">
            <summary>
            The structure returned when gathering changes. This can be used to unpack all changes since the last diff.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ComponentDataDiffer.ChangeSet.AddedComponentCount">
            <summary>
            The number of add component records in this change set.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ComponentDataDiffer.ChangeSet.RemovedComponentCount">
            <summary>
            The number of remove component records in this change set.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.ComponentDataDiffer.ChangeSet.#ctor(Unity.Entities.TypeIndex,Unity.Collections.Allocator)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.ComponentDataDiffer.ChangeSet"/>.
            </summary>
            <param name="typeIndex">The type index this change-set contains changes for.</param>
            <param name="allocator">The allocator type to use when constructing this instance.</param>
        </member>
        <member name="T:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow">
            <summary>
            A chunk shadow is used to retain a copy of all <see cref="T:Unity.Entities.Entity"/> data with the tracked component type. This is compared against the current state of the world to detect which data and therefore entities have changed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.Count">
            <summary>
            The number of entities the tracked chunk has during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.ComponentVersion">
            <summary>
            The component version for the tracked chunk during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.EntityVersion">
            <summary>
            The entity version for the tracked chunk during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.Entities">
            <summary>
            A copy of all entities in this chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.Components">
            <summary>
            A copy of the tracked component data in this chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.SequenceNumber">
            <summary>
            The sequence number of the tracked chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow.Data.Index">
            <summary>
            The index this of this chunk in the internal <see cref="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> list.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ComponentDataDiffer.ChunkChanges">
            <summary>
            A set of changes for a given <see cref="F:Unity.Entities.Editor.ComponentDataDiffer.ChunkChanges.Chunk"/>. This is an internal data structure used during the diffing process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_TypeIndex">
            <summary>
            The type index for the tracked component.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_ComponentSize">
            <summary>
            The component size of the tracked component.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumber">
            <summary>
            This map stores a <see cref="T:Unity.Entities.Editor.ComponentDataDiffer.ChunkShadow"/> per chunk in the world we are tracking. NOTE: This only considered chunks which match our original input query.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys">
            <summary>
            This list stores a cached version of the <see cref="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumber"/> keys. This is incrementally updated an used to accelerate lookups and avoid a rebuild each diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumberKeysFreeList">
            <summary>
            The free indices for <see cref="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> in the <see cref="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> for recently destroyed shadow chunks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChunkSequenceNumbers">
            <summary>
            The buffer use to track all live chunks in the world during the diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_AllocatedChunkShadowByChunk">
            <summary>
            The buffer used when allocating chunk shadows within a diff tick. This is a sparse array sized to the total chunks being processed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_ChangesByChunk">
            <summary>
            The buffer used when gathering chunk changes for the diff. This is sparse array sized to the total chunks being processed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_RemovedChunks">
            <summary>
            The buffer used to gather removed chunks for the diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_RemovedEntities">
            <summary>
            The buffer used to gather removed entities from within the removed chunks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.ComponentDataDiffer.m_RemovedComponents">
            <summary>
            The buffer used to gather removed component data from within the removed chunks.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.ComponentDataDiffer.CanWatch(Unity.Entities.ComponentType)">
            <summary>
            Returns true if the given <see cref="!:componentType"/> can be watched by a <see cref="T:Unity.Entities.Editor.ComponentDataDiffer"/>.
            </summary>
            <param name="componentType">The component type to check</param>
            <returns><see langword="true"/> if the specified component type can be watched. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.ComponentDataDiffer.#ctor(Unity.Entities.ComponentType)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Editor.ComponentDataDiffer"/>.
            </summary>
            <param name="componentType">The component type to diff.</param>
            <exception cref="T:System.ArgumentException">The specified component can not be watched by the differ.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.ComponentDataDiffer.GatherComponentChanges(Unity.Entities.EntityQuery,Unity.Collections.Allocator)">
            <summary>
            Returns a change set with all changes to the tracked component since the last time this method was called.
            </summary>
            <param name="query">The set of entities to track.</param>
            <param name="allocator">The allocator to use for the returned data.</param>
            <returns>A change set with all changes since the last call to this method.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNameStore">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNameStore"/> struct represents a virtual view over node names.
            This can be used to efficiently access the name for a given node based on it's internal storage.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNameStore.Formatting">
            <summary>
            Bursted string formatting over native strings.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.WorldListChangeTracker">
            <summary>
            Detect world list changes when new worlds are created or old worlds are destroyed.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.WorldListChangeTracker.HasChanged">
            <returns>If called after World(s) have been created or destroyed, will return true *once*.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.LayerFieldDrawer">
            <summary>
            Custom drawer for a LayerField dropdown.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityAspectPropertyBag`1">
            <summary>
            The <see cref="T:Unity.Entities.Editor.EntityAspectPropertyBag`1"/> exposes all properties of an underlying <see cref="!:TAspect"/> in a safe way.
            </summary>
            <typeparam name="TAspect">The aspect which the <see cref="T:Unity.Entities.Editor.EntityAspectContainer`1"/> wraps.</typeparam>
        </member>
        <member name="T:Unity.Entities.Editor.EntityAspectProperty`2">
            <summary>
            The <see cref="T:Unity.Entities.Editor.EntityAspectProperty`2"/> is used to safely access individual properties of a aspect.
            </summary>
            <typeparam name="TAspect">The aspect which this property wraps.</typeparam>
            <typeparam name="TValue">The declared value type for this property.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.UITemplate.Clone(UnityEngine.UIElements.VisualElement)">
            <summary>
            Clones the template into the given root element and applies the style sheets from the template.
            </summary>
            <param name="root">The element that will serve as the root for cloning the template.</param>
        </member>
        <member name="M:Unity.Entities.Editor.AutoComplete.#ctor(UnityEngine.UIElements.VisualElement,Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior)">
            <summary>
            Enable auto completion on the given <see cref="T:UnityEngine.UIElements.VisualElement"/> using the given behavior.
            The given <see cref="T:UnityEngine.UIElements.VisualElement"/> is expected to be or contain a <see cref="T:UnityEngine.UIElements.TextField"/>.
            </summary>
            <param name="element">The <see cref="T:UnityEngine.UIElements.VisualElement"/> to attach the completion box to. This is expected to be or contain a <see cref="T:UnityEngine.UIElements.TextField"/></param>
            <param name="behavior">The instance of <see cref="T:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior"/> to use to drive the completion behavior</param>
            <returns>The <see cref="T:Unity.Entities.Editor.AutoComplete"/> instance created, typically used to disable the completion behavior when needed or to operate on it by code</returns>
        </member>
        <member name="T:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior">
            <summary>
            Interface driving the auto complete behavior. Typically implemented by a singleton.
            This allows you to determine when a input should open the completion box, which data to put in it and how the completed string will fit in the source textfield text once completed.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior.ShouldStartAutoCompletion(System.String,System.Int32)">
            <summary>
            Determines if the autocomplete box should be visible based on the current input string and with the current caret position.
            </summary>
            <param name="input">The full value of the underlying textfield text</param>
            <param name="caretPosition">The current position of the caret in the <paramref name="input"/></param>
            <returns>True to show the completion box</returns>
        </member>
        <member name="M:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior.GetToken(System.String,System.Int32)">
            <summary>
            Extracts the token (or substring) that is currently being completed.
            <example>If the <paramref name="input"/> is "hello world 42" and <paramref name="caretPosition"/> is 11 (just after "world") the token will most likely be "world"</example>
            </summary>
            <param name="input">The full value of the underlying textfield text</param>
            <param name="caretPosition">The current position of the caret in the <paramref name="input"/></param>
            <returns>The token extracted from the input</returns>
        </member>
        <member name="M:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior.GetCompletionItems(System.String,System.Int32)">
            <summary>
            Retrieve items to include in the completion box based on <paramref name="input"/> string and <paramref name="caretPosition"/>
            </summary>
            <param name="input">The full value of the underlying textfield text</param>
            <param name="caretPosition">The current position of the caret in the <paramref name="input"/></param>
            <returns>The collection of string that can complete the current token being completed</returns>
        </member>
        <member name="M:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior.OnCompletion(System.String,System.String,System.Int32)">
            <summary>
            Called when a completion is done. Based on the completed token, the full input and caret position returns the new full input string and new caret position.
            </summary>
            <param name="completedToken">the selected item from the completion items that will complete the current token being completed</param>
            <param name="input">The full value of the underlying textfield text</param>
            <param name="caretPosition">The current position of the caret in the <paramref name="input"/></param>
            <returns>The new full input and the caret position in this new input string</returns>
        </member>
        <member name="M:Unity.Entities.Editor.AutoCompleteExtension.EnableAutoComplete(UnityEngine.UIElements.VisualElement,Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior)">
            <summary>
            Enable auto completion on the given <see cref="T:UnityEngine.UIElements.VisualElement"/> using the given behavior.
            The given <see cref="T:UnityEngine.UIElements.VisualElement"/> is expected to be or contain a <see cref="T:UnityEngine.UIElements.TextField"/>.
            </summary>
            <param name="this">The <see cref="T:UnityEngine.UIElements.VisualElement"/> to attach the completion box to. This is expected to be or contain a <see cref="T:UnityEngine.UIElements.TextField"/></param>
            <param name="behavior">The instance of <see cref="T:Unity.Entities.Editor.AutoComplete.IAutoCompleteBehavior"/> to use to drive the completion behavior</param>
            <returns>The <see cref="T:Unity.Entities.Editor.AutoComplete"/> instance created, typically used to disable the completion behavior when needed or to operate on it by code</returns>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyWindow.m_GlobalSelectionRequest">
            <summary>
            Flag indicating we should try to apply the global selection on the next update cycle.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyWindow.m_GlobalSelectionRequestUpdateVersion">
            <summary>
            The update version this request was made at.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyWindow.DebugContentProvider">
             <summary>
             The <see cref="T:Unity.Entities.UI.ContentProvider"/> for the internal hierarchy debug properties.
            
             @FIXME There is an issue during a domain reload. The window must be closed and re-opened.
             </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyWindow.DebugContent">
            <summary>
            The data being shown in the hierarchy properties window. Currently we show the serialized state and the stats.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.IHierarchyItemDecorator">
            <summary>
            Implement this interface to inject custom behavior to the hierarchy list element(s).
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IHierarchyItemDecorator.OnCreateItem(Unity.Entities.Editor.HierarchyListViewItem)">
            <summary>
            Invoked once when the hierarchy element is constructed before any data is bound. Use this method to construct any common elements that should always be present.
            </summary>
            <param name="item">The hierarchy item visual element.</param>
        </member>
        <member name="M:Unity.Entities.Editor.IHierarchyItemDecorator.OnBindItem(Unity.Entities.Editor.HierarchyListViewItem,Unity.Entities.Editor.HierarchyNode.Immutable)">
            <summary>
            Invoked when an element is bound to a new data source.
            </summary>
            <remarks>
            This method can be called multiple times with the same data source.
            </remarks>
            <param name="item">The hierarchy item visual element.</param>
            <param name="node">The node data.</param>
        </member>
        <member name="M:Unity.Entities.Editor.IHierarchyItemDecorator.OnUnbindItem(Unity.Entities.Editor.HierarchyListViewItem)">
            <summary>
            Invoked when an element is unbound from an existing data source.
            </summary>
            <remarks>
            This is not called 1:1 with <see cref="M:Unity.Entities.Editor.IHierarchyItemDecorator.OnBindItem(Unity.Entities.Editor.HierarchyListViewItem,Unity.Entities.Editor.HierarchyNode.Immutable)"/>.
            </remarks>
            <param name="item">The hierarchy item visual element.</param>
        </member>
        <member name="M:Unity.Entities.Editor.IHierarchyItemDecorator.OnDestroyItem(Unity.Entities.Editor.HierarchyListViewItem)">
            <summary>
            Invoked when an element is destroyed by the tree view.
            </summary>
            <param name="item">The hierarchy item visual element.</param>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyListViewItem">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyListViewItem"/> represents the visual elements for a single row in the hierarchy.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyListViewItem.k_UpdateRate">
            <summary>
            The interval between updates in milliseconds.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.Index">
            <summary>
            The current index this element is bound to.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.Handle">
            <summary>
            The current handle this element is bound to.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.GameObject">
            <summary>
            Gets the <see cref="P:Unity.Entities.Editor.HierarchyListViewItem.GameObject"/> this element is bound to, if any; null otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.Entity">
            <summary>
            Gets the <see cref="P:Unity.Entities.Editor.HierarchyListViewItem.Entity"/> this element is bound to, if any; Entity.Null otherwise.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.World">
            <summary>
            Returns the currently active world for the hierarchy.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.PrefabType">
            <summary>
            Gets the <see cref="T:Unity.Entities.Editor.Hierarchy.HierarchyPrefabType"/> for this element.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.DataMode">
            <summary>
            Gets the <see cref="P:Unity.Entities.Editor.Hierarchy.DataMode"/> for this element.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.NameLabel">
            <summary>
            The label representing the name for this element.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.Icon">
            <summary>
            The VisualElement representing the displayed Icon for this element.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.Column1">
            <summary>
            The VisualElement representing the first column (containing the dropdown, icon and label).
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyListViewItem.Column2">
            <summary>
            The VisualElement representing the second, right-hand column.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyListViewItem.Reset">
            <summary>
            Clears the any binding data for this visual element.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyListViewItem.UpdateIndentColor">
            <summary>
            The left indent is used for both the runtime (orange) and prefab override (blue) bars. We should never have a situation where we need to show both.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.StyleSheetWithVariant">
            <summary>
            Utility class to handle loading and adding a <see cref="T:UnityEngine.UIElements.StyleSheet"/>, along with its pro skin variant.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.StyleSheetWithVariant.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Unity.Entities.Editor.StyleSheetWithVariant"/>.
            </summary>
            <param name="name">The name of the uss asset, without extension.</param>
        </member>
        <member name="M:Unity.Entities.Editor.StyleSheetWithVariant.#ctor(System.String,System.String)">
            <summary>
            Construct a new <see cref="T:Unity.Entities.Editor.StyleSheetWithVariant"/>, and load assets from a package.
            </summary>
            <param name="packageId">The package identifier.</param>
            <param name="name">The name of the uss asset, without extension.</param>
        </member>
        <member name="M:Unity.Entities.Editor.StyleSheetWithVariant.AddStyles(UnityEngine.UIElements.VisualElement)">
            <summary>
            Add this style sheet to the specified visual element.
            </summary>
            <param name="element">The visual element to add styles to.</param>
        </member>
        <member name="M:Unity.Entities.Editor.StyleSheetWithVariant.RemoveStyles(UnityEngine.UIElements.VisualElement)">
            <summary>
            Remove this style sheet from the specified visual element.
            </summary>
            <param name="element">The visual element to remove styles from.</param>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchySearch">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchySearch"/> is used to handle the shared state for searching/filtering.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchySearch.m_HierarchyNameStore">
            <summary>
            The underlying hierarchy.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchySearch.m_EntityNameStorageMask">
            <summary>
            A persisted bitmask cache over the <see cref="T:Unity.Entities.EntityNameStorage"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchySearch.m_World">
            <summary>
            The world this search operates on.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchySearch.m_EntityQueryCache">
            <summary>
            A cached version of the <see cref="T:Unity.Entities.EntityQuery"/> to avoid constructing it each time.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchySearch.ExcludeUnnamedNodes">
            <summary>
            If true; unnamed nodes are skipped during name filtering.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchySearch.ApplyNameFilter(Unity.Entities.Editor.HierarchyNodeStore.Immutable,Unity.Collections.NativeList{Unity.Collections.FixedString64Bytes},Unity.Collections.NativeBitArray)">
            <summary>
            Applies name filtering based on the given tokens.
            </summary>
            <param name="nodes">The source nodes being filtered.</param>
            <param name="tokens">The search tokens.</param>
            <param name="mask">The bitmask of currently included nodes.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchySearch.ApplyIncludeSubSceneFilter(Unity.Entities.Editor.HierarchyNodeStore.Immutable,Unity.Collections.NativeBitArray)">
            <summary>
            Applies scene filtering. This includes a scene node if ANY sub elements are already included.
            </summary>
            <param name="nodes"></param>
            <param name="mask"></param>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchySearch.BuildEntityNameStoragePatternCacheLowerInvariant`1">
            <summary>
            Bursted job to compute a search pattern bitmask directly over the <see cref="T:Unity.Entities.EntityNameStorage"/>.
            </summary>
            <typeparam name="TPattern">A fixed string pattern type.</typeparam>
        </member>
        <member name="T:Unity.Entities.Editor.EntityInspectorComponentStructure">
            <summary>
            Helper type to contain the component order of a given entity.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SettingsAttribute">
            <summary>
            Base attribute to tag a <see cref="T:Unity.Entities.Editor.ISetting"/> derived class as a setting.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SettingsAttribute.SectionName">
            <summary>
            The name of the section to use for the setting.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SettingsAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.SettingsAttribute"/> with the provided section name.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="T:Unity.Entities.Editor.VisualElementTemplate">
            <summary>
            Utility class to handle loading and cloning a <see cref="T:UnityEngine.UIElements.VisualTreeAsset"/>, along with its <see cref="T:UnityEngine.UIElements.StyleSheet"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.VisualElementTemplate.#ctor(System.String)">
            <summary>
            Construct a new VisualElementTemplate.
            </summary>
            <param name="name">The name of the uxml asset, without extension.</param>
        </member>
        <member name="M:Unity.Entities.Editor.VisualElementTemplate.#ctor(System.String,System.String)">
            <summary>
            Construct a new VisualElementTemplate, and load assets from a package.
            </summary>
            <param name="packageId">The package identifier.</param>
            <param name="name">The name of the uxml asset, without extension.</param>
        </member>
        <member name="M:Unity.Entities.Editor.VisualElementTemplate.Clone(UnityEngine.UIElements.VisualElement)">
            <summary>
            Instantiate the visual element template.
            </summary>
            <param name="root">Optional parent of the visual element template.</param>
            <returns>An instance of the visual element template.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.VisualElementTemplate.AddStyles(UnityEngine.UIElements.VisualElement)">
            <summary>
            Add this visual element template styles to the specified visual element.
            </summary>
            <param name="element">The visual element to add styles to.</param>
        </member>
        <member name="M:Unity.Entities.Editor.VisualElementTemplate.RemoveStyles(UnityEngine.UIElements.VisualElement)">
            <summary>
            Remove this visual element template styles from the specified visual element.
            </summary>
            <param name="element">The visual element to remove styles from.</param>
        </member>
        <member name="T:Unity.Entities.Editor.SpinnerElement.SearchElementFactory">
            <summary>
            Instantiates a <see cref="T:Unity.Entities.Editor.SpinnerElement"/> using the data read from a UXML file.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SpinnerElement.SpinnerElementTraits">
            <summary>
            Defines UxmlTraits for the SpinnerElement.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNode">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNode"/> represents a high level node which can be used to mutate the state of the hierarchy.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNode.Immutable">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNode.Immutable"/> struct represents a high level node over the <see cref="T:Unity.Entities.Editor.HierarchyNodeStore.Immutable"/> out hierarchy model.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetHandle">
            <summary>
            Gets the handle this node was created from.
            </summary>
            <returns>The handle for this node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetChangeVersion">
            <summary>
            Gets the change version for this node.
            </summary>
            <returns>The change version for this node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetDepth">
            <summary>
            Gets the depth for the node.
            </summary>
            <returns>The depth for the node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetChildCount">
            <summary>
            Gets the number of children for this node.
            </summary>
            <returns>The number of children this node has.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetParent">
            <summary>
            Gets the parent for this node.
            </summary>
            <returns>The parent for this node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetChildren">
            <summary>
            Gets all children for this node and returns it as a new array.
            </summary>
            <returns>A new array containing all children for this node.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNode.Immutable.GetChildren(System.Collections.Generic.List{Unity.Entities.Editor.HierarchyNode.Immutable})">
            <summary>
            Gets all children for this node and adds them to the given list.
            </summary>
            <param name="children">The list to add children to.</param>
        </member>
        <member name="T:Unity.Entities.Editor.EntityMapDense`1">
             <summary>
             The <see cref="T:Unity.Entities.Editor.EntityMapDense`1"/> can be used to store data mapped by entity in a dense way.
             </summary>
             <remarks>
             This structure uses a sparse array mapping to an internal dense array. This uses a fixed size overhead to save on per-entity storage costs.
             
             This structure is best used if:
                 - the size of <typeparamref name="T"/> is larger than ~8 bytes
                 - the data must exist on FEW entity in a world
            
             otherwise; consider using <seealso cref="T:Unity.Entities.Editor.EntityMapSparse`1"/>
             
             This data structure has a fixed memory overhead of 8 bytes per entity and will expand as data is added.
             </remarks>
             <typeparam name="T">The data type to store per entity.</typeparam>
        </member>
        <member name="F:Unity.Entities.Editor.EntityMapDense`1.m_Allocator">
            <summary>
            The allocator used to construct this instance.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityMapDense`1.m_EntityMapDenseData">
            <summary>
            The internal unsafe implementation.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapDense`1.Capacity">
            <summary>
            Returns the upper bound of the sparse array.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapDense`1.Count">
            <summary>
            Returns the number of entries in the storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapDense`1.CountNonSharedDefault">
            <summary>
            Returns the total number of unique entries, not including shared instances.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.#ctor(System.Int32,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Editor.EntityMapSparse`1"/>.
            </summary>
            <param name="initialCapacity">The initial capacity to allocate.</param>
            <param name="allocator">The allocator type.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapDense`1.Item(Unity.Entities.Entity)">
            <summary>
            Gets or sets the data for the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <param name="entity">The entity to get or set data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.SetSharedDefaultValue(`0)">
             <summary>
             Sets the shared default value.
             </summary>
             <remarks>
             If any entities are assigned this value they will consume no additional memory. Only one default can be set.
            
             NOTE: If this value is changed all entities which are assigned this value are also updated.
             </remarks>
             <param name="value">The shared default value to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.GetSharedDefaultValue">
            <summary>
            Gets the shared default value.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.Clear">
            <summary>
            Clears the storage for re-use.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.Resize(System.Int32)">
            <summary>
            Resizes to sparse data set to the given capacity.
            </summary>
            <param name="capacity">The capacity to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.Exists(Unity.Entities.Entity)">
            <summary>
            Returns <see langword="true"/> if the specified entity exists in the storage.
            </summary>
            <param name="entity">The entity to check existence for.</param>
            <returns><see langword="true"/> if the entity exists in the storage; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.Remove(Unity.Entities.Entity)">
            <summary>
            Removes the data for the specified entity.
            </summary>
            <param name="entity">The entity to remove data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapDense`1.SetValueDefaultUnchecked(Unity.Entities.Entity)">
            <summary>
            Registers an entity to the dense set and assigns it the default value. This method performs no validation for free list checking. Use with caution.
            </summary>
            <param name="entity">The entity to assign the default value to.</param>
        </member>
        <member name="T:Unity.Entities.Editor.UnsafeEntityMapDense`1">
            <summary>
            The internal storage for the <see cref="T:Unity.Entities.Editor.EntityMapDense`1"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnsafeEntityMapDense`1.m_IndexByEntity">
            <summary>
            Sparse indexing in to the dense data set.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnsafeEntityMapDense`1.m_FreeIndex">
            <summary>
            A set of free indices in the dense data set.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnsafeEntityMapDense`1.m_DataByIndex">
            <summary>
            The densely packed data array.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapDense`1.Capacity">
            <summary>
            Returns the upper bound of the sparse array.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapDense`1.Count">
            <summary>
            Returns the number of entries in the storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapDense`1.CountNonSharedDefault">
            <summary>
            Returns the total number of unique entries, not including shared instances.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapDense`1.Item(Unity.Entities.Entity)">
            <summary>
            Gets or sets the data for the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <param name="entity">The entity to get or set data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.#ctor(System.Int32,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Editor.UnsafeEntityMapDense`1"/>.
            </summary>
            <param name="initialCapacity">The initial capacity to allocate.</param>
            <param name="allocator">The allocator type.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.SetSharedDefaultValue(`0)">
             <summary>
             Sets the shared default value.
             </summary>
             <remarks>
             If any entities are assigned this value they will consume no additional memory. Only one default can be set.
            
             NOTE: If this value is changed all entities which are assigned this value are also updated.
             </remarks>
             <param name="value">The shared default value to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.GetSharedDefaultValue">
            <summary>
            Gets the shared default value.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.GetDefaultEntities(Unity.Entities.Entity*)">
            <summary>
            Gets all entities which are assigned to the shared default value.
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.Clear">
            <summary>
            Clears the storage for re-use.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.Resize(System.Int32)">
            <summary>
            Resizes to sparse data set to the given capacity.
            </summary>
            <param name="capacity">The capacity to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.Exists(Unity.Entities.Entity)">
            <summary>
            Returns true if the given entity exists in the sparse data set.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.Remove(Unity.Entities.Entity)">
            <summary>
            Removes the data for the specified entity.
            </summary>
            <param name="entity">The entity to remove data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.GetValue(Unity.Entities.Entity)">
            <summary>
            Gets the value for the specified entity.
            </summary>
            <param name="entity">The entity to get the data for.</param>
            <returns>The data for the entity.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.SetValue(Unity.Entities.Entity,`0)">
            <summary>
            Sets the value for the specified entity.
            </summary>
            <param name="entity">The entity to set the data for.</param>
            <param name="value">The data to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.SetValueDefaultUnchecked(Unity.Entities.Entity)">
            <summary>
            Registers an entity to the dense set and assigns it the default value. This method performs no validation for free list checking. Use with caution.
            </summary>
            <param name="entity">The entity to assign the default value to.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.IsSharedDefault(`0)">
            <summary>
            Returns true if the given value matches the shared default.
            </summary>
            <param name="value">The value to compare.</param>
            <returns>True if the values match.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.GetNextIndex">
            <summary>
            Gets the next index, either from the free list or the next available data slot.
            </summary>
            <returns>The newly generated index.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapDense`1.SetValueForDenseIndex(System.Int32,Unity.Entities.Entity,`0)">
            <summary>
            Assigns the data to the given dense index.
            </summary>
            <param name="index">The dense index.</param>
            <param name="entity">The entity the data is assigned to.</param>
            <param name="value">The data to set.</param>
        </member>
        <member name="T:Unity.Entities.Editor.UnsafeEntityMapDense`1.Enumerator">
            <summary>
            An enumerator which will iterate all key-value pairs in the map.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.UnsafeEntityMapDense`1.NonDefaultEntityEnumerator">
            <summary>
            An enumerator which will iterate all non-default key-value pairs in the map.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.StringExtensions.SplitPascalCase(System.String)">
             <summary>
             Given a pascal case or camel case string this method will add spaces between the capital letters.
            
             e.g.
             "someField"    -> "Some Field"
             "layoutWidth"  -> "Layout Width"
             "TargetCount"  -> "Target Count"
             </summary>
        </member>
        <member name="T:Unity.Entities.Editor.PlayerLoopNode`1">
            <summary>
            Base class representing an elements of the <see cref="T:UnityEngine.LowLevel.PlayerLoopSystem"/> for system scheduling purposes.
            </summary>
            <typeparam name="T">Type of the node's value.</typeparam>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.Children">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.Value">
            <summary>
            Returns the value of the current node.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.NameWithWorld">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.FullName">
            <summary>
            Returns the full name of the node's value.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.Enabled">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.EnabledInHierarchy">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.Hash">
            <inheritdoc/>
        </member>
        <member name="M:Unity.Entities.Editor.PlayerLoopNode`1.ShowForWorldProxy(Unity.Entities.Editor.WorldProxy)">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.PlayerLoopNode`1.IsRunning">
            <inheritdoc/>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyFilter">
            <summary>
            Represents a search query object which can be 'applied' to a set of nodes. This uses the shared state from <see cref="!:Hierarchy.HierarchySearch"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyFilter.m_HierarchySearch">
            <summary>
            The search backend for the hierarchy.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyFilter.m_QueryResult">
            <summary>
            The processed result of a search query. This is used to drive the underlying change tracking/differs.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyFilter.m_Tokens">
            <summary>
            The pre-processed tokens from the search query. This is used to drive the bursted searching algorithms.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyFilter.FilterQueryDesc">
            <summary>
            Gets the current active <see cref="P:Unity.Entities.Editor.HierarchyFilter.FilterQueryDesc"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyFilter.Tokens">
            <summary>
            Returns the pre-processed tokens.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyFilter.IsValid">
            <summary>
            Gets a value indicating if the filter is valid or not.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyFilter.ErrorComponentType">
            <summary>
            Returns the name of the invalid component type encountered during filtering.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyFilter.Apply(Unity.Entities.Editor.HierarchyNodeStore.Immutable,Unity.Collections.Allocator)">
            <summary>
            @TODO convert this to an enumerator which can be time-sliced.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodes">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodes"/> class represents a virtualized list over the linearly packed hierarchy. It provides linear access to all 'expanded/visible' nodes.
            This can be used directly by a 'ListView' for the virtualization.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodes.m_ImmutableNodes">
            <summary>
            The set of packed node data this list is exposing. This contains 'ALL' nodes in the hierarchy packed for efficient access.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodes.m_Nodes">
            <summary>
            The set of 'visible' nodes based on the expanded state. These indices map back to the <see cref="F:Unity.Entities.Editor.HierarchyNodes.m_ImmutableNodes"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodes.m_IndexByNode">
            <summary>
            The <see cref="F:Unity.Entities.Editor.HierarchyNodes.m_Nodes"/> index for a given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>. This is used to find the virtualized index for a specific node.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodes.m_ExpandedHashSet">
            <summary>
            The set of expanded states for the nodes.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodes.m_Filter">
            <summary>
            The currently applied search query.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodes.m_SerializableState">
            <summary>
            The serialized state which is managed externally.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodes.Count">
            <summary>
            Returns the number of 'visible' nodes. This is the virtualized count.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodes.ChangeVersion">
            <summary>
            Returns the current change version for the nodes.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.IsChanged(System.Int32)">
            <summary>
            Returns true if the nodes have been changed since the given version.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.HasFilter">
            <summary>
            Returns true if the nodes are filtered by a search query.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.GetFilter">
            <summary>
            Returns the active search filter; if any.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodes.Item(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns the immutable node data for the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the data for.</param>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodes.Item(System.Int32)">
            <summary>
            Returns the immutable node data for the given index.
            </summary>
            <param name="index">The index to get the data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.GetBuffer">
            <summary>
            Gets the immutable node buffer storing the node data.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.Clear">
            <summary>
            Clears the internal state for re-use.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.IsExpanded(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/> is expanded in the hierarchy.
            </summary>
            <param name="handle">The handle to get the expanded state for.</param>
            <returns><see langword="true"/> if the node is expanded; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.SetAncestorsExpanded(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Sets all ancestors to an expanded state. This is used for selecting a collapsed node deep in the hierarchy.
            </summary>
            <param name="handle">The node for which all ancestors will be expanded.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.IndexOf(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns the packed index for the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the index for.</param>
            <returns>The packed index.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodes.Refresh(Unity.Entities.Editor.HierarchyNodeStore.Immutable,Unity.Entities.World,Unity.Collections.NativeParallelHashMap{Unity.Entities.Editor.HierarchyNodeHandle,System.Boolean})">
            <summary>
            Updates the <see cref="T:Unity.Entities.Editor.HierarchyNodes"/> to the latest packed data. This method will early out if no work is needed and can be called
            </summary>
            <remarks>
            @TODO convert this to an enumerator which can be time-sliced.
            </remarks>
        </member>
        <member name="T:Unity.Entities.Editor.BakingPreferences">
            <summary>
            Editor preferences for baking.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.BakingPreferences.SceneViewPresentationMode.SceneViewShowsAuthoring">
            <summary>
            Display the authoring data in the scene view.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.BakingPreferences.SceneViewPresentationMode.SceneViewShowsRuntime">
            <summary>
            Display the result of the conversion in the scene view.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.QuickSearchBackend`1">
            <summary>
            Full implementation of the query engine. This relies on the QuickSearch package.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.QuickSearchBackend`1.QueryEngine">
            <summary>
            Returns the underlying <see cref="T:UnityEditor.Search.QueryEngine"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unity.Entities.Editor.DOTSEditorPreferencesSettingAttribute">
            <summary>
            Attribute to tag a type to be included as a setting for the DOTS Editor preferences.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.DOTSEditorPreferencesSettingAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.DOTSEditorPreferencesSettingAttribute"/> with the provided section name.
            </summary>
            <param name="sectionName">The name of the section where the setting should go.</param>
        </member>
        <member name="M:Unity.Entities.Editor.PlayerLoopSystemGraph.ResetFromPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem)">
            <summary>
            Parse through the player loop system to get all system list and their parent-children relationship,
            which will be used to build the tree view.
            </summary>
            <param name="rootPlayerLoopSystem"></param>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_SubSceneChanges">
            <summary>
            Re-usable data structure to store results from the <see cref="T:Unity.Entities.Editor.SubSceneMap"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_HierarchyEntityChanges">
            <summary>
            Re-usable data structure to store results from the <see cref="T:Unity.Entities.Editor.HierarchyEntityChangeTracker"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_HierarchyGameObjectChanges">
            <summary>
            Re-usable data structure to store results from the <see cref="T:Unity.Entities.Editor.HierarchyGameObjectChangeTracker"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_HierarchyPrefabStageChanges">
            <summary>
            Re-usable data structure to store results from the <see cref="T:Unity.Entities.Editor.HierarchyGameObjectChangeTracker"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_IntegrateEntityChangesEnumerator">
            <summary>
            A nested 'Enumerator' used to handle the implementation details of integrating entity changes over several ticks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_IntegrateGameObjectChangesEnumerator">
            <summary>
            A nested 'Enumerator' used to handle the implementation details of integrating gameobject changes over several ticks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_ExportImmutableEnumerator">
            <summary>
            A nested 'Enumerator' used to handle the implementation details of building the immutable data set over several ticks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_ExportImmutableState">
            <summary>
            A shared state object used to drive the <see cref="F:Unity.Entities.Editor.HierarchyUpdater.m_ExportImmutableEnumerator"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyUpdater.m_PrefabStage">
            <summary>
            The current prefab stage (can be null).
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyUpdater.Version">
            <summary>
            Returns the updater version. This is the total number of full update cycles that have been completed.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyUpdater.EstimatedProgress">
            <summary>
            Returns the estimated progress for the updater.
            </summary>
            <remarks>
            This value is only an estimate. It should NOT be used for any meaningful logic.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyUpdater.SetState(Unity.Entities.Editor.HierarchyUpdater.UpdateStep)">
            <summary>
            This method is invoked when entering a new state and should be used to initialize any
            state specific variables. The state itself will not be run until the next frame.
            </summary>
            <param name="state">The state to switch to.</param>
        </member>
        <member name="T:Unity.Entities.Editor.DOTSEditorProjectSettingsAttribute">
            <summary>
            Attribute to tag a type to be included as a setting for the DOTS Editor project settings.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.DOTSEditorProjectSettingsAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.DOTSEditorProjectSettingsAttribute"/> with the provided section name.
            </summary>
            <param name="sectionName">The name of the section where the setting should go.</param>
        </member>
        <member name="T:Unity.Entities.Editor.EntityDiffer">
            <summary>
            The <see cref="T:Unity.Entities.Editor.EntityDiffer"/> is use to efficiently track created and destroyed entities within a world over time.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityDiffer.ChunkShadow">
            <summary>
            A chunk shadow is used to retain a copy of all <see cref="T:Unity.Entities.Entity"/> data. This is compared against the current state of the world to detect which entities have changed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityDiffer.ChunkShadow.Data.Count">
            <summary>
            The number of entities the tracked chunk has during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityDiffer.ChunkShadow.Data.Version">
            <summary>
            The entity version for the tracked chunk during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityDiffer.ChunkShadow.Data.Entities">
            <summary>
            A copy of all entities in this chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityDiffer.ChunkShadow.Data.SequenceNumber">
            <summary>
            The sequence number for this chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityDiffer.ChunkShadow.Data.Index">
            <summary>
            The index this of this chunk in the internal <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> list.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityDiffer.ChunkChanges">
            <summary>
            A set of changes for a given <see cref="F:Unity.Entities.Editor.EntityDiffer.ChunkChanges.Chunk"/>. This is an internal data structure used during the diffing process.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityAspectsCollectionContainer">
            <summary>
            The <see cref="T:Unity.Entities.Editor.EntityAspectsCollectionContainer"/> is used to expose all valid <see cref="T:Unity.Entities.IAspect"/> objects as properties for a given <see cref="F:Unity.Entities.Editor.EntityAspectsCollectionContainer.Entity"/>.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityAspectsCollectionContainerPropertyBag">
            <summary>
            The <see cref="T:Unity.Entities.Editor.EntityAspectsCollectionContainerPropertyBag"/> is used to expose <see cref="T:Unity.Entities.IAspect"/> types as properties for a given <see cref="T:Unity.Entities.Editor.EntityAspectsCollectionContainer"/> object.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityAspectsCollectionContainerProperty`1">
            <summary>
            The <see cref="T:Unity.Entities.Editor.EntityAspectsCollectionContainerProperty`1"/> is used to expose aspects for a given <see cref="T:Unity.Entities.Editor.EntityAspectsCollectionContainer"/>.
            </summary>
            <remarks>
            Aspects are returned as safe <see cref="T:Unity.Entities.Editor.EntityAspectContainer`1"/> objects.
            </remarks>
            <typeparam name="TAspect">The underlying aspect.</typeparam>
        </member>
        <member name="T:Unity.Entities.Editor.EntitySelectionProxy">
            <summary>
            Proxy object for an <see cref="T:Unity.Entities.Entity"/> so it can be selected and shown in the inspector.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntitySelectionProxy.CreateInstance(Unity.Entities.World,Unity.Entities.Entity)">
            <summary>
            Creates and configures an instance of EntitySelectionProxy wrapping the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <param name="world">The <see cref="T:Unity.Entities.World"/> in which the Entity exists.</param>
            <param name="entity">The entity to be wrapped by this instance of EntitySelectionProxy.</param>
            <returns>A fully configured EntitySelectionProxy, wrapping the specified entity.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see cref="!:world"/> is <code>null</code> or world.<see cref="P:Unity.Entities.World.IsCreated"/> is <code>false</code>.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.EntitySelectionProxy.SelectEntity(Unity.Entities.World,Unity.Entities.Entity)">
            <summary>
            Creates and selects an instance of EntitySelectionProxy wrapping the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <remarks>
            <para>
            This operation does not return the created instance of EntitySelectionProxy. If you want to hold onto the created instance, please use <see cref="M:Unity.Entities.Editor.EntitySelectionProxy.CreateInstance(Unity.Entities.World,Unity.Entities.Entity)"/> instead.
            </para>
            <para>
            This operation may produce no results if <see cref="!:world"/> is <code>null</code>, if world.<see cref="P:Unity.Entities.World.IsCreated"/> is <code>false</code>, if the specified
            <see cref="!:entity"/> does not exist in the specified world, or if the current selection already points to the specified entity.
            </para>
            </remarks>
            <param name="world">The <see cref="T:Unity.Entities.World"/> in which the Entity exists.</param>
            <param name="entity">The entity to be wrapped by this instance of EntitySelectionProxy.</param>
        </member>
        <member name="P:Unity.Entities.Editor.EntitySelectionProxy.World">
            <summary>
            The <see cref="T:Unity.Entities.World"/> in which the wrapped <see cref="T:Unity.Entities.Entity"/> exists.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntitySelectionProxy.Entity">
            <summary>
            The <see cref="T:Unity.Entities.Entity"/> wrapped by this instance of EntitySelectionProxy.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntitySelectionProxy.Exists">
            <summary>
            Whether the wrapped <see cref="T:Unity.Entities.Entity"/> currently exists and is valid.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntitySelectionProxy.Container">
            <summary>
            <para>
            The <see cref="T:Unity.Entities.EntityContainer"/> allowing the <see cref="T:Unity.Entities.Entity"/> data to be visited.
            </para>
            <seealso cref="!:Unity.Properties.PropertyContainer.Visit"/>
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntitySelectionProxy.Select">
            <summary>
            Sets this instance of EntitySelectionProxy as the active selection.
            </summary>
            <remarks>
            This operation produces no result if the current selection is the same instance or if the current selection is another instance
            of EntitySelectionProxy wrapping the same <see cref="T:Unity.Entities.Entity"/>.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Editor.EntitySelectionProxy.GetHashCode">
            <summary>Returns a hash code.</summary>
        </member>
        <member name="M:Unity.Entities.Editor.EditorResources.Load``1(System.String,System.Boolean)">
            <summary>
            Load a built-in editor resource.
            </summary>
            <typeparam name="T">The type of resource to load.</typeparam>
            <param name="path">The resource path. Must include the extension.</param>
            <param name="logError">Whether or not an error should be logged to the console.</param>
            <returns>The loaded resource if it was found, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.EditorResources.Load``1(System.String,System.String,System.Boolean)">
            <summary>
            Load a package built-in editor resource, with a fallback to built-in editor resource.
            </summary>
            <typeparam name="T">The type of resource to load.</typeparam>
            <param name="packageId">The package identifier.</param>
            <param name="path">The resource path. Must include the extension.</param>
            <param name="logError">Whether or not an error should be logged to the console.</param>
            <returns>The loaded resource if it was found, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.EditorResources.LoadTexture``1(System.String,System.Boolean)">
            <summary>
            Load a built-in editor texture resource.
            </summary>
            <typeparam name="T">The type of texture resource to load.</typeparam>
            <param name="path">The texture resource path. Must include the extension.</param>
            <param name="logError">Whether or not an error should be logged to the console.</param>
            <returns>The loaded texture resource if it was found, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.EditorResources.LoadTexture``1(System.String,System.String,System.Boolean)">
            <summary>
            Load a package built-in editor texture resource, with a fallback to built-in editor resource.
            </summary>
            <typeparam name="T">The type of texture resource to load.</typeparam>
            <param name="packageId"></param>
            <param name="path">The texture resource path. Must include the extension.</param>
            <param name="logError">Whether or not an error should be logged to the console.</param>
            <returns>The loaded texture resource if it was found, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.SystemTreeView.#ctor">
            <summary>
            Constructor of the tree view.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SystemTreeView.Refresh">
            <summary>
            Refresh tree view to update with latest information.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ISetting">
            <summary>
            Interface that allows to declare a class type as a setting.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.ISetting.OnSettingChanged(Unity.Properties.PropertyPath)">
            <summary>
            Method called when a change is detected in the UI.
            </summary>
            <param name="path">Path to the changed property.</param>
        </member>
        <member name="T:Unity.Entities.Editor.EntityInspectorContext">
            <summary>
            Context to be used when inspecting an <see cref="P:Unity.Entities.Editor.EntityInspectorContext.Entity"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.PopulateWorldProxy">
            <summary>
            Populate world proxy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.ResetWorldProxy">
            <summary>
            Reset world proxy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.UpdateFrameData">
            <summary>
            Update frame data.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.EnableUpdater">
            <summary>
            Register updater to EditorApplication.update to update frame data and detect change.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.DisableUpdater">
            <summary>
            Unregister updater from EditorApplication.update.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.IsActive">
            <summary>
            Remember the updater is registered to EditorApplication.update or not.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.IsDirty">
            <summary>
            Remember the updater has changed or not.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IWorldProxyUpdater.SetClean">
            <summary>
            Set updater clean after dealing with the changes.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityNameStorageLowerInvariant">
            <summary>
            A partial clone of the <see cref="T:Unity.Entities.EntityNameStorage"/> which stores case invariant versions.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EditorIcons.LoadIcon(System.String)">
            <summary>
            Workaround for `EditorGUIUtility.LoadIcon` not working with packages. This can be removed once it does
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Unity.Entities.Editor.SearchDataProperty">
            <summary>
            Stores a property path which should be used as search data.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchFilterProperty">
            <summary>
            Stores a token to property path which should be used for filtering.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchEngine.GlobalStringComparison">
            <summary>
            Global string comparison options for word matching and filter handling (if not overridden).
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.Clear">
            <summary>
            Clears the internal state of the <see cref="T:Unity.Entities.Editor.SearchEngine"/>.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.AddSearchDataProperty(Unity.Properties.PropertyPath)">
            <summary>
            Adds a binding path to the search data. The property at the specified <paramref name="path"/> will be compared to the non-tokenized portion of the search string.
            </summary>
            <remarks>
            The search data should generally include things like id and/or name.
            </remarks>
            <param name="path">The property path to pull search data from.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.AddSearchFilterProperty(System.String,Unity.Properties.PropertyPath,Unity.Entities.Editor.SearchFilterOptions)">
            <summary>
            Adds a filter based on a binding path. The given token will resolve to a property at the specified <paramref name="path"/>.
            </summary>
            <param name="token">The identifier of the filter. Typically what precedes the operator in a filter.</param>
            <param name="path">The property this token should resolve to.</param>
            <param name="options">The set of filter options.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.AddSearchFilterCallback``2(System.String,System.Func{``0,``1},Unity.Entities.Editor.SearchFilterOptions)">
            <summary>
            Adds a search filter based on a callback function. The given token will resolve to the result of the specified <paramref name="getSearchFilterFunc"/>.
            </summary>
            <param name="token">The identifier of the filter. Typically what precedes the operator in a filter.</param>
            <param name="getSearchFilterFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and returns an object of type TFilter.</param>
            <param name="options">The set of filter options.</param>
            <typeparam name="TData">The data type being searched.</typeparam>
            <typeparam name="TFilter">The return type for the filter.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.AddSearchOperatorHandler``2(System.String,System.Func{``0,``1,System.Boolean})">
            <summary>
            Add a custom filter operator handler.
            </summary>
            <typeparam name="TFilterVariable">The operator's left hand side type. This is the type returned by a filter handler.</typeparam>
            <typeparam name="TFilterConstant">The operator's right hand side type.</typeparam>
            <param name="op">The filter operator.</param>
            <param name="handler">Callback to handle the operation. Takes a TFilterVariable (value returned by the filter handler, will vary for each element) and a TFilterConstant (right hand side value of the operator, which is constant), and returns a boolean indicating if the filter passes or not.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.AddSearchOperatorHandler``2(System.String,System.Func{``0,``1,System.StringComparison,System.Boolean})">
            <summary>
            Add a custom filter operator handler.
            </summary>
            <typeparam name="TFilterVariable">The operator's left hand side type. This is the type returned by a filter handler.</typeparam>
            <typeparam name="TFilterConstant">The operator's right hand side type.</typeparam>
            <param name="op">The filter operator.</param>
            <param name="handler">Callback to handle the operation. Takes a TFilterVariable (value returned by the filter handler, will vary for each element), a TFilterConstant (right hand side value of the operator, which is constant), a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchEngine.Parse``1(System.String)">
            <summary>
            Apply the filtering on an IEnumerable data set.
            </summary>
            <param name="text">The search string.</param>
            <returns>A filtered IEnumerable.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.SearchBackend`1">
            <summary>
            Common interface to abstract the query engine backend.
            </summary>
            <typeparam name="TData">The strongly typed data this engine can filter.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.SearchBackend`1.GetSearchData(`0)">
            <summary>
            Returns all search data strings for the given <typeparamref name="TData"/> instance.
            </summary>
            <remarks>
            The search data strings are extracted based on the <see cref="T:Unity.Entities.Editor.SearchDataProperty"/> elements registered.
            </remarks>
            <param name="data">The instance to gather data from.</param>
            <typeparam name="TData">The instance type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> over the search data strings for the specified data.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.SearchBackend`1.Parse(System.String)">
            <summary>
            Applies the given search text to the specified data set.
            </summary>
            <param name="text">The search string.</param>
            <returns>A <see cref="T:Unity.Entities.Editor.ISearchQuery`1"/> which can be applied to data to generate a filtered set.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.SystemDependencyUtilities.GetECBSystemScheduleInfo(System.Type)">
            <summary>
            Check given ECB system is at the beginning or the end.
            </summary>
            <param name="systemType">Given system type</param>
            <returns>Order of the given ECB system defined by <see cref="T:Unity.Entities.Editor.SystemDependencyUtilities.ECBSystemSchedule"/>></returns>
        </member>
        <member name="M:Unity.Entities.Editor.SystemDependencyUtilities.GetSystemAttributes``1(System.Type)">
            <summary>
            Get <see cref="T:System.Type"/> for update before/after system list for given system type.
            <param name="systemType">The given <see cref="T:Unity.Entities.ComponentSystemBase"/>.</param>
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ExponentialMovingAverage">
            <summary>
            https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.InspectedBuffer`2">
            <summary>
            Wrapper type to allow to inspect a <see cref="T:Unity.Entities.DynamicBuffer`1"/>.
            </summary>
            <typeparam name="TList">Type that maps to <see cref="T:Unity.Entities.DynamicBufferContainer`1"/>.</typeparam>
            <typeparam name="TElement">The <see cref="T:Unity.Entities.IBufferElementData"/> type.</typeparam>
        </member>
        <member name="T:Unity.Entities.Editor.SearchHandlerType">
            <summary>
            Available search handler modes.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchHandlerType.sync">
            <summary>
            The search handler will perform the filtering synchronously.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchHandlerType.async">
            <summary>
            The search handler will perform the filtering asynchronously.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ISearchHandler">
            <summary>
            Interface used to reference an untyped search handler.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchHandler.SearchDataType">
            <summary>
            Gets the strongly typed search data type.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchHandler.Mode">
            <summary>
            The active search mode to use. <see cref="T:Unity.Entities.Editor.SearchHandlerType"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchHandler.SearchDataBatchMaxSize">
            <summary>
            The maximum number of elements to process in each enumerator batch.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchHandler.MaxFrameProcessingTimeMs">
            <summary>
            The maximum amount of time in milliseconds to spend on filtering each frame.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchHandler`1">
            <summary>
            The built in search handler.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Unity.Entities.Editor.SearchHandler`1.SearchDataType">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.SearchHandler`1.Mode">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.SearchHandler`1.SearchDataBatchMaxSize">
            <inheritdoc/>
        </member>
        <member name="P:Unity.Entities.Editor.SearchHandler`1.MaxFrameProcessingTimeMs">
            <inheritdoc/>
        </member>
        <member name="E:Unity.Entities.Editor.SearchHandler`1.OnBeginSearch">
            <summary>
            Callback invoked when a new search is started.
            </summary>
        </member>
        <member name="E:Unity.Entities.Editor.SearchHandler`1.OnFilter">
            <summary>
            Callback invoked when receiving a batch of filtered data.
            </summary>
        </member>
        <member name="E:Unity.Entities.Editor.SearchHandler`1.OnEndSearch">
            <summary>
            Callback invoked when a search is completed.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchHandler`1.#ctor(Unity.Entities.Editor.SearchElement)">
            <summary>
            Initializes a new <see cref="T:Unity.Entities.Editor.SearchHandler`1"/> for the specified search element.
            </summary>
            <param name="element">The <see cref="T:Unity.Entities.Editor.SearchElement"/>.</param>
            <remarks>
            The search handler is automatically registered to the given element.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Editor.SearchHandler`1.SetSearchDataProvider(System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Sets the callback used to gather the search data.
            </summary>
            <param name="getSearchDataFunc">The callback to be invoked when gathering search data.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchHandler`1.Stop">
            <summary>
            Stops any currently running search.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchHandler`1.Unity#Entities#Editor#ISearchQueryHandler{TData}#HandleSearchQuery(Unity.Entities.Editor.ISearchQuery{`0})">
            <inheritdoc cref="M:Unity.Entities.Editor.ISearchQueryHandler`1.HandleSearchQuery(Unity.Entities.Editor.ISearchQuery{`0})"/>
        </member>
        <member name="F:Unity.Entities.Editor.WorldProxy.m_RootSystems">
            <summary>
            Handles for root system groups (init, sim, pres).
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.WorldProxy.m_AllSystems">
            <summary>
            Handles for all known systems.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.WorldProxy.m_AllSystemsInOrder">
            <summary>
            Handles for all known systems in their scheduling order.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.WorldProxy.m_SystemData">
            <summary>
            Data that is relatively constant; only gets recreated when drastic changes happen,
            such as: names, parent/children mapping, dependencies, category, recorder, etc.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.WorldProxy.m_FrameData">
            <summary>
            Data that is changing every frame,
            such as: entity matching count, running time, enabled/disabled state, etc.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityInspectorAspectStructure">
            <summary>
            Helper type to contain the aspect order of a given entity.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SystemScheduleWindow.SystemsWindowConfiguration">
            <summary>
            The systems window configuration. This is data which is managed externally by settings, tests or users but drives internal behaviours.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SystemScheduleWindow.OnEnable">
            <summary>
            Build the GUI for the system window.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SystemScheduleWindow.CreateTreeViewHeader(UnityEngine.UIElements.VisualElement)">
            <summary>
             Manually create header for the tree view.
            </summary>
            <param name="root"></param>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyElement">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyElement"/> handles all rendering for the hierarchy. It is responsible for managing the list view and loading states.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyElement.HierarchyLoadingElement">
            <summary>
            Nested element to handle the initial loading screen.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyElement.m_ViewChangeVersion">
            <summary>
            The last version the list view refreshed at.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyElement.OnMakeItem(Unity.Entities.Editor.HierarchyListViewItem)">
            <summary>
            Invoked by the <see cref="T:UnityEngine.UIElements.ListView"/> whenever a new virtualized item is created.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.IEntityMap`1">
            <summary>
            Common interface for the per-entity data storage.
            </summary>
            <typeparam name="T">The data type stored.</typeparam>
        </member>
        <member name="P:Unity.Entities.Editor.IEntityMap`1.Capacity">
            <summary>
            Returns the upper bound for the array.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IEntityMap`1.Count">
            <summary>
            Returns the number of entries in the storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.IEntityMap`1.Item(Unity.Entities.Entity)">
            <summary>
            Gets or sets the data for the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <param name="entity">The entity to get or set data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.IEntityMap`1.Clear">
            <summary>
            Clears the storage for re-use.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.IEntityMap`1.Resize(System.Int32)">
            <summary>
            Resizes to sparse data set to the given capacity.
            </summary>
            <param name="capacity">The capacity to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.IEntityMap`1.Exists(Unity.Entities.Entity)">
            <summary>
            Returns <see langword="true"/> if the specified entity exists in the storage.
            </summary>
            <param name="entity">The entity to check existence for.</param>
            <returns><see langword="true"/> if the entity exists in the storage; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.IEntityMap`1.Remove(Unity.Entities.Entity)">
            <summary>
            Removes the data for the specified entity.
            </summary>
            <param name="entity">The entity to remove data for.</param>
        </member>
        <member name="T:Unity.Entities.Editor.EntityWithValue`1">
            <summary>
            Represents a key-value pair with the key being an entity.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer">
            <summary>
            The <see cref="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer"/> is use to efficiently track changes for a given _unmanaged_ <see cref="T:Unity.Entities.ISharedComponentData"/> type over time.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet">
            <summary>
            The structure returned when gathering changes. This can be used to unpack all changes since the last diff.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data">
            <summary>
            The backing data for the change set. This is a separate structure which is filled during job execution.
            </summary>
            <remarks>
            This packing is not perfectly optimized. In an ideal scenario we would have multiple chunks which use the same shared component to point to the same entry in the <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData"/>.
            In practice what we get is each chunk making a single entry in the <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData"/> which all entities from that chunk sharing it's data. This is done to speed up the diffing process itself.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.AddedComponentEntities">
            <summary>
            The set of all entities for which the tracked component was added in this diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.RemovedComponentEntities">
            <summary>
            The set of all entities for which the tracked component was removed in this diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.AddedComponentIndices">
            <summary>
            Index to the <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData"/> for each <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.AddedComponentEntities"/>.
            </summary>
            <remarks>
            This is a squashed index and NOT the byte offset. To get the component data you must multiply the index by the component size and look in <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData"/>.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.RemovedComponentIndices">
            <summary>
            Index to <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData"/> for each <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.RemovedComponentEntities"/>.
            </summary>
            <remarks>
            This is a squashed index and NOT the byte offset. To get the component data you must multiply the index by the component size and look in <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData"/>.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.Data.SharedComponentData">
            <summary>
            The raw buffer containing all shared component data relevant to this change-set.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.AddedSharedComponentCount">
            <summary>
            The number of add component records in this change set.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.RemovedSharedComponentCount">
            <summary>
            The number of remove component records in this change set.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet.#ctor(Unity.Entities.TypeIndex,Unity.Collections.Allocator)">
            <summary>
            Constructs a new instance of <see cref="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChangeSet"/>.
            </summary>
            <param name="typeIndex">The type index this change-set contains changes for.</param>
            <param name="allocator">The allocator type to use when constructing this instance.</param>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow">
            <summary>
            A chunk shadow is used to retain a copy of all <see cref="T:Unity.Entities.Entity"/> data with the tracked component type. This is compared against the current state of the world to detect which data and therefore entities have changed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow.Data.Count">
            <summary>
            The number of entities the tracked chunk has during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow.Data.Version">
            <summary>
            The entity version for the tracked chunk during the last diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow.Data.SharedComponentElementIndex">
            <summary>
            The shared component index (for our tracked component) and this specific chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow.Data.Entities">
            <summary>
            A copy of all entities in this chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow.Data.SequenceNumber">
            <summary>
            The sequence number of the tracked chunk.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow.Data.Index">
            <summary>
            The index this of this chunk in the internal <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> list.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkChanges">
            <summary>
            A set of changes for a given <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkChanges.Chunk"/>. This is an internal data structure used during the diffing process.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_TypeIndex">
            <summary>
            The type index for the tracked component.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ComponentSize">
            <summary>
            The component size of the tracked component.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowSharedComponentData">
            <summary>
            This list stores a copy of ALL shared component data for the tracked type. This is used to keep track of previous values.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumber">
            <summary>
            This map stores a <see cref="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.ChunkShadow"/> per chunk in the world we are tracking. NOTE: This only considered chunks which match our original input query.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys">
            <summary>
            This list stores a cached version of the <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumber"/> keys. This is incrementally updated an used to accelerate lookups and avoid a rebuild each diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumberKeysFreeList">
            <summary>
            The free indices for <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> in the <see cref="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkShadowBySequenceNumberKeys"/> for recently destroyed shadow chunks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChunkSequenceNumbers">
            <summary>
            The buffer use to track all live chunks in the world during the diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_AllocatedChunkShadowByChunk">
            <summary>
            The buffer used when allocating chunk shadows within a diff tick. This is a sparse array sized to the total chunks being processed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_ChangesByChunk">
            <summary>
            The buffer used when gathering chunk changes for the diff. This is sparse array sized to the total chunks being processed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_RemovedChunks">
            <summary>
            The buffer used to gather removed chunks for the diff.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.m_RemovedEntities">
            <summary>
            The buffer used to gather removed entities from within the removed chunks.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.#ctor(Unity.Entities.ComponentType)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer"/>.
            </summary>
            <param name="componentType">The component type to diff.</param>
            <exception cref="T:System.ArgumentException">The specified component can not be watched by the differ.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.GatherComponentChanges(Unity.Entities.EntityManager,Unity.Entities.EntityQuery,Unity.Collections.Allocator)">
            <summary>
            Returns a change set with all changes to the tracked component since the last time this method was called.
            </summary>
            <param name="entityManager">The world being tracked.</param>
            <param name="query">The set of entities to track.</param>
            <param name="allocator">The allocator to use for the returned data.</param>
            <returns>A change set with all changes since the last call to this method.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.GatherEntityChangesJob">
            <summary>
            This job is used to gather all created, destroyed or moved entities by chunk.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.AllocateChunkShadowsJob">
            <summary>
            This job is used to allocate new chunk shadow objects which will hold a copy of data we are interested in.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.BuildChangeSetJob.GatheredChangesByChunk">
            <summary>
            The set of changes gathered for this cycle.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.BuildChangeSetJob.SharedComponentDataByType">
            <summary>
            The set of existing shared component data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.CopyStateToShadowSharedComponentDataJob.SharedComponentDataByType">
            <summary>
            The set of existing shared component data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnmanagedSharedComponentDataDiffer.CopyStateToShadowSharedComponentDataJob.ShadowChunkSharedComponentData">
            <summary>
            The shadow copy of all shared component data.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeMap`1">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodeMap`1"/> can be used to store data per hierarchy node.
            </summary>
            <remarks>
            !!IMPORTANT!! This has an 8 byte memory overhead for EACH entity in the world. Use with caution.
            
            This structure uses an internal entity lookup to access entity nodes in O(1). All other node types use hash map access.
            
            This structure has a fixed memory overhead of 8 bytes per entity plus any node data stored.
            </remarks>
            <typeparam name="T">The hierarchy node data type.</typeparam>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyNodeMap`1.HierarchyNodeMapData">
            <summary>
            The internal unmanaged data.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeMap`1.m_Allocator">
            <summary>
            The allocator used to construct this instance.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeMap`1.m_HierarchyNodeMapData">
            <summary>
            Instance data for this structure.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeMap`1.m_ValueByEntity">
            <summary>
            Storage for <see cref="T:Unity.Entities.Entity"/> based nodes. This is a linear lookup indexed by <see cref="F:Unity.Entities.Entity.Index"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNodeMap`1.m_ValueByHandle">
            <summary>
            Storage for all other node types. This is a hash based lookup based on the <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeMap`1.ValueByEntity">
            <summary>
            Returns the internal entity data storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeMap`1.ValueByHandle">
            <summary>
            Returns the internal entity data storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeMap`1.ValueByHandleCount">
            <summary>
            Returns the number of hashed handle nodes.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNodeMap`1.Item(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Gets or sets the data for the specified handle.
            </summary>
            <param name="handle">The handle to get or set data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.#ctor(Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance <see cref="T:Unity.Entities.Editor.HierarchyNodeMap`1"/>.
            </summary>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.Count">
            <summary>
            Returns the number of valid nodes in the storage.
            </summary>
            <returns>The number of valid nodes.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.Clear">
            <summary>
            Clears all data from the storage.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.Exists(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns <see langword="true"/> if the given handle exists in the storage.
            </summary>
            <param name="handle">The handle to check existence for.</param>
            <returns><see langword="true"/> if the given handle exists; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.Remove(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Removes the specified handle from the storage.
            </summary>
            <param name="handle">The handle to remove.</param>
        </member>
        <member name="M:Unity.Entities.Editor.HierarchyNodeMap`1.ResizeEntityCapacity(System.Int32)">
            <summary>
            Resizes to sparse entity data set to the given capacity.
            </summary>
            <param name="capacity">The capacity to set.</param>
        </member>
        <member name="T:Unity.Entities.Editor.EntityEditor">
            <summary>
            This declares a custom inspector for the <see cref="T:Unity.Entities.Editor.EntitySelectionProxy"/> that can be used to override the
            default inspector.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.WorldSystemListChangeTracker">
            <summary>
            Detect world system list changes when new systems are added or destroyed.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.ISearchQueryHandler`1">
            <summary>
            Interface used to receive search query callbacks.
            </summary>
            <typeparam name="TData">The search data type.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchQueryHandler`1.HandleSearchQuery(Unity.Entities.Editor.ISearchQuery{`0})">
            <summary>
            This method is invoked whenever a search is performed.
            </summary>
            <param name="query">The query which can be used to apply the search to some data.</param>
        </member>
        <member name="T:Unity.Entities.Editor.ISearchQuery`1">
            <summary>
            Interface used to apply a search query to a given set of data.
            </summary>
            <typeparam name="TData">The search data type.</typeparam>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchQuery`1.SearchString">
            <summary>
            Gets the original search string for the query.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.ISearchQuery`1.Tokens">
            <summary>
            List of tokens found in the query.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.ISearchQuery`1.Apply(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Applies the search filters to the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> data set.
            </summary>
            <param name="data">The data set to filter.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> which returns the filtered data set.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.SearchFilterOptions">
            <summary>
            A set of optional parameters for registering search filters.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchFilterOptions.FilterText">
            <summary>
            If this value is set; this option is displayed in the filter dropdown along with the <see cref="F:Unity.Entities.Editor.SearchFilterOptions.FilterTooltip"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchFilterOptions.FilterTooltip">
            <summary>
            The tooltip that is shown in the filter dropdown; This is only used if <see cref="F:Unity.Entities.Editor.SearchFilterOptions.FilterText"/> is set.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchFilterOptions.StringComparison">
            <summary>
            The string comparison to use for this filter; If <see langworld="null"/> is passed <see cref="P:Unity.Entities.Editor.SearchElement.GlobalStringComparison"/> is used.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchFilterOptions.SupportedOperatorTypes">
            <summary>
            List of supported operator tokens. Pass <see langworld="null"/> for all operators.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement">
            <summary>
            Represents a reusable control for searching and filtering.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.SearchElementFactory">
            <summary>
            Instantiates a SearchElement using the data read from a UXML file.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.SearchElementTraits">
            <summary>
            Defines UxmlTraits for the SearchElement.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.SearchHandlerBinding">
            <summary>
            Helper class to store data related to uxml bindings for deferred execution.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.SearchHandlerBinding.SourceDataPath">
            <summary>
            The <see cref="T:Unity.Properties.PropertyPath"/> which holds to source data to be searched.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.SearchHandlerBinding.FilteredDataPath">
            <summary>
            The <see cref="T:Unity.Properties.PropertyPath"/> which the filtered results should be placed.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.SearchHandlerBinding.HandlerType">
            <summary>
            The <see cref="T:Unity.Entities.Editor.SearchHandlerType"/> type to use.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.SearchHandlerBinding.MaxFrameTime">
            <summary>
            The maximum number of milliseconds spent on processing the search per frame.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.SearchHandlerBinding.SearchHandler">
            <summary>
            The reference to the strongly typed search query handler.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.SourceDataBindingVisitor">
            <summary>
            Visitor class used to register source data bindings from property paths. i.e. The data which the search should be performed on.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.FilterDataBindingVisitor">
            <summary>
            Visitor class used to register destination data bindings from property paths. i.e. The data which the filtered results should be written to.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.FilterPopupElement">
            <summary>
            The add filter dropdown used to show which filters are available and quickly add them to the search string.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.FilterPopupElement.#ctor(Unity.Entities.Editor.SearchElement,System.Int32)">
            <summary>
            Constructs a new instance of the <see cref="T:Unity.Entities.Editor.SearchElement"/> control.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.ISearchTarget">
            <summary>
            This interface is used to abstract the strongly typed search engine methods and callbacks.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchElement.SearchTarget`1">
            <summary>
            This class is used to store a reference to a strongly typed query handler callback.
            </summary>
            <typeparam name="TData">The search data type.</typeparam>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_UxmlSearchHandlerBinding">
            <summary>
            The search handler bindings registered from uxml traits.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_SearchEngine">
            <summary>
            The engine used to perform the actual searching.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_SearchStringTextField">
            <summary>
            The container which holds the graph fields.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_AddFilterButton">
            <summary>
            The add filter button.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_CancelButton">
            <summary>
            The cancel filter button.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_ProgressBar">
            <summary>
            The progress bar used to draw the search progress.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_SearchTargets">
            <summary>
            Collection of strongly typed search query handlers.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_DelayedSearch">
            <summary>
            The handle to the current delayed search.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.SearchElement.m_FilterPopupElementItems">
            <summary>
            The list of items to show for the filter dropdown.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchElement.value">
            <summary>
            Gets or sets the search string value. This is the string that appears in the text box.
            </summary>
            <remarks>
            Setting this value will trigger the search. To update the value without searching use <seealso cref="M:Unity.Entities.Editor.SearchElement.SetValueWithoutNotify(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Unity.Entities.Editor.SearchElement.SearchDelay">
            <summary>
            Gets or sets the search delay. This is the number of millisecond after input is receive for the search to be executed. The default value is 200.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchElement.FilterPopupWidth">
            <summary>
            Gets or sets the desired width for the popup element. The default value is 175.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchElement.GlobalStringComparison">
            <summary>
            Global string comparison options for word matching and filter handling (if not overridden).
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.GetQueryEngine``1">
            <summary>
            Returns the underlying <see cref="T:UnityEditor.Search.QueryEngine`1"/> for the given <see cref="!:TData"/> type.
            </summary>
            <typeparam name="TData">The data type to get the engine for.</typeparam>
            <returns>The <see cref="T:UnityEditor.Search.QueryEngine`1"/> for the given data type.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Unity.Entities.Editor.SearchElement"/> control.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.GetUxmlSearchHandler">
            <summary>
            Returns the search handler registered through UXML bindings.
            </summary>
            <returns>The search handler created from UXML bindings.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.SetValueWithoutNotify(System.String)">
            <summary>
            Updates the search string value without invoking the search.
            </summary>
            <param name="newValue">The search string value to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.ShowProgress(System.Single)">
            <summary>
            Shows and updates the progress bar for the search field.
            </summary>
            <param name="progress">The progress value to show. Range should be 0 to 1.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.HideProgress">
            <summary>
            Hides the progress bar for the search field.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.RegisterSearchBackend``1(Unity.Entities.Editor.ISearchBackend{``0})">
            <summary>
            Registers a custom <see cref="T:Unity.Entities.Editor.ISearchBackend`1"/> for the specified <typeparamref name="TData"/> type.
            </summary>
            <remarks>
            The <see cref="T:Unity.Entities.Editor.ISearchBackend`1"/> MUST be registered before any search data or search filter callbacks are registered.
            </remarks>
            <param name="backend">The <see cref="T:Unity.Entities.Editor.ISearchBackend`1"/> to register.</param>
            <typeparam name="TData">The data type this backend handles.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.UnregisterSearchBackend``1(Unity.Entities.Editor.ISearchBackend{``0})">
            <summary>
            Unregisters a custom <see cref="T:Unity.Entities.Editor.ISearchBackend`1"/> for the specified <typeparamref name="TData"/> type.
            </summary>
            <param name="backend">The <see cref="T:Unity.Entities.Editor.ISearchBackend`1"/> to unregister.</param>
            <typeparam name="TData">The data type of the backend to unregister.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchDataProperty(Unity.Properties.PropertyPath)">
            <summary>
            Adds a property who's value should be compared against search string.
            </summary>
            <param name="path">The property path to pull search data from.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchDataCallback``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds a callback which returns values that should be compared against the search string.
            </summary>
            <param name="getSearchDataFunc">Callback used to get the data for the search string.</param>
            <typeparam name="TData">The search data type.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchFilterProperty(System.String,Unity.Properties.PropertyPath,Unity.Entities.Editor.SearchFilterOptions)">
            <summary>
            Adds a filter based on a binding path. The given token will resolve to a property at the specified <paramref name="path"/>.
            </summary>
            <param name="token">The identifier of the filter. Typically what precedes the operator in a filter.</param>
            <param name="path">The property this token should resolve to.</param>
            <param name="options">The set of filter options.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchFilterCallback``2(System.String,System.Func{``0,``1},Unity.Entities.Editor.SearchFilterOptions)">
            <summary>
            Adds a search filter based on a callback function. The given token will resolve to the result of the specified <paramref name="getSearchDataFunc"/>.
            </summary>
            <param name="token">The identifier of the filter. Typically what precedes the operator in a filter.</param>
            <param name="getSearchDataFunc">Callback used to get the object that is used in the filter. Takes an object of type TData and returns an object of type TFilter.</param>
            <param name="options">The set of filter options.</param>
            <typeparam name="TData">The data type being searched.</typeparam>
            <typeparam name="TFilter">The return type for the filter.</typeparam>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchFilterPopupItem(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a filter to the filter popup menu. This can be used for discoverability and quick way to add filter text.
            </summary>
            <param name="token">The token for the filter. This should NOT include the operator.</param>
            <param name="filterText">The text or name to display to the user.</param>
            <param name="filterTooltip">An optional tooltip.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchOperatorHandler``2(System.String,System.Func{``0,``1,System.Boolean})">
            <summary>
            Add a custom filter operator handler.
            </summary>
            <typeparam name="TFilterVariable">The operator's left hand side type. This is the type returned by a filter handler.</typeparam>
            <typeparam name="TFilterConstant">The operator's right hand side type.</typeparam>
            <param name="op">The filter operator.</param>
            <param name="handler">Callback to handle the operation. Takes a TFilterVariable (value returned by the filter handler, will vary for each element) and a TFilterConstant (right hand side value of the operator, which is constant), and returns a boolean indicating if the filter passes or not.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.AddSearchOperatorHandler``2(System.String,System.Func{``0,``1,System.StringComparison,System.Boolean})">
            <summary>
            Add a custom filter operator handler.
            </summary>
            <typeparam name="TFilterVariable">The operator's left hand side type. This is the type returned by a filter handler.</typeparam>
            <typeparam name="TFilterConstant">The operator's right hand side type.</typeparam>
            <param name="op">The filter operator.</param>
            <param name="handler">Callback to handle the operation. Takes a TFilterVariable (value returned by the filter handler, will vary for each element), a TFilterConstant (right hand side value of the operator, which is constant), a StringComparison option and returns a boolean indicating if the filter passes or not.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.Search(System.String)">
            <summary>
            Executes the search using the specified search string.
            </summary>
            <param name="searchString">The search string.</param>
            <remarks>
            This method can be used when the underlying data changes and the search must be explicitly run.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.Search">
            <summary>
            Executes the search using the current search string.
            </summary>
            <remarks>
            This method can be used when the underlying data changes and the search must be explicitly run.
            </remarks>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.SearchDelayed(System.Int64)">
            <summary>
            Executes the search after a specified delay.
            </summary>
            <param name="delayMs">The number of milliseconds to wait before executing the search.</param>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.RegisterSearchQueryHandler(Unity.Entities.UI.BindingContextElement,Unity.Properties.PropertyPath,Unity.Properties.PropertyPath)">
            <summary>
            Registers a high level search handler based on the specified bindings. The collection at <paramref name="sourceDataPath"/> will be read from, filtered and written to the <paramref name="filterDataPath"/>.
            </summary>
            <remarks>
            After the initial setup it is recommended to invoke <see cref="M:Unity.Entities.Editor.SearchElement.Search(System.String)"/> to initialize the filtered data.
            </remarks>
            <param name="propertyElement">The property element to use for the data.</param>
            <param name="sourceDataPath">The source data path to read from.</param>
            <param name="filterDataPath">The filter data path to write to.</param>
            <returns>The search handler which can be used to customize the search or unregister the bindings.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.RegisterSearchQueryHandler``1(Unity.Entities.Editor.ISearchQueryHandler{``0})">
            <summary>
            Adds a search query handler. The <see cref="M:Unity.Entities.Editor.ISearchQueryHandler`1.HandleSearchQuery(Unity.Entities.Editor.ISearchQuery{`0})"/> method will be invoked on the specified <see cref="!:ISearchHandler&lt;TData&gt;"/> whenever a search is performed.
            </summary>
            <param name="searchQueryHandler">The search handler to add.</param>
            <typeparam name="TData">The search data type.</typeparam>
            <exception cref="T:System.Exception">The specified search handler has already been registered.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.RegisterSearchQueryHandler``1(System.Action{Unity.Entities.Editor.ISearchQuery{``0}})">
            <summary>
            Adds a search query handler to the element. The specified callback will be invoked whenever a search is performed.
            </summary>
            <param name="searchQueryCallback">The callback to add.</param>
            <typeparam name="TData">The search data type.</typeparam>
            <exception cref="T:System.Exception">The callback has already been registered.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.UnregisterSearchQueryHandler(Unity.Entities.Editor.ISearchHandler)">
            <summary>
            Removes an untyped search handler from the element.
            </summary>
            <param name="searchHandler">The search handler to remove.</param>
            <exception cref="T:System.Exception">The specified search handler has not been registered.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.UnregisterSearchQueryHandler``1(Unity.Entities.Editor.ISearchQueryHandler{``0})">
            <summary>
            Removes a search query handler from the element.
            </summary>
            <param name="searchQueryHandler">The search handler to remove.</param>
            <typeparam name="TData">The search data type.</typeparam>
            <exception cref="T:System.Exception">The specified search handler has not been registered.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.UnregisterSearchQueryHandler``1(System.Action{Unity.Entities.Editor.ISearchQuery{``0}})">
            <summary>
            Removes a search query callback from the element.
            </summary>
            <param name="searchQueryCallback">The callback to remove.</param>
            <typeparam name="TData">The search data type.</typeparam>
            <exception cref="T:System.Exception">The callback has not been registered.</exception>
        </member>
        <member name="M:Unity.Entities.Editor.SearchElement.ClearSearchString">
            <summary>
            Clears the search string and immediately invokes the search callback.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyEntityChangeTracker">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyEntityChangeTracker"/> is responsible for tracking hierarchy changes over time from the underlying data model (entity or gameObject).
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyEntityChangeTracker.OperationModeType.Linear">
            <summary>
            Linear operation mode outputs all entities linearly as is without any hierarchical information.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyEntityChangeTracker.OperationModeType.SceneReferenceAndParentComponents">
            <summary>
            This mode outputs hierarchical information based on <see cref="T:Unity.Entities.SceneReference"/> and <see cref="T:Unity.Transforms.Parent"/> components.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyEntityChangeTracker.m_EntityChangeTracker">
            <summary>
            Change trackers handle the low level entities APIs and gather a set of potentially changed data.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyEntityChangeTracker.OperationMode">
            <summary>
            Gets or sets the operation mode used by the change tracker. This determines which components and data drives the hierarchy.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyEntityChangeTracker.EntityQueryDesc">
            <summary>
            Gets or sets the entity query used by the change tracker.
            </summary>
            <remarks>
            A value of 'null' indicates the 'UniversalQuery' should be used.
            </remarks>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyMultiColumnListView">
            <summary>
            THe main list view driving the hierarchy list elements.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNameColumn.m_Decorators">
            <summary>
            The set of user defined decorators to modify the hierarchy elements.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyNameColumn.m_Items">
            <summary>
            Cached list of created items. This is used to late initialize any decorators that hav been added after the view is already created.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyNameColumn.OnMakeCell">
            <summary>
            Callback invoked whenever a new row element is created.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyConfiguration">
            <summary>
            The high level configuration parameters for the hierarchy.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.UpdateMode">
            <summary>
            Gets or sets the hierarchy update mode.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.MinimumMillisecondsBetweenHierarchyUpdateCycles">
            <summary>
            The minimum number of milliseconds between update ticks. This is used to throttle the refresh rate to a reasonable value.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.MaximumMillisecondsPerEditorUpdate">
            <summary>
            The maximum number of milliseconds to spend on an update tick. This is used to drive time-slicing.
            </summary>
            <remarks>
            This is only used if <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.UpdateMode"/> is set to 'Asynchronous'.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.EntityChangeIntegrationBatchSize">
            <summary>
            The internal batch size to use when integrating entity changes. A higher value means less overhead but larger chunks of work done per tick which can exceed the <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.MaximumMillisecondsPerEditorUpdate"/>.
            </summary>
            <remarks>
            This is only used if <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.UpdateMode"/> is set to 'Asynchronous'.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.GameObjectChangeIntegrationBatchSize">
            <summary>
            The internal batch size to use when integrating gameobject changes. A higher value means less overhead but larger chunks of work done per tick which can exceed the <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.MaximumMillisecondsPerEditorUpdate"/>.
            </summary>
            <remarks>
            This is only used if <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.UpdateMode"/> is set to 'Asynchronous'.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.ExportImmutableBatchSize">
            <summary>
            The internal batch size to use when baking out the immutable hierarchy. A higher value means less overhead but larger chunks of work done per tick which can exceed the <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.MaximumMillisecondsPerEditorUpdate"/>.
            </summary>
            <remarks>
            This is only used if <see cref="F:Unity.Entities.Editor.HierarchyConfiguration.UpdateMode"/> is set to 'Asynchronous'.
            </remarks>
        </member>
        <member name="F:Unity.Entities.Editor.HierarchyConfiguration.ExcludeUnnamedNodesForSearch">
            <summary>
            A flag to disable considering unnamed nodes when searching. This will accelerate performance.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyState">
            <summary>
            The internal serializable state used by the hierarchy. This object should be set by a user when re-constructing the hierarchy.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.HierarchyStats">
            <summary>
            A set of statistics exported by the hierarchy. This can be used to adapt the update and time-slicing behaviours dynamically.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.UpdateCount">
            <summary>
            The current running counter for update ticks.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.UpdateSkipCount">
            <summary>
            The current running counter for skipped update ticks.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.UpdateTime">
            <summary>
            The current running timer for the update.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.LastUpdateCount">
            <summary>
            The number of ticks the last hierarchy update cycle took.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.LastUpdateSkipCount">
            <summary>
            The number of ticks the last update cycle skipped.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.LastUpdateTime">
            <summary>
            The current running timer for the update.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.AverageUpdateCount">
            <summary>
            The average number of ticks to complete a hierarchy update cycle. This is an exponential moving average using a period of 20.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.AverageUpdateSkipCount">
            <summary>
            The average number of ticks to skipped per hierarchy update cycle. This is an exponential moving average using a period of 20.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.HierarchyStats.AverageUpdateTime">
            <summary>
            The average number of milliseconds to complete a hierarchy update cycle. This is an exponential moving average using a period of 20.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.Hierarchy">
            <summary>
            The <see cref="T:Unity.Entities.Editor.Hierarchy"/> data model stores a parent-child based tree which can be efficiently updated and queried.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.OperationModeType.Normal">
            <summary>
            Standard operation mode for the hierarchy.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.OperationModeType.Debug">
            <summary>
            Places the hierarchy in to a self debugging mode.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.Hierarchy.UpdateModeType">
            <summary>
            The internal hierarchy update mode.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.UpdateModeType.Synchronous">
            <summary>
            The hierarchy will perform all work each update.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.UpdateModeType.Asynchronous">
            <summary>
            The hierarchy will time-slice it's update over several frames. <seealso cref="!:AsynchronousOptions"/> to adjust how the time-slicing behaves.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_Allocator">
            <summary>
            The allocator used to construct this instance.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_World">
            <summary>
            The world this hierarchy is tracking.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_HierarchyNodeStore">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodeStore"/> is used to store and mutate nodes in the hierarchy. It is optimized for incremental updates.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_HierarchyNodeImmutableStore">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodeStore.Immutable"/> is used to store a baked out linear set of nodes. It is optimized for enumeration and data access.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_HierarchyNodes">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNodes"/> provides an <see cref="T:System.Collections.IList"/> interface over expanded nodes in the hierarchy. This is directly used by the UI.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_Updater">
            <summary>
            The updater is used to process to hierarchy update over several ticks.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_HierarchyNameStore">
            <summary>
            The <see cref="T:Unity.Entities.Editor.HierarchyNameStore"/> is used as storage and abstraction of names.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_Search">
            <summary>
            The filtering is used to parse and apply search filtering.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_UpdateThrottleTimer">
            <summary>
            Timer used to limit the amount of full updates done within a certain time period.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_UpdateTickTimer">
            <summary>
            Timer used to limit the amount of processing done within a single tick.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_Configuration">
            <summary>
            The hierarchy configuration. This is data which is managed externally by settings, tests or users but drives internal behaviours.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_State">
            <summary>
            The serialized state of the hierarchy. This is data which is managed internally but stored externally.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_Stats">
            <summary>
            Tracker used to gather stats about the hierarchy update.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.Hierarchy.m_Filter">
            <summary>
            The active hierarchy filter.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Hierarchy.Configuration">
            <summary>
            The hierarchy configuration. This is data which is managed externally by settings, tests or users but drives internal behaviours.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Hierarchy.State">
            <summary>
            Gets or sets the hierarchy update mode.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Hierarchy.OperationMode">
            <summary>
            Gets or sets the operation type. This can be used for self debugging.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Hierarchy.Stats">
            <summary>
            Returns statistic information about the hierarchy.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Hierarchy.World">
            <summary>
            Returns the currently active world for the hierarchy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.HasSearchFilter">
            <summary>
            Returns true if the hierarchy has filtering applied.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.Hierarchy.UpdateVersion">
            <summary>
            Gets the current update generation.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.SetSearchQuery(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Applies the given search query to the hierarchy.
            </summary>
            <param name="searchString">The raw search string.</param>
            <param name="tokens">Optional; pre processed set of tokens by a search backend.</param>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetNodes">
            <summary>
            Gets the virtualized <see cref="T:Unity.Entities.Editor.HierarchyNodes"/> set.
            </summary>
            <returns>The virtualized set of nodes.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetEstimatedProgress">
            <summary>
            Gets the estimated updater progress.
            </summary>
            <remarks>
            This value is only an estimate. It should NOT be used for any meaningful logic.
            </remarks>
            <returns>The estimated update progress.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.SetWorld(Unity.Entities.World)">
            <summary>
            Sets the world this hierarchy should be showing.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.IsExpanded(Unity.Entities.Editor.HierarchyNodeHandle)">
            <summary>
            Returns true if the given handle is expanded in the hierarchy.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.Update(System.Boolean)">
            <summary>
            Updates the hierarchy performing entity change integration and re-baking.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetName(Unity.Entities.Editor.HierarchyNodeHandle@)">
            <summary>
            Returns the display name for a given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>.
            </summary>
            <param name="handle">The handle to get the name for.</param>
            <returns>The name for the given handle.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetName(Unity.Entities.Editor.HierarchyNodeHandle@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Set the display name into <paramref name="name"/> for a given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>/
            </summary>
            <param name="handle">The handle to get the name for.</param>
            <param name="name">The name for the given handle.</param>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.IsDisabled(Unity.Entities.Editor.HierarchyNodeHandle@)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/> is should be displayed as disabled in the hierarchy.
            </summary>
            <param name="handle">The handle to fetch the disabled state for.</param>
            <returns><see langword="true"/> if the given node is disabled; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetPrefabType(Unity.Entities.Editor.HierarchyNodeHandle@)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/> is should be displayed as a prefab in the hierarchy.
            </summary>
            <param name="handle">The handle to fetch the prefab state for.</param>
            <returns><see langword="true"/> if the given node is a prefab; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetInstanceId(Unity.Entities.Editor.HierarchyNodeHandle@)">
            <summary>
            Gets the unity engine instance id for the given handle; if any.
            </summary>
            <param name="handle">The handle to get the instance id for.</param>
            <returns>The instance id backing this handle.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.Hierarchy.GetUnityObject(Unity.Entities.Editor.HierarchyNodeHandle@)">
            <summary>
            Gets the backing object for a given <see cref="T:Unity.Entities.Editor.HierarchyNodeHandle"/>; if any.
            </summary>
            <param name="handle">The handle to get the object for.</param>
            <returns>The object backing this handle.</returns>
        </member>
        <member name="T:Unity.Entities.Editor.EntityHeader">
            <summary>
            Wrapper type to display the <see cref="T:Unity.Entities.Entity"/> inspector header.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.SearchableList`2">
            <summary>
            Provides basic searchable list handling.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchableList`2.List">
            <summary>
            The list connected to the search element.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchableList`2.Count">
            <summary>
            Count of source items in the list.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchableList`2.SearchElement">
            <summary>
            The search element connected to the list.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchableList`2.HasFilter">
            <summary>
            Whether or not the search element contains a search value.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.SearchableList`2.RefreshDelay">
            <summary>
            Time between each list refresh when searching asynchronously.
            </summary>
        </member>
        <member name="T:Unity.Entities.Editor.EntityMapSparse`1">
             <summary>
             The <see cref="T:Unity.Entities.Editor.EntityMapSparse`1"/> can be used to store data mapped by entity in a sparse way.
             </summary>
             <remarks>
             This structure stores values indexed by <see cref="F:Unity.Entities.Entity.Index"/>. It offers efficient read/write at the cost of memory.
             
             This structure is best used if:
                 - the size of <typeparamref name="T"/> is smaller than ~8 bytes
                 - the data must exist on MANY entity in a world
            
             otherwise; consider using <seealso cref="T:Unity.Entities.Editor.EntityMapDense`1"/>
             
             This data structure has a fixed memory overhead of sizeof(T) + 4 bytes per entity.
             </remarks>
             <typeparam name="T">The data type to store per entity.</typeparam>
        </member>
        <member name="F:Unity.Entities.Editor.EntityMapSparse`1.m_Allocator">
            <summary>
            The allocator used to construct this instance.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.EntityMapSparse`1.m_EntityMapSparseData">
            <summary>
            The internal unsafe implementation.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapSparse`1.Capacity">
            <summary>
            Returns the upper bound of the sparse array.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapSparse`1.Count">
            <summary>
            Returns the number of entries in the storage.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapSparse`1.#ctor(System.Int32,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Editor.EntityMapSparse`1"/>.
            </summary>
            <param name="initialCapacity">The initial capacity to allocate.</param>
            <param name="allocator">The allocator type.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapSparse`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.EntityMapSparse`1.Item(Unity.Entities.Entity)">
            <summary>
            Gets or sets the data for the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <param name="entity">The entity to get or set data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapSparse`1.Clear">
            <summary>
            Clears the storage for re-use.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapSparse`1.Resize(System.Int32)">
            <summary>
            Resizes to sparse data set to the given capacity.
            </summary>
            <param name="capacity">The capacity to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapSparse`1.Exists(Unity.Entities.Entity)">
            <summary>
            Returns <see langword="true"/> if the specified entity exists in the storage.
            </summary>
            <param name="entity">The entity to check existence for.</param>
            <returns><see langword="true"/> if the entity exists in the storage; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.EntityMapSparse`1.Remove(Unity.Entities.Entity)">
            <summary>
            Removes the data for the specified entity.
            </summary>
            <param name="entity">The entity to remove data for.</param>
        </member>
        <member name="T:Unity.Entities.Editor.UnsafeEntityMapSparse`1">
            <summary>
            The internal storage for the <see cref="T:Unity.Entities.Editor.EntityMapSparse`1"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnsafeEntityMapSparse`1.m_ValueByEntity">
            <summary>
            Collection of values indexed by <see cref="F:Unity.Entities.Entity.Index"/>.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnsafeEntityMapSparse`1.m_VersionByEntity">
            <summary>
            Collection of version indexed by <see cref="F:Unity.Entities.Entity.Index"/>. This is used to track destroyed entities.
            </summary>
        </member>
        <member name="F:Unity.Entities.Editor.UnsafeEntityMapSparse`1.m_Count">
            <summary>
            The actual number of entries in the storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Capacity">
            <summary>
            Returns the upper bound of the sparse array.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Count">
            <summary>
            Returns the number of entries in the storage.
            </summary>
        </member>
        <member name="P:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Item(Unity.Entities.Entity)">
            <summary>
            Gets or sets the data for the specified <see cref="T:Unity.Entities.Entity"/>.
            </summary>
            <param name="entity">The entity to get or set data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.#ctor(System.Int32,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of <see cref="T:Unity.Entities.Editor.UnsafeEntityMapSparse`1"/>.
            </summary>
            <param name="initialCapacity">The initial capacity to allocate.</param>
            <param name="allocator">The allocator type.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Clear">
            <summary>
            Clears the storage for re-use.
            </summary>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Resize(System.Int32)">
            <summary>
            Resizes to sparse data set to the given capacity.
            </summary>
            <param name="capacity">The capacity to set.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Exists(Unity.Entities.Entity)">
            <summary>
            Returns <see langword="true"/> if the specified entity exists in the storage.
            </summary>
            <param name="entity">The entity to check existence for.</param>
            <returns><see langword="true"/> if the entity exists in the storage; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Remove(Unity.Entities.Entity)">
            <summary>
            Removes the data for the specified entity.
            </summary>
            <param name="entity">The entity to remove data for.</param>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.GetValue(Unity.Entities.Entity)">
            <summary>
            Gets the value for the specified entity.
            </summary>
            <param name="entity">The entity to get the data for.</param>
            <returns>The data for the entity.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.GetValueUnchecked(System.Int32)">
            <summary>
            Gets the value for the specified entity index.
            </summary>
            <param name="index">The entity index.</param>
            <returns>The value for the given index.</returns>
        </member>
        <member name="M:Unity.Entities.Editor.UnsafeEntityMapSparse`1.SetValue(Unity.Entities.Entity,`0)">
            <summary>
            Sets the value for the specified entity.
            </summary>
            <param name="entity">The entity to set the data for.</param>
            <param name="value">The data to set.</param>
        </member>
        <member name="T:Unity.Entities.Editor.UnsafeEntityMapSparse`1.Enumerator">
            <summary>
            An enumerator which will iterate key-value pairs in the map.
            </summary>
        </member>
        <member name="F:Unity.Editor.Legacy.RuntimeComponentsDrawer.k_BufferPageLength">
            <summary>
            Number of elements to draw before pagination starts.
            </summary>
        </member>
        <member name="F:Unity.Editor.Legacy.RuntimeComponentsDrawer.m_Pagination">
            <summary>
            Pagination state for each buffer element.
            </summary>
            <remarks>
            The key is the hash code of <see cref="T:Unity.Entities.DynamicBufferContainer`1"/>.
            </remarks>
        </member>
        <member name="F:Unity.Editor.Legacy.RuntimeComponentsDrawer.m_Targets">
            <summary>
            Set of entity targets we are currently inspecting.
            </summary>
        </member>
        <member name="F:Unity.Editor.Legacy.RuntimeComponentsDrawer.m_SelectedComponentTypes">
            <summary>
            Set of components that are currently selected in the UI.
            </summary>
        </member>
        <member name="F:Unity.Editor.Legacy.RuntimeComponentsDrawer.m_Path">
            <summary>
            Property path maintained as we visit. This is used to resolve mixed values across all containers.
            </summary>
        </member>
        <member name="E:Unity.Editor.Legacy.RuntimeComponentsDrawer.OnDeselectComponent">
            <summary>
            Invoked when the user clicks the deselect component button.
            </summary>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.SetTargets(System.Collections.Generic.IEnumerable{Unity.Entities.EntityContainer})">
            <summary>
            Sets the entity targets that should be inspected.
            </summary>
            <param name="targets"></param>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.SetComponentTypes(System.Collections.Generic.IEnumerable{Unity.Entities.TypeIndex})">
            <summary>
            Sets the component types which should be drawn.
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.OnGUI">
            <summary>
            Main draw method.
            </summary>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.VisitProperty``2(Unity.Properties.Property{``0,``1},``0@,``1@)">
            <summary>
            Invoked by the <see cref="T:Unity.Properties.PropertyVisitor"/> base class when encountering ANY property value not consumed by an adapter.
            </summary>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.PropertyField``1(Unity.Properties.IProperty,``0)">
            <summary>
            Draws the given property with a label and value.
            </summary>
            <remarks>
            The property is checked for mixed values.
            </remarks>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.LabelField``1(Unity.Properties.IProperty,``0,System.Boolean)">
            <summary>
            Draws the given property and value with custom formatting.
            </summary>
            <remarks>
            If mixed is true the built in mixedValueContent is shown.
            </remarks>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.LabelField``1(System.String,``0,System.Boolean)">
            <summary>
            Draws the given label and value with custom formatting.
            </summary>
            <remarks>
            If mixed is true the built in mixedValueContent is shown.
            </remarks>
        </member>
        <member name="M:Unity.Editor.Legacy.RuntimeComponentsDrawer.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent)">
            <summary>
            Draws the given label and content with no custom formatting.
            </summary>
        </member>
    </members>
</doc>
