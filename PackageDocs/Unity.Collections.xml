<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unity.Collections</name>
    </assembly>
    <members>
        <member name="T:Unity.Collections.StreamCompressionModel">
             <summary>
             This type uses Huffman encoding to encode values in a lossless manner.
             When sending something like a 32-bit integer over the network, it is impractical to create a Huffman tree
             that encompasses every value the integer can take as it would require a tree with 2^32 leaves.
             To make this more practical, we lump values into a manageable number of power-of-two-sized buckets
             and then only code the bucket index with Huffman and code the position in the bucket using several raw bits
             corresponding to the size of the bucket.
            
             The buckets are small, around 0, and become progressively larger as you move away from zero.
             As most data is deltas against predictions; we expect values to be small and expect most of the redundancy
             to be in the error's size and not in exactly which of the values of that size we end up hitting.
            
             The context is as a sub-model that has its own statistics and uses its own Huffman tree.
             When using the context to read and write a specific value, the context must always be the same.
             The benefit of using multiple contexts is that it allows you to separate the statistics of things that have
             different expected distributions, which leads to more precise statistics, which again yields better compression.
             More contexts does, however, result in a marginal cost of a slightly larger model.
             </summary>
        </member>
        <member name="P:Unity.Collections.StreamCompressionModel.Default">
            <summary>
            A shared singleton instance of <see cref="T:Unity.Collections.StreamCompressionModel"/>, this instance is initialized using
            hardcoded bucket parameters and model.
            </summary>
        </member>
        <member name="F:Unity.Collections.StreamCompressionModel.encodeTable">
            <summary>
            Bucket n starts at bucketOffsets[n] and ends at bucketOffsets[n] + (1 &lt;&lt; bucketSizes[n]).
            (code &lt;&lt; 8) | length
            </summary>
        </member>
        <member name="F:Unity.Collections.StreamCompressionModel.decodeTable">
            <summary>
            Bucket n starts at bucketOffsets[n] and ends at bucketOffsets[n] + (1 &lt;&lt; bucketSizes[n]).
            (symbol &lt;&lt; 8) | length
            </summary>
        </member>
        <member name="F:Unity.Collections.StreamCompressionModel.bucketSizes">
            <summary>
            Specifies the sizes of the buckets in bits, so a bucket of n bits has 2^n values.
            </summary>
        </member>
        <member name="F:Unity.Collections.StreamCompressionModel.bucketOffsets">
            <summary>
            Specifies the starting positions of the bucket.
            </summary>
        </member>
        <member name="M:Unity.Collections.StreamCompressionModel.CalculateBucket(System.UInt32)">
            <summary>
            Calculates the bucket index into the <see cref="F:Unity.Collections.StreamCompressionModel.encodeTable"/> where the specified value should be written.
            </summary>
            <param name="value">A 4-byte unsigned integer value to find a bucket for.</param>
            <returns>The bucket index where to put the value.</returns>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeStreamRange.LastOffset">
            One byte past the end of the last byte written
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeStream">
             <summary>
             A set of untyped, append-only buffers. Allows for concurrent reading and concurrent writing without synchronization.
             </summary>
             <remarks>
             As long as each individual buffer is written in one thread and read in one thread, multiple
             threads can read and write the stream concurrently, *e.g.*
             while thread *A* reads from buffer *X* of a stream, thread *B* can read from
             buffer *Y* of the same stream.
            
             Each buffer is stored as a chain of blocks. When a write exceeds a buffer's current capacity, another block
             is allocated and added to the end of the chain. Effectively, expanding the buffer never requires copying the existing
             data (unlike, for example, with <see cref="T:Unity.Collections.NativeList`1"/>).
            
             **All writing to a stream should be completed before the stream is first read. Do not write to a stream after the first read.**
            
             Writing is done with <see cref="T:Unity.Collections.NativeStream.Writer"/>, and reading is done with <see cref="T:Unity.Collections.NativeStream.Reader"/>.
             An individual reader or writer cannot be used concurrently across threads. Each thread must use its own.
            
             The data written to an individual buffer can be heterogeneous in type, and the data written
             to different buffers of a stream can be entirely different in type, number, and order. Just make sure
             that the code reading from a particular buffer knows what to expect to read from it.
             </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeStream.
            </summary>
            <param name="bufferCount">The number of buffers to give the stream. You usually want
            one buffer for each thread that will read or write the stream.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.ScheduleConstruct``1(Unity.Collections.LowLevel.Unsafe.UnsafeStream@,Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle,Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Creates and schedules a job to allocate a new stream.
             </summary>
             <remarks>The stream can be used on the main thread after completing the returned job or used in other jobs that depend upon the returned job.
            
             Using a job to allocate the buffers can be more efficient, particularly for a stream with many buffers.
             </remarks>
             <typeparam name="T">Ignored.</typeparam>
             <param name="stream">Outputs the new stream.</param>
             <param name="bufferCount">A list whose length determines the number of buffers in the stream.</param>
             <param name="dependency">A job handle. The new job will depend upon this handle.</param>
             <param name="allocator">The allocator to use.</param>
             <returns>The handle of the new job.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.ScheduleConstruct(Unity.Collections.LowLevel.Unsafe.UnsafeStream@,Unity.Collections.NativeArray{System.Int32},Unity.Jobs.JobHandle,Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Creates and schedules a job to allocate a new stream.
             </summary>
             <remarks>The stream can be used on the main thread after completing the returned job or used in other jobs that depend upon the returned job.
            
             Allocating the buffers in a job can be more efficient, particularly for a stream with many buffers.
             </remarks>
             <param name="stream">Outputs the new stream.</param>
             <param name="bufferCount">An array whose value at index 0 determines the number of buffers in the stream.</param>
             <param name="dependency">A job handle. The new job will depend upon this handle.</param>
             <param name="allocator">The allocator to use.</param>
             <returns>The handle of the new job.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.IsEmpty">
            <summary>
            Returns true if this stream is empty.
            </summary>
            <returns>True if this stream is empty or the stream has not been constructed.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeStream.IsCreated">
            <summary>
            Whether this stream has been allocated (and not yet deallocated).
            </summary>
            <remarks>Does not necessarily reflect whether the buffers of the stream have themselves been allocated.</remarks>
            <value>True if this stream has been allocated (and not yet deallocated).</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeStream.ForEachCount">
            <summary>
            The number of buffers in this stream.
            </summary>
            <value>The number of buffers in this stream.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.AsReader">
            <summary>
            Returns a reader of this stream.
            </summary>
            <returns>A reader of this stream.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.AsWriter">
            <summary>
            Returns a writer of this stream.
            </summary>
            <returns>A writer of this stream.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Count">
            <summary>
            Returns the total number of items in the buffers of this stream.
            </summary>
            <remarks>Each <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.Write``1(``0)"/> and <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.Allocate(System.Int32)"/> call increments this number.</remarks>
            <returns>The total number of items in the buffers of this stream.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.ToNativeArray``1(Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Returns a new NativeArray copy of this stream's data.
             </summary>
             <remarks>The length of the array will equal the count of this stream.
            
             Each buffer of this stream is copied to the array, one after the other.
             </remarks>
             <typeparam name="T">The type of values in the array.</typeparam>
             <param name="allocator">The allocator to use.</param>
             <returns>A new NativeArray copy of this stream's data.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will release all resources (memory and safety handles) of this stream.
            </summary>
            <param name="inputDeps">A job handle which the newly scheduled job will depend upon.</param>
            <returns>The handle of a new job that will release all resources (memory and safety handles) of this stream.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer">
            <summary>
            Writes data into a buffer of an <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeStream"/>.
            </summary>
            <remarks>An individual writer can only be used for one buffer of one stream.
            Do not create more than one writer for an individual buffer.</remarks>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.ForEachCount">
            <summary>
            The number of buffers in the stream of this writer.
            </summary>
            <value>The number of buffers in the stream of this writer.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.BeginForEachIndex(System.Int32)">
             <summary>
             Readies this writer to write to a particular buffer of the stream.
             </summary>
             <remarks>Must be called before using this writer. For an individual writer, call this method only once.
            
             When done using this writer, you must call <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.EndForEachIndex"/>.</remarks>
             <param name="foreachIndex">The index of the buffer to write.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.EndForEachIndex">
            <summary>
            Readies the buffer written by this writer for reading.
            </summary>
            <remarks>Must be called before reading the buffer written by this writer.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.Write``1(``0)">
            <summary>
            Write a value to a buffer.
            </summary>
            <remarks>The value is written to the buffer which was specified
            with <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.BeginForEachIndex(System.Int32)"/>.</remarks>
            <typeparam name="T">The type of value to write.</typeparam>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.Allocate``1">
            <summary>
            Allocate space in a buffer.
            </summary>
            <remarks>The space is allocated in the buffer which was specified
            with <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.BeginForEachIndex(System.Int32)"/>.</remarks>
            <typeparam name="T">The type of value to allocate space for.</typeparam>
            <returns>A reference to the allocation.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.Allocate(System.Int32)">
            <summary>
            Allocate space in a buffer.
            </summary>
            <remarks>The space is allocated in the buffer which was specified
            with <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Writer.BeginForEachIndex(System.Int32)"/>.</remarks>
            <param name="size">The number of bytes to allocate.</param>
            <returns>The allocation.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader">
            <summary>
            Reads data from a buffer of an <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeStream"/>.
            </summary>
            <remarks>An individual reader can only be used for one buffer of one stream.
            Do not create more than one reader for an individual buffer.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.BeginForEachIndex(System.Int32)">
             <summary>
             Readies this reader to read a particular buffer of the stream.
             </summary>
             <remarks>Must be called before using this reader. For an individual reader, call this method only once.
            
             When done using this reader, you must call <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.EndForEachIndex"/>.</remarks>
             <param name="foreachIndex">The index of the buffer to read.</param>
             <returns>The number of remaining elements to read from the buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.EndForEachIndex">
            <summary>
            Does nothing.
            </summary>
            <remarks>Included only for consistency with <see cref="T:Unity.Collections.NativeStream"/>.</remarks>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.ForEachCount">
            <summary>
            The number of buffers in the stream of this reader.
            </summary>
            <value>The number of buffers in the stream of this reader.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.RemainingItemCount">
            <summary>
            The number of items not yet read from the buffer.
            </summary>
            <value>The number of items not yet read from the buffer.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.ReadUnsafePtr(System.Int32)">
            <summary>
            Returns a pointer to the next position to read from the buffer. Advances the reader some number of bytes.
            </summary>
            <param name="size">The number of bytes to advance the reader.</param>
            <returns>A pointer to the next position to read from the buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the reader has been advanced past the end of the buffer.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.Read``1">
            <summary>
            Reads the next value from the buffer.
            </summary>
            <remarks>Each read advances the reader to the next item in the buffer.</remarks>
            <typeparam name="T">The type of value to read.</typeparam>
            <returns>A reference to the next value from the buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.Peek``1">
            <summary>
            Reads the next value from the buffer. Does not advance the reader.
            </summary>
            <typeparam name="T">The type of value to read.</typeparam>
            <returns>A reference to the next value from the buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeStream.Reader.Count">
            <summary>
            Returns the total number of items in the buffers of the stream.
            </summary>
            <returns>The total number of items in the buffers of the stream.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.HashSetExtensions">
            <summary>
            Provides extension methods for sets.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.ExceptWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.IntersectWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.HashSetExtensions.UnionWith``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.NotBurstCompatible.Extensions">
            <summary>
            Provides some extension methods for various collections.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NotBurstCompatible.Extensions.ToArray``1(Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet{``0})">
            <summary>
            Returns a new managed array with all the elements copied from a set.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="set">The set whose elements are copied to the array.</param>
            <returns>A new managed array with all the elements copied from a set.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NotBurstCompatible.Extensions.AddNBC(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer@,System.String)">
            <summary>
            Adds the content of a string to this append buffer.
            </summary>
            <remarks>The length of the string is written as an int to the buffer before the characters are written.</remarks>
            <param name="buffer">The buffer to which to add the string.</param>
            <param name="value">The string to copy.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NotBurstCompatible.Extensions.ToBytesNBC(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer@)">
            <summary>
            Returns an unmanaged byte array with a copy of this buffer's contents.
            </summary>
            <param name="buffer">This buffer.</param>
            <returns>An unmanaged byte array with a copy of this buffer's contents.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NotBurstCompatible.Extensions.ReadNextNBC(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader@,System.String@)">
            <summary>
            Reads a string from this buffer reader.
            </summary>
            <param name="value">Outputs the string.</param>
            <param name="reader">This reader.</param>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.NativeListUnsafeUtility">
            <summary>
            Provides unsafe utility methods for NativeList.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeListUnsafeUtility.GetUnsafePtr``1(Unity.Collections.NativeList{``0})">
            <summary>
            Returns a pointer to this list's internal buffer.
            </summary>
            <remarks>Performs a job safety check for read-write access.</remarks>
            <param name="list">The list.</param>
            <typeparam name="T">The type of the elements.</typeparam>
            <returns>A pointer to this list's internal buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeListUnsafeUtility.GetUnsafeReadOnlyPtr``1(Unity.Collections.NativeList{``0})">
            <summary>
            Returns a pointer to this list's internal buffer.
            </summary>
            <remarks>Performs a job safety check for read-only access.</remarks>
            <param name="list">The list.</param>
            <typeparam name="T">The type of the elements.</typeparam>
            <returns>A pointer to this list's internal buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeListUnsafeUtility.GetAtomicSafetyHandle``1(Unity.Collections.NativeList{``0}@)">
             <summary>
             Returns this list's <see cref="T:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle"/>.
             </summary>
             <param name="list">The list.</param>
             <typeparam name="T">The type of the elements.</typeparam>
             <returns>The atomic safety handle for this list.</returns>
             <remarks>
             The job safety checks use a native collection's atomic safety handle to assert safety.
            
             This method is only available if the symbol `ENABLE_UNITY_COLLECTIONS_CHECKS` is defined.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeListUnsafeUtility.GetInternalListDataPtrUnchecked``1(Unity.Collections.NativeList{``0}@)">
            <summary>
            Returns a pointer to this list's internal unsafe list.
            </summary>
            <remarks>Performs no job safety checks.</remarks>
            <param name="list">The list.</param>
            <typeparam name="T">The type of the elements.</typeparam>
            <returns>A pointer to this list's internal unsafe list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1">
            <summary>
            An unordered, expandable set of unique values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeParallelHashSet.
            </summary>
            <param name="initialCapacity">The number of values that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.IsEmpty">
            <summary>
            Whether this set is empty.
            </summary>
            <value>True if this set is empty or if the set has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Count">
            <summary>
            Returns the current number of values in this set.
            </summary>
            <returns>The current number of values in this set.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Capacity">
            <summary>
            The number of values that fit in the current allocation.
            </summary>
            <value>The number of values that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.IsCreated">
            <summary>
            Whether this set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this set.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this set.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Clear">
            <summary>
            Removes all values.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Add(`0)">
            <summary>
            Adds a new value (unless it is already present).
            </summary>
            <param name="item">The value to add.</param>
            <returns>True if the value was not already present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Remove(`0)">
            <summary>
            Removes a particular value.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Contains(`0)">
            <summary>
            Returns true if a particular value is present.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.TrimExcess">
            <summary>
            Sets the capacity to match what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of this set's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of the set's values.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator over the values of this set.
            </summary>
            <returns>An enumerator over the values of this set.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator">
            <summary>
            An enumerator over the values of a set.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.Current"/> is invalid.
            The first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.MoveNext"/> call advances the enumerator to the first value.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next value.
            </summary>
            <returns>True if `Current` is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.Current">
            <summary>
            The current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator in the container.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.AsReadOnly">
            <summary>
            Returns a readonly version of this UnsafeHashMap instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the UnsafeHashMap it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly">
            <summary>
            A read-only alias for the value of a UnsafeHashSet. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.IsEmpty">
            <summary>
            Whether this hash set is empty.
            </summary>
            <value>True if this hash set is empty or if the set has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.Contains(`0)">
            <summary>
            Returns true if a particular value is present.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>True if the item was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of this set's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of the set's values.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData">
            <summary>
            A bucket of key-value pairs. Used as the internal storage for hash maps.
            </summary>
            <remarks>Exposed publicly only for advanced use cases.</remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData.values">
            <summary>
            The buffer of values.
            </summary>
            <value>The buffer of values.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData.keys">
            <summary>
            The buffer of keys.
            </summary>
            <value>The buffer of keys.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData.next">
            <summary>
            The next bucket in the chain.
            </summary>
            <value>The next bucket in the chain.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData.buckets">
            <summary>
            The first bucket in the chain.
            </summary>
            <value>The first bucket in the chain.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData.bucketCapacityMask">
            <summary>
            One less than the bucket capacity.
            </summary>
            <value>One less than the bucket capacity.</value>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.KeyValue`2">
            <summary>
            A key-value pair.
            </summary>
            <remarks>Used for enumerators.</remarks>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.KeyValue`2.Null">
            <summary>
             An invalid KeyValue.
            </summary>
            <value>In a hash map enumerator's initial state, its <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.Current"/> value is Null.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.KeyValue`2.Key">
            <summary>
            The key.
            </summary>
            <value>The key. If this KeyValue is Null, returns the default of TKey.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.KeyValue`2.Value">
            <summary>
            Value of key/value pair.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.KeyValue`2.GetKeyValue(`0@,`1@)">
            <summary>
            Gets the key and the value.
            </summary>
            <param name="key">Outputs the key. If this KeyValue is Null, outputs the default of TKey.</param>
            <param name="value">Outputs the value. If this KeyValue is Null, outputs the default of TValue.</param>
            <returns>True if the key-value pair is valid.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2">
            <summary>
            An unordered, expandable associative array.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeParallelHashMap.
            </summary>
            <param name="capacity">The number of key-value pairs that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or the hash map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than the current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Clear">
            <summary>
            Removes all key-value pairs.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method returns false without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <returns>True if the key-value pair was added.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method throws without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the key was already present.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Remove(`0)">
            <summary>
            Removes a key-value pair.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if a key-value pair was removed.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Item(`0)">
            <summary>
            Gets and sets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw. Setting a key that is not already present will add the key.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this hash map.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.AsParallelWriter">
            <summary>
            Returns a parallel writer for this hash map.
            </summary>
            <returns>A parallel writer for this hash map.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.ParallelWriter">
            <summary>
            A parallel writer for a NativeParallelHashMap.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.AsParallelWriter"/> to create a parallel writer for a NativeParallelHashMap.
            </remarks>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.ParallelWriter.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.ParallelWriter.TryAdd(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method returns false without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <returns>True if the key-value pair was added.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.System#Collections#Generic#IEnumerable{Unity#Collections#LowLevel#Unsafe#KeyValue{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator">
            <summary>
            An enumerator over the key-value pairs of a hash map.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.Current"/> is not valid to read.
            From this state, the first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.MoveNext"/> call advances the enumerator to the first key-value pair.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next key-value pair.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMap`2.Enumerator.Current">
            <summary>
            The current key-value pair.
            </summary>
            <value>The current key-value pair.</value>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UntypedUnsafeParallelHashMap">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.CapacityGrowthPolicy">
            <summary>
            Container growth policy behavior.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.CapacityGrowthPolicy.CeilPow2">
            <summary>
            Double growth policy. It minimizes number of resizes needed for large number of elements.
            It should be used in cases where number of elements is not known ahead of time.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.CapacityGrowthPolicy.Linear">
            <summary>
            Linear growth policy. It minimizes amount of memory used by container. It should be
            used in cases where number of elements is approximately known, but might require
            infrequent calls to container resize.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.CapacityGrowthPolicy.ThrowIfFull">
            <summary>
            No growth policy. It declares that user knows exactly required capacity, and that resizing
            container should be treated as error. It should be used in cases where number of elements is
            known, and resize should not happen.
            </summary>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2">
            <summary>
            An unordered, expandable associative array.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeHashMap.
            </summary>
            <param name="initialCapacity">The number of key-value pairs that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this hash map.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or if the map has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than the current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Clear">
            <summary>
            Removes all key-value pairs.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method returns false without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <returns>True if the key-value pair was added.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method throws without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the key was already present.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Remove(`0)">
            <summary>
            Removes a key-value pair.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if a key-value pair was removed.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.TrimExcess">
            <summary>
            Sets the capacity to match what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Item(`0)">
            <summary>
            Gets and sets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw. Setting a key that is not already present will add the key.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.System#Collections#Generic#IEnumerable{Unity#Collections#KVPair{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator">
            <summary>
            An enumerator over the key-value pairs of a container.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.Current"/> is not valid to read.
            From this state, the first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.MoveNext"/> call advances the enumerator to the first key-value pair.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next key-value pair.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.Current">
            <summary>
            The current key-value pair.
            </summary>
            <value>The current key-value pair.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator in the container.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.AsReadOnly">
            <summary>
            Returns a readonly version of this UnsafeHashMap instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the UnsafeHashMap it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly">
            <summary>
            A read-only alias for the value of a UnsafeHashMap. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or if the map has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.Item(`0)">
            <summary>
            Gets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.System#Collections#Generic#IEnumerable{Unity#Collections#KVPair{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeList`1">
            <summary>
            An unmanaged, resizable list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Ptr">
            <summary>
            The internal buffer of this list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.m_length">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.m_capacity">
            <summary>
            The number of elements that can fit in the internal buffer.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Allocator">
            <summary>
            The allocator used to create the internal buffer.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Length">
            <summary>
            The number of elements.
            </summary>
            <value>The number of elements.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Capacity">
            <summary>
            The number of elements that can fit in the internal buffer.
            </summary>
            <value>The number of elements that can fit in the internal buffer.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Item(System.Int32)">
            <summary>
            The element at an index.
            </summary>
            <param name="index">An index.</param>
            <value>The element at the index.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the element at a given index.
            </summary>
            <param name="index">The index to access. Must be in the range of [0..Length).</param>
            <returns>A reference to the element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.#ctor(`0*,System.Int32)">
            <summary>
            Initializes and returns an instance of UnsafeList.
            </summary>
            <param name="ptr">An existing byte array to set as the internal buffer.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of UnsafeList.
            </summary>
            <param name="initialCapacity">The initial capacity of the list.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Create(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Returns a new list.
            </summary>
            <param name="initialCapacity">The initial capacity of the list.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
            <returns>A pointer to the new list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Destroy(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0}*)">
            <summary>
            Destroys the list.
            </summary>
            <param name="listData">The list to destroy.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.IsEmpty">
            <summary>
            Whether the list is empty.
            </summary>
            <value>True if the list is empty or the list has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.IsCreated">
            <summary>
            Whether this list has been allocated (and not yet deallocated).
            </summary>
            <value>True if this list has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that frees the memory of this list.
            </summary>
            <param name="inputDeps">The dependency for the new job.</param>
            <returns>The handle of the new job. The job depends upon `inputDeps` and frees the memory of this list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Resize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Sets the length, expanding the capacity if necessary.
            </summary>
            <param name="length">The new length.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.SetCapacity(System.Int32)">
            <summary>
            Sets the capacity.
            </summary>
            <param name="capacity">The new capacity.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.TrimExcess">
            <summary>
            Sets the capacity to match the length.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AddNoResize(`0)">
            <summary>
            Adds an element to the end of this list.
            </summary>
            <remarks>
            Increments the length by 1. Never increases the capacity.
            </remarks>
            <param name="value">The value to add to the end of the list.</param>
            <exception cref="T:System.Exception">Thrown if incrementing the length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Copies elements from a buffer to the end of this list.
            </summary>
            <remarks>
            Increments the length by `count`. Never increases the capacity.
            </remarks>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of elements to copy from the buffer.</param>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AddRangeNoResize(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0})">
            <summary>
            Copies the elements of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length by the length of the other list. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Add(`0@)">
            <summary>
            Adds an element to the end of the list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <remarks>
            Increments the length by 1. Increases the capacity if necessary.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Copies the elements of a buffer to the end of this list.
            </summary>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of elements to copy from the buffer.</param>
            <remarks>
            Increments the length by `count`. Increases the capacity if necessary.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AddRange(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0})">
            <summary>
            Copies the elements of another list to the end of the list.
            </summary>
            <param name="list">The list to copy from.</param>
            <remarks>
            The length is increased by the length of the other list. Increases the capacity if necessary.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <remarks>
            Length is incremented by count. If necessary, the capacity is increased.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`. If necessary, the capacity will be increased accordingly.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.ArgumentException">Thrown if `end &lt; begin`.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `begin` or `end` are out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to the specified index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove an element from this list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count` elements to the indexes `index` up to `index + count`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
             </remarks>
             <param name="index">The index of the first element to overwrite.</param>
             <param name="count">The number of elements to copy and remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds, `count` is negative,
             or `index + count` exceeds the length.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index, shifting everything above it down by one. Decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.RemoveAtSwapBack(System.Int32)"/> is a more efficient way to remove elements.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements in a range, shifting everything above the range down by *N*. Decrements the length by *N*.
            </summary>
            <param name="index">The index of the first element to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveRangeSwapBackWithBeginEnd`
            is a more efficient way to remove elements.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds, `count` is negative,
            or `index + count` exceeds the length.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AsReadOnly">
            <summary>
            Returns a read only of this list.
            </summary>
            <returns>A read only of this list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ReadOnly">
            <summary>
            A read only for an UnsafeList&lt;T&gt;.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AsReadOnly"/> to create a read only for a list.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ReadOnly.Ptr">
            <summary>
            The internal buffer of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ReadOnly.Length">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AsParallelReader">
            <summary>
            Returns a parallel reader of this list.
            </summary>
            <returns>A parallel reader of this list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelReader">
            <summary>
            A parallel reader for an UnsafeList&lt;T&gt;.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AsParallelReader"/> to create a parallel reader for a list.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelReader.Ptr">
            <summary>
            The internal buffer of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelReader.Length">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AsParallelWriter">
            <summary>
            Returns a parallel writer of this list.
            </summary>
            <returns>A parallel writer of this list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelWriter">
            <summary>
            A parallel writer for an UnsafeList&lt;T&gt;.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.AsParallelWriter"/> to create a parallel writer for a list.
            </remarks>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelWriter.Ptr">
            <summary>
            The data of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelWriter.ListData">
            <summary>
            The UnsafeList to write to.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelWriter.AddNoResize(`0)">
            <summary>
            Adds an element to the end of the list.
            </summary>
            <param name="value">The value to add to the end of the list.</param>
            <remarks>
            Increments the length by 1. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if incrementing the length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelWriter.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Copies elements from a buffer to the end of the list.
            </summary>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of elements to copy from the buffer.</param>
            <remarks>
            Increments the length by `count`. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.ParallelWriter.AddRangeNoResize(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0})">
            <summary>
            Copies the elements of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length by the length of the other list. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.CopyFrom(Unity.Collections.NativeArray{`0}@)">
            <summary>
            Copies all elements of specified container to this container.
            </summary>
            <param name="other">An container to copy into this container.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.CopyFrom(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0}@)">
            <summary>
            Copies all elements of specified container to this container.
            </summary>
            <param name="other">An container to copy into this container.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.GetEnumerator">
            <summary>
            Returns an enumerator over the elements of the list.
            </summary>
            <returns>An enumerator over the elements of the list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator">
            <summary>
            An enumerator over the elements of a list.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator.Current"/> is invalid.
            The first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator.MoveNext"/> call advances the enumerator to the first element of the list.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the list.
            </summary>
            <remarks>
            The first `MoveNext` call advances the enumerator to the first element of the list. Before this call, `Current` is not valid to read.
            </remarks>
            <returns>True if `Current` is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeList`1.Enumerator.Current">
            <summary>
            The current element.
            </summary>
            <value>The current element.</value>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions">
            <summary>
            Provides extension methods for UnsafeList.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.IndexOf``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="list">This list.</param>
            <param name="value">A value to locate.</param>
            <returns>The zero-based index of the first occurrence of the value if it is found. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.Contains``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="list">This list.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.IndexOf``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0}.ReadOnly,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in the list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="list">This reader of the list.</param>
            <param name="value">A value to locate.</param>
            <returns>The zero-based index of the first occurrence of the value if it is found. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.Contains``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0}.ReadOnly,``1)">
            <summary>
            Returns true if a particular value is present in the list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="list">This reader of the list.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in the list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.IndexOf``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0}.ParallelReader,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in the list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="list">This reader of the list.</param>
            <param name="value">A value to locate.</param>
            <returns>The zero-based index of the first occurrence of the value if it is found. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.Contains``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0}.ParallelReader,``1)">
            <summary>
            Returns true if a particular value is present in the list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="list">This reader of the list.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in the list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeListExtensions.ArraysEqual``1(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},Unity.Collections.LowLevel.Unsafe.UnsafeList{``0}@)">
            <summary>
            Returns true if this container and another have equal length and content.
            </summary>
            <typeparam name="T">The type of the source container's elements.</typeparam>
            <param name="container">The container to compare for equality.</param>
            <param name="other">The other container to compare for equality.</param>
            <returns>True if the containers have equal length and content.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1">
            <summary>
            An unmanaged, resizable list of pointers.
            </summary>
            <typeparam name="T">The type of pointer element.</typeparam>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Ptr">
            <summary>
            The internal buffer of this list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.m_length">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.m_capacity">
            <summary>
            The number of elements that can fit in the internal buffer.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Allocator">
            <summary>
            The allocator used to create the internal buffer.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Length">
            <summary>
            The number of elements.
            </summary>
            <value>The number of elements.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Capacity">
            <summary>
            The number of elements that can fit in the internal buffer.
            </summary>
            <value>The number of elements that can fit in the internal buffer.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Item(System.Int32)">
            <summary>
            The element at an index.
            </summary>
            <param name="index">An index.</param>
            <value>The element at the index.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the element at a given index.
            </summary>
            <param name="index">The index to access. Must be in the range of [0..Length).</param>
            <returns>A reference to the element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.#ctor(`0**,System.Int32)">
            <summary>
            Initializes and returns an instance of UnsafePtrList.
            </summary>
            <param name="ptr">An existing pointer array to set as the internal buffer.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of UnsafePtrList.
            </summary>
            <param name="initialCapacity">The initial capacity of the list.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Create(`0**,System.Int32)">
            <summary>
            Returns a new list of pointers.
            </summary>
            <param name="ptr">An existing pointer array to set as the internal buffer.</param>
            <param name="length">The length.</param>
            <returns>A pointer to the new list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Create(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Returns a new list of pointers.
            </summary>
            <param name="initialCapacity">The initial capacity of the list.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
            <returns>A pointer to the new list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Destroy(Unity.Collections.LowLevel.Unsafe.UnsafePtrList{`0}*)">
            <summary>
            Destroys the list.
            </summary>
            <param name="listData">The list to destroy.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.IsEmpty">
            <summary>
            Whether the list is empty.
            </summary>
            <value>True if the list is empty or the list has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.IsCreated">
            <summary>
            Whether this list has been allocated (and not yet deallocated).
            </summary>
            <value>True if this list has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that frees the memory of this list.
            </summary>
            <param name="inputDeps">The dependency for the new job.</param>
            <returns>The handle of the new job. The job depends upon `inputDeps` and frees the memory of this list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Resize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Sets the length, expanding the capacity if necessary.
            </summary>
            <param name="length">The new length.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.SetCapacity(System.Int32)">
            <summary>
            Sets the capacity.
            </summary>
            <param name="capacity">The new capacity.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.TrimExcess">
            <summary>
            Sets the capacity to match the length.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.IndexOf(System.Void*)">
            <summary>
            Returns the index of the first occurrence of a specific pointer in the list.
            </summary>
            <param name="ptr">The pointer to search for in the list.</param>
            <returns>The index of the first occurrence of the pointer. Returns -1 if it is not found in the list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Contains(System.Void*)">
            <summary>
            Returns true if the list contains at least one occurrence of a specific pointer.
            </summary>
            <param name="ptr">The pointer to search for in the list.</param>
            <returns>True if the list contains at least one occurrence of the pointer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AddNoResize(System.Void*)">
            <summary>
            Adds a pointer to the end of this list.
            </summary>
            <remarks>
            Increments the length by 1. Never increases the capacity.
            </remarks>
            <param name="value">The pointer to add to the end of the list.</param>
            <exception cref="T:System.Exception">Thrown if incrementing the length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AddRangeNoResize(System.Void**,System.Int32)">
            <summary>
            Copies pointers from a buffer to the end of this list.
            </summary>
            <remarks>
            Increments the length by `count`. Never increases the capacity.
            </remarks>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of pointers to copy from the buffer.</param>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AddRangeNoResize(Unity.Collections.LowLevel.Unsafe.UnsafePtrList{`0})">
            <summary>
            Copies the pointers of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length by the length of the other list. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Add(System.IntPtr@)">
            <summary>
            Adds a pointer to the end of the list.
            </summary>
            <param name="value">The pointer to add to the end of this list.</param>
            <remarks>
            Increments the length by 1. Increases the capacity if necessary.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.Add(System.Void*)">
            <summary>
            Adds a pointer to the end of the list.
            </summary>
            <param name="value">The pointer to add to the end of this list.</param>
            <remarks>
            Increments the length by 1. Increases the capacity if necessary.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Adds elements from a buffer to this list.
            </summary>
            <param name="ptr">A pointer to the buffer.</param>
            <param name="length">The number of elements to add to the list.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AddRange(Unity.Collections.LowLevel.Unsafe.UnsafePtrList{`0})">
            <summary>
            Copies the elements of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length by the length of the other list. Increases the capacity if necessary.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts pointers toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts pointers in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`. If necessary, the capacity will be increased accordingly.
            
             If `end` equals `begin`, the method does nothing.
            
             The pointer at index `begin` will be copied to index `end`, the pointer at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever pointers they held prior.
             </remarks>
             <param name="begin">The index of the first pointer that will be shifted up.</param>
             <param name="end">The index where the first shifted pointer will end up.</param>
             <exception cref="T:System.ArgumentException">Thrown if `end &lt; begin`.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `begin` or `end` are out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last pointer of this list to the specified index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove a pointer from this list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last pointer.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* pointer of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count` pointers to the indexes `index` up to `index + count`.
            
             Useful as a cheap way to remove pointers from a list when you don't care about preserving order.
             </remarks>
             <param name="index">The index of the first pointer to overwrite.</param>
             <param name="count">The number of pointers to copy and remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds, `count` is negative,
             or `index + count` exceeds the length.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the pointer at an index, shifting everything above it down by one. Decrements the length by 1.
            </summary>
            <param name="index">The index of the pointer to remove.</param>
            <remarks>
            If you don't care about preserving the order of the pointers, <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.RemoveAtSwapBack(System.Int32)"/> is a more efficient way to remove pointers.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* pointers in a range, shifting everything above the range down by *N*. Decrements the length by *N*.
            </summary>
            <param name="index">The index of the first pointer to remove.</param>
            <param name="count">The number of pointers to remove.</param>
            <remarks>
            If you don't care about preserving the order of the pointers, `RemoveRangeSwapBackWithBeginEnd`
            is a more efficient way to remove pointers.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds, `count` is negative,
            or `index + count` exceeds the length.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. It will throw NotImplementedException if it is used.
            </summary>
            <remarks>Use Enumerator GetEnumerator() instead.</remarks>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.System#Collections#Generic#IEnumerable{System#IntPtr}#GetEnumerator">
            <summary>
            This method is not implemented. It will throw NotImplementedException if it is used.
            </summary>
            <remarks>Use Enumerator GetEnumerator() instead.</remarks>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AsReadOnly">
            <summary>
            Returns a read only of this list.
            </summary>
            <returns>A read only of this list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ReadOnly">
            <summary>
            A read only for an UnsafePtrList&lt;T&gt;.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AsReadOnly"/> to create a read only for a list.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ReadOnly.Ptr">
            <summary>
            The internal buffer of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ReadOnly.Length">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ReadOnly.IndexOf(System.Void*)">
            <summary>
            Returns the index of the first occurrence of a specific pointer in the list.
            </summary>
            <param name="ptr">The pointer to search for in the list.</param>
            <returns>The index of the first occurrence of the pointer. Returns -1 if it is not found in the list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ReadOnly.Contains(System.Void*)">
            <summary>
            Returns true if the list contains at least one occurrence of a specific pointer.
            </summary>
            <param name="ptr">The pointer to search for in the list.</param>
            <returns>True if the list contains at least one occurrence of the pointer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AsParallelReader">
            <summary>
            Returns a parallel reader of this list.
            </summary>
            <returns>A parallel reader of this list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelReader">
            <summary>
            A parallel reader for an UnsafePtrList&lt;T&gt;.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AsParallelReader"/> to create a parallel reader for a list.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelReader.Ptr">
            <summary>
            The internal buffer of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelReader.Length">
            <summary>
            The number of elements.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelReader.IndexOf(System.Void*)">
            <summary>
            Returns the index of the first occurrence of a specific pointer in the list.
            </summary>
            <param name="ptr">The pointer to search for in the list.</param>
            <returns>The index of the first occurrence of the pointer. Returns -1 if it is not found in the list.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelReader.Contains(System.Void*)">
            <summary>
            Returns true if the list contains at least one occurrence of a specific pointer.
            </summary>
            <param name="ptr">The pointer to search for in the list.</param>
            <returns>True if the list contains at least one occurrence of the pointer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AsParallelWriter">
            <summary>
            Returns a parallel writer of this list.
            </summary>
            <returns>A parallel writer of this list.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelWriter">
            <summary>
            A parallel writer for an UnsafePtrList&lt;T&gt;.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.AsParallelWriter"/> to create a parallel writer for a list.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelWriter.Ptr">
            <summary>
            The data of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelWriter.ListData">
            <summary>
            The UnsafeList to write to.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelWriter.AddNoResize(`0*)">
            <summary>
            Adds a pointer to the end of the list.
            </summary>
            <param name="value">The pointer to add to the end of the list.</param>
            <remarks>
            Increments the length by 1. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if incrementing the length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelWriter.AddRangeNoResize(`0**,System.Int32)">
            <summary>
            Copies pointers from a buffer to the end of the list.
            </summary>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of pointers to copy from the buffer.</param>
            <remarks>
            Increments the length by `count`. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1.ParallelWriter.AddRangeNoResize(Unity.Collections.LowLevel.Unsafe.UnsafePtrList{`0})">
            <summary>
            Copies the pointers of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length by the length of the other list. Never increases the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32">
            <summary>
            A 32-bit atomic counter.
            </summary>
            <remarks>Rather than have its own int, a counter *points* to an int. This arrangement lets counters in different jobs share reference to the same underlying int.</remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.Counter">
            <summary>
            The int that is modified by this counter.
            </summary>
            <value>The int that is modified by this counter.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.#ctor(System.Void*)">
            <summary>
            Initializes and returns an instance of UnsafeAtomicCounter32.
            </summary>
            <param name="ptr">A pointer to the int to be modified by this counter.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.Reset(System.Int32)">
            <summary>
            Non-atomically sets this counter to a value.
            </summary>
            <param name="value">The value to set. Defaults to 0</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.Add(System.Int32)">
            <summary>
            Atomically adds a value to this counter.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The original value before the add.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.Sub(System.Int32)">
            <summary>
            Atomically subtracts a value from this counter.
            </summary>
            <param name="value">The value to subtract.</param>
            <returns>The original value before the subtract.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.AddSat(System.Int32,System.Int32)">
            <summary>
            Atomically adds a value to this counter. The result will not be greater than a maximum value.
            </summary>
            <param name="value">The value to add to this counter.</param>
            <param name="max">The maximum which the result will not be greater than.</param>
            <returns>The original value before the add.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32.SubSat(System.Int32,System.Int32)">
            <summary>
            Atomically subtracts a value from this counter. The result will not be less than a minimum value.
            </summary>
            <param name="value">The value to subtract from this counter.</param>
            <param name="min">The minimum which the result will not be less than.</param>
            <returns>The original value before the subtract.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64">
            <summary>
            A 64-bit atomic counter.
            </summary>
            <remarks>Rather than have its own long, a counter *points* to a long. This arrangement lets counters in different jobs share reference to the same underlying long.</remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.Counter">
            <summary>
            The long that is modified by this counter.
            </summary>
            <value>The long that is modified by this counter.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.#ctor(System.Void*)">
            <summary>
            Initializes and returns an instance of UnsafeAtomicCounter64.
            </summary>
            <param name="ptr">A pointer to the long to be modified by this counter.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.Reset(System.Int64)">
            <summary>
            Non-atomically sets this counter to a value.
            </summary>
            <param name="value">The value to set. Defaults to 0</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.Add(System.Int64)">
            <summary>
            Atomically adds a value to this counter.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The original value before the add.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.Sub(System.Int64)">
            <summary>
            Atomically subtracts a value from this counter.
            </summary>
            <param name="value">The value to subtract.</param>
            <returns>The original value before the subtract.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.AddSat(System.Int64,System.Int64)">
            <summary>
            Atomically adds a value to this counter. The result will not be greater than a maximum value.
            </summary>
            <param name="value">The value to add to this counter.</param>
            <param name="max">The maximum which the result will not be greater than.</param>
            <returns>The original value before the add.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64.SubSat(System.Int64,System.Int64)">
            <summary>
            Atomically subtracts a value from this counter. The result will not be less than a minimum value.
            </summary>
            <param name="value">The value to subtract from this counter.</param>
            <param name="min">The minimum which the result will not be less than.</param>
            <returns>The original value before the subtract.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1">
            <summary>
            An unordered, expandable set of unique values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeParallelHashSet.
            </summary>
            <param name="capacity">The number of values that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.IsEmpty">
            <summary>
            Whether this set is empty.
            </summary>
            <value>True if this set is empty.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Count">
            <summary>
            Returns the current number of values in this set.
            </summary>
            <returns>The current number of values in this set.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Capacity">
            <summary>
            The number of values that fit in the current allocation.
            </summary>
            <value>The number of values that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.IsCreated">
            <summary>
            Whether this set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this set.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this set.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Clear">
            <summary>
            Removes all values.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Add(`0)">
            <summary>
            Adds a new value (unless it is already present).
            </summary>
            <param name="item">The value to add.</param>
            <returns>True if the value was not already present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Remove(`0)">
            <summary>
            Removes a particular value.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Contains(`0)">
            <summary>
            Returns true if a particular value is present.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of this set's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of the set's values.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.AsParallelWriter">
            <summary>
            Returns a parallel writer.
            </summary>
            <returns>A parallel writer.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ParallelWriter">
            <summary>
            A parallel writer for an UnsafeParallelHashSet.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.AsParallelWriter"/> to create a parallel writer for a set.
            </remarks>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ParallelWriter.Capacity">
            <summary>
            The number of values that fit in the current allocation.
            </summary>
            <value>The number of values that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ParallelWriter.Add(`0)">
            <summary>
            Adds a new value (unless it is already present).
            </summary>
            <param name="item">The value to add.</param>
            <returns>True if the value is not already present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator over the values of this set.
            </summary>
            <returns>An enumerator over the values of this set.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator">
            <summary>
            An enumerator over the values of a set.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator.Current"/> is invalid.
            The first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator.MoveNext"/> call advances the enumerator to the first value.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next value.
            </summary>
            <returns>True if `Current` is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.Enumerator.Current">
            <summary>
            The current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.AsReadOnly">
            <summary>
            Returns a readonly version of this UnsafeParallelHashSet instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the UnsafeParallelHashSet it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly">
            <summary>
            A read-only alias for the value of a UnsafeParallelHashSet. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.IsEmpty">
            <summary>
            Whether this hash set is empty.
            </summary>
            <value>True if this hash set is empty or if the map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.Count">
            <summary>
            The current number of items in this hash set.
            </summary>
            <returns>The current number of items in this hash set.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.Capacity">
            <summary>
            The number of items that fit in the current allocation.
            </summary>
            <value>The number of items that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.Contains(`0)">
            <summary>
            Returns true if a given item is present in this hash set.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>True if the item was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash set's items (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash set's items (in no particular order).</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.IsCreated">
            <summary>
            Whether this hash set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the items of this hash set.
            </summary>
            <returns>An enumerator over the items of this hash set.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray">
            <summary>
            An arbitrarily-sized array of bits.
            </summary>
            <remarks>
            The number of allocated bytes is always a multiple of 8. For example, a 65-bit array could fit in 9 bytes, but its allocation is actually 16 bytes.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Ptr">
            <summary>
            Pointer to the data.
            </summary>
            <value>Pointer to the data.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Length">
            <summary>
            The number of bits.
            </summary>
            <value>The number of bits.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Capacity">
            <summary>
            The capacity number of bits.
            </summary>
            <value>The capacity number of bits.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Allocator">
            <summary>
            The allocator to use.
            </summary>
            <value>The allocator to use.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.#ctor(System.Void*,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeBitArray which aliases an existing buffer.
            </summary>
            <param name="ptr">An existing buffer.</param>
            <param name="allocator">The allocator that was used to allocate the bytes. Needed to dispose this array.</param>
            <param name="sizeInBytes">The number of bytes. The length will be `sizeInBytes * 8`.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of UnsafeBitArray.
            </summary>
            <param name="numBits">Number of bits.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.IsCreated">
            <summary>
            Whether this array has been allocated (and not yet deallocated).
            </summary>
            <value>True if this array has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Resize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Sets the length, expanding the capacity if necessary.
            </summary>
            <param name="numBits">The new length in bits.</param>
            <param name="options">Whether newly allocated data should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.SetCapacity(System.Int32)">
            <summary>
            Sets the capacity.
            </summary>
            <param name="capacityInBits">The new capacity.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.TrimExcess">
            <summary>
            Sets the capacity to match what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this array.
            </summary>
            <param name="inputDeps">The handle of a job which the new job will depend upon.</param>
            <returns>The handle of a new job that will dispose this array. The new job depends upon inputDeps.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Clear">
            <summary>
            Sets all the bits to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Set(System.UInt64*,System.Int32,System.Boolean)">
            <summary>
            Sets the bit at an index to 0 or 1.
            </summary>
            <param name="ptr">pointer to the bit buffer</param>
            <param name="pos">Index of the bit to set.</param>
            <param name="value">True for 1, false for 0.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Set(System.Int32,System.Boolean)">
            <summary>
            Sets the bit at an index to 0 or 1.
            </summary>
            <param name="pos">Index of the bit to set.</param>
            <param name="value">True for 1, false for 0.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.SetBits(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets a range of bits to 0 or 1.
            </summary>
            <remarks>
            The range runs from index `pos` up to (but not including) `pos + numBits`.
            No exception is thrown if `pos + numBits` exceeds the length.
            </remarks>
            <param name="pos">Index of the first bit to set.</param>
            <param name="value">True for 1, false for 0.</param>
            <param name="numBits">Number of bits to set.</param>
            <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.SetBits(System.Int32,System.UInt64,System.Int32)">
             <summary>
             Copies bits of a ulong to bits in this array.
             </summary>
             <remarks>
             The destination bits in this array run from index `pos` up to (but not including) `pos + numBits`.
             No exception is thrown if `pos + numBits` exceeds the length.
            
             The lowest bit of the ulong is copied to the first destination bit; the second-lowest bit of the ulong is
             copied to the second destination bit; and so forth.
             </remarks>
             <param name="pos">Index of the first bit to set.</param>
             <param name="value">Unsigned long from which to copy bits.</param>
             <param name="numBits">Number of bits to set (must be between 1 and 64).</param>
             <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is not between 1 and 64.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.GetBits(System.Int32,System.Int32)">
             <summary>
             Returns a ulong which has bits copied from this array.
             </summary>
             <remarks>
             The source bits in this array run from index `pos` up to (but not including) `pos + numBits`.
             No exception is thrown if `pos + numBits` exceeds the length.
            
             The first source bit is copied to the lowest bit of the ulong; the second source bit is copied to the second-lowest bit of the ulong; and so forth. Any remaining bits in the ulong will be 0.
             </remarks>
             <param name="pos">Index of the first bit to get.</param>
             <param name="numBits">Number of bits to get (must be between 1 and 64).</param>
             <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is not between 1 and 64.</exception>
             <returns>A ulong which has bits copied from this array.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.IsSet(System.Int32)">
            <summary>
            Returns true if the bit at an index is 1.
            </summary>
            <param name="pos">Index of the bit to test.</param>
            <returns>True if the bit at the index is 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Copy(System.Int32,System.Int32,System.Int32)">
             <summary>
             Copies a range of bits from this array to another range in this array.
             </summary>
             <remarks>
             The bits to copy run from index `srcPos` up to (but not including) `srcPos + numBits`.
             The bits to set run from index `dstPos` up to (but not including) `dstPos + numBits`.
            
             The ranges may overlap, but the result in the overlapping region is undefined.
             </remarks>
             <param name="dstPos">Index of the first bit to set.</param>
             <param name="srcPos">Index of the first bit to copy.</param>
             <param name="numBits">Number of bits to copy.</param>
             <exception cref="T:System.ArgumentException">Thrown if either `dstPos + numBits` or `srcPos + numBits` exceed the length of this array.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Copy(System.Int32,Unity.Collections.LowLevel.Unsafe.UnsafeBitArray@,System.Int32,System.Int32)">
             <summary>
             Copies a range of bits from an array to a range of bits in this array.
             </summary>
             <remarks>
             The bits to copy in the source array run from index srcPos up to (but not including) `srcPos + numBits`.
             The bits to set in the destination array run from index dstPos up to (but not including) `dstPos + numBits`.
            
             It's fine if source and destination array are one and the same, even if the ranges overlap, but the result in the overlapping region is undefined.
             </remarks>
             <param name="dstPos">Index of the first bit to set.</param>
             <param name="srcBitArray">The source array.</param>
             <param name="srcPos">Index of the first bit to copy.</param>
             <param name="numBits">The number of bits to copy.</param>
             <exception cref="T:System.ArgumentException">Thrown if either `dstPos + numBits` or `srcBitArray + numBits` exceed the length of this array.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Find(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence in this array of *N* contiguous 0 bits.
            </summary>
            <remarks>The search is linear.</remarks>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <returns>The index of the first occurrence in this array of `numBits` contiguous 0 bits. Range is pos up to (but not including) the length of this array. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.Find(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence in this array of a given number of contiguous 0 bits.
            </summary>
            <remarks>The search is linear.</remarks>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <param name="count">Number of indexes to consider as the return value.</param>
            <returns>The index of the first occurrence in this array of `numBits` contiguous 0 bits. Range is pos up to (but not including) `pos + count`. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.TestNone(System.Int32,System.Int32)">
            <summary>
            Returns true if none of the bits in a range are 1 (*i.e.* all bits in the range are 0).
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>Returns true if none of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.TestAny(System.Int32,System.Int32)">
            <summary>
            Returns true if at least one of the bits in a range is 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if one or more of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.TestAll(System.Int32,System.Int32)">
            <summary>
            Returns true if all of the bits in a range are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if all of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.CountBits(System.Int32,System.Int32)">
            <summary>
            Returns the number of bits in a range that are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>The number of bits in a range of bits that are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.AsReadOnly">
            <summary>
            Returns a readonly version of this UnsafeBitArray instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the UnsafeBitArray it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly">
            <summary>
            A read-only alias for the value of a UnsafeBitArray. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.Ptr">
            <summary>
            Pointer to the data.
            </summary>
            <value>Pointer to the data.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.Length">
            <summary>
            The number of bits.
            </summary>
            <value>The number of bits.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.GetBits(System.Int32,System.Int32)">
             <summary>
             Returns a ulong which has bits copied from this array.
             </summary>
             <remarks>
             The source bits in this array run from index `pos` up to (but not including) `pos + numBits`.
             No exception is thrown if `pos + numBits` exceeds the length.
            
             The first source bit is copied to the lowest bit of the ulong; the second source bit is copied to the second-lowest bit of the ulong; and so forth. Any remaining bits in the ulong will be 0.
             </remarks>
             <param name="pos">Index of the first bit to get.</param>
             <param name="numBits">Number of bits to get (must be between 1 and 64).</param>
             <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is not between 1 and 64.</exception>
             <returns>A ulong which has bits copied from this array.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.IsSet(System.Int32)">
            <summary>
            Returns true if the bit at an index is 1.
            </summary>
            <param name="pos">Index of the bit to test.</param>
            <returns>True if the bit at the index is 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.Find(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence in this array of *N* contiguous 0 bits.
            </summary>
            <remarks>The search is linear.</remarks>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <returns>The index of the first occurrence in this array of `numBits` contiguous 0 bits. Range is pos up to (but not including) the length of this array. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.Find(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence in this array of a given number of contiguous 0 bits.
            </summary>
            <remarks>The search is linear.</remarks>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <param name="count">Number of indexes to consider as the return value.</param>
            <returns>The index of the first occurrence in this array of `numBits` contiguous 0 bits. Range is pos up to (but not including) `pos + count`. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.TestNone(System.Int32,System.Int32)">
            <summary>
            Returns true if none of the bits in a range are 1 (*i.e.* all bits in the range are 0).
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>Returns true if none of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.TestAny(System.Int32,System.Int32)">
            <summary>
            Returns true if at least one of the bits in a range is 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if one or more of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.TestAll(System.Int32,System.Int32)">
            <summary>
            Returns true if all of the bits in a range are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if all of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeBitArray.ReadOnly.CountBits(System.Int32,System.Int32)">
            <summary>
            Returns the number of bits in a range that are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>The number of bits in a range of bits that are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.NativeReferenceUnsafeUtility">
            <summary>
            Provides extension methods for NativeReference.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeReferenceUnsafeUtility.GetUnsafePtr``1(Unity.Collections.NativeReference{``0})">
            <summary>
            Returns a pointer to this reference's stored value.
            </summary>
            <remarks>Performs a job safety check for read-write access.</remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="reference">The reference.</param>
            <returns>A pointer to this reference's stored value.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeReferenceUnsafeUtility.GetUnsafeReadOnlyPtr``1(Unity.Collections.NativeReference{``0})">
            <summary>
            Returns a pointer to this reference's stored value.
            </summary>
            <remarks>Performs a job safety check for read-only access.</remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="reference">The reference.</param>
            <returns>A pointer to this reference's stored value.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeReferenceUnsafeUtility.GetUnsafePtrWithoutChecks``1(Unity.Collections.NativeReference{``0})">
            <summary>
            Returns a pointer to this reference's stored value.
            </summary>
            <remarks>Performs no job safety checks.</remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="reference">The reference.</param>
            <returns>A pointer to this reference's stored value.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeScratchAllocator">
            <summary>
            A fixed-size buffer from which you can make allocations.
            </summary>
            <remarks>Allocations from a scratch allocator are not individually deallocated.
            Instead, when you're done using all the allocations from a scratch allocator, you dispose the allocator as a whole.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeScratchAllocator.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes and returns an instance of UnsafeScratchAllocator.
            </summary>
            <param name="ptr">An existing buffer to use as the allocator's internal buffer.</param>
            <param name="capacityInBytes">The size in bytes of the internal buffer.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeScratchAllocator.Allocate(System.Int32,System.Int32)">
            <summary>
            Returns an allocation from the allocator's internal buffer.
            </summary>
            <param name="sizeInBytes">The size of the new allocation.</param>
            <param name="alignmentInBytes">The alignment of the new allocation.</param>
            <returns>A pointer to the new allocation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the new allocation would exceed the capacity of the allocator.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeScratchAllocator.Allocate``1(System.Int32)">
            <summary>
            Returns an allocation from the allocator's internal buffer.
            </summary>
            <remarks>The allocation size in bytes is at least `count * sizeof(T)`. The space consumed by the allocation may be a little larger than this size due to alignment.</remarks>
            <typeparam name="T">The type of element to allocate space for.</typeparam>
            <param name="count">The number of elements to allocate space for. Defaults to 1.</param>
            <returns>A pointer to the new allocation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the new allocation would exceed the capacity of the allocator.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1">
            <summary>
            A fixed-size circular buffer.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Ptr">
            <summary>
            The internal buffer where the content is stored.
            </summary>
            <value>The internal buffer where the content is stored.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Allocator">
            <summary>
            The allocator used to create the internal buffer.
            </summary>
            <value>The allocator used to create the internal buffer.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.IsEmpty">
            <summary>
            Whether the queue is empty.
            </summary>
            <value>True if the queue is empty or the queue has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Length">
            <summary>
            The number of elements currently in this queue.
            </summary>
            <value>The number of elements currently in this queue.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Capacity">
            <summary>
            The number of elements that fit in the internal buffer.
            </summary>
            <value>The number of elements that fit in the internal buffer.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.#ctor(`0*,System.Int32)">
            <summary>
            Initializes and returns an instance of UnsafeRingQueue which aliasing an existing buffer.
            </summary>
            <param name="ptr">An existing buffer to set as the internal buffer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of UnsafeRingQueue.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.IsCreated">
            <summary>
            Whether this queue has been allocated (and not yet deallocated).
            </summary>
            <value>True if this queue has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this queue.
            </summary>
            <param name="inputDeps">The handle of a job which the new job will depend upon.</param>
            <returns>The handle of a new job that will dispose this queue. The new job depends upon inputDeps.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.TryEnqueue(`0)">
            <summary>
            Adds an element at the front of the queue.
            </summary>
            <remarks>Does nothing if the queue is full.</remarks>
            <param name="value">The value to be added.</param>
            <returns>True if the value was added.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Enqueue(`0)">
            <summary>
            Adds an element at the front of the queue.
            </summary>
            <param name="value">The value to be added.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue was full.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.TryDequeue(`0@)">
            <summary>
            Removes the element from the end of the queue.
            </summary>
            <remarks>Does nothing if the queue is empty.</remarks>
            <param name="item">Outputs the element removed.</param>
            <returns>True if an element was removed.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1.Dequeue">
            <summary>
            Removes the element from the end of the queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue was empty.</exception>
            <returns>Returns the removed element.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.NativeBitArrayUnsafeUtility">
            <summary>
            Unsafe helper methods for NativeBitArray.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeBitArrayUnsafeUtility.GetAtomicSafetyHandle(Unity.Collections.NativeBitArray@)">
            <summary>
            Returns an array's atomic safety handle.
            </summary>
            <param name="container">Array from which to get an AtomicSafetyHandle.</param>
            <returns>This array's atomic safety handle.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeBitArrayUnsafeUtility.SetAtomicSafetyHandle(Unity.Collections.NativeBitArray@,Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
            <summary>
            Sets an array's atomic safety handle.
            </summary>
            <param name="container">Array which the AtomicSafetyHandle is for.</param>
            <param name="safety">Atomic safety handle for this array.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.NativeBitArrayUnsafeUtility.ConvertExistingDataToNativeBitArray(System.Void*,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a bit array with content aliasing a buffer.
            </summary>
            <param name="ptr">A buffer.</param>
            <param name="sizeInBytes">Size of the buffer in bytes. Must be a multiple of 8.</param>
            <param name="allocator">The allocator that was used to create the buffer.</param>
            <returns>A bit array with content aliasing a buffer.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeUtilityExtensions">
            <summary>
            Provides utility methods for unsafe, untyped buffers.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtilityExtensions.MemSwap(System.Void*,System.Void*,System.Int64)">
            <summary>
            Swaps bytes between two buffers.
            </summary>
            <param name="ptr">A buffer.</param>
            <param name="otherPtr">Another buffer.</param>
            <param name="size">The number of bytes to swap.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the two ranges of bytes to swap overlap in memory.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtilityExtensions.ReadArrayElementBoundsChecked``1(System.Void*,System.Int32,System.Int32)">
            <summary>
            Reads an element from a buffer after bounds checking.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="source">The buffer to read from.</param>
            <param name="index">The index of the element.</param>
            <param name="capacity">The buffer capacity (in number of elements). Used for the bounds checking.</param>
            <returns>The element read from the buffer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtilityExtensions.WriteArrayElementBoundsChecked``1(System.Void*,System.Int32,``0,System.Int32)">
            <summary>
            Writes an element to a buffer after bounds checking.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="destination">The buffer to write to.</param>
            <param name="value">The value to write.</param>
            <param name="index">The index at which to store the element.</param>
            <param name="capacity">The buffer capacity (in number of elements). Used for the bounds checking.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtilityExtensions.AddressOf``1(``0@)">
            <summary>
            Returns the address of a read-only reference.
            </summary>
            <typeparam name="T">The type of referenced value.</typeparam>
            <param name="value">A read-only reference.</param>
            <returns>A pointer to the referenced value.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtilityExtensions.AsRef``1(``0@)">
            <summary>
            Returns a read-write reference from a read-only reference.
            <remarks>Useful when you want to pass an `in` arg (read-only reference) where a `ref` arg (read-write reference) is expected.
            Do not mutate the referenced value, as doing so may break the runtime's assumptions.</remarks>
            </summary>
            <typeparam name="T">The type of referenced value.</typeparam>
            <param name="value">A read-only reference.</param>
            <returns>A read-write reference to the value referenced by `item`.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer">
            <summary>
            An unmanaged, untyped, heterogeneous buffer.
            </summary>
            <remarks>
            The values written to an individual append buffer can be of different types.
            </remarks>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Ptr">
            <summary>
            The internal buffer where the content is stored.
            </summary>
            <value>The internal buffer where the content is stored.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Length">
            <summary>
            The size in bytes of the currently-used portion of the internal buffer.
            </summary>
            <value>The size in bytes of the currently-used portion of the internal buffer.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Capacity">
            <summary>
            The size in bytes of the internal buffer.
            </summary>
            <value>The size in bytes of the internal buffer.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Allocator">
            <summary>
            The allocator used to create the internal buffer.
            </summary>
            <value>The allocator used to create the internal buffer.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Alignment">
            <summary>
            The byte alignment used when allocating the internal buffer.
            </summary>
            <value>The byte alignment used when allocating the internal buffer. Is always a non-zero power of 2.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.#ctor(System.Int32,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeAppendBuffer.
            </summary>
            <param name="initialCapacity">The initial allocation size in bytes of the internal buffer.</param>
            <param name="alignment">The byte alignment of the allocation. Must be a non-zero power of 2.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes and returns an instance of UnsafeAppendBuffer that aliases an existing buffer.
            </summary>
            <remarks>The capacity will be set to `length`, and <see cref="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Length"/> will be set to 0.
            </remarks>
            <param name="ptr">The buffer to alias.</param>
            <param name="length">The length in bytes of the buffer.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.IsEmpty">
            <summary>
            Whether the append buffer is empty.
            </summary>
            <value>True if the append buffer is empty.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.IsCreated">
            <summary>
            Whether this append buffer has been allocated (and not yet deallocated).
            </summary>
            <value>True if this append buffer has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this append buffer.
            </summary>
            <param name="inputDeps">The handle of a job which the new job will depend upon.</param>
            <returns>The handle of a new job that will dispose this append buffer. The new job depends upon inputDeps.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reset">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.SetCapacity(System.Int32)">
            <summary>
            Sets the size in bytes of the internal buffer.
            </summary>
            <remarks>Does nothing if the new capacity is less than or equal to the current capacity.</remarks>
            <param name="capacity">A new capacity in bytes.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.ResizeUninitialized(System.Int32)">
            <summary>
            Sets the length in bytes.
            </summary>
            <remarks>If the new length exceeds the capacity, capacity is expanded to the new length.</remarks>
            <param name="length">The new length.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Add``1(``0)">
            <summary>
            Appends an element to the end of this append buffer.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="value">The value to be appended.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Add(System.Void*,System.Int32)">
            <summary>
            Appends an element to the end of this append buffer.
            </summary>
            <remarks>The value itself is stored, not the pointer.</remarks>
            <param name="ptr">A pointer to the value to be appended.</param>
            <param name="structSize">The size in bytes of the value to be appended.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.AddArray``1(System.Void*,System.Int32)">
            <summary>
            Appends the elements of a buffer to the end of this append buffer.
            </summary>
            <typeparam name="T">The type of the buffer's elements.</typeparam>
            <remarks>The values themselves are stored, not their pointers.</remarks>
            <param name="ptr">A pointer to the buffer whose values will be appended.</param>
            <param name="length">The number of elements to append.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Add``1(Unity.Collections.NativeArray{``0})">
            <summary>
            Appends all elements of an array to the end of this append buffer.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="value">The array whose elements will all be appended.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Pop``1">
            <summary>
            Removes and returns the last element of this append buffer.
            </summary>
            <typeparam name="T">The type of the element to remove.</typeparam>
            <remarks>It is your responsibility to specify the correct type. Do not pop when the append buffer is empty.</remarks>
            <returns>The element removed from the end of this append buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Pop(System.Void*,System.Int32)">
            <summary>
            Removes and copies the last element of this append buffer.
            </summary>
            <remarks>It is your responsibility to specify the correct `structSize`. Do not pop when the append buffer is empty.</remarks>
            <param name="ptr">The location to which the removed element will be copied.</param>
            <param name="structSize">The size of the element to remove and copy.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.AsReader">
            <summary>
            Returns a reader for this append buffer.
            </summary>
            <returns>A reader for the append buffer.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader">
            <summary>
            A reader for UnsafeAppendBuffer.
            </summary>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.Ptr">
            <summary>
            The internal buffer where the content is stored.
            </summary>
            <value>The internal buffer where the content is stored.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.Size">
            <summary>
            The length in bytes of the append buffer's content.
            </summary>
            <value>The length in bytes of the append buffer's content.</value>
        </member>
        <member name="F:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.Offset">
            <summary>
            The location of the next read (expressed as a byte offset from the start).
            </summary>
            <value>The location of the next read (expressed as a byte offset from the start).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer@)">
            <summary>
            Initializes and returns an instance of UnsafeAppendBuffer.Reader.
            </summary>
            <param name="buffer">A reference to the append buffer to read.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes and returns an instance of UnsafeAppendBuffer.Reader that reads from a buffer.
            </summary>
            <remarks>The buffer will be read *as if* it is an UnsafeAppendBuffer whether it was originally allocated as one or not.</remarks>
            <param name="ptr">The buffer to read as an UnsafeAppendBuffer.</param>
            <param name="length">The length in bytes of the </param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.EndOfBuffer">
            <summary>
            Whether the offset has advanced past the last of the append buffer's content.
            </summary>
            <value>Whether the offset has advanced past the last of the append buffer's content.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.ReadNext``1(``0@)">
            <summary>
            Reads an element from the append buffer.
            </summary>
            <remarks>Advances the reader's offset by the size of T.</remarks>
            <typeparam name="T">The type of element to read.</typeparam>
            <param name="value">Output for the element read.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.ReadNext``1">
            <summary>
            Reads an element from the append buffer.
            </summary>
            <remarks>Advances the reader's offset by the size of T.</remarks>
            <typeparam name="T">The type of element to read.</typeparam>
            <returns>The element read.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.ReadNext(System.Int32)">
            <summary>
            Reads an element from the append buffer.
            </summary>
            <remarks>Advances the reader's offset by `structSize`.</remarks>
            <param name="structSize">The size of the element to read.</param>
            <returns>A pointer to where the read element resides in the append buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.ReadNext``1(Unity.Collections.NativeArray{``0}@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Reads an element from the append buffer.
            </summary>
            <remarks>Advances the reader's offset by the size of T.</remarks>
            <typeparam name="T">The type of element to read.</typeparam>
            <param name="value">Outputs a new array with length of 1. The read element is copied to the single index of this array.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer.Reader.ReadNextArray``1(System.Int32@)">
             <summary>
             Reads an array from the append buffer.
             </summary>
             <remarks>An array stored in the append buffer starts with an int specifying the number of values in the array.
             The first element of an array immediately follows this int.
            
             Advances the reader's offset by the size of the array (plus an int).</remarks>
             <typeparam name="T">The type of elements in the array to read.</typeparam>
             <param name="length">Output which is the number of elements in the read array.</param>
             <returns>A pointer to where the first element of the read array resides in the append buffer.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.DataStreamExtensions">
            <summary>
            Extension methods for DataStream.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.DataStreamExtensions.Create(System.Byte*,System.Int32)">
            <summary>
            Initializes a new instance of the DataStreamWriter struct with externally owned memory
            </summary>
            <param name="data">Pointer to the data</param>
            <param name="length">Length of the data</param>
            <returns>A new instance of the <see cref="T:Unity.Collections.DataStreamWriter"/></returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.DataStreamExtensions.WriteBytesUnsafe(Unity.Collections.DataStreamWriter@,System.Byte*,System.Int32)">
            <summary>
            Appends a specified number of bytes from the buffer to the data stream.
            </summary>
            <param name="writer">Data stream writer.</param>
            <param name="data">Pointer to the data.</param>
            <param name="bytes">A positive number of bytes to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.DataStreamExtensions.ReadBytesUnsafe(Unity.Collections.DataStreamReader@,System.Byte*,System.Int32)">
            <summary>
            Read and copy data to the memory location pointed to, an error will
            be logged if the <paramref name="length"/> will put the reader out of bounds on the current read pointer.
            </summary>
            <param name="reader">Data stream reader.</param>
            <param name="data">Pointer to the data.</param>
            <param name="length">Number of bytes to read.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.DataStreamExtensions.ReadFixedStringUnsafe(Unity.Collections.DataStreamReader@,System.Byte*,System.Int32)">
            <summary>
            Reads a 2-byte length value from the current stream, reads the specified number of bytes
            to the buffer and advances the current position of the stream by the length of the string.
            </summary>
            <param name="reader">Data stream reader.</param>
            <param name="data">Buffer to write the string bytes to.</param>
            <param name="maxLength">Max number of bytes allowed to be read into the buffer.</param>
            <returns>The number of bytes written to the data buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.DataStreamExtensions.ReadPackedFixedStringDeltaUnsafe(Unity.Collections.DataStreamReader@,System.Byte*,System.Int32,System.Byte*,System.UInt16,Unity.Collections.StreamCompressionModel)">
             <summary>
             Writes a delta FixedString value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            
             If the value cannot be written <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> will return true.
             </summary>
             <param name="reader">Data stream reader.</param>
             <param name="data">Pointer to a packed fixed string.</param>
             <param name="maxLength">Max number of bytes allowed to be read into the pointer.</param>
             <param name="baseData">Pointer to the previous value, used to compute the diff.</param>
             <param name="baseLength">The length of the previous value.</param>
             <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
             <returns>Whether the write was successful</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2">
             <summary>
             An unordered, expandable associative array. Each key can have more than one associated value.
             </summary>
             <remarks>
             Unlike a regular UnsafeParallelHashMap, an UnsafeParallelMultiHashMap can store multiple key-value pairs with the same key.
            
             The keys are not deduplicated: two key-value pairs with the same key are stored as fully separate key-value pairs.
             </remarks>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeParallelMultiHashMap.
            </summary>
            <param name="capacity">The number of key-value pairs that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or the hash map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Count">
            <summary>
            Returns the current number of key-value pairs in this hash map.
            </summary>
            <remarks>Key-value pairs with matching keys are counted as separate, individual pairs.</remarks>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Capacity">
            <summary>
            Returns the number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than the current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Clear">
            <summary>
            Removes all key-value pairs.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>
            If a key-value pair with this key is already present, an additional separate key-value pair is added.
            </remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Remove(`0)">
            <summary>
            Removes a key and its associated value(s).
            </summary>
            <param name="key">The key to remove.</param>
            <returns>The number of removed key-value pairs. If the key was not present, returns 0.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Remove``1(`0,``0)">
            <summary>
            Removes all key-value pairs with a particular key and a particular value.
            </summary>
            <remarks>Removes all key-value pairs which have a particular key and which *also have* a particular value.
            In other words: (key *AND* value) rather than (key *OR* value).</remarks>
            <typeparam name="TValueEQ">The type of the value.</typeparam>
            <param name="key">The key of the key-value pairs to remove.</param>
            <param name="value">The value of the key-value pairs to remove.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Remove(Unity.Collections.NativeParallelMultiHashMapIterator{`0})">
            <summary>
            Removes a single key-value pair.
            </summary>
            <param name="it">An iterator representing the key-value pair to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the iterator is invalid.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.TryGetFirstValue(`0,`1@,Unity.Collections.NativeParallelMultiHashMapIterator{`0}@)">
            <summary>
            Gets an iterator for a key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">Outputs the associated value represented by the iterator.</param>
            <param name="it">Outputs an iterator.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.TryGetNextValue(`1@,Unity.Collections.NativeParallelMultiHashMapIterator{`0}@)">
            <summary>
            Advances an iterator to the next value associated with its key.
            </summary>
            <param name="item">Outputs the next value.</param>
            <param name="it">A reference to the iterator to advance.</param>
            <returns>True if the key was present and had another value.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present in this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.CountValuesForKey(`0)">
            <summary>
            Returns the number of values associated with a given key.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The number of values associated with the key. Returns 0 if the key was not present.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.SetValue(`1,Unity.Collections.NativeParallelMultiHashMapIterator{`0})">
            <summary>
            Sets a new value for an existing key-value pair.
            </summary>
            <param name="item">The new value.</param>
            <param name="it">The iterator representing a key-value pair.</param>
            <returns>True if a value was overwritten.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this hash map.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Returns an array with a copy of all the keys (in no particular order).
             </summary>
             <remarks>A key with *N* values is included *N* times in the array.
            
             Use `GetUniqueKeyArray` of <see cref="T:Unity.Collections.NativeParallelHashMapExtensions"/> instead if you only want one occurrence of each key.</remarks>
             <param name="allocator">The allocator to use.</param>
             <returns>An array with a copy of all the keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all the values (in no particular order).
            </summary>
            <remarks>The values are not deduplicated. If you sort the returned array,
            you can use <see cref="M:Unity.Collections.NativeParallelHashMapExtensions.Unique``1(Unity.Collections.NativeArray{``0})"/> to remove duplicate values.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all the values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all the keys and values (in no particular order).
            </summary>
            <remarks>A key with *N* values is included *N* times in the array.
            </remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all the keys and values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetValuesForKey(`0)">
            <summary>
            Returns an enumerator over the values of an individual key.
            </summary>
            <param name="key">The key to get an enumerator for.</param>
            <returns>An enumerator over the values of a key.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator">
            <summary>
            An enumerator over the values of an individual key in a multi hash map.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.MoveNext"/> call advances the enumerator to the first value of the key.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next value of the key.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.Current">
            <summary>
            The current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.Enumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.AsParallelWriter">
            <summary>
            Returns a parallel writer for this hash map.
            </summary>
            <returns>A parallel writer for this hash map.</returns>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.ParallelWriter">
            <summary>
            A parallel writer for an UnsafeParallelMultiHashMap.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.AsParallelWriter"/> to create a parallel writer for a NativeParallelMultiHashMap.
            </remarks>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.ParallelWriter.Capacity">
            <summary>
            Returns the number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.ParallelWriter.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>
            If a key-value pair with this key is already present, an additional separate key-value pair is added.
            </remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <remarks>A key with *N* values is visited by the enumerator *N* times.</remarks>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.System#Collections#Generic#IEnumerable{Unity#Collections#LowLevel#Unsafe#KeyValue{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator">
             <summary>
             An enumerator over the key-value pairs of a multi hash map.
             </summary>
             <remarks>A key with *N* values is visited by the enumerator *N* times.
            
             In an enumerator's initial state, <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.Current"/> is not valid to read.
             The first <see cref="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.MoveNext"/> call advances the enumerator to the first key-value pair.
             </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next key-value pair.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap`2.KeyValueEnumerator.Current">
            <summary>
            The current key-value pair.
            </summary>
            <value>The current key-value pair.</value>
        </member>
        <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeText">
            <summary>
            An unmanaged, mutable, resizable UTF-8 string.
            </summary>
            <remarks>
            The string is always null-terminated, meaning a zero byte always immediately follows the last character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeText.
            </summary>
            <param name="capacity">The initial capacity, in bytes.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeText.IsCreated">
            <summary>
            Whether this string's character buffer has been allocated (and not yet deallocated).
            </summary>
            <value>Whether this string's character buffer has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this string.
            </summary>
            <param name="inputDeps">The handle of a job which the new job will depend upon.</param>
            <returns>The handle of a new job that will dispose this string. The new job depends upon inputDeps.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeText.IsEmpty">
            <summary>
            Reports whether container is empty.
            </summary>
            <value>True if the string is empty or the string has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeText.Item(System.Int32)">
            <summary>
            The byte at an index.
            </summary>
            <param name="index">A zero-based byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the byte (not character) at an index.
            </summary>
            <remarks>
            Deallocating or reallocating this string's character buffer makes the reference invalid.
            </remarks>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.GetUnsafePtr">
            <summary>
            Returns a pointer to this string's character buffer.
            </summary>
            <remarks>
            The pointer is made invalid by operations that reallocate the character buffer, such as setting <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeText.Capacity"/>.
            </remarks>
            <returns>A pointer to this string's character buffer.</returns>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempt to set the length in bytes of this string.
            </summary>
            <param name="newLength">The new length in bytes of the string.</param>
            <param name="clearOptions">Whether any bytes added should be zeroed out.</param>
            <returns>Always true.</returns>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeText.Capacity">
            <summary>
            The current capacity in bytes of this string.
            </summary>
            <remarks>
            The null-terminator byte is not included in the capacity, so the string's character buffer is `Capacity + 1` in size.
            </remarks>
            <value>The current capacity in bytes of the string.</value>
        </member>
        <member name="P:Unity.Collections.LowLevel.Unsafe.UnsafeText.Length">
            <summary>
            The current length in bytes of this string.
            </summary>
            <remarks>
            The length does not include the null terminator byte.
            </remarks>
            <value>The current length in bytes of the UTF-8 encoded string.</value>
        </member>
        <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeText.ToString">
            <summary>
            Returns a managed string copy of this string.
            </summary>
            <returns>A managed string copy of this string.</returns>
        </member>
        <member name="T:Unity.Collections.FixedStringMethods">
            <summary>
            Provides extension methods for FixedString*N*Bytes.
            </summary>
            <summary>
            Provides methods for parsing numbers from FixedString*N*Bytes.
            </summary>
            <summary>
            Provides extension methods for FixedString*N*.
            </summary>
            <summary>
            Provides extension methods for FixedString*N*Bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``4(``0@,``1@,``2@,``3@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``5(``0@,``1@,``2@,``3@,``4@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``6(``0@,``1@,``2@,``3@,``4@,``5@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``7(``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T4">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg4">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``8(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T4">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T5">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg4">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg5">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``9(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T4">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T5">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T6">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg4">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg5">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg6">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``10(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T4">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T5">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T6">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T7">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg4">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg5">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg6">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg7">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``11(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T4">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T5">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T6">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T7">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T8">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg4">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg5">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg6">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg7">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg8">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendFormat``12(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
             <summary>
             Interpolates strings into a format string and appends the result to this string.
             </summary>
             <remarks>
             Similar to `StringBuilder.AppendFormat` but with significant limitations:
             - Only supports FixedString*N*Bytes arguments. To use other string types, convert them to FixedString*N*Bytes first.
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The overloads of this method take up to ten strings to interpolate into the format string.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="U">A FixedString*N*Bytes type.</typeparam>
             <typeparam name="T0">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T1">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T2">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T3">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T4">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T5">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T6">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T7">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T8">The type of value to interpolate into the format string.</typeparam>
             <typeparam name="T9">The type of value to interpolate into the format string.</typeparam>
             <param name="dest">The string to append to.</param>d
             <param name="format">A string to be interpolated and appended.</param>
             <param name="arg0">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg1">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg2">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg3">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg4">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg5">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg6">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg7">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg8">A FixedString*N*Bytes to interpolate into the format string.</param>
             <param name="arg9">A FixedString*N*Bytes to interpolate into the format string.</param>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Parse``1(``0@,System.Int32@,System.Int32@)">
             <summary>
             Parses an int from this string starting at a byte offset.
             </summary>
             <remarks>
             Stops parsing after the last number character. (Unlike parsing methods in other API's, this method does not expect to necessarily parse the entire string.)
            
             The parsed value is bitwise-identical to the result of System.Int32.Parse.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <param name="fs">The string from which to parse.</param>
             <param name="offset">A reference to an index of the byte at which to parse an int.</param>
             <param name="output">Outputs the parsed int. Ignore if parsing fails.</param>
             <returns>ParseError.None if successful. Otherwise returns ParseError.Overflow or ParseError.Syntax.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Parse``1(``0@,System.Int32@,System.UInt32@)">
             <summary>
             Parses an uint from this string starting at a byte offset.
             </summary>
             <remarks>
             Stops parsing after the last number character. (Unlike parsing methods in other API's, this method does not expect to necessarily parse the entire string.)
            
             The parsed value is bitwise-identical to the result of System.UInt32.Parse.
             </remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <param name="fs">The string from which to parse.</param>
             <param name="offset">A reference to an index of the byte at which to parse a uint.</param>
             <param name="output">Outputs the parsed uint. Ignore if parsing fails.</param>
             <returns>ParseError.None if successful. Otherwise returns ParseError.Overflow or ParseError.Syntax.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Parse``1(``0@,System.Int32@,System.Single@,System.Char)">
             <summary>
             Parses a float from this string starting at a byte offset.
             </summary>
             Stops parsing after the last number character. (Unlike parsing methods in other API's, this method does not expect to necessarily parse the entire string.)
            
             <remarks>The parsed value is bitwise-identical to the result of System.Single.Parse.</remarks>
             <typeparam name="T">A FixedString*N*Bytes type.</typeparam>
             <param name="fs">The string from which to parse.</param>
             <param name="offset">Index of the byte at which to parse a float.</param>
             <param name="output">Outputs the parsed float. Ignore if parsing fails.</param>
             <param name="decimalSeparator">The character used to separate the integer part of the number from the fractional part. Defaults to '.' (period).</param>
             <returns>ParseError.None if successful. Otherwise returns ParseError.Overflow, ParseError.Underflow, or ParseError.Syntax.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Substring``1(``0@,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring of this FixedString*N*. The substring starts from a specific character index, and has a specified length.
            </summary>
            <typeparam name="T">A <see cref="T:Unity.Collections.FixedString"/> type.</typeparam>
            <param name="str">A FixedString*N* to get the substring from.</param>
            <param name="startIndex">Start index of substring.</param>
            <param name="length">Length of substring.</param>
            <returns>A new FixedString*N* with length equivalent to `length` that begins at `startIndex`.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if startIndex or length parameter is negative, or if startIndex is larger than the string length.</exception>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Substring``1(``0@,System.Int32)">
            <summary>
            Retrieves a substring of this FixedString*N*. The substring starts from a specific character index and continues to the end of the string.
            </summary>
            <typeparam name="T">A <see cref="T:Unity.Collections.FixedString"/> type.</typeparam>
            <param name="str">A string to get the substring from.</param>
            <param name="startIndex">Start index of substring.</param>
            <returns>A new FixedString*N* that begins at `startIndex`.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Substring(Unity.Collections.NativeText@,System.Int32,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Retrieves a substring from this string. The substring starts from a specific character index, and has a specified length. Allocates memory to the new substring with the allocator specified.
            </summary>
            <param name="str">A <see cref="T:Unity.Collections.NativeText"/> string to get the substring from.</param>
            <param name="startIndex">Start index of substring.</param>
            <param name="length">Length of substring.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.AllocatorManager.AllocatorHandle"/> allocator type to use.</param>
            <returns>A `NativeText` string with a length equivalent to `length` that starts at `startIndex` and an allocator type of `allocator`.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if startIndex or length parameter is negative, or if startIndex is larger than string length.</exception>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Substring(Unity.Collections.NativeText@,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Retrieves a substring of this string. The substring starts from a specific character index and continues to the end of the string. Allocates memory to the new substring with the allocator specified.
            </summary>
            <param name="str">A <see cref="T:Unity.Collections.NativeText"/> string to get the substring from.</param>
            <param name="startIndex">Start index of substring.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.AllocatorManager.AllocatorHandle"/> allocator type to use.</param>
            <returns>A NativeText string that begins at `startIndex` and has an allocator of type `allocator`.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Substring(Unity.Collections.NativeText@,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring of this string. The substring starts from a specific character index, and has a specified length. The new substring has the same allocator as the string.
            </summary>
            <param name="str">A <see cref="T:Unity.Collections.NativeText"/> string to get the substring from.</param>
            <param name="startIndex">Start index of substring.</param>
            <param name="length">Length of substring.</param>
            <returns>A NativeText string that has length equivalent to `length` and begins at `startIndex`.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if startIndex or length parameter is negative, or if startIndex is larger than string length.</exception>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Substring(Unity.Collections.NativeText@,System.Int32)">
            <summary>
            Retrieves a substring of this string. The substring starts from a specific character index and continues to the end of the string. The new substring has the same allocator as the string.
            </summary>
            <param name="str">A <see cref="T:Unity.Collections.NativeText"/> to get the substring from.</param>
            <param name="startIndex">Start index of substring.</param>
            <returns>A NativeText string that begins at `startIndex`.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.IndexOf``1(``0@,Unity.Collections.Unicode.Rune)">
            <summary>
            Returns the index of the first occurrence of a single Unicode rune in this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="rune">A single UTF-8 Unicode Rune to search for within this string.</param>
            <returns>The index of the first occurrence of the byte sequence in this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.IndexOf``1(``0@,System.Byte*,System.Int32)">
            <summary>
            Returns the index of the first occurrence of a byte sequence in this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="bytes">A byte sequence to search for within this string.</param>
            <param name="bytesLen">The number of bytes in the byte sequence.</param>
            <returns>The index of the first occurrence of the byte sequence in this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.IndexOf``1(``0@,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence of a byte sequence within a subrange of this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="bytes">A byte sequence to search for within this string.</param>
            <param name="bytesLen">The number of bytes in the byte sequence.</param>
            <param name="startIndex">The first index in this string to consider as the first byte of the byte sequence.</param>
            <param name="distance">The last index in this string to consider as the first byte of the byte sequence.</param>
            <returns>The index of the first occurrence of the byte sequence in this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.IndexOf``2(``0@,``1@)">
            <summary>
            Returns the index of the first occurrence of a substring within this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <typeparam name="T2">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="other">A substring to search for within this string.</param>
            <returns>The index of the first occurrence of the second string within this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.IndexOf``2(``0@,``1@,System.Int32,System.Int32)">
            <summary>
            Returns the index of the first occurrence of a substring within a subrange of this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <typeparam name="T2">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="other">A substring to search for within this string.</param>
            <param name="startIndex">The first index in this string to consider as an occurrence of the second string.</param>
            <param name="distance">The last index in this string to consider as an occurrence of the second string.</param>
            <returns>The index of the first occurrence of the substring within this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Contains``2(``0@,``1@)">
            <summary>
            Returns true if a given substring occurs within this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <typeparam name="T2">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="other">A substring to search for within this string.</param>
            <returns>True if the substring occurs within this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.LastIndexOf``1(``0@,Unity.Collections.Unicode.Rune)">
            <summary>
            Returns the index of the last occurrence of a single Unicode rune within this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="rune">A single Unicode.Rune to search for within this string.</param>
            <returns>The index of the last occurrence of the byte sequence within this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.LastIndexOf``1(``0@,System.Byte*,System.Int32)">
            <summary>
            Returns the index of the last occurrence of a byte sequence within this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="bytes">A byte sequence to search for within this string.</param>
            <param name="bytesLen">The number of bytes in the byte sequence.</param>
            <returns>The index of the last occurrence of the byte sequence within this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.LastIndexOf``1(``0@,System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the index of the last occurrence of a byte sequence within a subrange of this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="bytes">A byte sequence to search for within this string.</param>
            <param name="bytesLen">The number of bytes in the byte sequence.</param>
            <param name="startIndex">The smallest index in this string to consider as the first byte of the byte sequence.</param>
            <param name="distance">The greatest index in this string to consider as the first byte of the byte sequence.</param>
            <returns>The index of the last occurrence of the byte sequence within this string. Returns -1 if no occurrences found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.LastIndexOf``2(``0@,``1@)">
            <summary>
            Returns the index of the last occurrence of a substring within this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <typeparam name="T2">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="other">A substring to search for in the this string.</param>
            <returns>The index of the last occurrence of the substring within this string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.LastIndexOf``2(``0@,``1@,System.Int32,System.Int32)">
            <summary>
            Returns the index of the last occurrence of a substring within a subrange of this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <typeparam name="T2">A FixedString*N* type.</typeparam>
            <param name="fs">A string to search.</param>
            <param name="other">A substring to search for within this string.</param>
            <param name="startIndex">The greatest index in this string to consider as an occurrence of the substring.</param>
            <param name="distance">The smallest index in this string to consider as an occurrence of the substring.</param>
            <returns>the index of the last occurrence of the substring within the first string. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.CompareTo``1(``0@,System.Byte*,System.Int32)">
             <summary>
             Returns the sort position of this string relative to a byte sequence.
             </summary>
             <typeparam name="T">A FixedString*N* type.</typeparam>
             <param name="fs">A string to compare.</param>
             <param name="bytes">A byte sequence to compare.</param>
             <param name="bytesLen">The number of bytes in the byte sequence.</param>
             <returns>A number denoting the sort position of this string relative to the byte sequence:
            
             0 denotes that this string and byte sequence have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the byte sequence.<br/>
             +1 denotes that this string should be sorted to follow the byte sequence.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.CompareTo``2(``0@,``1@)">
             <summary>
             Returns the sort position of this string relative to another.
             </summary>
             <typeparam name="T">A FixedString*N* type.</typeparam>
             <typeparam name="T2">A FixedString*N* type.</typeparam>
             <param name="fs">A string to compare.</param>
             <param name="other">Another string to compare.</param>
             <returns>A number denoting the relative sort position of the strings:
            
             0 denotes that the strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this first string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Equals``1(``0@,System.Byte*,System.Int32)">
            <summary>
            Returns true if this string and a byte sequence are equal (meaning they have the same length and content).
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to compare for equality.</param>
            <param name="bytes">A sequence of bytes to compare for equality.</param>
            <param name="bytesLen">The number of bytes in the byte sequence.</param>
            <returns>True if this string and the byte sequence have the same length and if this string's character bytes match the byte sequence.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Equals``2(``0@,``1@)">
            <summary>
            Returns true if this string is equal to another.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <typeparam name="T2">A FixedString*N* type.</typeparam>
            <param name="fs">A string to compare for equality.</param>
            <param name="other">Another string to compare for equality.</param>
            <returns>true if the two strings have the same length and matching content.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Peek``1(``0@,System.Int32)">
            <summary>
            Returns the Unicode.Rune at an index of this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to read.</param>
            <param name="index">A reference to an index in bytes (not characters).</param>
            <returns>The Unicode.Rune (character) which starts at the byte index. Returns Unicode.BadRune
            if the byte(s) at the index do not form a valid UTF-8 encoded character.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Read``1(``0@,System.Int32@)">
            <summary>
            Returns the Unicode.Rune at an index of this string. Increments the index to the position of the next character.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to read.</param>
            <param name="index">A reference to an index in bytes (not characters). Incremented by 1 to 4 depending upon the UTF-8 encoded size of the character read.</param>
            <returns>The character (as a `Unicode.Rune`) which starts at the byte index. Returns `Unicode.BadRune`
            if the byte(s) at the index do not form a valid UTF-8 encoded character.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Write``1(``0@,System.Int32@,Unity.Collections.Unicode.Rune)">
            <summary>
            Writes a Unicode.Rune at an index of this string. Increments the index to the position of the next character.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to modify.</param>
            <param name="index">A reference to an index in bytes (not characters). Incremented by 1 to 4 depending upon the UTF-8 encoded size of the character written.</param>
            <param name="rune">A rune to write to the string, encoded as UTF-8.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the index is invalid or if there is not enough space to store the encoded rune.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.ConvertToString``1(``0@)">
            <summary>
            Returns a copy of this string as a managed string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to copy.</param>
            <returns>A copy of this string as a managed string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.ComputeHashCode``1(``0@)">
            <summary>
            Returns a hash code of this string.
            </summary>
            <typeparam name="T">A FixedString*N* type.</typeparam>
            <param name="fs">A string to get a hash code of.</param>
            <returns>A hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.EffectiveSizeOf``1(``0@)">
             <summary>
             Returns the effective size in bytes of this string.
             </summary>
             <remarks>
             "Effective size" is `Length + 3`, the number of bytes you need to copy when serializing the string.
             (The plus 3 accounts for the null-terminator byte and the 2 bytes that store the Length).
            
             Useful for checking whether this string will fit in the space of a smaller FixedString*N*.
             </remarks>
             <typeparam name="T">A FixedString*N* type.</typeparam>
             <param name="fs">A string to get the effective size of.</param>
             <returns>The effective size in bytes of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,Unity.Collections.Unicode.Rune)">
            <summary>
            Appends a Unicode.Rune to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="rune">A Unicode.Rune to append.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Char)">
            <summary>
            Appends a char to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="ch">A char to append.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.AppendRawByte``1(``0@,System.Byte)">
            <summary>
            Appends a byte to this string.
            </summary>
            <remarks>
            No validation is performed: it is your responsibility for the data to be valid UTF-8 when you're done appending bytes.
            </remarks>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="a">A byte to append.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Appends a Unicode.Rune a number of times to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="rune">A Unicode.Rune to append some number of times.</param>
            <param name="count">The number of times to append the rune.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Int64)">
            <summary>
            Appends a number (converted to UTF-8 characters) to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="input">A long integer to append to the string.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Int32)">
            <summary>
            Appends a number (converted to UTF-8 characters) to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="input">An int to append to the string.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.UInt64)">
            <summary>
            Appends a number (converted to UTF-8 characters) to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="input">A ulong integer to append to the string.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.UInt32)">
            <summary>
            Appends a number (converted to UTF-8 characters) to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="input">A uint to append to the string.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Single,System.Char)">
            <summary>
            Appends a number (converted to UTF-8 characters) to this string.
            </summary>
            <typeparam name="T">The type of FixedString*N*Bytes.</typeparam>
            <param name="fs">A FixedString*N*Bytes.</param>
            <param name="input">A float to append to the string.</param>
            <param name="decimalSeparator">The character to use as the decimal separator. Defaults to a period ('.').</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``2(``0@,``1@)">
            <summary>
            Appends another string to this string.
            </summary>
            <remarks>
            When the method returns an error, the destination string is not modified.
            </remarks>
            <typeparam name="T">The type of the destination string.</typeparam>
            <typeparam name="T2">The type of the source string.</typeparam>
            <param name="fs">The destination string.</param>
            <param name="input">The source string.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the destination string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.CopyFrom``2(``0@,``1@)">
            <summary>
            Copies another string to this string (making the two strings equal).
            </summary>
            <remarks>
            When the method returns an error, the destination string is not modified.
            </remarks>
            <typeparam name="T">The type of the destination string.</typeparam>
            <typeparam name="T2">The type of the source string.</typeparam>
            <param name="fs">The destination string.</param>
            <param name="input">The source string.</param>
            <returns>CopyError.None if successful. Returns CopyError.Truncation if the source string is too large to fit in the destination.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Byte*,System.Int32)">
             <summary>
             Appends bytes to this string.
             </summary>
             <remarks>
             When the method returns an error, the destination string is not modified.
            
             No validation is performed: it is your responsibility for the destination to contain valid UTF-8 when you're done appending bytes.
             </remarks>
             <typeparam name="T">The type of the destination string.</typeparam>
             <param name="fs">The destination string.</param>
             <param name="utf8Bytes">The bytes to append.</param>
             <param name="utf8BytesLength">The number of bytes to append.</param>
             <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the destination string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.String)">
            <summary>
            Appends another string to this string.
            </summary>
            <remarks>
            When the method returns an error, the destination string is not modified.
            </remarks>
            <typeparam name="T">The type of the destination string.</typeparam>
            <param name="fs">The destination string.</param>
            <param name="s">The string to append.</param>
            <returns>FormatError.None if successful. Returns FormatError.Overflow if the capacity of the destination string is exceeded.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.CopyFrom``1(``0@,System.String)">
            <summary>
            Copies another string to this string (making the two strings equal).
            Replaces any existing content of the FixedString.
            </summary>
            <remarks>
            When the method returns an error, the destination string is not modified.
            </remarks>
            <typeparam name="T">The type of the destination string.</typeparam>
            <param name="fs">The destination string.</param>
            <param name="s">The source string.</param>
            <returns>CopyError.None if successful. Returns CopyError.Truncation if the source string is too large to fit in the destination.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.CopyFromTruncated``1(``0@,System.String)">
            <summary>
            Copies another string to this string. If the string exceeds the capacity it will be truncated.
            Replaces any existing content of the FixedString.
            </summary>
            <typeparam name="T">The type of the destination string.</typeparam>
            <param name="fs">The destination string.</param>
            <param name="s">The source string.</param>
            <returns>CopyError.None if successful. Returns CopyError.Truncation if the source string is too large to fit in the destination.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.CopyFromTruncated``2(``0@,``1@)">
            <summary>
            Copies another string to this string. If the string exceeds the capacity it will be truncated.
            </summary>
            <remarks>
            When the method returns an error, the destination string is not modified.
            </remarks>
            <typeparam name="T">The type of the destination string.</typeparam>
            <typeparam name="T2">The type of the source string.</typeparam>
            <param name="fs">The destination string.</param>
            <param name="input">The source string.</param>
            <returns>CopyError.None if successful. Returns CopyError.Truncation if the source string is too large to fit in the destination.</returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Char,System.Char)">
            <summary>
            Append two characters to this IUTF8Bytes.  This is used as a helper for internal formatting.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Char,System.Char,System.Char)">
            <summary>
            Append three characters to this IUTF8Bytes.  This is used as a helper for internal formatting.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Append``1(``0@,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Append 'I' 'n' 'f' 'i' 'n' 'i' 't' 'y' characters to this IUTF8Bytes.  This is used as a helper for internal formatting.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Found``1(``0@,System.Int32@,System.Char,System.Char,System.Char)">
            <summary>
            Check if runes a, b, c are found at offset offset
            </summary>
            <param name="offset">The target offset</param>
            <param name="a">rune a</param>
            <param name="b">rune b</param>
            <param name="c">rune c</param>
            <returns></returns>
        </member>
        <member name="M:Unity.Collections.FixedStringMethods.Found``1(``0@,System.Int32@,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
             <summary>
            
             </summary>
             <param name="offset"></param>
             <param name="a"></param>
             <param name="b"></param>
             <param name="c"></param>
             <param name="d"></param>
             <param name="e"></param>
             <param name="f"></param>
             <param name="g"></param>
             <param name="h"></param>
             <returns></returns>
        </member>
        <member name="P:Unity.Collections.FixedList`2.Length">
            <summary>
            The current number of items in this list.
            </summary>
            <value>The current number of items in this list.</value>
        </member>
        <member name="P:Unity.Collections.FixedList`2.Elements">
            <summary>
            A property in order to display items in the Entity Inspector.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList`2.IsEmpty">
            <summary>
            Whether the list is empty.
            </summary>
            <value>True if this string has no characters or if the container has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.FixedList`2.Capacity">
            <summary>
            The number of elements that can fit in this list.
            </summary>
            <value>The number of elements that can fit in this list.</value>
            <remarks>The capacity of a FixedList cannot be changed. The setter is included only for conformity with <see cref="T:Unity.Collections.INativeList`1"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new value does not match the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.FixedList`2.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index.</param>
            <value>The value to store at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index.
            </summary>
            <param name="index">An index.</param>
            <returns>A reference to the element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList`2.GetHashCode">
            <summary>
            Returns the hash code of this list.
            </summary>
            <remarks>
            Only the content of the list (the bytes of the elements) are included in the hash. Any bytes beyond the length are not part of the hash.</remarks>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList`2.Add(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList`2.AddNoResize(`0@)"/>. Included only for consistency with the other list types.
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList`2.AddRangeNoResize(System.Void*,System.Int32)"/>. Included only for consistency with the other list types.
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.AddNoResize(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks> Does *not* zero out the bytes.</remarks>
        </member>
        <member name="M:Unity.Collections.FixedList`2.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown if the new length exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.Insert(System.Int32,`0@)">
            <summary>
            Inserts a single element at an index. Increments the length by 1.
            </summary>
            <param name="index">The index at which to insert the element.</param>
            <param name="item">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to an index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove elements from a list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count`-numbered elements to the range starting at `index`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
            
             Does nothing if the count is less than 1.
             </remarks>
             <param name="index">The first index of the destination range.</param>
             <param name="count">The number of elements to copy and the amount by which to decrement the length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index. Shifts everything above the index down by one and decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove an element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements of a range. Shifts everything above the range down by *N* and decrements the length by *N*.
            </summary>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove elements.
            </remarks>
            <param name="index">The first index of the range to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList`2.ToArray">
            <summary>
            Returns a managed array that is a copy of this list.
            </summary>
            <returns>A managed array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList`2.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList32Bytes`1">
            <summary>
            An unmanaged, resizable list whose content is all stored directly in the 32-byte struct. Useful for small lists.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.Length">
            <summary>
            The current number of items in this list.
            </summary>
            <value>The current number of items in this list.</value>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.Elements">
            <summary>
            A property in order to display items in the Entity Inspector.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if this string has no characters or if the container has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.Buffer">
            <summary>
            Returns a pointer to the first element of the list buffer.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target list object. It is the
            caller's responsibility to ensure that the pointer is not used after the list is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the first element of the list buffer.</returns>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.Capacity">
            <summary>
            The number of elements that can fit in this list.
            </summary>
            <value>The number of elements that can fit in this list.</value>
            <remarks>The capacity of a FixedList cannot be changed. The setter is included only for conformity with <see cref="T:Unity.Collections.INativeList`1"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new value does not match the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index.</param>
            <value>The value to store at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index.
            </summary>
            <param name="index">An index.</param>
            <returns>The list element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.GetHashCode">
            <summary>
            Returns the hash code of this list.
            </summary>
            <remarks>
            Only the content of the list (the bytes of the elements) are included in the hash. Any bytes beyond the length are not part of the hash.</remarks>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Add(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList32Bytes`1.AddNoResize(`0@)"/>. Included only for consistency with the other list types.
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList32Bytes`1.AddRangeNoResize(System.Void*,System.Int32)"/>. Included only for consistency with the other list types.
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.AddNoResize(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks> Does *not* zero out the bytes.</remarks>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown if the new length exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Insert(System.Int32,`0@)">
            <summary>
            Inserts a single element at an index. Increments the length by 1.
            </summary>
            <param name="index">The index at which to insert the element.</param>
            <param name="item">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to an index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove elements from a list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count`-numbered elements to the range starting at `index`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
            
             Does nothing if the count is less than 1.
             </remarks>
             <param name="index">The first index of the destination range.</param>
             <param name="count">The number of elements to copy and the amount by which to decrement the length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index. Shifts everything above the index down by one and decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove an element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements of a range. Shifts everything above the range down by *N* and decrements the length by *N*.
            </summary>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove elements.
            </remarks>
            <param name="index">The first index of the range to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.ToArray">
            <summary>
            Returns a managed array that is a copy of this list.
            </summary>
            <returns>A managed array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Equality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Inequality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.CompareTo(Unity.Collections.FixedList32Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Equals(Unity.Collections.FixedList32Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Equality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Inequality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.CompareTo(Unity.Collections.FixedList64Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Equals(Unity.Collections.FixedList64Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.#ctor(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Initialize(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Implicit(Unity.Collections.FixedList64Bytes{`0}@)~Unity.Collections.FixedList32Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Equality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Inequality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.CompareTo(Unity.Collections.FixedList128Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Equals(Unity.Collections.FixedList128Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.#ctor(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Initialize(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Implicit(Unity.Collections.FixedList128Bytes{`0}@)~Unity.Collections.FixedList32Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Equality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Inequality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.CompareTo(Unity.Collections.FixedList512Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Equals(Unity.Collections.FixedList512Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.#ctor(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Initialize(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Implicit(Unity.Collections.FixedList512Bytes{`0}@)~Unity.Collections.FixedList32Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Equality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Inequality(Unity.Collections.FixedList32Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.CompareTo(Unity.Collections.FixedList4096Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Equals(Unity.Collections.FixedList4096Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.#ctor(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Initialize(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList32Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.op_Implicit(Unity.Collections.FixedList4096Bytes{`0}@)~Unity.Collections.FixedList32Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList32Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Equals(System.Object)">
             <summary>
             Returns true if the list is equal to an object.
             </summary>
             <remarks>Two lists are equal if their length and bytes are equal.
            
             A FixedList*N*&lt;T&gt; can only be equal to another FixedList*N*&lt;T&gt; with the same *N* and T.
             </remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if the list is equal to the object.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList32Bytes`1.Enumerator">
            <summary>
            An enumerator over the elements of a FixedList32Bytes&lt;T&gt;.
            </summary>
            <remarks>
            In an enumerator's initial state, `Current` cannot be read. The first <see cref="M:Unity.Collections.FixedList32Bytes`1.Enumerator.MoveNext"/> call advances the enumerator to the first element.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Enumerator.#ctor(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList32Bytes&lt;T&gt;.
            </summary>
            <param name="list">The list for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedList32Bytes`1.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList32Bytes`1.Enumerator.Current">
            <summary>
            The current element.
            </summary>
            <value>The current element.</value>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the elements of this list.
            </summary>
            <returns>An enumerator for iterating over the elements of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList32Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList32Bytes`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList32Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.FixedList32BytesExtensions">
            <summary>
            Provides extension methods for FixedList32Bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList32BytesExtensions.IndexOf``2(Unity.Collections.FixedList32Bytes{``0}@,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32BytesExtensions.Contains``2(Unity.Collections.FixedList32Bytes{``0}@,``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32BytesExtensions.Remove``2(Unity.Collections.FixedList32Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, all elements after it are shifted down by one, and the list's length is decremented by one.
            
             If you don't need to preserve the order of the remaining elements, <see cref="M:Unity.Collections.FixedList32BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList32Bytes{``0}@,``1)"/> is a cheaper alternative.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList32BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList32Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, the last element of the list is copied to overwrite the removed value, and the list's length is decremented by one.
            
             This is cheaper than <see cref="M:Unity.Collections.FixedList32BytesExtensions.Remove``2(Unity.Collections.FixedList32Bytes{``0}@,``1)"/>, but the order of the remaining elements is not preserved.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>Returns true if the item is removed.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList64Bytes`1">
            <summary>
            An unmanaged, resizable list whose content is all stored directly in the 64-byte struct. Useful for small lists.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.Length">
            <summary>
            The current number of items in this list.
            </summary>
            <value>The current number of items in this list.</value>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.Elements">
            <summary>
            A property in order to display items in the Entity Inspector.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if this string has no characters or if the container has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.Buffer">
            <summary>
            Returns a pointer to the first element of the list buffer.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target list object. It is the
            caller's responsibility to ensure that the pointer is not used after the list is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the first element of the list buffer.</returns>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.Capacity">
            <summary>
            The number of elements that can fit in this list.
            </summary>
            <value>The number of elements that can fit in this list.</value>
            <remarks>The capacity of a FixedList cannot be changed. The setter is included only for conformity with <see cref="T:Unity.Collections.INativeList`1"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new value does not match the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index.</param>
            <value>The value to store at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index.
            </summary>
            <param name="index">An index.</param>
            <returns>The list element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.GetHashCode">
            <summary>
            Returns the hash code of this list.
            </summary>
            <remarks>
            Only the content of the list (the bytes of the elements) are included in the hash. Any bytes beyond the length are not part of the hash.</remarks>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Add(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList64Bytes`1.AddNoResize(`0@)"/>. Included only for consistency with the other list types.
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList64Bytes`1.AddRangeNoResize(System.Void*,System.Int32)"/>. Included only for consistency with the other list types.
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.AddNoResize(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks> Does *not* zero out the bytes.</remarks>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown if the new length exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Insert(System.Int32,`0@)">
            <summary>
            Inserts a single element at an index. Increments the length by 1.
            </summary>
            <param name="index">The index at which to insert the element.</param>
            <param name="item">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to an index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove elements from a list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count`-numbered elements to the range starting at `index`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
            
             Does nothing if the count is less than 1.
             </remarks>
             <param name="index">The first index of the destination range.</param>
             <param name="count">The number of elements to copy and the amount by which to decrement the length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index. Shifts everything above the index down by one and decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove an element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements of a range. Shifts everything above the range down by *N* and decrements the length by *N*.
            </summary>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove elements.
            </remarks>
            <param name="index">The first index of the range to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.ToArray">
            <summary>
            Returns a managed array that is a copy of this list.
            </summary>
            <returns>A managed array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Equality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Inequality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.CompareTo(Unity.Collections.FixedList32Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Equals(Unity.Collections.FixedList32Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.#ctor(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Initialize(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Implicit(Unity.Collections.FixedList32Bytes{`0}@)~Unity.Collections.FixedList64Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Equality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Inequality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.CompareTo(Unity.Collections.FixedList64Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Equals(Unity.Collections.FixedList64Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Equality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Inequality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.CompareTo(Unity.Collections.FixedList128Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Equals(Unity.Collections.FixedList128Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.#ctor(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Initialize(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Implicit(Unity.Collections.FixedList128Bytes{`0}@)~Unity.Collections.FixedList64Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Equality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Inequality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.CompareTo(Unity.Collections.FixedList512Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Equals(Unity.Collections.FixedList512Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.#ctor(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Initialize(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Implicit(Unity.Collections.FixedList512Bytes{`0}@)~Unity.Collections.FixedList64Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Equality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Inequality(Unity.Collections.FixedList64Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.CompareTo(Unity.Collections.FixedList4096Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Equals(Unity.Collections.FixedList4096Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.#ctor(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Initialize(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList64Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.op_Implicit(Unity.Collections.FixedList4096Bytes{`0}@)~Unity.Collections.FixedList64Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList64Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Equals(System.Object)">
             <summary>
             Returns true if the list is equal to an object.
             </summary>
             <remarks>Two lists are equal if their length and bytes are equal.
            
             A FixedList*N*&lt;T&gt; can only be equal to another FixedList*N*&lt;T&gt; with the same *N* and T.
             </remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if the list is equal to the object.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList64Bytes`1.Enumerator">
            <summary>
            An enumerator over the elements of a FixedList64Bytes&lt;T&gt;.
            </summary>
            <remarks>
            In an enumerator's initial state, `Current` cannot be read. The first <see cref="M:Unity.Collections.FixedList64Bytes`1.Enumerator.MoveNext"/> call advances the enumerator to the first element.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Enumerator.#ctor(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList64Bytes&lt;T&gt;.
            </summary>
            <param name="list">The list for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedList64Bytes`1.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList64Bytes`1.Enumerator.Current">
            <summary>
            The current element.
            </summary>
            <value>The current element.</value>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the elements of this list.
            </summary>
            <returns>An enumerator for iterating over the elements of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList64Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList64Bytes`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList64Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.FixedList64BytesExtensions">
            <summary>
            Provides extension methods for FixedList64Bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList64BytesExtensions.IndexOf``2(Unity.Collections.FixedList64Bytes{``0}@,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64BytesExtensions.Contains``2(Unity.Collections.FixedList64Bytes{``0}@,``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64BytesExtensions.Remove``2(Unity.Collections.FixedList64Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, all elements after it are shifted down by one, and the list's length is decremented by one.
            
             If you don't need to preserve the order of the remaining elements, <see cref="M:Unity.Collections.FixedList64BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList64Bytes{``0}@,``1)"/> is a cheaper alternative.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList64BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList64Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, the last element of the list is copied to overwrite the removed value, and the list's length is decremented by one.
            
             This is cheaper than <see cref="M:Unity.Collections.FixedList64BytesExtensions.Remove``2(Unity.Collections.FixedList64Bytes{``0}@,``1)"/>, but the order of the remaining elements is not preserved.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>Returns true if the item is removed.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList128Bytes`1">
            <summary>
            An unmanaged, resizable list whose content is all stored directly in the 128-byte struct. Useful for small lists.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.Length">
            <summary>
            The current number of items in this list.
            </summary>
            <value>The current number of items in this list.</value>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.Elements">
            <summary>
            A property in order to display items in the Entity Inspector.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if this string has no characters or if the container has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.Buffer">
            <summary>
            Returns a pointer to the first element of the list buffer.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target list object. It is the
            caller's responsibility to ensure that the pointer is not used after the list is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the first element of the list buffer.</returns>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.Capacity">
            <summary>
            The number of elements that can fit in this list.
            </summary>
            <value>The number of elements that can fit in this list.</value>
            <remarks>The capacity of a FixedList cannot be changed. The setter is included only for conformity with <see cref="T:Unity.Collections.INativeList`1"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new value does not match the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index.</param>
            <value>The value to store at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index.
            </summary>
            <param name="index">An index.</param>
            <returns>The list element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.GetHashCode">
            <summary>
            Returns the hash code of this list.
            </summary>
            <remarks>
            Only the content of the list (the bytes of the elements) are included in the hash. Any bytes beyond the length are not part of the hash.</remarks>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Add(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList128Bytes`1.AddNoResize(`0@)"/>. Included only for consistency with the other list types.
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList128Bytes`1.AddRangeNoResize(System.Void*,System.Int32)"/>. Included only for consistency with the other list types.
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.AddNoResize(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks> Does *not* zero out the bytes.</remarks>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown if the new length exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Insert(System.Int32,`0@)">
            <summary>
            Inserts a single element at an index. Increments the length by 1.
            </summary>
            <param name="index">The index at which to insert the element.</param>
            <param name="item">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to an index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove elements from a list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count`-numbered elements to the range starting at `index`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
            
             Does nothing if the count is less than 1.
             </remarks>
             <param name="index">The first index of the destination range.</param>
             <param name="count">The number of elements to copy and the amount by which to decrement the length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index. Shifts everything above the index down by one and decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove an element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements of a range. Shifts everything above the range down by *N* and decrements the length by *N*.
            </summary>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove elements.
            </remarks>
            <param name="index">The first index of the range to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.ToArray">
            <summary>
            Returns a managed array that is a copy of this list.
            </summary>
            <returns>A managed array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Equality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Inequality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.CompareTo(Unity.Collections.FixedList32Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Equals(Unity.Collections.FixedList32Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.#ctor(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Initialize(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Implicit(Unity.Collections.FixedList32Bytes{`0}@)~Unity.Collections.FixedList128Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Equality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Inequality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.CompareTo(Unity.Collections.FixedList64Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Equals(Unity.Collections.FixedList64Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.#ctor(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Initialize(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Implicit(Unity.Collections.FixedList64Bytes{`0}@)~Unity.Collections.FixedList128Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Equality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Inequality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.CompareTo(Unity.Collections.FixedList128Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Equals(Unity.Collections.FixedList128Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Equality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Inequality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.CompareTo(Unity.Collections.FixedList512Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Equals(Unity.Collections.FixedList512Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.#ctor(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Initialize(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Implicit(Unity.Collections.FixedList512Bytes{`0}@)~Unity.Collections.FixedList128Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Equality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Inequality(Unity.Collections.FixedList128Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.CompareTo(Unity.Collections.FixedList4096Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Equals(Unity.Collections.FixedList4096Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.#ctor(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Initialize(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList128Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.op_Implicit(Unity.Collections.FixedList4096Bytes{`0}@)~Unity.Collections.FixedList128Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList128Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Equals(System.Object)">
             <summary>
             Returns true if the list is equal to an object.
             </summary>
             <remarks>Two lists are equal if their length and bytes are equal.
            
             A FixedList*N*&lt;T&gt; can only be equal to another FixedList*N*&lt;T&gt; with the same *N* and T.
             </remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if the list is equal to the object.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList128Bytes`1.Enumerator">
            <summary>
            An enumerator over the elements of a FixedList128Bytes&lt;T&gt;.
            </summary>
            <remarks>
            In an enumerator's initial state, `Current` cannot be read. The first <see cref="M:Unity.Collections.FixedList128Bytes`1.Enumerator.MoveNext"/> call advances the enumerator to the first element.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Enumerator.#ctor(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList128Bytes&lt;T&gt;.
            </summary>
            <param name="list">The list for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedList128Bytes`1.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList128Bytes`1.Enumerator.Current">
            <summary>
            The current element.
            </summary>
            <value>The current element.</value>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the elements of this list.
            </summary>
            <returns>An enumerator for iterating over the elements of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList128Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList128Bytes`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList128Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.FixedList128BytesExtensions">
            <summary>
            Provides extension methods for FixedList128Bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList128BytesExtensions.IndexOf``2(Unity.Collections.FixedList128Bytes{``0}@,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128BytesExtensions.Contains``2(Unity.Collections.FixedList128Bytes{``0}@,``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128BytesExtensions.Remove``2(Unity.Collections.FixedList128Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, all elements after it are shifted down by one, and the list's length is decremented by one.
            
             If you don't need to preserve the order of the remaining elements, <see cref="M:Unity.Collections.FixedList128BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList128Bytes{``0}@,``1)"/> is a cheaper alternative.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList128BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList128Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, the last element of the list is copied to overwrite the removed value, and the list's length is decremented by one.
            
             This is cheaper than <see cref="M:Unity.Collections.FixedList128BytesExtensions.Remove``2(Unity.Collections.FixedList128Bytes{``0}@,``1)"/>, but the order of the remaining elements is not preserved.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>Returns true if the item is removed.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList512Bytes`1">
            <summary>
            An unmanaged, resizable list whose content is all stored directly in the 512-byte struct. Useful for small lists.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.Length">
            <summary>
            The current number of items in this list.
            </summary>
            <value>The current number of items in this list.</value>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.Elements">
            <summary>
            A property in order to display items in the Entity Inspector.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if this string has no characters or if the container has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.Buffer">
            <summary>
            Returns a pointer to the first element of the list buffer.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target list object. It is the
            caller's responsibility to ensure that the pointer is not used after the list is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the first element of the list buffer.</returns>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.Capacity">
            <summary>
            The number of elements that can fit in this list.
            </summary>
            <value>The number of elements that can fit in this list.</value>
            <remarks>The capacity of a FixedList cannot be changed. The setter is included only for conformity with <see cref="T:Unity.Collections.INativeList`1"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new value does not match the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index.</param>
            <value>The value to store at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index.
            </summary>
            <param name="index">An index.</param>
            <returns>The list element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.GetHashCode">
            <summary>
            Returns the hash code of this list.
            </summary>
            <remarks>
            Only the content of the list (the bytes of the elements) are included in the hash. Any bytes beyond the length are not part of the hash.</remarks>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Add(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList512Bytes`1.AddNoResize(`0@)"/>. Included only for consistency with the other list types.
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList512Bytes`1.AddRangeNoResize(System.Void*,System.Int32)"/>. Included only for consistency with the other list types.
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.AddNoResize(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks> Does *not* zero out the bytes.</remarks>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown if the new length exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Insert(System.Int32,`0@)">
            <summary>
            Inserts a single element at an index. Increments the length by 1.
            </summary>
            <param name="index">The index at which to insert the element.</param>
            <param name="item">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to an index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove elements from a list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count`-numbered elements to the range starting at `index`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
            
             Does nothing if the count is less than 1.
             </remarks>
             <param name="index">The first index of the destination range.</param>
             <param name="count">The number of elements to copy and the amount by which to decrement the length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index. Shifts everything above the index down by one and decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove an element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements of a range. Shifts everything above the range down by *N* and decrements the length by *N*.
            </summary>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove elements.
            </remarks>
            <param name="index">The first index of the range to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.ToArray">
            <summary>
            Returns a managed array that is a copy of this list.
            </summary>
            <returns>A managed array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Equality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Inequality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.CompareTo(Unity.Collections.FixedList32Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Equals(Unity.Collections.FixedList32Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.#ctor(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Initialize(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Implicit(Unity.Collections.FixedList32Bytes{`0}@)~Unity.Collections.FixedList512Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Equality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Inequality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.CompareTo(Unity.Collections.FixedList64Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Equals(Unity.Collections.FixedList64Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.#ctor(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Initialize(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Implicit(Unity.Collections.FixedList64Bytes{`0}@)~Unity.Collections.FixedList512Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Equality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Inequality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.CompareTo(Unity.Collections.FixedList128Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Equals(Unity.Collections.FixedList128Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.#ctor(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Initialize(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Implicit(Unity.Collections.FixedList128Bytes{`0}@)~Unity.Collections.FixedList512Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Equality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Inequality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.CompareTo(Unity.Collections.FixedList512Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Equals(Unity.Collections.FixedList512Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Equality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Inequality(Unity.Collections.FixedList512Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.CompareTo(Unity.Collections.FixedList4096Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Equals(Unity.Collections.FixedList4096Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.#ctor(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Initialize(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList512Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.op_Implicit(Unity.Collections.FixedList4096Bytes{`0}@)~Unity.Collections.FixedList512Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList512Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Equals(System.Object)">
             <summary>
             Returns true if the list is equal to an object.
             </summary>
             <remarks>Two lists are equal if their length and bytes are equal.
            
             A FixedList*N*&lt;T&gt; can only be equal to another FixedList*N*&lt;T&gt; with the same *N* and T.
             </remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if the list is equal to the object.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList512Bytes`1.Enumerator">
            <summary>
            An enumerator over the elements of a FixedList512Bytes&lt;T&gt;.
            </summary>
            <remarks>
            In an enumerator's initial state, `Current` cannot be read. The first <see cref="M:Unity.Collections.FixedList512Bytes`1.Enumerator.MoveNext"/> call advances the enumerator to the first element.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Enumerator.#ctor(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList512Bytes&lt;T&gt;.
            </summary>
            <param name="list">The list for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedList512Bytes`1.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList512Bytes`1.Enumerator.Current">
            <summary>
            The current element.
            </summary>
            <value>The current element.</value>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the elements of this list.
            </summary>
            <returns>An enumerator for iterating over the elements of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList512Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList512Bytes`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList512Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.FixedList512BytesExtensions">
            <summary>
            Provides extension methods for FixedList512Bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList512BytesExtensions.IndexOf``2(Unity.Collections.FixedList512Bytes{``0}@,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512BytesExtensions.Contains``2(Unity.Collections.FixedList512Bytes{``0}@,``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512BytesExtensions.Remove``2(Unity.Collections.FixedList512Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, all elements after it are shifted down by one, and the list's length is decremented by one.
            
             If you don't need to preserve the order of the remaining elements, <see cref="M:Unity.Collections.FixedList512BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList512Bytes{``0}@,``1)"/> is a cheaper alternative.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList512BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList512Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, the last element of the list is copied to overwrite the removed value, and the list's length is decremented by one.
            
             This is cheaper than <see cref="M:Unity.Collections.FixedList512BytesExtensions.Remove``2(Unity.Collections.FixedList512Bytes{``0}@,``1)"/>, but the order of the remaining elements is not preserved.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>Returns true if the item is removed.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList4096Bytes`1">
            <summary>
            An unmanaged, resizable list whose content is all stored directly in the 4096-byte struct. Useful for small lists.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.Length">
            <summary>
            The current number of items in this list.
            </summary>
            <value>The current number of items in this list.</value>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.Elements">
            <summary>
            A property in order to display items in the Entity Inspector.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if this string has no characters or if the container has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.Buffer">
            <summary>
            Returns a pointer to the first element of the list buffer.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target list object. It is the
            caller's responsibility to ensure that the pointer is not used after the list is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the first element of the list buffer.</returns>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.Capacity">
            <summary>
            The number of elements that can fit in this list.
            </summary>
            <value>The number of elements that can fit in this list.</value>
            <remarks>The capacity of a FixedList cannot be changed. The setter is included only for conformity with <see cref="T:Unity.Collections.INativeList`1"/>.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new value does not match the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index.</param>
            <value>The value to store at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index.
            </summary>
            <param name="index">An index.</param>
            <returns>The list element at the index.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.GetHashCode">
            <summary>
            Returns the hash code of this list.
            </summary>
            <remarks>
            Only the content of the list (the bytes of the elements) are included in the hash. Any bytes beyond the length are not part of the hash.</remarks>
            <returns>The hash code of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Add(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList4096Bytes`1.AddNoResize(`0@)"/>. Included only for consistency with the other list types.
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            The same as <see cref="M:Unity.Collections.FixedList4096Bytes`1.AddRangeNoResize(System.Void*,System.Int32)"/>. Included only for consistency with the other list types.
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.AddNoResize(`0@)">
            <summary>
            Appends an element to the end of this list. Increments the length by 1.
            </summary>
            <remarks>
            If the element exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="item">The element to append at the end of the list.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list. Increments the length by the number of appended elements.
            </summary>
            <remarks>
            If the elements exceeds the capacity, throws cref="IndexOutOfRangeException", and the list is unchanged.
            </remarks>
            <param name="ptr">A buffer.</param>
            <param name="length">The number of elements from the buffer to append.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the append exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks> Does *not* zero out the bytes.</remarks>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown if the new length exceeds the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Insert(System.Int32,`0@)">
            <summary>
            Inserts a single element at an index. Increments the length by 1.
            </summary>
            <param name="index">The index at which to insert the element.</param>
            <param name="item">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to an index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove elements from a list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count`-numbered elements to the range starting at `index`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
            
             Does nothing if the count is less than 1.
             </remarks>
             <param name="index">The first index of the destination range.</param>
             <param name="count">The number of elements to copy and the amount by which to decrement the length.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index. Shifts everything above the index down by one and decrements the length by 1.
            </summary>
            <param name="index">The index of the element to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove an element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements of a range. Shifts everything above the range down by *N* and decrements the length by *N*.
            </summary>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveAtSwapBack` is a more efficient way to remove elements.
            </remarks>
            <param name="index">The first index of the range to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.ToArray">
            <summary>
            Returns a managed array that is a copy of this list.
            </summary>
            <returns>A managed array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Equality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Inequality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.CompareTo(Unity.Collections.FixedList32Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Equals(Unity.Collections.FixedList32Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.#ctor(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Initialize(Unity.Collections.FixedList32Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Implicit(Unity.Collections.FixedList32Bytes{`0}@)~Unity.Collections.FixedList4096Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Equality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Inequality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.CompareTo(Unity.Collections.FixedList64Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Equals(Unity.Collections.FixedList64Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.#ctor(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Initialize(Unity.Collections.FixedList64Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Implicit(Unity.Collections.FixedList64Bytes{`0}@)~Unity.Collections.FixedList4096Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Equality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Inequality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.CompareTo(Unity.Collections.FixedList128Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Equals(Unity.Collections.FixedList128Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.#ctor(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Initialize(Unity.Collections.FixedList128Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Implicit(Unity.Collections.FixedList128Bytes{`0}@)~Unity.Collections.FixedList4096Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Equality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Inequality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.CompareTo(Unity.Collections.FixedList512Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Equals(Unity.Collections.FixedList512Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.#ctor(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Initialize(Unity.Collections.FixedList512Bytes{`0}@)">
            <summary>
            Initializes an instance of FixedList4096Bytes with content copied from another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>zero on success, or non-zero on error.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Implicit(Unity.Collections.FixedList512Bytes{`0}@)~Unity.Collections.FixedList4096Bytes{`0}">
            <summary>
            Returns a new list that is a copy of another list.
            </summary>
            <param name="other">The list to copy.</param>
            <returns>A new list that is a copy of the other.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws if the other list's length exceeds the capacity of FixedList4096Bytes&lt;T&gt;.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Equality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for equality.</param>
            <param name="b">The second list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.op_Inequality(Unity.Collections.FixedList4096Bytes{`0}@,Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Returns true if two lists are unequal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="a">The first list to compare for inequality.</param>
            <param name="b">The second list to compare for inequality.</param>
            <returns>True if the two lists are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.CompareTo(Unity.Collections.FixedList4096Bytes{`0})">
             <summary>
             Returns a number denoting whether this list should be placed before or after another list in a sort.
             </summary>
             <param name="other">A list to to compare with.</param>
             <returns>An integer denoting the respective sort position of the list relative to the other:
            
             0 denotes that both lists should have the same position in a sort.
             -1 denotes that this list should precede the other list in a sort.
             +1 denotes that this list should follow the other list in a sort.
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Equals(Unity.Collections.FixedList4096Bytes{`0})">
            <summary>
            Returns true if this list and another list are equal.
            </summary>
            <remarks>Two lists are equal if their length and bytes are equal.</remarks>
            <param name="other">The list to compare for equality.</param>
            <returns>True if the two lists are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Equals(System.Object)">
             <summary>
             Returns true if the list is equal to an object.
             </summary>
             <remarks>Two lists are equal if their length and bytes are equal.
            
             A FixedList*N*&lt;T&gt; can only be equal to another FixedList*N*&lt;T&gt; with the same *N* and T.
             </remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if the list is equal to the object.</returns>
        </member>
        <member name="T:Unity.Collections.FixedList4096Bytes`1.Enumerator">
            <summary>
            An enumerator over the elements of a FixedList4096Bytes&lt;T&gt;.
            </summary>
            <remarks>
            In an enumerator's initial state, `Current` cannot be read. The first <see cref="M:Unity.Collections.FixedList4096Bytes`1.Enumerator.MoveNext"/> call advances the enumerator to the first element.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Enumerator.#ctor(Unity.Collections.FixedList4096Bytes{`0}@)">
            <summary>
            Initializes and returns an instance of FixedList4096Bytes&lt;T&gt;.
            </summary>
            <param name="list">The list for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedList4096Bytes`1.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedList4096Bytes`1.Enumerator.Current">
            <summary>
            The current element.
            </summary>
            <value>The current element.</value>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the elements of this list.
            </summary>
            <returns>An enumerator for iterating over the elements of this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList4096Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.FixedList4096Bytes`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.FixedList4096Bytes`1.GetEnumerator"/> instead.
            </summary>
            <returns>Nothing because it always throws <see cref="T:System.NotImplementedException"/>.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.FixedList4096BytesExtensions">
            <summary>
            Provides extension methods for FixedList4096Bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedList4096BytesExtensions.IndexOf``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096BytesExtensions.Contains``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096BytesExtensions.Remove``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, all elements after it are shifted down by one, and the list's length is decremented by one.
            
             If you don't need to preserve the order of the remaining elements, <see cref="M:Unity.Collections.FixedList4096BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)"/> is a cheaper alternative.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>True if the value was found and removed.</returns>
        </member>
        <member name="M:Unity.Collections.FixedList4096BytesExtensions.RemoveSwapBack``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)">
             <summary>
             Removes the first occurrence of a particular value in this list.
             </summary>
             <remarks>
             If a value is removed, the last element of the list is copied to overwrite the removed value, and the list's length is decremented by one.
            
             This is cheaper than <see cref="M:Unity.Collections.FixedList4096BytesExtensions.Remove``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)"/>, but the order of the remaining elements is not preserved.
             </remarks>
             <typeparam name="T">The type of elements in this list.</typeparam>
             <typeparam name="U">The value type.</typeparam>
             <param name="list">The list to search.</param>
             <param name="value">The value to locate and remove.</param>
             <returns>Returns true if the item is removed.</returns>
        </member>
        <member name="T:Unity.Collections.FixedListExtensions">
            <summary>
            Provides extension methods for FixedList*N*.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``1(Unity.Collections.FixedList32Bytes{``0}@)">
            <summary>
            Sorts the elements in this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``2(Unity.Collections.FixedList32Bytes{``0}@,``1)">
            <summary>
            Sorts the elements in this list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``1(Unity.Collections.FixedList64Bytes{``0}@)">
            <summary>
            Sorts the elements in this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``2(Unity.Collections.FixedList64Bytes{``0}@,``1)">
            <summary>
            Sorts the elements in this list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``1(Unity.Collections.FixedList128Bytes{``0}@)">
            <summary>
            Sorts the elements in this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``2(Unity.Collections.FixedList128Bytes{``0}@,``1)">
            <summary>
            Sorts the elements in this list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``1(Unity.Collections.FixedList512Bytes{``0}@)">
            <summary>
            Sorts the elements in this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``2(Unity.Collections.FixedList512Bytes{``0}@,``1)">
            <summary>
            Sorts the elements in this list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``1(Unity.Collections.FixedList4096Bytes{``0}@)">
            <summary>
            Sorts the elements in this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.FixedListExtensions.Sort``2(Unity.Collections.FixedList4096Bytes{``0}@,``1)">
            <summary>
            Sorts the elements in this list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="T:Unity.Collections.NotBurstCompatible.Extensions">
            <summary>
            Provides some extension methods for various collections.
            </summary>
        </member>
        <member name="M:Unity.Collections.NotBurstCompatible.Extensions.ToArray``1(Unity.Collections.NativeHashSet{``0})">
            <summary>
            Returns a new managed array with all the elements copied from a set.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="set">The set whose elements are copied to the array.</param>
            <returns>A new managed array with all the elements copied from a set.</returns>
        </member>
        <member name="M:Unity.Collections.NotBurstCompatible.Extensions.ToArray``1(Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Returns a new managed array with all the elements copied from a set.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="set">The set whose elements are copied to the array.</param>
            <returns>A new managed array with all the elements copied from a set.</returns>
        </member>
        <member name="M:Unity.Collections.NotBurstCompatible.Extensions.ToArrayNBC``1(Unity.Collections.NativeList{``0})">
            <summary>
            Returns a new managed array which is a copy of this list.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="list">The list to copy.</param>
            <returns>A new managed array which is a copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.NotBurstCompatible.Extensions.CopyFromNBC``1(Unity.Collections.NativeList{``0},``0[])">
            <summary>
            Clears this list and then copies all the elements of an array to this list.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="list">This list.</param>
            <param name="array">The managed array to copy from.</param>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashMapExtensions">
            <summary>
            Provides extension methods for hash maps.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMapExtensions.Unique``1(Unity.Collections.NativeArray{``0})">
             <summary>
             Removes duplicate values from this sorted array and returns the number of values remaining.
             </summary>
             <remarks>
             Uses `Equals` to determine whether values are duplicates.
            
             Expects the array to already be sorted.
            
             The remaining elements will be tightly packed at the front of the array.
             </remarks>
             <typeparam name="T">The type of values in the array.</typeparam>
             <param name="array">The array from which to remove duplicates.</param>
             <returns>The number of unique elements in this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMapExtensions.GetUniqueKeyArray``2(Unity.Collections.LowLevel.Unsafe.UnsafeParallelMultiHashMap{``0,``1},Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array populated with the unique keys from this multi hash map.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="container">The multi hash map.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>An array populated with the unique keys from this multi hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMapExtensions.GetUniqueKeyArray``2(Unity.Collections.NativeParallelMultiHashMap{``0,``1},Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array populated with the unique keys from this multi hash map.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="container">The multi hash map.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>An array populated with the unique keys from this multi hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMapExtensions.GetUnsafeBucketData``2(Unity.Collections.NativeParallelHashMap{``0,``1})">
             <summary>
             Returns a "bucket" view of this hash map.
             </summary>
             <remarks>
             Internally, the elements of a hash map are split into buckets of type <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData"/>.
            
             With buckets, a job can safely access the elements of a hash map concurrently as long as each individual bucket is accessed
             only from an individual thread. Effectively, it is not safe to read elements of an individual bucket concurrently,
             but it is safe to read elements of separate buckets concurrently.
             </remarks>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The type of the values.</typeparam>
             <param name="container">The hash map.</param>
             <returns>A "bucket" view of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMapExtensions.GetUnsafeBucketData``2(Unity.Collections.NativeParallelMultiHashMap{``0,``1})">
             <summary>
             Returns a "bucket" view of this multi hash map.
             </summary>
             <remarks>
             Internally, the elements of a hash map are split into buckets of type <see cref="T:Unity.Collections.LowLevel.Unsafe.UnsafeParallelHashMapBucketData"/>.
            
             With buckets, a job can safely access the elements of a hash map concurrently as long as each individual bucket is accessed
             only from an individual thread. Effectively, it is not safe to read elements of an individual bucket concurrently,
             but it is safe to read elements of separate buckets concurrently.
             </remarks>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The type of the values.</typeparam>
             <param name="container">The multi hash map.</param>
             <returns>A "bucket" view of this multi hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMapExtensions.Remove``2(Unity.Collections.NativeParallelMultiHashMap{``0,``1},``0,``1)">
            <summary>
            Removes all occurrences of a particular key-value pair.
            </summary>
            <remarks>Removes all key-value pairs which have a particular key and which *also have* a particular value.
            In other words: (key *AND* value) rather than (key *OR* value).</remarks>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="container">The multi hash map.</param>
            <param name="key">The key of the key-value pairs to remove.</param>
            <param name="value">The value of the key-value pairs to remove.</param>
        </member>
        <member name="T:Unity.Collections.NativeStream">
             <summary>
             A set of untyped, append-only buffers. Allows for concurrent reading and concurrent writing without synchronization.
             </summary>
             <remarks>
             As long as each individual buffer is written in one thread and read in one thread, multiple
             threads can read and write the stream concurrently, *e.g.*
             while thread *A* reads from buffer *X* of a stream, thread *B* can read from
             buffer *Y* of the same stream.
            
             Each buffer is stored as a chain of blocks. When a write exceeds a buffer's current capacity, another block
             is allocated and added to the end of the chain. Effectively, expanding the buffer never requires copying the existing
             data (unlike with <see cref="T:Unity.Collections.NativeList`1"/>, for example).
            
             **All writing to a stream should be completed before the stream is first read. Do not write to a stream after the first read.**
             Violating these rules won't *necessarily* cause any problems, but they are the intended usage pattern.
            
             Writing is done with <see cref="T:Unity.Collections.NativeStream.Writer"/>, and reading is done with <see cref="T:Unity.Collections.NativeStream.Reader"/>.
             An individual reader or writer cannot be used concurrently across threads: each thread must use its own.
            
             The data written to an individual buffer can be heterogeneous in type, and the data written
             to different buffers of a stream can be entirely different in type, number, and order. Just make sure
             that the code reading from a particular buffer knows what to expect to read from it.
             </remarks>
        </member>
        <member name="M:Unity.Collections.NativeStream.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeStream.
            </summary>
            <param name="bufferCount">The number of buffers to give the stream. You usually want
            one buffer for each thread that will read or write the stream.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeStream.ScheduleConstruct``1(Unity.Collections.NativeStream@,Unity.Collections.NativeList{``0},Unity.Jobs.JobHandle,Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Creates and schedules a job to allocate a new stream.
             </summary>
             <remarks>The stream can be used on the main thread after completing the returned job or used in other jobs that depend upon the returned job.
            
             Using a job to allocate the buffers can be more efficient, particularly for a stream with many buffers.
             </remarks>
             <typeparam name="T">Ignored.</typeparam>
             <param name="stream">Outputs the new stream.</param>
             <param name="bufferCount">A list whose length determines the number of buffers in the stream.</param>
             <param name="dependency">A job handle. The new job will depend upon this handle.</param>
             <param name="allocator">The allocator to use.</param>
             <returns>The handle of the new job.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.ScheduleConstruct(Unity.Collections.NativeStream@,Unity.Collections.NativeArray{System.Int32},Unity.Jobs.JobHandle,Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Creates and schedules a job to allocate a new stream.
             </summary>
             <remarks>The stream can be used...
             - after completing the returned job
             - or in other jobs that depend upon the returned job.
            
             Allocating the buffers in a job can be more efficient, particularly for a stream with many buffers.
             </remarks>
             <param name="stream">Outputs the new stream.</param>
             <param name="bufferCount">An array whose value at index 0 determines the number of buffers in the stream.</param>
             <param name="dependency">A job handle. The new job will depend upon this handle.</param>
             <param name="allocator">The allocator to use.</param>
             <returns>The handle of the new job.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.IsEmpty">
            <summary>
            Returns true if this stream is empty.
            </summary>
            <returns>True if this stream is empty or the stream has not been constructed.</returns>
        </member>
        <member name="P:Unity.Collections.NativeStream.IsCreated">
            <summary>
            Whether this stream has been allocated (and not yet deallocated).
            </summary>
            <remarks>Does not necessarily reflect whether the buffers of the stream have themselves been allocated.</remarks>
            <value>True if this stream has been allocated (and not yet deallocated).</value>
        </member>
        <member name="P:Unity.Collections.NativeStream.ForEachCount">
            <summary>
            The number of buffers in this stream.
            </summary>
            <value>The number of buffers in this stream.</value>
        </member>
        <member name="M:Unity.Collections.NativeStream.AsReader">
            <summary>
            Returns a reader of this stream.
            </summary>
            <returns>A reader of this stream.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.AsWriter">
            <summary>
            Returns a writer of this stream.
            </summary>
            <returns>A writer of this stream.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.Count">
            <summary>
            Returns the total number of items in the buffers of this stream.
            </summary>
            <remarks>Each <see cref="M:Unity.Collections.NativeStream.Writer.Write``1(``0)"/> and <see cref="M:Unity.Collections.NativeStream.Writer.Allocate(System.Int32)"/> call increments this number.</remarks>
            <returns>The total number of items in the buffers of this stream.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.ToNativeArray``1(Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Returns a new NativeArray copy of this stream's data.
             </summary>
             <remarks>The length of the array will equal the count of this stream.
            
             Each buffer of this stream is copied to the array, one after the other.
             </remarks>
             <typeparam name="T">The type of values in the array.</typeparam>
             <param name="allocator">The allocator to use.</param>
             <returns>A new NativeArray copy of this stream's data.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeStream.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will release all resources (memory and safety handles) of this stream.
            </summary>
            <param name="inputDeps">A job handle which the newly scheduled job will depend upon.</param>
            <returns>The handle of a new job that will release all resources (memory and safety handles) of this stream.</returns>
        </member>
        <member name="T:Unity.Collections.NativeStream.Writer">
            <summary>
            Writes data into a buffer of a <see cref="T:Unity.Collections.NativeStream"/>.
            </summary>
            <remarks>An individual writer can only be used for one buffer of one stream.
            Do not create more than one writer for an individual buffer.</remarks>
        </member>
        <member name="P:Unity.Collections.NativeStream.Writer.ForEachCount">
            <summary>
            The number of buffers in the stream of this writer.
            </summary>
            <value>The number of buffers in the stream of this writer.</value>
        </member>
        <member name="M:Unity.Collections.NativeStream.Writer.PatchMinMaxRange(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="foreEachIndex"></param>
        </member>
        <member name="M:Unity.Collections.NativeStream.Writer.BeginForEachIndex(System.Int32)">
             <summary>
             Readies this writer to write to a particular buffer of the stream.
             </summary>
             <remarks>Must be called before using this writer. For an individual writer, call this method only once.
            
             After calling BeginForEachIndex on this writer, passing this writer into functions must be passed by reference.
            
             When done using this writer, you must call <see cref="M:Unity.Collections.NativeStream.Writer.EndForEachIndex"/>.</remarks>
             <param name="foreachIndex">The index of the buffer to write.</param>
        </member>
        <member name="M:Unity.Collections.NativeStream.Writer.EndForEachIndex">
            <summary>
            Readies the buffer written by this writer for reading.
            </summary>
            <remarks>Must be called before reading the buffer written by this writer.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeStream.Writer.Write``1(``0)">
            <summary>
            Write a value to a buffer.
            </summary>
            <remarks>The value is written to the buffer which was specified
            with <see cref="M:Unity.Collections.NativeStream.Writer.BeginForEachIndex(System.Int32)"/>.
            </remarks>
            <typeparam name="T">The type of value to write.</typeparam>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">Thrown if BeginForEachIndex was not called.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the NativeStream.Writer instance has been passed by value instead of by reference.</exception>
        </member>
        <member name="M:Unity.Collections.NativeStream.Writer.Allocate``1">
            <summary>
            Allocate space in a buffer.
            </summary>
            <remarks>The space is allocated in the buffer which was specified
            with <see cref="M:Unity.Collections.NativeStream.Writer.BeginForEachIndex(System.Int32)"/>.
            </remarks>
            <typeparam name="T">The type of value to allocate space for.</typeparam>
            <returns>A reference to the allocation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if BeginForEachIndex was not called.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the NativeStream.Writer instance has been passed by value instead of by reference.</exception>
        </member>
        <member name="M:Unity.Collections.NativeStream.Writer.Allocate(System.Int32)">
            <summary>
            Allocate space in a buffer.
            </summary>
            <remarks>The space is allocated in the buffer which was specified
            with <see cref="M:Unity.Collections.NativeStream.Writer.BeginForEachIndex(System.Int32)"/>.</remarks>
            <param name="size">The number of bytes to allocate.</param>
            <returns>The allocation.</returns>
            <exception cref="T:System.ArgumentException">Thrown if BeginForEachIndex was not called.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the NativeStream.Writer instance has been passed by value instead of by reference.</exception>
        </member>
        <member name="T:Unity.Collections.NativeStream.Reader">
            <summary>
            Reads data from a buffer of a <see cref="T:Unity.Collections.NativeStream"/>.
            </summary>
            <remarks>An individual reader can only be used for one buffer of one stream.
            Do not create more than one reader for an individual buffer.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeStream.Reader.BeginForEachIndex(System.Int32)">
             <summary>
             Readies this reader to read a particular buffer of the stream.
             </summary>
             <remarks>Must be called before using this reader. For an individual reader, call this method only once.
            
             When done using this reader, you must call <see cref="M:Unity.Collections.NativeStream.Reader.EndForEachIndex"/>.</remarks>
             <param name="foreachIndex">The index of the buffer to read.</param>
             <returns>The number of elements left to read from the buffer.</returns>
        </member>
        <member name="M:Unity.Collections.NativeStream.Reader.EndForEachIndex">
            <summary>
            Checks if all data has been read from the buffer.
            </summary>
            <remarks>If you intentionally don't want to read *all* the data in the buffer, don't call this method.
            Otherwise, calling this method is recommended, even though it's not strictly necessary.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if not all the buffer's data has been read.</exception>
        </member>
        <member name="P:Unity.Collections.NativeStream.Reader.ForEachCount">
            <summary>
            The number of buffers in the stream of this reader.
            </summary>
            <value>The number of buffers in the stream of this reader.</value>
        </member>
        <member name="P:Unity.Collections.NativeStream.Reader.RemainingItemCount">
            <summary>
            The number of items not yet read from the buffer.
            </summary>
            <value>The number of items not yet read from the buffer.</value>
        </member>
        <member name="M:Unity.Collections.NativeStream.Reader.ReadUnsafePtr(System.Int32)">
            <summary>
            Returns a pointer to the next position to read from the buffer. Advances the reader some number of bytes.
            </summary>
            <param name="size">The number of bytes to advance the reader.</param>
            <returns>A pointer to the next position to read from the buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the reader would advance past the end of the buffer.</exception>
        </member>
        <member name="M:Unity.Collections.NativeStream.Reader.Read``1">
            <summary>
            Reads the next value from the buffer.
            </summary>
            <remarks>Each read advances the reader to the next item in the buffer.</remarks>
            <typeparam name="T">The type of value to read.</typeparam>
            <returns>A reference to the next value from the buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the reader would advance past the end of the buffer.</exception>
        </member>
        <member name="M:Unity.Collections.NativeStream.Reader.Peek``1">
            <summary>
            Reads the next value from the buffer. Does not advance the reader.
            </summary>
            <typeparam name="T">The type of value to read.</typeparam>
            <returns>A reference to the next value from the buffer.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the read would go past the end of the buffer.</exception>
        </member>
        <member name="M:Unity.Collections.NativeStream.Reader.Count">
            <summary>
            Returns the total number of items in the buffers of the stream.
            </summary>
            <returns>The total number of items in the buffers of the stream.</returns>
        </member>
        <member name="T:Unity.Collections.BitField32">
            <summary>
            A 32-bit array of bits.
            </summary>
            <remarks>
            Stack allocated, so it does not require thread safety checks or disposal.
            </remarks>
        </member>
        <member name="F:Unity.Collections.BitField32.Value">
            <summary>
            The 32 bits, stored as a uint.
            </summary>
            <value>The 32 bits, stored as a uint.</value>
        </member>
        <member name="M:Unity.Collections.BitField32.#ctor(System.UInt32)">
            <summary>
            Initializes and returns an instance of BitField32.
            </summary>
            <param name="initialValue">Initial value of the bit field. Default is 0.</param>
        </member>
        <member name="M:Unity.Collections.BitField32.Clear">
            <summary>
            Clears all the bits to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.BitField32.SetBits(System.Int32,System.Boolean)">
            <summary>
            Sets a single bit to 1 or 0.
            </summary>
            <param name="pos">Position in this bit field to set (must be 0-31).</param>
            <param name="value">If true, sets the bit to 1. If false, sets the bit to 0.</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos`is out of range.</exception>
        </member>
        <member name="M:Unity.Collections.BitField32.SetBits(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets one or more contiguous bits to 1 or 0.
            </summary>
            <param name="pos">Position in the bit field of the first bit to set (must be 0-31).</param>
            <param name="value">If true, sets the bits to 1. If false, sets the bits to 0.</param>
            <param name="numBits">Number of bits to set (must be 1-32).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 32.</exception>
        </member>
        <member name="M:Unity.Collections.BitField32.GetBits(System.Int32,System.Int32)">
            <summary>
            Returns one or more contiguous bits from the bit field as the lower bits of a uint.
            </summary>
            <param name="pos">Position in the bit field of the first bit to get (must be 0-31).</param>
            <param name="numBits">Number of bits to get (must be 1-32).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 32.</exception>
            <returns>The requested range of bits from the bit field stored in the least-significant bits of a uint. All other bits of the uint will be 0.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.IsSet(System.Int32)">
            <summary>
            Returns true if the bit at a position is 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-31).</param>
            <returns>True if the bit at the position is 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.TestNone(System.Int32,System.Int32)">
            <summary>
            Returns true if none of the bits in a contiguous range are 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-31).</param>
            <param name="numBits">Number of bits to test (must be 1-32).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 32.</exception>
            <returns>True if none of the bits in the contiguous range are 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.TestAny(System.Int32,System.Int32)">
            <summary>
            Returns true if any of the bits in a contiguous range are 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-31).</param>
            <param name="numBits">Number of bits to test (must be 1-32).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 32.</exception>
            <returns>True if at least one bit in the contiguous range is 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.TestAll(System.Int32,System.Int32)">
            <summary>
            Returns true if all of the bits in a contiguous range are 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-31).</param>
            <param name="numBits">Number of bits to test (must be 1-32).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 32.</exception>
            <returns>True if all bits in the contiguous range are 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.CountBits">
            <summary>
            Returns the number of bits that are 1.
            </summary>
            <returns>The number of bits that are 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.CountLeadingZeros">
            <summary>
            Returns the number of leading zeroes.
            </summary>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:Unity.Collections.BitField32.CountTrailingZeros">
            <summary>
            Returns the number of trailing zeros.
            </summary>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="T:Unity.Collections.BitField64">
            <summary>
            A 64-bit array of bits.
            </summary>
            <remarks>
            Stack allocated, so it does not require thread safety checks or disposal.
            </remarks>
        </member>
        <member name="F:Unity.Collections.BitField64.Value">
            <summary>
            The 64 bits, stored as a ulong.
            </summary>
            <value>The 64 bits, stored as a uint.</value>
        </member>
        <member name="M:Unity.Collections.BitField64.#ctor(System.UInt64)">
            <summary>
            Initializes and returns an instance of BitField64.
            </summary>
            <param name="initialValue">Initial value of the bit field. Default is 0.</param>
        </member>
        <member name="M:Unity.Collections.BitField64.Clear">
            <summary>
            Clears all bits to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.BitField64.SetBits(System.Int32,System.Boolean)">
            <summary>
            Sets a single bit to 1 or 0.
            </summary>
            <param name="pos">Position in this bit field to set (must be 0-63).</param>
            <param name="value">If true, sets the bit to 1. If false, sets the bit to 0.</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos`is out of range.</exception>
        </member>
        <member name="M:Unity.Collections.BitField64.SetBits(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets one or more contiguous bits to 1 or 0.
            </summary>
            <param name="pos">Position in the bit field of the first bit to set (must be 0-63).</param>
            <param name="value">If true, sets the bits to 1. If false, sets the bits to 0.</param>
            <param name="numBits">Number of bits to set (must be 1-64).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 64.</exception>
        </member>
        <member name="M:Unity.Collections.BitField64.GetBits(System.Int32,System.Int32)">
            <summary>
            Returns one or more contiguous bits from the bit field as the lower bits of a ulong.
            </summary>
            <param name="pos">Position in the bit field of the first bit to get (must be 0-63).</param>
            <param name="numBits">Number of bits to get (must be 1-64).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 64.</exception>
            <returns>The requested range of bits from the bit field stored in the least-significant bits of a ulong. All other bits of the ulong will be 0.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.IsSet(System.Int32)">
            <summary>
            Returns true if the bit at a position is 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-63).</param>
            <returns>True if the bit at the position is 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.TestNone(System.Int32,System.Int32)">
            <summary>
            Returns true if none of the bits in a contiguous range are 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-63).</param>
            <param name="numBits">Number of bits to test (must be 1-64).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 64.</exception>
            <returns>True if none of the bits in the contiguous range are 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.TestAny(System.Int32,System.Int32)">
            <summary>
            Returns true if any of the bits in a contiguous range are 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-63).</param>
            <param name="numBits">Number of bits to test (must be 1-64).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 64.</exception>
            <returns>True if at least one bit in the contiguous range is 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.TestAll(System.Int32,System.Int32)">
            <summary>
            Returns true if all of the bits in a contiguous range are 1.
            </summary>
            <param name="pos">Position in the bit field (must be 0-63).</param>
            <param name="numBits">Number of bits to test (must be 1-64).</param>
            <exception cref="T:System.ArgumentException">Thrown if `pos` or `numBits` are out of bounds or if `pos + numBits` exceeds 64.</exception>
            <returns>True if all bits in the contiguous range are 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.CountBits">
            <summary>
            Returns the number of bits that are 1.
            </summary>
            <returns>The number of bits that are 1.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.CountLeadingZeros">
            <summary>
            Returns the number of leading zeroes.
            </summary>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:Unity.Collections.BitField64.CountTrailingZeros">
            <summary>
            Returns the number of trailing zeros.
            </summary>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="T:Unity.Collections.NativeText">
            <summary>
            An unmanaged, mutable, resizable UTF-8 string.
            </summary>
            <remarks>
            The string is always null-terminated, meaning a zero byte always immediately follows the last character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(System.String,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(System.String,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(System.Int32,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText.
            </summary>
            <param name="capacity">The initial capacity in bytes.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText.
            </summary>
            <param name="capacity">The initial capacity in bytes.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with an initial capacity of 512 bytes.
            </summary>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with an initial capacity of 512 bytes.
            </summary>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString32Bytes@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString32Bytes@,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString64Bytes@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString64Bytes@,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString128Bytes@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString128Bytes@,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString512Bytes@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString512Bytes@,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString4096Bytes@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.#ctor(Unity.Collections.FixedString4096Bytes@,Unity.Collections.Allocator)">
            <summary>
            Initializes and returns an instance of NativeText with the characters copied from another string.
            </summary>
            <param name="source">A string to copy characters from.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.NativeText.Length">
            <summary>
            The current length in bytes of this string.
            </summary>
            <remarks>
            The length does not include the null terminator byte.
            </remarks>
            <value>The current length in bytes of the UTF-8 encoded string.</value>
        </member>
        <member name="P:Unity.Collections.NativeText.Capacity">
            <summary>
            The current capacity in bytes of this string.
            </summary>
            <remarks>
            The null-terminator byte is not included in the capacity, so the string's character buffer is `Capacity + 1` in size.
            </remarks>
            <value>The current capacity in bytes of the string.</value>
        </member>
        <member name="M:Unity.Collections.NativeText.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempt to set the length in bytes of this string.
            </summary>
            <param name="newLength">The new length in bytes of the string.</param>
            <param name="clearOptions">Whether any bytes added should be zeroed out.</param>
            <returns>Always true.</returns>
        </member>
        <member name="P:Unity.Collections.NativeText.IsEmpty">
            <summary>
            Whether this string has no characters.
            </summary>
            <value>True if this string has no characters or the string has not been constructed.</value>
            <exception cref="T:System.NotSupportedException">Thrown if ENABLE_UNITY_COLLECTIONS_CHECKS is defined and a write is attempted.</exception>
        </member>
        <member name="P:Unity.Collections.NativeText.IsCreated">
            <summary>
            Whether this string's character buffer has been allocated (and not yet deallocated).
            </summary>
            <value>Whether this string's character buffer has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeText.GetUnsafePtr">
            <summary>
            Returns a pointer to this string's character buffer.
            </summary>
            <remarks>
            The pointer is made invalid by operations that reallocate the character buffer, such as setting <see cref="P:Unity.Collections.NativeText.Capacity"/>.
            </remarks>
            <returns>A pointer to this string's character buffer.</returns>
        </member>
        <member name="P:Unity.Collections.NativeText.Item(System.Int32)">
            <summary>
            The byte at an index. Note that writing to a NativeText.Readonly is not supported; the setter of this property throws when safety checks are enabled.
            </summary>
            <param name="index">A zero-based byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeText.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the byte (not character) at an index.
            </summary>
            <remarks>
            Deallocating or reallocating this string's character buffer makes the reference invalid.
            </remarks>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeText.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeText.Add(System.Byte@)">
             <summary>
             Appends a byte.
             </summary>
             <remarks>
             A zero byte will always follow the newly appended byte.
            
             No validation is performed: it is your responsibility for the bytes of the string to form valid UTF-8 when you're done appending bytes.
             </remarks>
             <param name="value">A byte to append.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.NativeText)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.NativeText)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.NativeText.ReadOnly)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeText.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that releases all resources (memory and safety handles) of this NativeText.
            </summary>
            <param name="inputDeps">The dependency for the new job.</param>
            <returns>The handle of the new job. The job depends upon `inputDeps` and releases all resources (memory and safety handles) of this NativeText.</returns>
        </member>
        <member name="P:Unity.Collections.NativeText.Value">
            <summary>
            A copy of this string as a managed string.
            </summary>
            <remarks>
            For internal use only. Use <see cref="M:Unity.Collections.NativeText.ToString"/> instead.
            </remarks>
            <value>A copy of this string as a managed string.</value>
        </member>
        <member name="T:Unity.Collections.NativeText.Enumerator">
            <summary>
            An enumerator over the characters (not bytes) of a NativeText.
            </summary>
            <remarks>
            In an enumerator's initial state, its index is invalid. The first <see cref="M:Unity.Collections.NativeText.Enumerator.MoveNext"/> call advances the enumerator's index to the first character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeText.Enumerator.#ctor(Unity.Collections.NativeText)">
            <summary>
            Initializes and returns an instance of NativeText.Enumerator.
            </summary>
            <param name="source">A NativeText for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.Enumerator.#ctor(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Initializes and returns an instance of NativeText.Enumerator.
            </summary>
            <param name="source">A NativeText.ReadOnly for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.NativeText.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeText.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next character, returning true if <see cref="P:Unity.Collections.NativeText.Enumerator.Current"/> is valid to read afterwards.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.NativeText.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeText.Enumerator.Current">
            <summary>
            The current character.
            </summary>
            <value>The current character.</value>
        </member>
        <member name="M:Unity.Collections.NativeText.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of the NativeText.
            </summary>
            <returns>An enumerator for iterating over the characters of the NativeText.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(System.String)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Equality(Unity.Collections.NativeText@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Inequality(Unity.Collections.NativeText@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Equality(Unity.Collections.NativeText@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Inequality(Unity.Collections.NativeText@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Equality(Unity.Collections.NativeText@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Inequality(Unity.Collections.NativeText@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Equality(Unity.Collections.NativeText@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Inequality(Unity.Collections.NativeText@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Equality(Unity.Collections.NativeText@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.op_Inequality(Unity.Collections.NativeText@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ToString">
            <summary>
            Returns a managed string copy of this string.
            </summary>
            <returns>A managed string copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>The hash code is an integer that is always the same for two equal strings but (very likely) different for two unequal strings.</remarks>
            <returns>A hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.Equals(System.Object)">
             <summary>
             Returns true if this string and another object are equal.
             </summary>
             <remarks>For the object to be equal, it must itself be a managed string, NativeText, or FixedString*N*Bytes.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="other">Another string to compare with.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="T:Unity.Collections.NativeText.ReadOnly">
            <summary>
            A read-only alias for the value of a NativeText. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeText.ReadOnly.Capacity">
            <summary>
            The current capacity in bytes of this string.
            </summary>
            <remarks>
            The null-terminator byte is not included in the capacity, so the string's character buffer is `Capacity + 1` in size.
            </remarks>
            <value>The current capacity in bytes of the string.</value>
            <exception cref="T:System.NotSupportedException">Thrown if ENABLE_UNITY_COLLECTIONS_CHECKS is defined and a write is attempted.</exception>
        </member>
        <member name="P:Unity.Collections.NativeText.ReadOnly.IsEmpty">
            <summary>
            Whether this string has no characters.
            </summary>
            <value>True if this string has no characters or if the string has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeText.ReadOnly.Length">
            <summary>
            The current length in bytes of this string.
            </summary>
            <remarks>
            The length does not include the null terminator byte.
            </remarks>
            <value>The current length in bytes of the UTF-8 encoded string.</value>
            <exception cref="T:System.NotSupportedException">Thrown if ENABLE_UNITY_COLLECTIONS_CHECKS is defined and a write is attempted.</exception>
        </member>
        <member name="P:Unity.Collections.NativeText.ReadOnly.Item(System.Int32)">
            <summary>
            The byte at an index.
            </summary>
            <param name="index">A zero-based byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if ENABLE_UNITY_COLLECTIONS_CHECKS is defined and a write is attempted.</exception>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Clear">
            <summary>
            Sets the length to 0. For a NativeText.Readonly this function does nothing, unless safety checks are enabled (in which case it throws).
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if ENABLE_UNITY_COLLECTIONS_CHECKS is defined.</exception>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the byte (not character) at an index. Unsupported by NativeText.ReadOnly.
            </summary>
            <remarks>
            This function is a no-op when ENABLE_UNITY_COLLECTIONS_CHECKS is not defined, throws otherwise.
            </remarks>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when called. This operation is not supported.</exception>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.GetUnsafePtr">
            <summary>
            Returns a pointer to this string's character buffer.
            </summary>
            <remarks>
            The pointer is made invalid by operations that reallocate the character buffer, such as setting <see cref="P:Unity.Collections.NativeText.ReadOnly.Capacity"/>.
            </remarks>
            <returns>A pointer to this string's character buffer.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempt to set the length in bytes of this string. For NativeText.ReadOnly this function is a no-op and always returns false.
            </summary>
            <param name="newLength">The new length in bytes of the string.</param>
            <param name="clearOptions">Whether any bytes added should be zeroed out.</param>
            <returns>Always false.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if ENABLE_UNITY_COLLECTIONS_CHECKS is defined.</exception>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(System.String)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.NativeText.ReadOnly)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.NativeText)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.NativeText)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Equality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Inequality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Equality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Inequality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Equality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Inequality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Equality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Inequality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">Another string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other string:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Equality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if two strings are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.op_Inequality(Unity.Collections.NativeText.ReadOnly@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if two strings are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A string to compare.</param>
            <param name="b">Another string to compare.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">Another string to compare with.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.ToString">
            <summary>
            Returns a managed string copy of this string.
            </summary>
            <returns>A managed string copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>The hash code is an integer that is always the same for two equal strings but (very likely) different for two unequal strings.</remarks>
            <returns>A hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.Equals(System.Object)">
             <summary>
             Returns true if this string and another object are equal.
             </summary>
             <remarks>For the object to be equal, it must itself be a managed string, NativeText, or FixedString*N*Bytes.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="other">Another string to compare with.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="P:Unity.Collections.NativeText.ReadOnly.Value">
            <summary>
            A copy of this string as a managed string.
            </summary>
            <remarks>
            For internal use only. Use <see cref="M:Unity.Collections.NativeText.ReadOnly.ToString"/> instead.
            </remarks>
            <value>A copy of this string as a managed string.</value>
        </member>
        <member name="M:Unity.Collections.NativeText.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of the NativeText.
            </summary>
            <returns>An enumerator for iterating over the characters of the NativeText.</returns>
        </member>
        <member name="M:Unity.Collections.NativeText.AsReadOnly">
            <summary>
            Returns a readonly version of this NativeText instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the NativeText it is made from. Note while ReadOnly contains methods that would write to the string data these methods will perform no writes and/or throw a NotSupportedException.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.DoubleRewindableAllocators">
            <summary>
            A double rewindable allocators <see cref="T:Unity.Collections.RewindableAllocator"/>.
            </summary>
        </member>
        <member name="M:Unity.Collections.DoubleRewindableAllocators.Update">
            <summary>
            Update the double rewindable allocators, switch Pointer to another allocator and rewind the newly switched allocator.
            </summary>
        </member>
        <member name="P:Unity.Collections.DoubleRewindableAllocators.Allocator">
            <summary>
            Retrieve the current rewindable allocator.
            </summary>
            <value>The Allocator retrieved.</value>
        </member>
        <member name="P:Unity.Collections.DoubleRewindableAllocators.IsCreated">
            <summary>
            Check whether the double rewindable allocators is created.
            </summary>
            <value>True if current allocator is not null, otherwise false.</value>
        </member>
        <member name="M:Unity.Collections.DoubleRewindableAllocators.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle,System.Int32)">
            <summary>
            Construct a double rewindable allocators by allocating the allocators from backingAllocator and registering them.
            </summary>
            <param name="backingAllocator">Allocator used to allocate the double rewindable allocators.</param>
            <param name="initialSizeInBytes">The initial capacity of the allocators, in bytes</param>
        </member>
        <member name="M:Unity.Collections.DoubleRewindableAllocators.Initialize(Unity.Collections.AllocatorManager.AllocatorHandle,System.Int32)">
            <summary>
            Initialize a double rewindable allocators by allocating the allocators from backingAllocator and registering them.
            </summary>
            <param name="backingAllocator">Allocator used to allocate the double rewindable allocators.</param>
            <param name="initialSizeInBytes">The initial capacity of the allocators, in bytes</param>
        </member>
        <member name="M:Unity.Collections.DoubleRewindableAllocators.Dispose">
            <summary>
            the double rewindable allocators and unregister it.
            </summary>
        </member>
        <member name="T:Unity.Collections.xxHash3">
            <summary>
            A feature complete hashing API based on xxHash3 (https://github.com/Cyan4973/xxHash)
            </summary>
            <remarks>
            Features:
             - Compute 64bits or 128bits hash keys, based on a private key, with an optional given seed value.
             - Hash on buffer (with or without a ulong based seed value)
             - Hash on buffer while copying the data to a destination
             - Use instances of <see cref="T:Unity.Collections.xxHash3.StreamingState"/> to accumulate data to hash in multiple calls, suited for small data, then retrieve the hash key at the end.
             - xxHash3 has several implementation based on the size to hash to ensure best performances
             - We currently have two implementations:
               - A generic one based on Unity.Mathematics, that should always be executed compiled with Burst.
               - An AVX2 based implementation for platforms supporting it, using Burst intrinsics.
             - Whether or not the call site is compiled with burst, the hashing function will be executed by Burst(*) to ensure optimal performance.
               (*) Only when the hashing size justifies such transition.
            </remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash64(System.Void*,System.Int64)">
            <summary>
            Compute a 64bits hash of a memory region
            </summary>
            <param name="input">The memory buffer, can't be null</param>
            <param name="length">The length of the memory buffer, can be zero</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash64``1(``0@)">
            <summary>
            Compute a 64bits hash from the contents of the input struct
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="input">The input struct that will be hashed</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash64(System.Void*,System.Int64,System.UInt64)">
            <summary>
            Compute a 64bits hash of a memory region using a given seed value
            </summary>
            <param name="input">The memory buffer, can't be null</param>
            <param name="length">The length of the memory buffer, can be zero</param>
            <param name="seed">The seed value to alter the hash computation from</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash128(System.Void*,System.Int64)">
            <summary>
            Compute a 128bits hash of a memory region
            </summary>
            <param name="input">The memory buffer, can't be null</param>
            <param name="length">The length of the memory buffer, can be zero</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash128``1(``0@)">
            <summary>
            Compute a 128bits hash from the contents of the input struct
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="input">The input struct that will be hashed</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash128(System.Void*,System.Void*,System.Int64)">
            <summary>
            Compute a 128bits hash while copying the data to a destination buffer
            </summary>
            <param name="input">The memory buffer to compute the hash and copy from, can't be null</param>
            <param name="destination">The destination buffer, can't be null and must be at least big enough to match the input's length</param>
            <param name="length">The length of the memory buffer, can be zero</param>
            <returns>The hash result</returns>
            <remarks>Use this API to avoid a double memory scan in situations where the hash as to be compute and the data copied at the same time. Performances improvements vary between 30-50% on
            big data.</remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash128(System.Void*,System.Int64,System.UInt64)">
            <summary>
            Compute a 128bits hash of a memory region using a given seed value
            </summary>
            <param name="input">The memory buffer, can't be null</param>
            <param name="length">The length of the memory buffer, can be zero</param>
            <param name="seed">The seed value to alter the hash computation from</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.Hash128(System.Void*,System.Void*,System.Int64,System.UInt64)">
            <summary>
            Compute a 128bits hash while copying the data to a destination buffer using a given seed value
            </summary>
            <param name="input">The memory buffer to compute the hash and copy from, can't be null</param>
            <param name="destination">The destination buffer, can't be null and must be at least big enough to match the input's length</param>
            <param name="length">The length of the memory buffer, can be zero</param>
            <param name="seed">The seed value to alter the hash computation from</param>
            <returns>The hash result</returns>
        </member>
        <member name="T:Unity.Collections.xxHash3.StreamingState">
            <summary>
            Type used to compute hash based on multiple data feed
            </summary>
            <remarks>
            Allow to feed the internal hashing accumulators with data through multiple calls to <see cref="M:Unity.Collections.xxHash3.StreamingState.Update(System.Void*,System.Int32)"/>, then retrieving the final hash value using <see cref="M:Unity.Collections.xxHash3.StreamingState.DigestHash64"/> or <see cref="M:Unity.Collections.xxHash3.StreamingState.DigestHash128"/>.
            More info about how to use this class in its constructor.
            </remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.StreamingState.#ctor(System.Boolean,System.UInt64)">
            <summary>
            Create a StreamingState object, ready to be used with the streaming API
            </summary>
            <param name="isHash64">true if we are computing a 64bits hash value, false if we are computing a 128bits one</param>
            <param name="seed">A seed value to be used to compute the hash, default is 0</param>
            <remarks>
            Once the object is constructed, you can call the <see cref="M:Unity.Collections.xxHash3.StreamingState.Update(System.Void*,System.Int32)"/> method as many times as you want to accumulate data to hash.
            When all the data has been sent, call <see cref="M:Unity.Collections.xxHash3.StreamingState.DigestHash64"/> or <see cref="M:Unity.Collections.xxHash3.StreamingState.DigestHash128"/> to retrieve the corresponding key, the <see cref="T:Unity.Collections.xxHash3.StreamingState"/>
            instance will then be reset, using the same hash key size and same Seed in order to be ready to be used again.
            </remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.StreamingState.Reset(System.Boolean,System.UInt64)">
            <summary>
            Reset the state of the streaming instance using the given seed value.
            </summary>
            <param name="isHash64"></param>
            <param name="seed">The seed value to alter the computed hash value from</param>
            <remarks> Call this method to start a new streaming session based on this instance</remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.StreamingState.Update(System.Void*,System.Int32)">
            <summary>
            Add some data to be hashed
            </summary>
            <param name="input">The memory buffer, can't be null</param>
            <param name="length">The length of the data to accumulate, can be zero</param>
            <remarks>This API allows you to feed very small data to be hashed, avoiding you to accumulate them in a big buffer, then computing the hash value from.</remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.StreamingState.Update``1(``0@)">
            <summary>
            Add the contents of input struct to the hash.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="input">The input struct that will be hashed</param>
            <remarks>This API allows you to feed very small data to be hashed, avoiding you to accumulate them in a big buffer, then computing the hash value from.</remarks>
        </member>
        <member name="M:Unity.Collections.xxHash3.StreamingState.DigestHash128">
            <summary>
            Compute the 128bits value based on all the data that have been accumulated
            </summary>
            <returns>The hash value</returns>
        </member>
        <member name="M:Unity.Collections.xxHash3.StreamingState.DigestHash64">
            <summary>
            Compute the 64bits value based on all the data that have been accumulated
            </summary>
            <returns>The hash value</returns>
        </member>
        <member name="T:Unity.Collections.UTF8ArrayUnsafeUtility">
            <summary>
            Provides methods for copying and encoding Unicode text.
            </summary>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Copy(System.Byte*,System.Int32@,System.Int32,System.Char*,System.Int32)">
            <summary>
            Copies a buffer of UCS-2 text. The copy is encoded as UTF-8.
            </summary>
            <remarks>Assumes the source data is valid UCS-2.</remarks>
            <param name="src">The source buffer for reading UCS-2.</param>
            <param name="srcLength">The number of chars to read from the source.</param>
            <param name="dest">The destination buffer for writing UTF-8.</param>
            <param name="destLength">Outputs the number of bytes written to the destination.</param>
            <param name="destUTF8MaxLengthInBytes">The max number of bytes that will be written to the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Copy(System.Byte*,System.UInt16@,System.UInt16,System.Char*,System.Int32)">
            <summary>
            Copies a buffer of UCS-2 text. The copy is encoded as UTF-8.
            </summary>
            <remarks>Assumes the source data is valid UCS-2.</remarks>
            <param name="src">The source buffer for reading UCS-2.</param>
            <param name="srcLength">The number of chars to read from the source.</param>
            <param name="dest">The destination buffer for writing UTF-8.</param>
            <param name="destLength">Outputs the number of bytes written to the destination.</param>
            <param name="destUTF8MaxLengthInBytes">The max number of bytes that will be written to the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Copy(System.Byte*,System.Int32@,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Copies a buffer of UCS-8 text.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="src">The source buffer.</param>
            <param name="srcLength">The number of chars to read from the source.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destLength">Outputs the number of bytes written to the destination.</param>
            <param name="destUTF8MaxLengthInBytes">The max number of bytes that will be written to the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Copy(System.Byte*,System.UInt16@,System.UInt16,System.Byte*,System.UInt16)">
            <summary>
            Copies a buffer of UCS-8 text.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="src">The source buffer.</param>
            <param name="srcLength">The number of chars to read from the source.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destLength">Outputs the number of bytes written to the destination.</param>
            <param name="destUTF8MaxLengthInBytes">The max number of bytes that will be written to the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Copy(System.Char*,System.Int32@,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Copies a buffer of UTF-8 text. The copy is encoded as UCS-2.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="src">The source buffer for reading UTF-8.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <param name="dest">The destination buffer for writing UCS-2.</param>
            <param name="destLength">Outputs the number of chars written to the destination.</param>
            <param name="destUCS2MaxLengthInChars">The max number of chars that will be written to the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Copy(System.Char*,System.UInt16@,System.UInt16,System.Byte*,System.UInt16)">
            <summary>
            Copies a buffer of UTF-8 text. The copy is encoded as UCS-2.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="src">The source buffer for reading UTF-8.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <param name="dest">The destination buffer for writing UCS-2.</param>
            <param name="destLength">Outputs the number of chars written to the destination.</param>
            <param name="destUCS2MaxLengthInChars">The max number of chars that will be written to the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.AppendUTF8Bytes(System.Byte*,System.Int32@,System.Int32,System.Byte*,System.Int32)">
             <summary>
             Appends UTF-8 text to a buffer.
             </summary>
             <remarks>Assumes the source data is valid UTF-8.
            
             No data will be copied if the destination has insufficient capacity for the full append, *i.e.* if `srcLength > (destCapacity - destLength)`.
             </remarks>
             <param name="src">The source buffer.</param>
             <param name="srcLength">The number of bytes to read from the source.</param>
             <param name="dest">The destination buffer.</param>
             <param name="destLength">Reference to the destination buffer's length in bytes *before* the append. Will be assigned the new length *after* the append.</param>
             <param name="destCapacity">The destination buffer capacity in bytes.</param>
             <returns><see cref="F:Unity.Collections.FormatError.None"/> if the append fully completes. Otherwise, returns <see cref="F:Unity.Collections.FormatError.Overflow"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Append(System.Byte*,System.UInt16@,System.UInt16,System.Byte*,System.UInt16)">
            <summary>
            Appends UTF-8 text to a buffer.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="src">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destLength">Reference to the destination buffer's length in bytes *before* the append. Will be assigned the number of bytes appended.</param>
            <param name="destUTF8MaxLengthInBytes">The destination buffer's length in bytes. Data will not be appended past this length.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the append fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Append(System.Byte*,System.UInt16@,System.UInt16,System.Char*,System.Int32)">
            <summary>
            Appends UCS-2 text to a buffer, encoded as UTF-8.
            </summary>
            <remarks>Assumes the source data is valid UCS-2.</remarks>
            <param name="src">The source buffer.</param>
            <param name="srcLength">The number of chars to read from the source.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destLength">Reference to the destination buffer's length in bytes *before* the append. Will be assigned the number of bytes appended.</param>
            <param name="destUTF8MaxLengthInBytes">The destination buffer's length in bytes. Data will not be appended past this length.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the append fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.Append(System.Char*,System.UInt16@,System.UInt16,System.Byte*,System.UInt16)">
            <summary>
            Appends UTF-8 text to a buffer, encoded as UCS-2.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="src">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <param name="dest">The destination buffer.</param>
            <param name="destLength">Reference to the destination buffer's length in chars *before* the append. Will be assigned the number of chars appended.</param>
            <param name="destUCS2MaxLengthInChars">The destination buffer's length in chars. Data will not be appended past this length.</param>
            <returns><see cref="F:Unity.Collections.CopyError.None"/> if the append fully completes. Otherwise, returns <see cref="F:Unity.Collections.CopyError.Truncation"/>.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.StrCmp(System.Byte*,System.Int32,System.Byte*,System.Int32)">
            <summary>Compares two UTF-8 buffers for relative equality.</summary>
            <param name="utf8BufferA">The first buffer of UTF-8 text.</param>
            <param name="utf8LengthInBytesA">The length in bytes of the first UTF-8 buffer.</param>
            <param name="utf8BufferB">The second buffer of UTF-8 text.</param>
            <param name="utf8LengthInBytesB">The length in bytes of the second UTF-8 buffer.</param>
            <returns>
            Less than zero if first different code point is less in the first UTF-8 buffer.
            Zero if the strings are identical.
            More than zero if first different code point is less in the second UTF-8 buffer.
            </returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.StrCmp(System.Char*,System.Int32,System.Char*,System.Int32)">
            <summary>Compares two UTF-16 buffers for relative equality.</summary>
            <param name="utf16BufferA">The first buffer of UTF-16 text.</param>
            <param name="utf16LengthInCharsA">The length in chars of the first UTF-16 buffer.</param>
            <param name="utf16BufferB">The second buffer of UTF-16 text.</param>
            <param name="utf16LengthInCharsB">The length in chars of the second UTF-16 buffer.</param>
            <returns>
            Less than zero if first different code point is less in the first UTF-16 buffer.
            Zero if the strings are identical.
            More than zero if first different code point is less in the second UTF-16 buffer.
            </returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.EqualsUTF8Bytes(System.Byte*,System.Int32,System.Byte*,System.Int32)">
            <summary>Returns true if two UTF-8 buffers have the same length and content.</summary>
            <param name="aBytes">The first buffer of UTF-8 text.</param>
            <param name="aLength">The length in bytes of the first buffer.</param>
            <param name="bBytes">The second buffer of UTF-8 text.</param>
            <param name="bLength">The length in bytes of the second buffer.</param>
            <returns>True if the content of both strings is identical.</returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.StrCmp(System.Byte*,System.Int32,System.Char*,System.Int32)">
            <summary>Compares a UTF-8 buffer and a UTF-16 buffer for relative equality.</summary>
            <param name="utf8Buffer">The buffer of UTF-8 text.</param>
            <param name="utf8LengthInBytes">The length in bytes of the UTF-8 buffer.</param>
            <param name="utf16Buffer">The buffer of UTF-16 text.</param>
            <param name="utf16LengthInChars">The length in chars of the UTF-16 buffer.</param>
            <returns>
            Less than zero if first different code point is less in UTF-8 buffer.
            Zero if the strings are identical.
            More than zero if first different code point is less in UTF-16 buffer.
            </returns>
        </member>
        <member name="M:Unity.Collections.UTF8ArrayUnsafeUtility.StrCmp(System.Char*,System.Int32,System.Byte*,System.Int32)">
            <summary>Compares a UTF-16 buffer and a UTF-8 buffer for relative equality.</summary>
            <param name="utf16Buffer">The buffer of UTF-16 text.</param>
            <param name="utf16LengthInChars">The length in chars of the UTF-16 buffer.</param>
            <param name="utf8Buffer">The buffer of UTF-8 text.</param>
            <param name="utf8LengthInBytes">The length in bytes of the UTF-8 buffer.</param>
            <returns>
            Less than zero if first different code point is less in UTF-16 buffer.
            Zero if the strings are identical.
            More than zero if first different code point is less in UTF-8 buffer.
            </returns>
        </member>
        <member name="T:Unity.Collections.IUTF8Bytes">
            <summary>
            An interface for a sequence of UTF-8 encoded text.
            </summary>
        </member>
        <member name="P:Unity.Collections.IUTF8Bytes.IsEmpty">
            <summary>
            Whether this IUTF8Bytes is empty.
            </summary>
            <value>True if this IUTF8Bytes is empty.</value>
        </member>
        <member name="M:Unity.Collections.IUTF8Bytes.GetUnsafePtr">
            <summary>
            Returns a pointer to the content of this IUTF8Bytes.
            </summary>
            <remarks>The pointer may point to stack memory.</remarks>
            <returns>A pointer to the content of this IUTF8Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.IUTF8Bytes.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempt to set the length in bytes of this IUTF8Bytes's content buffer.
            </summary>
            <param name="newLength">The new length in bytes of the IUTF8Bytes's content buffer.</param>
            <param name="clearOptions">Whether any bytes added should be zeroed out.</param>
            <returns>True if the new length is valid.</returns>
        </member>
        <member name="T:Unity.Collections.ListExtensions">
            <summary>
            Extension methods for lists.
            </summary>
        </member>
        <member name="M:Unity.Collections.ListExtensions.RemoveSwapBack``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Finds and removes the first occurrence of a particular value in the list.
            </summary>
            <remarks>
            If found, the first occurrence of the value is overwritten by the last element of the list, and the list's length is decremented by one.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate and remove.</param>
            <returns>Returns true if an element was removed.</returns>
        </member>
        <member name="M:Unity.Collections.ListExtensions.RemoveSwapBack``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Finds and removes the first value which satisfies a predicate.
            </summary>
            <remarks>
            The first value satisfying the predicate is overwritten by the last element of the list, and the list's length is decremented by one.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="matcher">The predicate for testing the elements of the list.</param>
            <returns>Returns true if an element was removed.</returns>
        </member>
        <member name="M:Unity.Collections.ListExtensions.RemoveAtSwapBack``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes the value at an index.
            </summary>
            <remarks>
            The value at the index is overwritten by the last element of the list, and the list's length is decremented by one.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="index">The index at which to remove an element from the list.</param>
        </member>
        <member name="M:Unity.Collections.ListExtensions.ToNativeList``1(System.Collections.Generic.List{``0},Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a copy of this list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to copy.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>A copy of this list.</returns>
        </member>
        <member name="M:Unity.Collections.ListExtensions.ToNativeArray``1(System.Collections.Generic.List{``0},Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array that is a copy of this list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to copy.</param>
            <param name="allocator">The allocator to use.</param>
            <returns>An array that is a copy of this list.</returns>
        </member>
        <member name="T:Unity.Collections.NativeArrayExtensions">
            <summary>
            Extension methods for NativeArray.
            </summary>
        </member>
        <member name="T:Unity.Collections.NativeArrayExtensions.NativeArrayStaticId`1">
            <summary>
            Provides a Burst compatible id for NativeArray<typeparamref name="T"/> types. Used by the Job Safety System.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.Contains``2(Unity.Collections.NativeArray{``0},``1)">
            <summary>
            Returns true if a particular value is present in this array.
            </summary>
            <typeparam name="T">The type of elements in this array.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.IndexOf``2(Unity.Collections.NativeArray{``0},``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this array.
            </summary>
            <typeparam name="T">The type of elements in this array.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value in this array. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.Contains``2(Unity.Collections.NativeArray{``0}.ReadOnly,``1)">
            <summary>
            Returns true if a particular value is present in this array.
            </summary>
            <typeparam name="T">The type of elements in this array.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.IndexOf``2(Unity.Collections.NativeArray{``0}.ReadOnly,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this array.
            </summary>
            <typeparam name="T">The type of elements in this array.</typeparam>
            <typeparam name="U">The type of value to locate.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value in this array. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.Contains``2(System.Void*,System.Int32,``1)">
            <summary>
            Returns true if a particular value is present in a buffer.
            </summary>
            <typeparam name="T">The type of elements in the buffer.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="ptr">The buffer.</param>
            <param name="length">Number of elements in the buffer.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in the buffer.</returns>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.IndexOf``2(System.Void*,System.Int32,``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in a buffer.
            </summary>
            <typeparam name="T">The type of elements in the buffer.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="ptr">A buffer.</param>
            <param name="length">Number of elements in the buffer.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value in the buffer. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.CopyFrom``1(Unity.Collections.NativeArray{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Copies all elements of specified container to array.
            </summary>
            <typeparam name="T">The type of elements in this container.</typeparam>
            <param name="container">Container to copy to.</param>
            <param name="other">An container to copy into this array.</param>
            <exception cref="T:System.ArgumentException">Thrown if the array and container have unequal length.</exception>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.CopyFrom``1(Unity.Collections.NativeArray{``0}@,Unity.Collections.NativeHashSet{``0}@)">
            <summary>
            Copies all elements of specified container to array.
            </summary>
            <typeparam name="T">The type of elements in this container.</typeparam>
            <param name="container">Container to copy to.</param>
            <param name="other">An container to copy into this array.</param>
            <exception cref="T:System.ArgumentException">Thrown if the array and container have unequal length.</exception>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.CopyFrom``1(Unity.Collections.NativeArray{``0}@,Unity.Collections.LowLevel.Unsafe.UnsafeHashSet{``0}@)">
            <summary>
            Copies all elements of specified container to array.
            </summary>
            <typeparam name="T">The type of elements in this container.</typeparam>
            <param name="container">Container to copy to.</param>
            <param name="other">An container to copy into this array.</param>
            <exception cref="T:System.ArgumentException">Thrown if the array and container have unequal length.</exception>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.Reinterpret``2(Unity.Collections.NativeArray{``0})">
            <summary>
            Returns the reinterpretation of this array into another kind of NativeArray.
            See [Array reinterpretation](https://docs.unity3d.com/Packages/com.unity.collections@latest?subfolder=/manual/allocation.html#array-reinterpretation).
            </summary>
            <param name="array">The array to reinterpret.</param>
            <typeparam name="T">Type of elements in the array.</typeparam>
            <typeparam name="U">Type of elements in the reinterpreted array.</typeparam>
            <returns>The reinterpretation of this array into another kind of NativeArray.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if this array's capacity cannot be evenly divided by `sizeof(U)`.</exception>
        </member>
        <member name="M:Unity.Collections.NativeArrayExtensions.ArraysEqual``1(Unity.Collections.NativeArray{``0},Unity.Collections.NativeArray{``0})">
            <summary>
            Returns true if this array and another have equal length and content.
            </summary>
            <typeparam name="T">The type of the source array's elements.</typeparam>
            <param name="container">The array to compare for equality.</param>
            <param name="other">The other array to compare for equality.</param>
            <returns>True if the arrays have equal length and content.</returns>
        </member>
        <member name="T:Unity.Collections.IIndexable`1">
            <summary>
            An indexable collection.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="P:Unity.Collections.IIndexable`1.Length">
            <summary>
            The current number of elements in the collection.
            </summary>
            <value>The current number of elements in the collection.</value>
        </member>
        <member name="M:Unity.Collections.IIndexable`1.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the element at a given index.
            </summary>
            <param name="index">The index to access. Must be in the range of [0..Length).</param>
            <returns>A reference to the element at the index.</returns>
        </member>
        <member name="T:Unity.Collections.INativeList`1">
            <summary>
            A resizable list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.INativeList`1.Capacity">
            <summary>
            The number of elements that fit in the current allocation.
            </summary>
            <value>The number of elements that fit in the current allocation.</value>
            <param name="value">A new capacity.</param>
        </member>
        <member name="P:Unity.Collections.INativeList`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if this list is empty.</value>
        </member>
        <member name="P:Unity.Collections.INativeList`1.Item(System.Int32)">
            <summary>
            The element at an index.
            </summary>
            <param name="index">An index.</param>
            <value>The element at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.INativeList`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="T:Unity.Collections.NativeList`1">
            <summary>
            An unmanaged, resizable list.
            </summary>
            <remarks>The elements are stored contiguously in a buffer rather than as linked nodes.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeList`1.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns a NativeList with a capacity of one.
            </summary>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns a NativeList.
            </summary>
            <param name="initialCapacity">The initial capacity of the list.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.NativeList`1.Item(System.Int32)">
            <summary>
            The element at a given index.
            </summary>
            <param name="index">An index into this list.</param>
            <value>The value to store at the `index`.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ElementAt(System.Int32)">
            <summary>
            Returns a reference to the element at an index.
            </summary>
            <param name="index">An index.</param>
            <returns>A reference to the element at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if index is out of bounds.</exception>
        </member>
        <member name="P:Unity.Collections.NativeList`1.Length">
            <summary>
            The count of elements.
            </summary>
            <value>The current count of elements. Always less than or equal to the capacity.</value>
            <remarks>To decrease the memory used by a list, set <see cref="P:Unity.Collections.NativeList`1.Capacity"/> after reducing the length of the list.</remarks>
            <param name="value>>">The new length. If the new length is greater than the current capacity, the capacity is increased.
            Newly allocated memory is cleared.</param>
        </member>
        <member name="P:Unity.Collections.NativeList`1.Capacity">
            <summary>
            The number of elements that fit in the current allocation.
            </summary>
            <value>The number of elements that fit in the current allocation.</value>
            <param name="value">The new capacity. Must be greater or equal to the length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new capacity is smaller than the length.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.GetUnsafeList">
            <summary>
            Returns the internal unsafe list.
            </summary>
            <remarks>Internally, the elements of a NativeList are stored in an UnsafeList.</remarks>
            <returns>The internal unsafe list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AddNoResize(`0)">
            <summary>
            Appends an element to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <remarks>
            Length is incremented by 1. Will not increase the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if incrementing the length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list.
            </summary>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of elements to copy from the buffer.</param>
            <remarks>
            Length is increased by the count. Will not increase the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AddRangeNoResize(Unity.Collections.NativeList{`0})">
            <summary>
            Appends the elements of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Length is increased by the length of the other list. Will not increase the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.Add(`0@)">
            <summary>
            Appends an element to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <remarks>
            Length is incremented by 1. If necessary, the capacity is increased.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AddRange(Unity.Collections.NativeArray{`0})">
            <summary>
            Appends the elements of an array to the end of this list.
            </summary>
            <param name="array">The array to copy from.</param>
            <remarks>
            Length is increased by the number of new elements. Does not increase the capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if the increased length would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AddRange(System.Void*,System.Int32)">
            <summary>
            Appends the elements of a buffer to the end of this list.
            </summary>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of elements to copy from the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if count is negative.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AddReplicate(`0@,System.Int32)">
            <summary>
            Appends value count times to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <param name="count">The number of times to replicate the value.</param>
            <remarks>
            Length is incremented by count. If necessary, the capacity is increased.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if count is negative.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.InsertRangeWithBeginEnd(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `end - begin`. If necessary, the capacity will be increased accordingly.
            
             If `end` equals `begin`, the method does nothing.
            
             The element at index `begin` will be copied to index `end`, the element at index `begin + 1` will be copied to `end + 1`, and so forth.
            
             The indexes `begin` up to `end` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="begin">The index of the first element that will be shifted up.</param>
             <param name="end">The index where the first shifted element will end up.</param>
             <exception cref="T:System.ArgumentException">Thrown if `end &lt; begin`.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `begin` or `end` are out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.InsertRange(System.Int32,System.Int32)">
             <summary>
             Shifts elements toward the end of this list, increasing its length.
             </summary>
             <remarks>
             Right-shifts elements in the list so as to create 'free' slots at the beginning or in the middle.
            
             The length is increased by `count`. If necessary, the capacity will be increased accordingly.
            
             If `count` equals `0`, the method does nothing.
            
             The element at index `index` will be copied to index `index + count`, the element at index `index + 1` will be copied to `index + count + 1`, and so forth.
            
             The indexes `index` up to `index + count` are not cleared: they will contain whatever values they held prior.
             </remarks>
             <param name="index">The index of the first element that will be shifted up.</param>
             <param name="count">The number of elements to insert.</param>
             <exception cref="T:System.ArgumentException">Thrown if `count` is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.RemoveAtSwapBack(System.Int32)">
            <summary>
            Copies the last element of this list to the specified index. Decrements the length by 1.
            </summary>
            <remarks>Useful as a cheap way to remove an element from this list when you don't care about preserving order.</remarks>
            <param name="index">The index to overwrite with the last element.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.RemoveRangeSwapBack(System.Int32,System.Int32)">
             <summary>
             Copies the last *N* elements of this list to a range in this list. Decrements the length by *N*.
             </summary>
             <remarks>
             Copies the last `count` elements to the indexes `index` up to `index + count`.
            
             Useful as a cheap way to remove elements from a list when you don't care about preserving order.
             </remarks>
             <param name="index">The index of the first element to overwrite.</param>
             <param name="count">The number of elements to copy and remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds, `count` is negative,
             or `index + count` exceeds the length.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at an index, shifting everything above it down by one. Decrements the length by 1.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, <see cref="M:Unity.Collections.NativeList`1.RemoveAtSwapBack(System.Int32)"/> is a more efficient way to remove elements.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes *N* elements in a range, shifting everything above the range down by *N*. Decrements the length by *N*.
            </summary>
            <param name="index">The index of the first element to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <remarks>
            If you don't care about preserving the order of the elements, `RemoveRangeSwapBackWithBeginEnd`
            is a more efficient way to remove elements.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if `index` is out of bounds, `count` is negative,
            or `index + count` exceeds the length.</exception>
        </member>
        <member name="P:Unity.Collections.NativeList`1.IsEmpty">
            <summary>
            Whether this list is empty.
            </summary>
            <value>True if the list is empty or if the list has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeList`1.IsCreated">
            <summary>
            Whether this list has been allocated (and not yet deallocated).
            </summary>
            <value>True if this list has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeList`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeList`1.Dispose``1(``0@)">
            <summary>
            Releases all resources (memory and safety handles).
            <typeparam name="U">The type of allocator.</typeparam>
            <param name="allocator">The allocator that was used to allocate this list.</param>
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeList`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that releases all resources (memory and safety handles) of this list.
            </summary>
            <param name="inputDeps">The dependency for the new job.</param>
            <returns>The handle of the new job. The job depends upon `inputDeps` and releases all resources (memory and safety handles) of this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.Clear">
            <summary>
            Sets the length to 0.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeList`1.op_Implicit(Unity.Collections.NativeList{`0})~Unity.Collections.NativeArray{`0}">
            <summary>
            Returns a native array that aliases the content of a list.
            </summary>
            <param name="nativeList">The list to alias.</param>
            <returns>A native array that aliases the content of the list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AsArray">
            <summary>
            Returns a native array that aliases the content of this list.
            </summary>
            <returns>A native array that aliases the content of this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AsDeferredJobArray">
             <summary>
             Returns an array that aliases this list. The length of the array is updated when the length of
             this array is updated in a prior job.
             </summary>
             <remarks>
             Useful when a job populates a list that is then used by another job.
            
             If you pass both jobs the same list, you have to complete the first job before you schedule the second:
             otherwise, the second job doesn't see the first job's changes to the list's length.
            
             If instead you pass the second job a deferred array that aliases the list, the array's length is kept in sync with
             the first job's changes to the list's length. Consequently, the first job doesn't have to
             be completed before you can schedule the second: the second job simply has to depend upon the first.
             </remarks>
             <returns>An array that aliases this list and whose length can be specially modified across jobs.</returns>
             <example>
             The following example populates a list with integers in one job and passes that data to a second job as
             a deferred array. If we tried to pass the list directly to the second job, that job would not see any
             modifications made to the list by the first job. To avoid this, we instead pass the second job a deferred array that aliases the list.
             <code>
             using UnityEngine;
             using Unity.Jobs;
             using Unity.Collections;
            
             public class DeferredArraySum : MonoBehaviour
            {
                public struct Populate : IJob
                {
                    public NativeList&lt;int&gt; list;
            
                    public void Execute()
                    {
                        for (int i = list.Length; i &lt; list.Capacity; i++)
                        {
                            list.Add(i);
                        }
                    }
                }
            
                // Sums all numbers from deferred.
                public struct Sum : IJob
                {
                    [ReadOnly] public NativeArray&lt;int&gt; deferred;
                    public NativeArray&lt;int&gt; sum;
            
                    public void Execute()
                    {
                        sum[0] = 0;
                        for (int i = 0; i &lt; deferred.Length; i++)
                        {
                            sum[0] += deferred[i];
                        }
                    }
                }
            
                void Start()
                {
                    var list = new NativeList&lt;int&gt;(100, Allocator.TempJob);
                    var deferred = list.AsDeferredJobArray(),
                    var output = new NativeArray&lt;int&gt;(1, Allocator.TempJob);
            
                    // The Populate job increases the list's length from 0 to 100.
                    var populate = new Populate { list = list }.Schedule();
            
                    // At time of scheduling, the length of the deferred array given to Sum is 0.
                    // When Populate increases the list's length, the deferred array's length field in the
                    // Sum job is also modified, even though it has already been scheduled.
                    var sum = new Sum { deferred = deferred, sum = output }.Schedule(populate);
            
                    sum.Complete();
            
                    Debug.Log("Result: " + output[0]);
            
                    list.Dispose();
                    output.Dispose();
                }
             }
             </code>
             </example>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ToArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array containing a copy of this list's content.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array containing a copy of this list's content.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.CopyFrom(Unity.Collections.NativeArray{`0}@)">
            <summary>
            Copies all elements of specified container to this container.
            </summary>
            <param name="other">An container to copy into this container.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.CopyFrom(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0}@)">
            <summary>
            Copies all elements of specified container to this container.
            </summary>
            <param name="other">An container to copy into this container.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.CopyFrom(Unity.Collections.NativeList{`0}@)">
            <summary>
            Copies all elements of specified container to this container.
            </summary>
            <param name="other">An container to copy into this container.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.GetEnumerator">
            <summary>
            Returns an enumerator over the elements of this list.
            </summary>
            <returns>An enumerator over the elements of this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeList`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeList`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.Resize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Sets the length of this list, increasing the capacity if necessary.
            </summary>
            <param name="length">The new length of this list.</param>
            <param name="options">Whether to clear any newly allocated bytes to all zeroes.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ResizeUninitialized(System.Int32)">
            <summary>
            Sets the length of this list, increasing the capacity if necessary.
            </summary>
            <remarks>Does not clear newly allocated bytes.</remarks>
            <param name="length">The new length of this list.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.SetCapacity(System.Int32)">
            <summary>
            Sets the capacity.
            </summary>
            <param name="capacity">The new capacity.</param>
        </member>
        <member name="M:Unity.Collections.NativeList`1.TrimExcess">
            <summary>
            Sets the capacity to match the length.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AsReadOnly">
            <summary>
            Returns a read only of this list.
            </summary>
            <returns>A read only of this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AsParallelReader">
            <summary>
            Returns a parallel reader of this list.
            </summary>
            <returns>A parallel reader of this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeList`1.AsParallelWriter">
            <summary>
            Returns a parallel writer of this list.
            </summary>
            <returns>A parallel writer of this list.</returns>
        </member>
        <member name="T:Unity.Collections.NativeList`1.ParallelWriter">
            <summary>
            A parallel writer for a NativeList.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.NativeList`1.AsParallelWriter"/> to create a parallel writer for a list.
            </remarks>
        </member>
        <member name="P:Unity.Collections.NativeList`1.ParallelWriter.Ptr">
            <summary>
            The data of the list.
            </summary>
        </member>
        <member name="F:Unity.Collections.NativeList`1.ParallelWriter.ListData">
            <summary>
            The internal unsafe list.
            </summary>
            <value>The internal unsafe list.</value>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ParallelWriter.AddNoResize(`0)">
            <summary>
            Appends an element to the end of this list.
            </summary>
            <param name="value">The value to add to the end of this list.</param>
            <remarks>
            Increments the length by 1 unless doing so would exceed the current capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if adding an element would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ParallelWriter.AddRangeNoResize(System.Void*,System.Int32)">
            <summary>
            Appends elements from a buffer to the end of this list.
            </summary>
            <param name="ptr">The buffer to copy from.</param>
            <param name="count">The number of elements to copy from the buffer.</param>
            <remarks>
            Increments the length by `count` unless doing so would exceed the current capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if adding the elements would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ParallelWriter.AddRangeNoResize(Unity.Collections.LowLevel.Unsafe.UnsafeList{`0})">
            <summary>
            Appends the elements of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length of this list by the length of the other list unless doing so would exceed the current capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if adding the elements would exceed the capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeList`1.ParallelWriter.AddRangeNoResize(Unity.Collections.NativeList{`0})">
            <summary>
            Appends the elements of another list to the end of this list.
            </summary>
            <param name="list">The other list to copy from.</param>
            <remarks>
            Increments the length of this list by the length of the other list unless doing so would exceed the current capacity.
            </remarks>
            <exception cref="T:System.Exception">Thrown if adding the elements would exceed the capacity.</exception>
        </member>
        <member name="T:Unity.Collections.NativeListExtensions">
            <summary>
            Provides extension methods for UnsafeList.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeListExtensions.Contains``2(Unity.Collections.NativeList{``0},``1)">
            <summary>
            Returns true if a particular value is present in this list.
            </summary>
            <typeparam name="T">The type of elements in this list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>True if the value is present in this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeListExtensions.IndexOf``2(Unity.Collections.NativeList{``0},``1)">
            <summary>
            Finds the index of the first occurrence of a particular value in this list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <typeparam name="U">The value type.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>The index of the first occurrence of the value in this list. Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeListExtensions.ArraysEqual``1(Unity.Collections.NativeArray{``0},Unity.Collections.NativeList{``0}@)">
            <summary>
            Returns true if this container and another have equal length and content.
            </summary>
            <typeparam name="T">The type of the source container's elements.</typeparam>
            <param name="container">The container to compare for equality.</param>
            <param name="other">The other container to compare for equality.</param>
            <returns>True if the containers have equal length and content.</returns>
        </member>
        <member name="M:Unity.Collections.NativeListExtensions.ArraysEqual``1(Unity.Collections.NativeList{``0},Unity.Collections.NativeArray{``0}@)">
            <summary>
            Returns true if this container and another have equal length and content.
            </summary>
            <typeparam name="T">The type of the source container's elements.</typeparam>
            <param name="container">The container to compare for equality.</param>
            <param name="other">The other container to compare for equality.</param>
            <returns>True if the containers have equal length and content.</returns>
        </member>
        <member name="M:Unity.Collections.NativeListExtensions.ArraysEqual``1(Unity.Collections.NativeList{``0},Unity.Collections.NativeList{``0}@)">
            <summary>
            Returns true if this container and another have equal length and content.
            </summary>
            <typeparam name="T">The type of the source container's elements.</typeparam>
            <param name="container">The container to compare for equality.</param>
            <param name="other">The other container to compare for equality.</param>
            <returns>True if the containers have equal length and content.</returns>
        </member>
        <member name="M:Unity.Collections.NativeListExtensions.ArraysEqual``1(Unity.Collections.NativeList{``0},Unity.Collections.LowLevel.Unsafe.UnsafeList{``0}@)">
            <summary>
            Returns true if this container and another have equal length and content.
            </summary>
            <typeparam name="T">The type of the source container's elements.</typeparam>
            <param name="container">The container to compare for equality.</param>
            <param name="other">The other container to compare for equality.</param>
            <returns>True if the containers have equal length and content.</returns>
        </member>
        <member name="T:Unity.Collections.HashSetExtensions">
            <summary>
            Provides extension methods for sets.
            </summary>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList128Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList32Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList4096Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList512Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.FixedList64Bytes{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeArray{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeParallelHashSet{``0}.ReadOnly)">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.ExceptWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are also present in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.IntersectWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Removes the values from this set which are absent in another collection.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to remove values from.</param>
            <param name="other">The collection to compare with.</param>
        </member>
        <member name="M:Unity.Collections.HashSetExtensions.UnionWith``1(Unity.Collections.NativeParallelHashSet{``0}@,Unity.Collections.NativeList{``0})">
            <summary>
            Adds all values from a collection to this set.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <param name="container">The set to add values to.</param>
            <param name="other">The collection to copy values from.</param>
        </member>
        <member name="T:Unity.Collections.FixedBytes16">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0001">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0002">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0003">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0004">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0005">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0006">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0007">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0008">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0009">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0010">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0011">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0012">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0013">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0014">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes16.byte0015">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.FixedBytes30">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.offset0000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0017">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0018">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0019">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0020">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0021">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0022">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0023">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0024">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0025">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0026">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0027">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0028">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes30.byte0029">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.FixedString32Bytes">
             <summary>
             An unmanaged UTF-8 string whose content is stored directly in the 32-byte struct.
             </summary>
             <remarks>
             The binary layout of this string is guaranteed, for now and all time, to be a length (a little-endian two byte integer)
             followed by the bytes of the characters (with no padding). A zero byte always immediately follows the last character.
             Effectively, the number of bytes for storing characters is 3 less than 32 (two length bytes and one null byte).
            
             This layout is identical to a <see cref="T:Unity.Collections.FixedList32Bytes`1"/> of bytes, thus allowing reinterpretation between FixedString32Bytes and FixedList32Bytes.
            
             By virtue of being an unmanaged, non-allocated struct with no pointers, this string is fully compatible with jobs and Burst compilation.
             Unlike managed string types, these strings can be put in any unmanaged ECS components, FixedList, or any other unmanaged structs.
             </remarks>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.UTF8MaxLengthInBytes">
            <summary>
            Returns the maximum number of UTF-8 bytes that can be stored in this string.
            </summary>
            <returns>
            The maximum number of UTF-8 bytes that can be stored in this string.
            </returns>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.Value">
            <summary>
            For internal use only. Use <see cref="M:Unity.Collections.FixedString32Bytes.ToString"/> instead.
            </summary>
            <value>For internal use only. Use <see cref="M:Unity.Collections.FixedString32Bytes.ToString"/> instead.</value>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.GetUnsafePtr">
            <summary>
            Returns a pointer to the character bytes.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target FixedString object. It is the
            caller's responsibility to ensure that the pointer is not used after the FixedString object is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the character bytes.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.Length">
            <summary>
            The current length in bytes of this string's content.
            </summary>
            <remarks>
            The length value does not include the null-terminator byte.
            </remarks>
            <param name="value">The new length in bytes of the string's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new length is out of bounds.</exception>
            <value>
            The current length in bytes of this string's content.
            </value>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.Capacity">
             <summary>
             The number of bytes this string has for storing UTF-8 characters.
             </summary>
             <value>The number of bytes this string has for storing UTF-8 characters.</value>
             <remarks>
             Does not include the null-terminator byte.
            
             A setter is included for conformity with <see cref="T:Unity.Collections.INativeList`1"/>, but <see cref="P:Unity.Collections.FixedString32Bytes.Capacity"/> is fixed at 29.
             Setting the value to anything other than 29 throws an exception.
            
             In UTF-8 encoding, each Unicode code point (character) requires 1 to 4 bytes,
             so the number of characters that can be stored may be less than the capacity.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if attempting to set the capacity to anything other than 29.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempts to set the length in bytes. Does nothing if the new length is invalid.
            </summary>
            <param name="newLength">The desired length.</param>
            <param name="clearOptions">Whether added or removed bytes should be cleared (zeroed). (Increasing the length adds bytes; decreasing the length removes bytes.)</param>
            <returns>True if the new length is valid.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.IsEmpty">
            <summary>
            Returns true if this string is empty (has no characters).
            </summary>
            <value>True if this string is empty (has no characters).</value>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.Item(System.Int32)">
            <summary>
            Returns the byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.ElementAt(System.Int32)">
            <summary>
            Returns the reference to a byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Add(System.Byte@)">
             <summary>
             Appends a byte.
             </summary>
             <remarks>
             A zero byte will always follow the newly appended byte.
            
             No validation is performed: it is your responsibility for the bytes of the string to form valid UTF-8 when you're done appending bytes.
             </remarks>
             <param name="value">A byte to append.</param>
        </member>
        <member name="T:Unity.Collections.FixedString32Bytes.Enumerator">
            <summary>
            An enumerator over the characters (not bytes) of a FixedString32Bytes.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString32Bytes.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.FixedString32Bytes.Enumerator.MoveNext"/> call advances the enumerator's index to the first character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Enumerator.#ctor(Unity.Collections.FixedString32Bytes)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes.Enumerator.
            </summary>
            <param name="other">A FixeString32 for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next character.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedString32Bytes.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedString32Bytes.Enumerator.Current">
            <summary>
            The current character.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString32Bytes.Enumerator.Current"/> is not valid to read.
            </remarks>
            <value>The current character.</value>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of this string.
            </summary>
            <returns>An enumerator for iterating over the characters of the FixedString32Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A `System.String` to compare with.</param>
             <returns>An integer denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other string.<br/>
             +1 denotes that this string should be sorted to follow the other string.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(System.String)">
            <summary>
            Returns true if this string and another have the same length and all the same characters.
            </summary>
            <param name="other">A string to compare for equality.</param>
            <returns>True if this string and the other have the same length and all the same characters.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.AsFixedList">
            <summary>
            Returns a reference to a FixedList32Bytes&lt;byte&gt; representation of this string.
            </summary>
            <remarks>
            The referenced FixedListByte32 is the very same bytes as the original FixedString32Bytes,
            so it is only valid as long as the original FixedString32Bytes is valid.
            </remarks>
            <returns>A ref to a FixedListByte32 representation of the FixedString32Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(System.String)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(System.String)">
            <summary>
            Initializes an instance of FixedString32Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, only the portion that fits is copied in and CopyError.Truncation is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes an instance of FixedString32Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(System.Byte*,System.Int32)">
            <summary>
            Initializes an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="srcBytes">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeText@)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The UnsafeText to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Equality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for equality.</param>
            <param name="b">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Inequality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for inequality.</param>
            <param name="b">A FixedString32Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Equality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for equality.</param>
            <param name="b">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Inequality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for inequality.</param>
            <param name="b">A FixedString64Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Implicit(Unity.Collections.FixedString32Bytes@)~Unity.Collections.FixedString64Bytes">
            <summary>
            Returns a new FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString32Bytes to copy.</param>
            <returns>A new FixedString64Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Equality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for equality.</param>
            <param name="b">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Inequality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for inequality.</param>
            <param name="b">A FixedString128Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Implicit(Unity.Collections.FixedString32Bytes@)~Unity.Collections.FixedString128Bytes">
            <summary>
            Returns a new FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString32Bytes to copy.</param>
            <returns>A new FixedString128Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Equality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for equality.</param>
            <param name="b">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Inequality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for inequality.</param>
            <param name="b">A FixedString512Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Implicit(Unity.Collections.FixedString32Bytes@)~Unity.Collections.FixedString512Bytes">
            <summary>
            Returns a new FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString32Bytes to copy.</param>
            <returns>A new FixedString512Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.#ctor(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Initialize(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes an instance of FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Equality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for equality.</param>
            <param name="b">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Inequality(Unity.Collections.FixedString32Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString32Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString32Bytes to compare for inequality.</param>
            <param name="b">A FixedString4096Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Implicit(Unity.Collections.FixedString32Bytes@)~Unity.Collections.FixedString4096Bytes">
            <summary>
            Returns a new FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString32Bytes to copy.</param>
            <returns>A new FixedString4096Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.op_Implicit(System.String)~Unity.Collections.FixedString32Bytes">
            <summary>
            Returns a new FixedString32Bytes that is a copy of another string.
            </summary>
            <param name="b">A string to copy.</param>
            <returns>A new FixedString32Bytes that is a copy of another string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString32Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.ToString">
            <summary>
            Returns a new managed string that is a copy of this string.
            </summary>
            <returns>A new managed string that is a copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>Only the character bytes are included in the hash: any bytes beyond <see cref="P:Unity.Collections.FixedString32Bytes.Length"/> are not part of the hash.</remarks>
            <returns>The hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString32Bytes.Equals(System.Object)">
             <summary>
             Returns true if this string and an object are equal.
             </summary>
             <remarks>
             Returns false if the object is neither a System.String or a FixedString.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="T:Unity.Collections.FixedBytes62">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.offset0000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.offset0016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.offset0032">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0048">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0049">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0050">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0051">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0052">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0053">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0054">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0055">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0056">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0057">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0058">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0059">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0060">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes62.byte0061">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.FixedString64Bytes">
             <summary>
             An unmanaged UTF-8 string whose content is stored directly in the 64-byte struct.
             </summary>
             <remarks>
             The binary layout of this string is guaranteed, for now and all time, to be a length (a little-endian two byte integer)
             followed by the bytes of the characters (with no padding). A zero byte always immediately follows the last character.
             Effectively, the number of bytes for storing characters is 3 less than 64 (two length bytes and one null byte).
            
             This layout is identical to a <see cref="T:Unity.Collections.FixedList64Bytes`1"/> of bytes, thus allowing reinterpretation between FixedString64Bytes and FixedList64Bytes.
            
             By virtue of being an unmanaged, non-allocated struct with no pointers, this string is fully compatible with jobs and Burst compilation.
             Unlike managed string types, these strings can be put in any unmanaged ECS components, FixedList, or any other unmanaged structs.
             </remarks>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.UTF8MaxLengthInBytes">
            <summary>
            Returns the maximum number of UTF-8 bytes that can be stored in this string.
            </summary>
            <returns>
            The maximum number of UTF-8 bytes that can be stored in this string.
            </returns>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.Value">
            <summary>
            For internal use only. Use <see cref="M:Unity.Collections.FixedString64Bytes.ToString"/> instead.
            </summary>
            <value>For internal use only. Use <see cref="M:Unity.Collections.FixedString64Bytes.ToString"/> instead.</value>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.GetUnsafePtr">
            <summary>
            Returns a pointer to the character bytes.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target FixedString object. It is the
            caller's responsibility to ensure that the pointer is not used after the FixedString object is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the character bytes.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.Length">
            <summary>
            The current length in bytes of this string's content.
            </summary>
            <remarks>
            The length value does not include the null-terminator byte.
            </remarks>
            <param name="value">The new length in bytes of the string's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new length is out of bounds.</exception>
            <value>
            The current length in bytes of this string's content.
            </value>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.Capacity">
             <summary>
             The number of bytes this string has for storing UTF-8 characters.
             </summary>
             <value>The number of bytes this string has for storing UTF-8 characters.</value>
             <remarks>
             Does not include the null-terminator byte.
            
             A setter is included for conformity with <see cref="T:Unity.Collections.INativeList`1"/>, but <see cref="P:Unity.Collections.FixedString64Bytes.Capacity"/> is fixed at 61.
             Setting the value to anything other than 61 throws an exception.
            
             In UTF-8 encoding, each Unicode code point (character) requires 1 to 4 bytes,
             so the number of characters that can be stored may be less than the capacity.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if attempting to set the capacity to anything other than 61.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempts to set the length in bytes. Does nothing if the new length is invalid.
            </summary>
            <param name="newLength">The desired length.</param>
            <param name="clearOptions">Whether added or removed bytes should be cleared (zeroed). (Increasing the length adds bytes; decreasing the length removes bytes.)</param>
            <returns>True if the new length is valid.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.IsEmpty">
            <summary>
            Returns true if this string is empty (has no characters).
            </summary>
            <value>True if this string is empty (has no characters).</value>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.Item(System.Int32)">
            <summary>
            Returns the byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.ElementAt(System.Int32)">
            <summary>
            Returns the reference to a byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Add(System.Byte@)">
             <summary>
             Appends a byte.
             </summary>
             <remarks>
             A zero byte will always follow the newly appended byte.
            
             No validation is performed: it is your responsibility for the bytes of the string to form valid UTF-8 when you're done appending bytes.
             </remarks>
             <param name="value">A byte to append.</param>
        </member>
        <member name="T:Unity.Collections.FixedString64Bytes.Enumerator">
            <summary>
            An enumerator over the characters (not bytes) of a FixedString64Bytes.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString64Bytes.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.FixedString64Bytes.Enumerator.MoveNext"/> call advances the enumerator's index to the first character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Enumerator.#ctor(Unity.Collections.FixedString64Bytes)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes.Enumerator.
            </summary>
            <param name="other">A FixeString64 for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next character.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedString64Bytes.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedString64Bytes.Enumerator.Current">
            <summary>
            The current character.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString64Bytes.Enumerator.Current"/> is not valid to read.
            </remarks>
            <value>The current character.</value>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of this string.
            </summary>
            <returns>An enumerator for iterating over the characters of the FixedString64Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A `System.String` to compare with.</param>
             <returns>An integer denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other string.<br/>
             +1 denotes that this string should be sorted to follow the other string.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(System.String)">
            <summary>
            Returns true if this string and another have the same length and all the same characters.
            </summary>
            <param name="other">A string to compare for equality.</param>
            <returns>True if this string and the other have the same length and all the same characters.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.AsFixedList">
            <summary>
            Returns a reference to a FixedList64Bytes&lt;byte&gt; representation of this string.
            </summary>
            <remarks>
            The referenced FixedListByte64 is the very same bytes as the original FixedString64Bytes,
            so it is only valid as long as the original FixedString64Bytes is valid.
            </remarks>
            <returns>A ref to a FixedListByte64 representation of the FixedString64Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(System.String)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(System.String)">
            <summary>
            Initializes an instance of FixedString64Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, only the portion that fits is copied in and CopyError.Truncation is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes an instance of FixedString64Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(System.Byte*,System.Int32)">
            <summary>
            Initializes an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="srcBytes">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeText@)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The UnsafeText to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Equality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for equality.</param>
            <param name="b">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Inequality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for inequality.</param>
            <param name="b">A FixedString32Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Equality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for equality.</param>
            <param name="b">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Inequality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for inequality.</param>
            <param name="b">A FixedString64Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Equality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for equality.</param>
            <param name="b">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Inequality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for inequality.</param>
            <param name="b">A FixedString128Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Implicit(Unity.Collections.FixedString64Bytes@)~Unity.Collections.FixedString128Bytes">
            <summary>
            Returns a new FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString64Bytes to copy.</param>
            <returns>A new FixedString128Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Equality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for equality.</param>
            <param name="b">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Inequality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for inequality.</param>
            <param name="b">A FixedString512Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Implicit(Unity.Collections.FixedString64Bytes@)~Unity.Collections.FixedString512Bytes">
            <summary>
            Returns a new FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString64Bytes to copy.</param>
            <returns>A new FixedString512Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.#ctor(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Initialize(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes an instance of FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Equality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for equality.</param>
            <param name="b">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Inequality(Unity.Collections.FixedString64Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString64Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString64Bytes to compare for inequality.</param>
            <param name="b">A FixedString4096Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Implicit(Unity.Collections.FixedString64Bytes@)~Unity.Collections.FixedString4096Bytes">
            <summary>
            Returns a new FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString64Bytes to copy.</param>
            <returns>A new FixedString4096Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.op_Implicit(System.String)~Unity.Collections.FixedString64Bytes">
            <summary>
            Returns a new FixedString64Bytes that is a copy of another string.
            </summary>
            <param name="b">A string to copy.</param>
            <returns>A new FixedString64Bytes that is a copy of another string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString64Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.ToString">
            <summary>
            Returns a new managed string that is a copy of this string.
            </summary>
            <returns>A new managed string that is a copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>Only the character bytes are included in the hash: any bytes beyond <see cref="P:Unity.Collections.FixedString64Bytes.Length"/> are not part of the hash.</remarks>
            <returns>The hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString64Bytes.Equals(System.Object)">
             <summary>
             Returns true if this string and an object are equal.
             </summary>
             <remarks>
             Returns false if the object is neither a System.String or a FixedString.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="T:Unity.Collections.FixedBytes126">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0032">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0048">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0064">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0080">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.offset0096">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0112">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0113">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0114">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0115">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0116">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0117">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0118">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0119">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0120">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0121">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0122">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0123">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0124">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes126.byte0125">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.FixedString128Bytes">
             <summary>
             An unmanaged UTF-8 string whose content is stored directly in the 128-byte struct.
             </summary>
             <remarks>
             The binary layout of this string is guaranteed, for now and all time, to be a length (a little-endian two byte integer)
             followed by the bytes of the characters (with no padding). A zero byte always immediately follows the last character.
             Effectively, the number of bytes for storing characters is 3 less than 128 (two length bytes and one null byte).
            
             This layout is identical to a <see cref="T:Unity.Collections.FixedList128Bytes`1"/> of bytes, thus allowing reinterpretation between FixedString128Bytes and FixedList128Bytes.
            
             By virtue of being an unmanaged, non-allocated struct with no pointers, this string is fully compatible with jobs and Burst compilation.
             Unlike managed string types, these strings can be put in any unmanaged ECS components, FixedList, or any other unmanaged structs.
             </remarks>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.UTF8MaxLengthInBytes">
            <summary>
            Returns the maximum number of UTF-8 bytes that can be stored in this string.
            </summary>
            <returns>
            The maximum number of UTF-8 bytes that can be stored in this string.
            </returns>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.Value">
            <summary>
            For internal use only. Use <see cref="M:Unity.Collections.FixedString128Bytes.ToString"/> instead.
            </summary>
            <value>For internal use only. Use <see cref="M:Unity.Collections.FixedString128Bytes.ToString"/> instead.</value>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.GetUnsafePtr">
            <summary>
            Returns a pointer to the character bytes.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target FixedString object. It is the
            caller's responsibility to ensure that the pointer is not used after the FixedString object is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the character bytes.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.Length">
            <summary>
            The current length in bytes of this string's content.
            </summary>
            <remarks>
            The length value does not include the null-terminator byte.
            </remarks>
            <param name="value">The new length in bytes of the string's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new length is out of bounds.</exception>
            <value>
            The current length in bytes of this string's content.
            </value>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.Capacity">
             <summary>
             The number of bytes this string has for storing UTF-8 characters.
             </summary>
             <value>The number of bytes this string has for storing UTF-8 characters.</value>
             <remarks>
             Does not include the null-terminator byte.
            
             A setter is included for conformity with <see cref="T:Unity.Collections.INativeList`1"/>, but <see cref="P:Unity.Collections.FixedString128Bytes.Capacity"/> is fixed at 125.
             Setting the value to anything other than 125 throws an exception.
            
             In UTF-8 encoding, each Unicode code point (character) requires 1 to 4 bytes,
             so the number of characters that can be stored may be less than the capacity.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if attempting to set the capacity to anything other than 125.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempts to set the length in bytes. Does nothing if the new length is invalid.
            </summary>
            <param name="newLength">The desired length.</param>
            <param name="clearOptions">Whether added or removed bytes should be cleared (zeroed). (Increasing the length adds bytes; decreasing the length removes bytes.)</param>
            <returns>True if the new length is valid.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.IsEmpty">
            <summary>
            Returns true if this string is empty (has no characters).
            </summary>
            <value>True if this string is empty (has no characters).</value>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.Item(System.Int32)">
            <summary>
            Returns the byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.ElementAt(System.Int32)">
            <summary>
            Returns the reference to a byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Add(System.Byte@)">
             <summary>
             Appends a byte.
             </summary>
             <remarks>
             A zero byte will always follow the newly appended byte.
            
             No validation is performed: it is your responsibility for the bytes of the string to form valid UTF-8 when you're done appending bytes.
             </remarks>
             <param name="value">A byte to append.</param>
        </member>
        <member name="T:Unity.Collections.FixedString128Bytes.Enumerator">
            <summary>
            An enumerator over the characters (not bytes) of a FixedString128Bytes.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString128Bytes.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.FixedString128Bytes.Enumerator.MoveNext"/> call advances the enumerator's index to the first character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Enumerator.#ctor(Unity.Collections.FixedString128Bytes)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes.Enumerator.
            </summary>
            <param name="other">A FixeString128 for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next character.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedString128Bytes.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedString128Bytes.Enumerator.Current">
            <summary>
            The current character.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString128Bytes.Enumerator.Current"/> is not valid to read.
            </remarks>
            <value>The current character.</value>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of this string.
            </summary>
            <returns>An enumerator for iterating over the characters of the FixedString128Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A `System.String` to compare with.</param>
             <returns>An integer denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other string.<br/>
             +1 denotes that this string should be sorted to follow the other string.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(System.String)">
            <summary>
            Returns true if this string and another have the same length and all the same characters.
            </summary>
            <param name="other">A string to compare for equality.</param>
            <returns>True if this string and the other have the same length and all the same characters.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.AsFixedList">
            <summary>
            Returns a reference to a FixedList128Bytes&lt;byte&gt; representation of this string.
            </summary>
            <remarks>
            The referenced FixedListByte128 is the very same bytes as the original FixedString128Bytes,
            so it is only valid as long as the original FixedString128Bytes is valid.
            </remarks>
            <returns>A ref to a FixedListByte128 representation of the FixedString128Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(System.String)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(System.String)">
            <summary>
            Initializes an instance of FixedString128Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, only the portion that fits is copied in and CopyError.Truncation is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes an instance of FixedString128Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(System.Byte*,System.Int32)">
            <summary>
            Initializes an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="srcBytes">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeText@)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The UnsafeText to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Equality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for equality.</param>
            <param name="b">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Inequality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for inequality.</param>
            <param name="b">A FixedString32Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Equality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for equality.</param>
            <param name="b">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Inequality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for inequality.</param>
            <param name="b">A FixedString64Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Equality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for equality.</param>
            <param name="b">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Inequality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for inequality.</param>
            <param name="b">A FixedString128Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Equality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for equality.</param>
            <param name="b">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Inequality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for inequality.</param>
            <param name="b">A FixedString512Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Implicit(Unity.Collections.FixedString128Bytes@)~Unity.Collections.FixedString512Bytes">
            <summary>
            Returns a new FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString128Bytes to copy.</param>
            <returns>A new FixedString512Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.#ctor(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Initialize(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes an instance of FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Equality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for equality.</param>
            <param name="b">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Inequality(Unity.Collections.FixedString128Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString128Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString128Bytes to compare for inequality.</param>
            <param name="b">A FixedString4096Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Implicit(Unity.Collections.FixedString128Bytes@)~Unity.Collections.FixedString4096Bytes">
            <summary>
            Returns a new FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString128Bytes to copy.</param>
            <returns>A new FixedString4096Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.op_Implicit(System.String)~Unity.Collections.FixedString128Bytes">
            <summary>
            Returns a new FixedString128Bytes that is a copy of another string.
            </summary>
            <param name="b">A string to copy.</param>
            <returns>A new FixedString128Bytes that is a copy of another string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString128Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.ToString">
            <summary>
            Returns a new managed string that is a copy of this string.
            </summary>
            <returns>A new managed string that is a copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>Only the character bytes are included in the hash: any bytes beyond <see cref="P:Unity.Collections.FixedString128Bytes.Length"/> are not part of the hash.</remarks>
            <returns>The hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString128Bytes.Equals(System.Object)">
             <summary>
             Returns true if this string and an object are equal.
             </summary>
             <remarks>
             Returns false if the object is neither a System.String or a FixedString.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="T:Unity.Collections.FixedBytes510">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0032">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0048">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0064">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0080">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0096">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0112">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0128">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0144">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0160">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0176">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0192">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0208">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0224">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0240">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0256">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0272">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0288">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0304">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0320">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0336">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0352">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0368">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0384">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0400">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0416">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0432">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0448">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0464">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.offset0480">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0496">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0497">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0498">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0499">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0500">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0501">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0502">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0503">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0504">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0505">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0506">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0507">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0508">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes510.byte0509">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.FixedString512Bytes">
             <summary>
             An unmanaged UTF-8 string whose content is stored directly in the 512-byte struct.
             </summary>
             <remarks>
             The binary layout of this string is guaranteed, for now and all time, to be a length (a little-endian two byte integer)
             followed by the bytes of the characters (with no padding). A zero byte always immediately follows the last character.
             Effectively, the number of bytes for storing characters is 3 less than 512 (two length bytes and one null byte).
            
             This layout is identical to a <see cref="T:Unity.Collections.FixedList512Bytes`1"/> of bytes, thus allowing reinterpretation between FixedString512Bytes and FixedList512Bytes.
            
             By virtue of being an unmanaged, non-allocated struct with no pointers, this string is fully compatible with jobs and Burst compilation.
             Unlike managed string types, these strings can be put in any unmanaged ECS components, FixedList, or any other unmanaged structs.
             </remarks>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.UTF8MaxLengthInBytes">
            <summary>
            Returns the maximum number of UTF-8 bytes that can be stored in this string.
            </summary>
            <returns>
            The maximum number of UTF-8 bytes that can be stored in this string.
            </returns>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.Value">
            <summary>
            For internal use only. Use <see cref="M:Unity.Collections.FixedString512Bytes.ToString"/> instead.
            </summary>
            <value>For internal use only. Use <see cref="M:Unity.Collections.FixedString512Bytes.ToString"/> instead.</value>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.GetUnsafePtr">
            <summary>
            Returns a pointer to the character bytes.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target FixedString object. It is the
            caller's responsibility to ensure that the pointer is not used after the FixedString object is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the character bytes.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.Length">
            <summary>
            The current length in bytes of this string's content.
            </summary>
            <remarks>
            The length value does not include the null-terminator byte.
            </remarks>
            <param name="value">The new length in bytes of the string's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new length is out of bounds.</exception>
            <value>
            The current length in bytes of this string's content.
            </value>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.Capacity">
             <summary>
             The number of bytes this string has for storing UTF-8 characters.
             </summary>
             <value>The number of bytes this string has for storing UTF-8 characters.</value>
             <remarks>
             Does not include the null-terminator byte.
            
             A setter is included for conformity with <see cref="T:Unity.Collections.INativeList`1"/>, but <see cref="P:Unity.Collections.FixedString512Bytes.Capacity"/> is fixed at 509.
             Setting the value to anything other than 509 throws an exception.
            
             In UTF-8 encoding, each Unicode code point (character) requires 1 to 4 bytes,
             so the number of characters that can be stored may be less than the capacity.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if attempting to set the capacity to anything other than 509.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempts to set the length in bytes. Does nothing if the new length is invalid.
            </summary>
            <param name="newLength">The desired length.</param>
            <param name="clearOptions">Whether added or removed bytes should be cleared (zeroed). (Increasing the length adds bytes; decreasing the length removes bytes.)</param>
            <returns>True if the new length is valid.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.IsEmpty">
            <summary>
            Returns true if this string is empty (has no characters).
            </summary>
            <value>True if this string is empty (has no characters).</value>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.Item(System.Int32)">
            <summary>
            Returns the byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.ElementAt(System.Int32)">
            <summary>
            Returns the reference to a byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Add(System.Byte@)">
             <summary>
             Appends a byte.
             </summary>
             <remarks>
             A zero byte will always follow the newly appended byte.
            
             No validation is performed: it is your responsibility for the bytes of the string to form valid UTF-8 when you're done appending bytes.
             </remarks>
             <param name="value">A byte to append.</param>
        </member>
        <member name="T:Unity.Collections.FixedString512Bytes.Enumerator">
            <summary>
            An enumerator over the characters (not bytes) of a FixedString512Bytes.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString512Bytes.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.FixedString512Bytes.Enumerator.MoveNext"/> call advances the enumerator's index to the first character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Enumerator.#ctor(Unity.Collections.FixedString512Bytes)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes.Enumerator.
            </summary>
            <param name="other">A FixeString512 for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next character.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedString512Bytes.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedString512Bytes.Enumerator.Current">
            <summary>
            The current character.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString512Bytes.Enumerator.Current"/> is not valid to read.
            </remarks>
            <value>The current character.</value>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of this string.
            </summary>
            <returns>An enumerator for iterating over the characters of the FixedString512Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A `System.String` to compare with.</param>
             <returns>An integer denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other string.<br/>
             +1 denotes that this string should be sorted to follow the other string.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(System.String)">
            <summary>
            Returns true if this string and another have the same length and all the same characters.
            </summary>
            <param name="other">A string to compare for equality.</param>
            <returns>True if this string and the other have the same length and all the same characters.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.AsFixedList">
            <summary>
            Returns a reference to a FixedList512Bytes&lt;byte&gt; representation of this string.
            </summary>
            <remarks>
            The referenced FixedListByte512 is the very same bytes as the original FixedString512Bytes,
            so it is only valid as long as the original FixedString512Bytes is valid.
            </remarks>
            <returns>A ref to a FixedListByte512 representation of the FixedString512Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(System.String)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(System.String)">
            <summary>
            Initializes an instance of FixedString512Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, only the portion that fits is copied in and CopyError.Truncation is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes an instance of FixedString512Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(System.Byte*,System.Int32)">
            <summary>
            Initializes an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="srcBytes">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeText@)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The UnsafeText to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Equality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for equality.</param>
            <param name="b">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Inequality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for inequality.</param>
            <param name="b">A FixedString32Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Equality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for equality.</param>
            <param name="b">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Inequality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for inequality.</param>
            <param name="b">A FixedString64Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Equality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for equality.</param>
            <param name="b">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Inequality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for inequality.</param>
            <param name="b">A FixedString128Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Equality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for equality.</param>
            <param name="b">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Inequality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for inequality.</param>
            <param name="b">A FixedString512Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.#ctor(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Initialize(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes an instance of FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Equality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for equality.</param>
            <param name="b">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Inequality(Unity.Collections.FixedString512Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString512Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString512Bytes to compare for inequality.</param>
            <param name="b">A FixedString4096Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Implicit(Unity.Collections.FixedString512Bytes@)~Unity.Collections.FixedString4096Bytes">
            <summary>
            Returns a new FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="fs">A FixedString512Bytes to copy.</param>
            <returns>A new FixedString4096Bytes that is a copy of the other string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.op_Implicit(System.String)~Unity.Collections.FixedString512Bytes">
            <summary>
            Returns a new FixedString512Bytes that is a copy of another string.
            </summary>
            <param name="b">A string to copy.</param>
            <returns>A new FixedString512Bytes that is a copy of another string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString512Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.ToString">
            <summary>
            Returns a new managed string that is a copy of this string.
            </summary>
            <returns>A new managed string that is a copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>Only the character bytes are included in the hash: any bytes beyond <see cref="P:Unity.Collections.FixedString512Bytes.Length"/> are not part of the hash.</remarks>
            <returns>The hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString512Bytes.Equals(System.Object)">
             <summary>
             Returns true if this string and an object are equal.
             </summary>
             <remarks>
             Returns false if the object is neither a System.String or a FixedString.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="T:Unity.Collections.FixedBytes4094">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0032">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0048">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0064">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0080">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0096">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0112">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0128">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0144">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0160">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0176">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0192">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0208">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0224">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0240">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0256">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0272">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0288">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0304">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0320">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0336">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0352">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0368">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0384">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0400">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0416">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0432">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0448">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0464">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0480">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0496">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0512">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0528">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0544">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0560">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0576">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0592">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0608">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0624">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0640">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0656">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0672">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0688">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0704">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0720">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0736">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0752">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0768">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0784">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0800">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0816">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0832">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0848">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0864">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0880">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0896">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0912">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0928">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0944">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0960">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0976">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset0992">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1008">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1024">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1040">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1056">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1072">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1088">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1104">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1120">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1136">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1152">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1168">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1184">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1200">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1216">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1232">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1248">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1264">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1280">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1296">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1312">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1328">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1344">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1360">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1376">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1392">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1408">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1424">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1440">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1456">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1472">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1488">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1504">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1520">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1536">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1552">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1568">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1584">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1600">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1616">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1632">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1648">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1664">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1680">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1696">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1712">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1728">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1744">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1760">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1776">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1792">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1808">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1824">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1840">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1856">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1872">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1888">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1904">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1920">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1936">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1952">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1968">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset1984">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2032">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2048">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2064">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2080">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2096">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2112">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2128">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2144">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2160">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2176">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2192">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2208">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2224">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2240">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2256">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2272">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2288">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2304">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2320">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2336">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2352">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2368">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2384">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2400">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2416">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2432">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2448">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2464">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2480">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2496">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2512">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2528">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2544">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2560">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2576">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2592">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2608">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2624">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2640">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2656">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2672">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2688">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2704">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2720">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2736">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2752">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2768">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2784">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2800">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2816">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2832">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2848">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2864">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2880">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2896">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2912">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2928">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2944">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2960">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2976">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset2992">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3008">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3024">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3040">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3056">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3072">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3088">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3104">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3120">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3136">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3152">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3168">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3184">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3200">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3216">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3232">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3248">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3264">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3280">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3296">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3312">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3328">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3344">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3360">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3376">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3392">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3408">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3424">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3440">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3456">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3472">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3488">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3504">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3520">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3536">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3552">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3568">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3584">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3600">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3616">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3632">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3648">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3664">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3680">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3696">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3712">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3728">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3744">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3760">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3776">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3792">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3808">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3824">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3840">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3856">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3872">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3888">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3904">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3920">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3936">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3952">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3968">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset3984">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset4000">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset4016">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset4032">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset4048">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.offset4064">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4080">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4081">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4082">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4083">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4084">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4085">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4086">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4087">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4088">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4089">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4090">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4091">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4092">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.FixedBytes4094.byte4093">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Unity.Collections.FixedString4096Bytes">
             <summary>
             An unmanaged UTF-8 string whose content is stored directly in the 4096-byte struct.
             </summary>
             <remarks>
             The binary layout of this string is guaranteed, for now and all time, to be a length (a little-endian two byte integer)
             followed by the bytes of the characters (with no padding). A zero byte always immediately follows the last character.
             Effectively, the number of bytes for storing characters is 3 less than 4096 (two length bytes and one null byte).
            
             This layout is identical to a <see cref="T:Unity.Collections.FixedList4096Bytes`1"/> of bytes, thus allowing reinterpretation between FixedString4096Bytes and FixedList4096Bytes.
            
             By virtue of being an unmanaged, non-allocated struct with no pointers, this string is fully compatible with jobs and Burst compilation.
             Unlike managed string types, these strings can be put in any unmanaged ECS components, FixedList, or any other unmanaged structs.
             </remarks>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.UTF8MaxLengthInBytes">
            <summary>
            Returns the maximum number of UTF-8 bytes that can be stored in this string.
            </summary>
            <returns>
            The maximum number of UTF-8 bytes that can be stored in this string.
            </returns>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.Value">
            <summary>
            For internal use only. Use <see cref="M:Unity.Collections.FixedString4096Bytes.ToString"/> instead.
            </summary>
            <value>For internal use only. Use <see cref="M:Unity.Collections.FixedString4096Bytes.ToString"/> instead.</value>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.GetUnsafePtr">
            <summary>
            Returns a pointer to the character bytes.
            </summary>
            <remarks>
            The pointer returned by this method points into the internals of the target FixedString object. It is the
            caller's responsibility to ensure that the pointer is not used after the FixedString object is destroyed or goes
            out of scope.
            </remarks>
            <returns>A pointer to the character bytes.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.Length">
            <summary>
            The current length in bytes of this string's content.
            </summary>
            <remarks>
            The length value does not include the null-terminator byte.
            </remarks>
            <param name="value">The new length in bytes of the string's content.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the new length is out of bounds.</exception>
            <value>
            The current length in bytes of this string's content.
            </value>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.Capacity">
             <summary>
             The number of bytes this string has for storing UTF-8 characters.
             </summary>
             <value>The number of bytes this string has for storing UTF-8 characters.</value>
             <remarks>
             Does not include the null-terminator byte.
            
             A setter is included for conformity with <see cref="T:Unity.Collections.INativeList`1"/>, but <see cref="P:Unity.Collections.FixedString4096Bytes.Capacity"/> is fixed at 4093.
             Setting the value to anything other than 4093 throws an exception.
            
             In UTF-8 encoding, each Unicode code point (character) requires 1 to 4 bytes,
             so the number of characters that can be stored may be less than the capacity.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if attempting to set the capacity to anything other than 4093.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.TryResize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Attempts to set the length in bytes. Does nothing if the new length is invalid.
            </summary>
            <param name="newLength">The desired length.</param>
            <param name="clearOptions">Whether added or removed bytes should be cleared (zeroed). (Increasing the length adds bytes; decreasing the length removes bytes.)</param>
            <returns>True if the new length is valid.</returns>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.IsEmpty">
            <summary>
            Returns true if this string is empty (has no characters).
            </summary>
            <value>True if this string is empty (has no characters).</value>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.Item(System.Int32)">
            <summary>
            Returns the byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <value>The byte at the index.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.ElementAt(System.Int32)">
            <summary>
            Returns the reference to a byte (not character) at an index.
            </summary>
            <param name="index">A byte index.</param>
            <returns>A reference to the byte at the index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Clear">
            <summary>
            Sets the length to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Add(System.Byte@)">
             <summary>
             Appends a byte.
             </summary>
             <remarks>
             A zero byte will always follow the newly appended byte.
            
             No validation is performed: it is your responsibility for the bytes of the string to form valid UTF-8 when you're done appending bytes.
             </remarks>
             <param name="value">A byte to append.</param>
        </member>
        <member name="T:Unity.Collections.FixedString4096Bytes.Enumerator">
            <summary>
            An enumerator over the characters (not bytes) of a FixedString4096Bytes.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString4096Bytes.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.FixedString4096Bytes.Enumerator.MoveNext"/> call advances the enumerator's index to the first character.
            </remarks>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Enumerator.#ctor(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes.Enumerator.
            </summary>
            <param name="other">A FixeString4096 for which to create an enumerator.</param>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next character.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.FixedString4096Bytes.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.FixedString4096Bytes.Enumerator.Current">
            <summary>
            The current character.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.FixedString4096Bytes.Enumerator.Current"/> is not valid to read.
            </remarks>
            <value>The current character.</value>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the characters of this string.
            </summary>
            <returns>An enumerator for iterating over the characters of the FixedString4096Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.CompareTo(System.String)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A `System.String` to compare with.</param>
             <returns>An integer denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other string.<br/>
             +1 denotes that this string should be sorted to follow the other string.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(System.String)">
            <summary>
            Returns true if this string and another have the same length and all the same characters.
            </summary>
            <param name="other">A string to compare for equality.</param>
            <returns>True if this string and the other have the same length and all the same characters.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.AsFixedList">
            <summary>
            Returns a reference to a FixedList4096Bytes&lt;byte&gt; representation of this string.
            </summary>
            <remarks>
            The referenced FixedListByte4096 is the very same bytes as the original FixedString4096Bytes,
            so it is only valid as long as the original FixedString4096Bytes is valid.
            </remarks>
            <returns>A ref to a FixedListByte4096 representation of the FixedString4096Bytes.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(System.String)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(System.String)">
            <summary>
            Initializes an instance of FixedString4096Bytes with the characters copied from a string.
            </summary>
            <param name="source">The source string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, only the portion that fits is copied in and CopyError.Truncation is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(Unity.Collections.Unicode.Rune,System.Int32)">
            <summary>
            Initializes an instance of FixedString4096Bytes with a single character repeatedly appended some number of times.
            </summary>
            <param name="rune">The Unicode.Rune to repeat.</param>
            <param name="count">The number of times to repeat the character. Default is 1.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(System.Byte*,System.Int32)">
            <summary>
            Initializes an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="srcBytes">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.NativeText.ReadOnly)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.LowLevel.Unsafe.UnsafeText@)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The UnsafeText to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.CompareTo(Unity.Collections.FixedString32Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(Unity.Collections.FixedString32Bytes@)">
            <summary>
            Initializes an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Equality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for equality.</param>
            <param name="b">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Inequality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString32Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for inequality.</param>
            <param name="b">A FixedString32Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(Unity.Collections.FixedString32Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString32Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.CompareTo(Unity.Collections.FixedString64Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(Unity.Collections.FixedString64Bytes@)">
            <summary>
            Initializes an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Equality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for equality.</param>
            <param name="b">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Inequality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString64Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for inequality.</param>
            <param name="b">A FixedString64Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(Unity.Collections.FixedString64Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString64Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.CompareTo(Unity.Collections.FixedString128Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(Unity.Collections.FixedString128Bytes@)">
            <summary>
            Initializes an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Equality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for equality.</param>
            <param name="b">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Inequality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString128Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for inequality.</param>
            <param name="b">A FixedString128Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(Unity.Collections.FixedString128Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString128Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.CompareTo(Unity.Collections.FixedString512Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(Unity.Collections.FixedString512Bytes@)">
            <summary>
            Initializes an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Equality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for equality.</param>
            <param name="b">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Inequality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString512Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for inequality.</param>
            <param name="b">A FixedString512Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(Unity.Collections.FixedString512Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString512Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.CompareTo(Unity.Collections.FixedString4096Bytes)">
             <summary>
             Returns the lexicographical sort order of this string relative to another.
             </summary>
             <param name="other">A string to compare with.</param>
             <returns>A number denoting the lexicographical sort order of this string relative to the other:
            
             0 denotes that both strings have the same sort position.<br/>
             -1 denotes that this string should be sorted to precede the other.<br/>
             +1 denotes that this string should be sorted to follow the other.<br/>
             </returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.#ctor(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes and returns an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Initialize(Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Initializes an instance of FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="other">The string to copy.</param>
            <returns>If the length of the source string exceeds this fixed string's UTF8 capacity, the entire write operation will fail, and FormatError.Overflow is returned.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Equality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for equality.</param>
            <param name="b">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Inequality(Unity.Collections.FixedString4096Bytes@,Unity.Collections.FixedString4096Bytes@)">
            <summary>
            Returns true if a FixedString4096Bytes and another string are unequal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="a">A FixedString4096Bytes to compare for inequality.</param>
            <param name="b">A FixedString4096Bytes to compare for inequality.</param>
            <returns>True if the two strings are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Returns true if this string and another string are equal.
            </summary>
            <remarks>Two strings are equal if they have equal length and all their characters match.</remarks>
            <param name="other">A FixedString4096Bytes to compare for equality.</param>
            <returns>True if the two strings are equal.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.op_Implicit(System.String)~Unity.Collections.FixedString4096Bytes">
            <summary>
            Returns a new FixedString4096Bytes that is a copy of another string.
            </summary>
            <param name="b">A string to copy.</param>
            <returns>A new FixedString4096Bytes that is a copy of another string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the string to copy's length exceeds the capacity of FixedString4096Bytes.</exception>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.ToString">
            <summary>
            Returns a new managed string that is a copy of this string.
            </summary>
            <returns>A new managed string that is a copy of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.GetHashCode">
            <summary>
            Returns a hash code of this string.
            </summary>
            <remarks>Only the character bytes are included in the hash: any bytes beyond <see cref="P:Unity.Collections.FixedString4096Bytes.Length"/> are not part of the hash.</remarks>
            <returns>The hash code of this string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString4096Bytes.Equals(System.Object)">
             <summary>
             Returns true if this string and an object are equal.
             </summary>
             <remarks>
             Returns false if the object is neither a System.String or a FixedString.
            
             Two strings are equal if they have equal length and all their characters match.</remarks>
             <param name="obj">An object to compare for equality.</param>
             <returns>True if this string and the object are equal.</returns>
        </member>
        <member name="T:Unity.Collections.NativeHashSet`1">
            <summary>
            An unordered, expandable set of unique values.
            </summary>
            <remarks>
            Not suitable for parallel write access. Use <see cref="T:Unity.Collections.NativeParallelHashSet`1"/> instead.
            </remarks>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeParallelHashSet.
            </summary>
            <param name="initialCapacity">The number of values that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.IsEmpty">
            <summary>
            Whether this set is empty.
            </summary>
            <value>True if this set is empty or if the set has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.Count">
            <summary>
            Returns the current number of values in this set.
            </summary>
            <returns>The current number of values in this set.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.Capacity">
            <summary>
            The number of values that fit in the current allocation.
            </summary>
            <value>The number of values that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.IsCreated">
            <summary>
            Whether this set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this set.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this set.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Clear">
            <summary>
            Removes all values.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Add(`0)">
            <summary>
            Adds a new value (unless it is already present).
            </summary>
            <param name="item">The value to add.</param>
            <returns>True if the value was not already present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Remove(`0)">
            <summary>
            Removes a particular value.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Contains(`0)">
            <summary>
            Returns true if a particular value is present.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.TrimExcess">
            <summary>
            Sets the capacity to match what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of this set's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of the set's values.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator over the values of this set.
            </summary>
            <returns>An enumerator over the values of this set.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeHashSet`1.Enumerator">
            <summary>
            An enumerator over the values of a set.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.NativeHashSet`1.Enumerator.Current"/> is invalid.
            The first <see cref="M:Unity.Collections.NativeHashSet`1.Enumerator.MoveNext"/> call advances the enumerator to the first value.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next value.
            </summary>
            <returns>True if `Current` is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.Enumerator.Current">
            <summary>
            The current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator in the container.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.AsReadOnly">
            <summary>
            Returns a readonly version of this NativeHashSet instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the NativeHashSet it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.NativeHashSet`1.ReadOnly">
            <summary>
            A read-only alias for the value of a NativeHashSet. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.ReadOnly.IsEmpty">
            <summary>
            Whether this hash set is empty.
            </summary>
            <value>True if this hash set is empty or if the map has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.ReadOnly.Count">
            <summary>
            The current number of items in this hash set.
            </summary>
            <returns>The current number of items in this hash set.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.ReadOnly.Capacity">
            <summary>
            The number of items that fit in the current allocation.
            </summary>
            <value>The number of items that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.ReadOnly.Contains(`0)">
            <summary>
            Returns true if a given item is present in this hash set.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>True if the item was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.ReadOnly.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash set's items (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash set's items (in no particular order).</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashSet`1.ReadOnly.IsCreated">
            <summary>
            Whether this hash set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the items of this hash set.
            </summary>
            <returns>An enumerator over the items of this hash set.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.ReadOnly.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashSet`1.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeSortExtension">
            <summary>
            Extension methods for sorting collections.
            </summary>
        </member>
        <member name="T:Unity.Collections.NativeSortExtension.DefaultComparer`1">
            <summary>
            A comparer that uses IComparable.CompareTo(). For primitive types, this is an ascending sort.
            </summary>
            <typeparam name="T">Source type of elements</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.DefaultComparer`1.Compare(`0,`0)">
            <summary>
            Compares two values.
            </summary>
            <param name="x">First value to compare.</param>
            <param name="y">Second value to compare.</param>
            <returns>A signed integer that denotes the relative values of `x` and `y`:
            0 if they're equal, negative if `x &lt; y`, and positive if `x &gt; y`.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``1(``0*,System.Int32)">
            <summary>
            Sorts an array in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="length">The number of elements to sort in the array.
            Indexes greater than or equal to `length` won't be included in the sort.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``2(``0*,System.Int32,``1)">
            <summary>
            Sorts an array using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="length">The number of elements to sort in the array.
            Indexes greater than or equal to `length` won't be included in the sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``1(``0*,System.Int32)">
            <summary>
            Returns a job which will sort an array in ascending order.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="length">The number of elements to sort in the array.
            Indexes greater than or equal to `length` won't be included in the sort.</param>
            <returns>A job for sorting the array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``2(``0*,System.Int32,``1)">
            <summary>
            Returns a job which will sort an array using a custom comparison.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="length">The number of elements to sort in the array.
            Indexes greater than or equal to `length` won't be included in the sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>A job for sorting the array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``1(``0*,System.Int32,``0)">
            <summary>
            Finds a value in a sorted array by binary search.
            </summary>
            <remarks>If the array is not sorted, the value might not be found, even if it's present in the array.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="ptr">The array to search.</param>
            <param name="value">The value to locate.</param>
            <param name="length">The number of elements to search. Indexes greater than or equal to `length` won't be searched.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``2(``0*,System.Int32,``0,``1)">
            <summary>
            Finds a value in a sorted array by binary search using a custom comparison.
            </summary>
            <remarks>If the array is not sorted, the value might not be found, even if it's present in the array.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="ptr">The array to search.</param>
            <param name="value">The value to locate.</param>
            <param name="length">The number of elements to search. Indexes greater than or equal to `length` won't be searched.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``1(Unity.Collections.NativeArray{``0})">
            <summary>
            Sorts this array in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array to sort.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``2(Unity.Collections.NativeArray{``0},``1)">
            <summary>
            Sorts this array using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``1(Unity.Collections.NativeArray{``0})">
            <summary>
            Returns a job which will sort this array in ascending order.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array to sort.</param>
            <returns>A job for sorting this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``2(Unity.Collections.NativeArray{``0},``1)">
            <summary>
            Returns a job which will sort this array using a custom comparison.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>A job for sorting the array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``1(Unity.Collections.NativeArray{``0},``0)">
            <summary>
            Finds a value in this sorted array by binary search.
            </summary>
            <remarks>If the array is not sorted, the value might not be found, even if it's present in this array.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``2(Unity.Collections.NativeArray{``0},``0,``1)">
            <summary>
            Finds a value in this sorted array by binary search using a custom comparison.
            </summary>
            <remarks>If the array is not sorted, the value might not be found, even if it's present in this array.
            </remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The comparer type.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``1(Unity.Collections.NativeArray{``0}.ReadOnly,``0)">
            <summary>
            Finds a value in this sorted array by binary search.
            </summary>
            <remarks>If the array is not sorted, the value might not be found, even if it's present in this array.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``2(Unity.Collections.NativeArray{``0}.ReadOnly,``0,``1)">
            <summary>
            Finds a value in this sorted array by binary search using a custom comparison.
            </summary>
            <remarks>If the array is not sorted, the value might not be found, even if it's present in this array.
            </remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The comparer type.</typeparam>
            <param name="array">The array to search.</param>
            <param name="value">The value to locate.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``1(Unity.Collections.NativeList{``0})">
            <summary>
            Sorts this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``2(Unity.Collections.NativeList{``0},``1)">
            <summary>
            Sorts this list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``1(Unity.Collections.NativeList{``0})">
            <summary>
            Returns a job which will sort this list in ascending order.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
            <returns>A job for sorting this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``2(Unity.Collections.NativeList{``0},``1)">
            <summary>
            Returns a job which will sort this list using a custom comparison.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>A job for sorting this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``1(Unity.Collections.NativeList{``0},``0)">
            <summary>
            Finds a value in this sorted list by binary search.
            </summary>
            <remarks>If this list is not sorted, the value might not be found, even if it's present in this list.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``2(Unity.Collections.NativeList{``0},``0,``1)">
            <summary>
            Finds a value in this sorted list by binary search using a custom comparison.
            </summary>
            <remarks>If this list is not sorted, the value may not be found, even if it's present in this list.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``1(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Sorts this list in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},``1)">
            <summary>
            Sorts the list using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``1(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0})">
            <summary>
            Returns a job which will sort this list in ascending order.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to sort.</param>
            <returns>A job for sorting this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},``1)">
            <summary>
            Returns a job which will sort this list using a custom comparison.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>A job for sorting this list.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``1(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},``0)">
            <summary>
            Finds a value in this sorted list by binary search.
            </summary>
            <remarks>If this list is not sorted, the value might not be found, even if it's present in this list.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``2(Unity.Collections.LowLevel.Unsafe.UnsafeList{``0},``0,``1)">
            <summary>
            Finds a value in this sorted list by binary search using a custom comparison.
            </summary>
            <remarks>If this list is not sorted, the value might not be found, even if it's present in this list.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to locate.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``1(Unity.Collections.NativeSlice{``0})">
            <summary>
            Sorts this slice in ascending order.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="slice">The slice to sort.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.Sort``2(Unity.Collections.NativeSlice{``0},``1)">
            <summary>
            Sorts this slice using a custom comparison.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="slice">The slice to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``1(Unity.Collections.NativeSlice{``0})">
            <summary>
            Returns a job which will sort this slice in ascending order.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="slice">The slice to sort.</param>
            <returns>A job for sorting this slice.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.SortJob``2(Unity.Collections.NativeSlice{``0},``1)">
            <summary>
            Returns a job which will sort this slice using a custom comparison.
            </summary>
            <remarks>This method does not schedule the job. Scheduling the job is left to you.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="slice">The slice to sort.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>A job for sorting this slice.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``1(Unity.Collections.NativeSlice{``0},``0)">
            <summary>
            Finds a value in this sorted slice by binary search.
            </summary>
            <remarks>If this slice is not sorted, the value might not be found, even if it's present in this slice.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="slice">The slice to search.</param>
            <param name="value">The value to locate.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.BinarySearch``2(Unity.Collections.NativeSlice{``0},``0,``1)">
            <summary>
            Finds a value in this sorted slice by binary search using a custom comparison.
            </summary>
            <remarks>If this slice is not sorted, the value might not be found, even if it's present in this slice.</remarks>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
            <param name="slice">The slice to search.</param>
            <param name="value">The value to locate.</param>
            <param name="comp">The comparison function used to determine the relative order of the elements.</param>
            <returns>If found, the index of the located value. If not found, the return value is negative.</returns>
        </member>
        <member name="M:Unity.Collections.NativeSortExtension.IntroSort``2(System.Void*,System.Int32,``1)">
            -- Internals
        </member>
        <member name="T:Unity.Collections.SortJob`2">
            <summary>
            Returned by the `SortJob` methods of <see cref="T:Unity.Collections.NativeSortExtension"/>. Call `Schedule` to schedule the sorting.
            </summary>
            <typeparam name="T">The type of the elements to sort.</typeparam>
            <typeparam name="U">The type of the comparer.</typeparam>
        </member>
        <member name="F:Unity.Collections.SortJob`2.Data">
            <summary>
            The data to sort.
            </summary>
        </member>
        <member name="F:Unity.Collections.SortJob`2.Comp">
            <summary>
            Comparison function.
            </summary>
        </member>
        <member name="F:Unity.Collections.SortJob`2.Length">
            <summary>
            The length to sort.
            </summary>
        </member>
        <member name="M:Unity.Collections.SortJob`2.Schedule(Unity.Jobs.JobHandle)">
            <summary>
            Schedules this job.
            </summary>
            <param name="inputDeps">Handle of a job to depend upon.</param>
            <returns>The handle of this newly scheduled job.</returns>
        </member>
        <member name="T:Unity.Collections.NativeQueue`1">
            <summary>
            An unmanaged queue.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeQueue.
            </summary>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.IsEmpty">
            <summary>
            Returns true if this queue is empty.
            </summary>
            <returns>True if this queue has no items or if the queue has not been constructed.</returns>
        </member>
        <member name="P:Unity.Collections.NativeQueue`1.Count">
            <summary>
            Returns the current number of elements in this queue.
            </summary>
            <remarks>Note that getting the count requires traversing the queue's internal linked list of blocks.
            Where possible, cache this value instead of reading the property repeatedly.</remarks>
            <returns>The current number of elements in this queue.</returns>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.Peek">
            <summary>
            Returns the element at the end of this queue without removing it.
            </summary>
            <returns>The element at the end of this queue.</returns>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.Enqueue(`0)">
            <summary>
            Adds an element at the front of this queue.
            </summary>
            <param name="value">The value to be enqueued.</param>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.Dequeue">
            <summary>
            Removes and returns the element at the end of this queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this queue is empty.</exception>
            <returns>The element at the end of this queue.</returns>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.TryDequeue(`0@)">
            <summary>
            Removes and outputs the element at the end of this queue.
            </summary>
            <param name="item">Outputs the removed element.</param>
            <returns>True if this queue was not empty.</returns>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.ToArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array containing a copy of this queue's content.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array containing a copy of this queue's content. The elements are ordered in the same order they were
            enqueued, *e.g.* the earliest enqueued element is copied to index 0 of the array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.Clear">
            <summary>
            Removes all elements of this queue.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="P:Unity.Collections.NativeQueue`1.IsCreated">
            <summary>
            Whether this queue has been allocated (and not yet deallocated).
            </summary>
            <value>True if this queue has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that releases all resources (memory and safety handles) of this queue.
            </summary>
            <param name="inputDeps">The dependency for the new job.</param>
            <returns>The handle of the new job. The job depends upon `inputDeps` and releases all resources (memory and safety handles) of this queue.</returns>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.AsParallelWriter">
            <summary>
            Returns a parallel writer for this queue.
            </summary>
            <returns>A parallel writer for this queue.</returns>
        </member>
        <member name="T:Unity.Collections.NativeQueue`1.ParallelWriter">
            <summary>
            A parallel writer for a NativeQueue.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.NativeQueue`1.AsParallelWriter"/> to create a parallel writer for a NativeQueue.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeQueue`1.ParallelWriter.Enqueue(`0)">
            <summary>
            Adds an element at the front of the queue.
            </summary>
            <param name="value">The value to be enqueued.</param>
        </member>
        <member name="T:Unity.Collections.DataStreamWriter">
             <summary>
             Data streams can be used to serialize data (e.g. over the network). The
             <c>DataStreamWriter</c> and <c>DataStreamReader</c> classes work together
             to serialize data for sending and then to deserialize when receiving.
             </summary>
             <remarks>
             DataStreamWriter writes this data in the endian format native to the current machine architecture. <see cref="P:Unity.Collections.DataStreamWriter.IsLittleEndian"/>
             For network byte order use the so named methods.
             <br/>
             The reader can be used to deserialize the data from a NativeArray&lt;byte&gt;, writing data
             to a NativeArray&lt;byte&gt; and reading it back can be done like this:
             <code>
             using (var data = new NativeArray&lt;byte&gt;(16, Allocator.Persistent))
             {
                 var dataWriter = new DataStreamWriter(data);
                 dataWriter.WriteInt(42);
                 dataWriter.WriteInt(1234);
                 // Length is the actual amount of data inside the writer,
                 // Capacity is the total amount.
                 var dataReader = new DataStreamReader(nativeArrayOfBytes.GetSubArray(0, dataWriter.Length));
                 var myFirstInt = dataReader.ReadInt();
                 var mySecondInt = dataReader.ReadInt();
             }
             </code>
            
             There are a number of functions for various data types. If a copy of the writer
             is stored it can be used to overwrite the data later on. This is particularly useful when
             the size of the data is written at the start and you want to write it at
             the end when you know the value.
            
             <code>
             using (var data = new NativeArray&lt;byte&gt;(16, Allocator.Persistent))
             {
                 var dataWriter = new DataStreamWriter(data);
                 // My header data
                 var headerSizeMark = dataWriter;
                 dataWriter.WriteUShort((ushort)0);
                 var payloadSizeMark = dataWriter;
                 dataWriter.WriteUShort((ushort)0);
                 dataWriter.WriteInt(42);
                 dataWriter.WriteInt(1234);
                 var headerSize = data.Length;
                 // Update header size to correct value
                 headerSizeMark.WriteUShort((ushort)headerSize);
                 // My payload data
                 byte[] someBytes = Encoding.ASCII.GetBytes("some string");
                 dataWriter.Write(someBytes, someBytes.Length);
                 // Update payload size to correct value
                 payloadSizeMark.WriteUShort((ushort)(dataWriter.Length - headerSize));
             }
             </code>
             </remarks>
        </member>
        <member name="P:Unity.Collections.DataStreamWriter.IsLittleEndian">
            <summary>
            Show the byte order in which the current computer architecture stores data.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders.
            <list type="bullet">
            <item>Big-endian: the most significant byte is at the left end of a word.</item>
            <item>Little-endian: means the most significant byte is at the right end of a word.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Unity.Collections.DataStreamWriter.m_SendHandleData">
            <summary>
            Used for sending data asynchronously.
            </summary>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.#ctor(System.Int32,Unity.Collections.Allocator)">
            <summary>
            Initializes a new instance of the DataStreamWriter struct.
            </summary>
            <param name="length">The number of bytes available in the buffer.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator"/> used to allocate the memory.</param>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.#ctor(Unity.Collections.NativeArray{System.Byte})">
            <summary>
            Initializes a new instance of the DataStreamWriter struct with a NativeArray&lt;byte&gt;
            </summary>
            <param name="data">The buffer to attach to the DataStreamWriter.</param>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.#ctor(System.Byte*,System.Int32)">
            <summary>
            Initializes a new instance of the DataStreamWriter struct with a memory we don't own
            </summary>
            <param name="data">Pointer to the data</param>
            <param name="length">Length of the data</param>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.AsNativeArray">
            <summary>
            Convert internal data buffer to NativeArray for use in entities APIs.
            </summary>
            <returns>NativeArray representation of internal buffer.</returns>
        </member>
        <member name="P:Unity.Collections.DataStreamWriter.IsCreated">
            <summary>
            True if there is a valid data buffer present. This would be false
            if the writer was created with no arguments.
            </summary>
        </member>
        <member name="P:Unity.Collections.DataStreamWriter.HasFailedWrites">
            <summary>
            If there is a write failure this returns true.
            A failure might happen if an attempt is made to write more than there is capacity for.
            </summary>
        </member>
        <member name="P:Unity.Collections.DataStreamWriter.Capacity">
            <summary>
            The total size of the data buffer, see <see cref="P:Unity.Collections.DataStreamWriter.Length"/> for
            the size of space used in the buffer.
            </summary>
        </member>
        <member name="P:Unity.Collections.DataStreamWriter.Length">
            <summary>
            The size of the buffer used. See <see cref="P:Unity.Collections.DataStreamWriter.Capacity"/> for the total size.
            </summary>
        </member>
        <member name="P:Unity.Collections.DataStreamWriter.LengthInBits">
            <summary>
            The size of the buffer used in bits. See <see cref="P:Unity.Collections.DataStreamWriter.Length"/> for the length in bytes.
            </summary>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.Flush">
            <summary>
            Causes any buffered bits to be written to the data buffer.
            Note this needs to be invoked after using methods that writes directly to the bit buffer.
            </summary>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes an unsigned byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteBytes(Unity.Collections.NativeArray{System.Byte})">
            <summary>
            Copy NativeArray of bytes into the writers data buffer.
            </summary>
            <param name="value">Source byte array</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteShort(System.Int16)">
            <summary>
            Writes a 2-byte signed short to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The 2-byte signed short to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteUShort(System.UInt16)">
            <summary>
            Writes a 2-byte unsigned short to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The 2-byte unsigned short to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteInt(System.Int32)">
            <summary>
            Writes a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteUInt(System.UInt32)">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteLong(System.Int64)">
            <summary>
            Writes an 8-byte signed long from the stream and advances the current position of the stream by eight bytes.
            </summary>
            <param name="value">The 8-byte signed long to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteULong(System.UInt64)">
            <summary>
            Reads an 8-byte unsigned long from the stream and advances the current position of the stream by eight bytes.
            </summary>
            <param name="value">The 8-byte unsigned long to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteShortNetworkByteOrder(System.Int16)">
            <summary>
            Writes a 2-byte signed short to the current stream using Big-endian byte order and advances the stream position by two bytes.
            If the stream is in little-endian order, the byte order will be swapped.
            </summary>
            <param name="value">The 2-byte signed short to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteUShortNetworkByteOrder(System.UInt16)">
            <summary>
            Writes a 2-byte unsigned short to the current stream using Big-endian byte order and advances the stream position by two bytes.
            If the stream is in little-endian order, the byte order will be swapped.
            </summary>
            <param name="value">The 2-byte unsigned short to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteIntNetworkByteOrder(System.Int32)">
            <summary>
            Writes a 4-byte signed integer from the current stream using Big-endian byte order and advances the current position of the stream by four bytes.
            If the current machine is in little-endian order, the byte order will be swapped.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteUIntNetworkByteOrder(System.UInt32)">
            <summary>
            Writes a 4-byte unsigned integer from the current stream using Big-endian byte order and advances the current position of the stream by four bytes.
            If the stream is in little-endian order, the byte order will be swapped.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteFloat(System.Single)">
            <summary>
            Writes a 4-byte floating point value to the data stream.
            </summary>
            <param name="value">The 4-byte floating point value to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteDouble(System.Double)">
            <summary>
            Writes a 8-byte floating point value to the data stream.
            </summary>
            <param name="value">The 8-byte floating point value to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteRawBits(System.UInt32,System.Int32)">
            <summary>
            Appends a specified number of bits to the data stream.
            </summary>
            <param name="value">The bits to write.</param>
            <param name="numbits">A positive number of bytes to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedUInt(System.UInt32,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a 4-byte unsigned integer value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedULong(System.UInt64,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes an 8-byte unsigned long value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The 8-byte unsigned long to write.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedInt(System.Int32,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a 4-byte signed integer value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            Negative values are interleaved between positive values, i.e. (0, -1, 1, -2, 2)
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedLong(System.Int64,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a 8-byte signed long value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The 8-byte signed long to write.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFloat(System.Single,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a 4-byte floating point value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The 4-byte floating point value to write.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedDouble(System.Double,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a 8-byte floating point value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The 8-byte floating point value to write.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedUIntDelta(System.UInt32,System.UInt32,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta 4-byte unsigned integer value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            Note that the Uint values are cast to an Int after computing the diff.
            </summary>
            <param name="value">The current 4-byte unsigned integer value.</param>
            <param name="baseline">The previous 4-byte unsigned integer value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedIntDelta(System.Int32,System.Int32,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta 4-byte signed integer value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The current 4-byte signed integer value.</param>
            <param name="baseline">The previous 4-byte signed integer value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedLongDelta(System.Int64,System.Int64,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta 8-byte signed long value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="value">The current 8-byte signed long value.</param>
            <param name="baseline">The previous 8-byte signed long value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedULongDelta(System.UInt64,System.UInt64,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta 8-byte unsigned long value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            Note that the unsigned long values are cast to a signed long after computing the diff.
            </summary>
            <param name="value">The current 8-byte unsigned long value.</param>
            <param name="baseline">The previous 8-byte unsigned long, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFloatDelta(System.Single,System.Single,Unity.Collections.StreamCompressionModel)">
             <summary>
             Writes a 4-byte floating point value to the data stream.
            
             If the data did not change a zero bit is prepended, otherwise a 1 bit is prepended.
             When reading back the data, the first bit is then checked for whether the data was changed or not.
             </summary>
             <param name="value">The current 4-byte floating point value.</param>
             <param name="baseline">The previous 4-byte floating value, used to compute the diff.</param>
             <param name="model">Not currently used.</param>
             <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedDoubleDelta(System.Double,System.Double,Unity.Collections.StreamCompressionModel)">
             <summary>
             Writes a 8-byte floating point value to the data stream.
            
             If the data did not change a zero bit is prepended, otherwise a 1 bit is prepended.
             When reading back the data, the first bit is then checked for whether the data was changed or not.
             </summary>
             <param name="value">The current 8-byte floating point value.</param>
             <param name="baseline">The previous 8-byte floating value, used to compute the diff.</param>
             <param name="model">Not currently used.</param>
             <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteFixedString32(Unity.Collections.FixedString32Bytes)">
            <summary>
            Writes a <c>FixedString32Bytes</c> value to the data stream.
            </summary>
            <param name="str">The <c>FixedString32Bytes</c> to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteFixedString64(Unity.Collections.FixedString64Bytes)">
            <summary>
            Writes a <c>FixedString64Bytes</c> value to the data stream.
            </summary>
            <param name="str">The <c>FixedString64Bytes</c> to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteFixedString128(Unity.Collections.FixedString128Bytes)">
            <summary>
            Writes a <c>FixedString128Bytes</c> value to the data stream.
            </summary>
            <param name="str">The <c>FixedString128Bytes</c> to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteFixedString512(Unity.Collections.FixedString512Bytes)">
            <summary>
            Writes a <c>FixedString512Bytes</c> value to the data stream.
            </summary>
            <param name="str">The <c>FixedString512Bytes</c> to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WriteFixedString4096(Unity.Collections.FixedString4096Bytes)">
            <summary>
            Writes a <c>FixedString4096Bytes</c> value to the data stream.
            </summary>
            <param name="str">The <c>FixedString4096Bytes</c> to write.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFixedString32Delta(Unity.Collections.FixedString32Bytes,Unity.Collections.FixedString32Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a <c>FixedString32Bytes</c> delta value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="str">The current <c>FixedString32Bytes</c> value.</param>
            <param name="baseline">The previous <c>FixedString32Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFixedString64Delta(Unity.Collections.FixedString64Bytes,Unity.Collections.FixedString64Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta <c>FixedString64Bytes</c> value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="str">The current <c>FixedString64Bytes</c> value.</param>
            <param name="baseline">The previous <c>FixedString64Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFixedString128Delta(Unity.Collections.FixedString128Bytes,Unity.Collections.FixedString128Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta <c>FixedString128Bytes</c> value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="str">The current <c>FixedString128Bytes</c> value.</param>
            <param name="baseline">The previous <c>FixedString128Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFixedString512Delta(Unity.Collections.FixedString512Bytes,Unity.Collections.FixedString512Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta <c>FixedString512Bytes</c> value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="str">The current <c>FixedString512Bytes</c> value.</param>
            <param name="baseline">The previous <c>FixedString512Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFixedString4096Delta(Unity.Collections.FixedString4096Bytes,Unity.Collections.FixedString4096Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Writes a delta <c>FixedString4096Bytes</c> value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="str">The current <c>FixedString4096Bytes</c> value.</param>
            <param name="baseline">The previous <c>FixedString4096Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.WritePackedFixedStringDelta(System.Byte*,System.UInt32,System.Byte*,System.UInt32,Unity.Collections.StreamCompressionModel)">
             <summary>
             Writes a delta FixedString value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            
             If the value cannot be written <see cref="P:Unity.Collections.DataStreamWriter.HasFailedWrites"/> will return true. This state can be cleared by
             calling <see cref="M:Unity.Collections.DataStreamWriter.Clear"/>.
             </summary>
             <param name="data">Pointer to a packed fixed string.</param>
             <param name="length">The length of the new value.</param>
             <param name="baseData">The previous value, used to compute the diff.</param>
             <param name="baseLength">The length of the previous value.</param>
             <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
             <returns>Whether the write was successful</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamWriter.Clear">
            <summary>
            Moves the write position to the start of the data buffer used.
            </summary>
        </member>
        <member name="T:Unity.Collections.FormatError">
            <summary>
            Kinds of format errors.
            </summary>
        </member>
        <member name="F:Unity.Collections.FormatError.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Unity.Collections.FormatError.Overflow">
            <summary>
            The target storage does not have sufficient capacity.
            Note that the format's write failed. It did not truncate.
            </summary>
        </member>
        <member name="T:Unity.Collections.ParseError">
            <summary>
            Kinds of parse errors.
            </summary>
        </member>
        <member name="F:Unity.Collections.ParseError.None">
            <summary>
            No parse error.
            </summary>
        </member>
        <member name="F:Unity.Collections.ParseError.Syntax">
            <summary>
            The text parsed does not form a number.
            </summary>
        </member>
        <member name="F:Unity.Collections.ParseError.Overflow">
            <summary>
            The number exceeds the range of the target type.
            The number was either truncated, or failed to write entirely.
            </summary>
        </member>
        <member name="F:Unity.Collections.ParseError.Underflow">
            <summary>
            The number exceeds the precision of the target type.
            </summary>
        </member>
        <member name="T:Unity.Collections.CopyError">
            <summary>
            Kinds of copy errors.
            </summary>
        </member>
        <member name="F:Unity.Collections.CopyError.None">
            <summary>
            No copy error.
            </summary>
        </member>
        <member name="F:Unity.Collections.CopyError.Truncation">
            <summary>
            The target storage does not have sufficient capacity.
            Unless stated in the API comment, assume that the write operation was partially applied.
            </summary>
        </member>
        <member name="T:Unity.Collections.ConversionError">
            <summary>
            Kinds of conversion errors.
            </summary>
        </member>
        <member name="F:Unity.Collections.ConversionError.None">
            <summary>
            No conversion error.
            </summary>
        </member>
        <member name="F:Unity.Collections.ConversionError.Overflow">
            <summary>
            The target storage does not have sufficient capacity.
            For copy operations; the value was either truncated into the target storage, or failed to write entirely.
            </summary>
        </member>
        <member name="F:Unity.Collections.ConversionError.Encoding">
            <summary>
            The bytes do not form a valid character.
            </summary>
        </member>
        <member name="F:Unity.Collections.ConversionError.CodePoint">
            <summary>
            The rune is not a valid code point.
            </summary>
        </member>
        <member name="T:Unity.Collections.Unicode">
            <summary>
            Provides utility methods for UTF-8, UTF-16, UCS-4 (a.k.a. UTF-32), and WTF-8.
            </summary>
        </member>
        <member name="T:Unity.Collections.Unicode.Rune">
            <summary>
            Representation of a Unicode character as a code point.
            </summary>
        </member>
        <member name="F:Unity.Collections.Unicode.Rune.value">
            <summary>
            The code point.
            </summary>
            <value>The code point.</value>
        </member>
        <member name="M:Unity.Collections.Unicode.Rune.#ctor(System.Int32)">
            <summary>
            Initializes and returns an instance of Rune.
            </summary>
            <remarks>You are responsible for the code point being valid.</remarks>
            <param name="codepoint">The code point.</param>
        </member>
        <member name="M:Unity.Collections.Unicode.Rune.op_Explicit(System.Char)~Unity.Collections.Unicode.Rune">
            <summary>
            Returns a rune.
            </summary>
            <remarks>Because a char is 16-bit, it can only represent the first 2^16 code points, not all 1.1 million.</remarks>
            <param name="codepoint">A code point.</param>
            <returns>A rune.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.Rune.IsDigit(Unity.Collections.Unicode.Rune)">
            <summary>
            Returns true if a rune is a numerical digit character.
            </summary>
            <param name="r">The rune.</param>
            <returns>True if the rune is a numerical digit character.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.Rune.LengthInUtf8Bytes">
            <summary>
            Returns the number of bytes required to encode this rune as UTF-8.
            </summary>
            <returns>The number of bytes required to encode this rune as UTF-8. If the rune's codepoint
            is invalid, returns 4 (the maximum possible encoding length).</returns>
        </member>
        <member name="F:Unity.Collections.Unicode.kMaximumValidCodePoint">
            <summary>The maximum value of a valid UNICODE code point</summary>
        </member>
        <member name="M:Unity.Collections.Unicode.IsValidCodePoint(System.Int32)">
            <summary>
            Returns true if a code point is valid.
            </summary>
            <param name="codepoint">A code point.</param>
            <returns>True if a code point is valid.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.NotTrailer(System.Byte)">
            <summary>
            Returns true if the byte is not the last byte of a UTF-8 character.
            </summary>
            <param name="b">The byte.</param>
            <returns>True if the byte is not the last byte of a UTF-8 character.</returns>
        </member>
        <member name="P:Unity.Collections.Unicode.ReplacementCharacter">
            <summary>
            The Unicode character �.
            </summary>
            <remarks>This character is used to stand-in for characters that can't be rendered.</remarks>
            <value>The Unicode character �.</value>
        </member>
        <member name="P:Unity.Collections.Unicode.BadRune">
            <summary>
            The null rune value.
            </summary>
            <remarks>In this package, the "bad rune" is used as a null character. It represents no valid code point.</remarks>
            <value>The null rune value.</value>
        </member>
        <member name="M:Unity.Collections.Unicode.Utf8ToUcs(Unity.Collections.Unicode.Rune@,System.Byte*,System.Int32@,System.Int32)">
            <summary>
            Reads a UTF-8 encoded character from a buffer.
            </summary>
            <param name="rune">Outputs the character read. If the read fails, outputs <see cref="P:Unity.Collections.Unicode.ReplacementCharacter"/>.</param>
            <param name="buffer">The buffer of bytes to read.</param>
            <param name="index">Reference to a byte index into the buffer. If the read succeeds, index is incremented by the
            size in bytes of the character read. If the read fails, index is incremented by 1.</param>
            <param name="capacity">The size in bytes of the buffer. Used to check that the read is in bounds.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the read succeeds. Otherwise, returns <see cref="F:Unity.Collections.ConversionError.Overflow"/> or <see cref="F:Unity.Collections.ConversionError.Encoding"/>.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.IsLeadingSurrogate(System.Char)">
            <summary>
            Returns true if a char is a Unicode leading surrogate.
            </summary>
            <param name="c">The char.</param>
            <returns>True if the char is a Unicode leading surrogate.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.IsTrailingSurrogate(System.Char)">
            <summary>
            Returns true if a char is a Unicode trailing surrogate.
            </summary>
            <param name="c">The char.</param>
            <returns>True if the char is a Unicode trailing surrogate.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.Utf16ToUcs(Unity.Collections.Unicode.Rune@,System.Char*,System.Int32@,System.Int32)">
            <summary>
            Reads a UTF-16 encoded character from a buffer.
            </summary>
            <param name="rune">Outputs the character read. If the read fails, rune is not set.</param>
            <param name="buffer">The buffer of chars to read.</param>
            <param name="index">Reference to a char index into the buffer. If the read succeeds, index is incremented by the
            size in chars of the character read. If the read fails, index is not incremented.</param>
            <param name="capacity">The size in chars of the buffer. Used to check that the read is in bounds.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the read succeeds. Otherwise, returns <see cref="F:Unity.Collections.ConversionError.Overflow"/>.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.UcsToUtf8(System.Byte*,System.Int32@,System.Int32,Unity.Collections.Unicode.Rune)">
            <summary>
            Writes a rune to a buffer as a UTF-8 encoded character.
            </summary>
            <param name="rune">The rune to encode.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">Reference to a byte index into the buffer. If the write succeeds, index is incremented by the
            size in bytes of the character written. If the write fails, index is not incremented.</param>
            <param name="capacity">The size in bytes of the buffer. Used to check that the write is in bounds.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the write succeeds. Otherwise, returns <see cref="F:Unity.Collections.ConversionError.CodePoint"/>, <see cref="F:Unity.Collections.ConversionError.Overflow"/>, or <see cref="F:Unity.Collections.ConversionError.Encoding"/>.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.UcsToUtf16(System.Char*,System.Int32@,System.Int32,Unity.Collections.Unicode.Rune)">
            <summary>
            Writes a rune to a buffer as a UTF-16 encoded character.
            </summary>
            <param name="rune">The rune to encode.</param>
            <param name="buffer">The buffer of chars to write to.</param>
            <param name="index">Reference to a char index into the buffer. If the write succeeds, index is incremented by the
            size in chars of the character written. If the write fails, index is not incremented.</param>
            <param name="capacity">The size in chars of the buffer. Used to check that the write is in bounds.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the write succeeds. Otherwise, returns <see cref="F:Unity.Collections.ConversionError.CodePoint"/>, <see cref="F:Unity.Collections.ConversionError.Overflow"/>, or <see cref="F:Unity.Collections.ConversionError.Encoding"/>.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.Utf16ToUtf8(System.Char*,System.Int32,System.Byte*,System.Int32@,System.Int32)">
            <summary>
            Copies UTF-16 characters from one buffer to another buffer as UTF-8.
            </summary>
            <remarks>Assumes the source data is valid UTF-16.</remarks>
            <param name="utf16Buffer">The source buffer.</param>
            <param name="utf16Length">The number of chars to read from the source.</param>
            <param name="utf8Buffer">The destination buffer.</param>
            <param name="utf8Length">Outputs the number of bytes written to the destination.</param>
            <param name="utf8Capacity">The size in bytes of the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.ConversionError.Overflow"/>.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.Utf8ToUtf8(System.Byte*,System.Int32,System.Byte*,System.Int32@,System.Int32)">
            <summary>
            Copies UTF-8 characters from one buffer to another.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcLength">The number of bytes to read from the source.</param>
            <param name="destBuffer">The destination buffer.</param>
            <param name="destLength">Outputs the number of bytes written to the destination.</param>
            <param name="destCapacity">The size in bytes of the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the copy fully completes. Otherwise, returns <see cref="F:Unity.Collections.ConversionError.Overflow"/>.</returns>
        </member>
        <member name="M:Unity.Collections.Unicode.Utf8ToUtf16(System.Byte*,System.Int32,System.Char*,System.Int32@,System.Int32)">
            <summary>
            Copies UTF-8 characters from one buffer to another as UTF-16.
            </summary>
            <remarks>Assumes the source data is valid UTF-8.</remarks>
            <param name="utf8Buffer">The source buffer.</param>
            <param name="utf8Length">The number of bytes to read from the source.</param>
            <param name="utf16Buffer">The destination buffer.</param>
            <param name="utf16Length">Outputs the number of chars written to the destination.</param>
            <param name="utf16Capacity">The size in chars of the destination buffer.</param>
            <returns><see cref="F:Unity.Collections.ConversionError.None"/> if the copy fully completes. Otherwise, <see cref="F:Unity.Collections.ConversionError.Overflow"/>.</returns>
        </member>
        <member name="T:Unity.Collections.DataStreamReader">
             <summary>
             The <c>DataStreamReader</c> class is the counterpart of the
             <c>DataStreamWriter</c> class and can be be used to deserialize
             data which was prepared with it.
             </summary>
             <remarks>
             DataStreamWriter writes this data in the endian format native
             to the current machine architecture. See: <see cref="P:Unity.Collections.DataStreamReader.IsLittleEndian"/>
             <br/>
             For network byte order use the so named methods.
             <br/>
             Simple usage example:
             <code>
             using (var dataWriter = new DataStreamWriter(16, Allocator.Persistent))
             {
                 dataWriter.Write(42);
                 dataWriter.Write(1234);
                 // Length is the actual amount of data inside the writer,
                 // Capacity is the total amount.
                 var dataReader = new DataStreamReader(dataWriter, 0, dataWriter.Length);
                 var context = default(DataStreamReader.Context);
                 var myFirstInt = dataReader.ReadInt(ref context);
                 var mySecondInt = dataReader.ReadInt(ref context);
             }
             </code>
            
             The <c>DataStreamReader</c> carries the position of the read pointer inside the struct,
             taking a copy of the reader will also copy the read position. This includes passing the
             reader to a method by value instead of by ref.
            
             See the <see cref="T:Unity.Collections.DataStreamWriter"/> class for more information
             and examples.
             </remarks>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.#ctor(Unity.Collections.NativeArray{System.Byte})">
            <summary>
            Initializes a new instance of the DataStreamReader struct with a NativeArray&lt;byte&gt;
            </summary>
            <param name="array">The buffer to attach to the DataStreamReader.</param>
        </member>
        <member name="P:Unity.Collections.DataStreamReader.IsLittleEndian">
            <summary>
            Show the byte order in which the current computer architecture stores data.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders.
            <list type="bullet">
            <item>Big-endian: the most significant byte is at the left end of a word.</item>
            <item>Little-endian: means the most significant byte is at the right end of a word.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Unity.Collections.DataStreamReader.HasFailedReads">
            <summary>
            If there is a read failure this returns true. A read failure might happen if this attempts to read more than there is capacity for.
            </summary>
        </member>
        <member name="P:Unity.Collections.DataStreamReader.Length">
            <summary>
            The total size of the buffer space this reader is working with.
            </summary>
        </member>
        <member name="P:Unity.Collections.DataStreamReader.IsCreated">
            <summary>
            True if the reader has been pointed to a valid buffer space. This
            would be false if the reader was created with no arguments.
            </summary>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadBytes(Unity.Collections.NativeArray{System.Byte})">
            <summary>
            Read and copy data into the given NativeArray of bytes, an error will
            be logged if not enough bytes are available.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.GetBytesRead">
            <summary>
            Gets the number of bytes read from the data stream.
            </summary>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.GetBitsRead">
            <summary>
            Gets the number of bits read from the data stream.
            </summary>
            <returns>Number of bits read.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.SeekSet(System.Int32)">
            <summary>
            Sets the current position of this stream to the given value.
            An error will be logged if <paramref name="pos"/> is outside the length of the stream.
            <br/>
            In addition this will reset the bit index and the bit buffer.
            </summary>
            <param name="pos">Seek position.</param>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadByte">
            <summary>
            Reads an unsigned byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadShort">
            <summary>
            Reads a 2-byte signed short from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed short read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadUShort">
            <summary>
            Reads a 2-byte unsigned short from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned short read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadInt">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadUInt">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadLong">
            <summary>
            Reads an 8-byte signed long from the stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed long read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadULong">
            <summary>
            Reads an 8-byte unsigned long from the stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned long read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadShortNetworkByteOrder">
            <summary>
            Reads a 2-byte signed short from the current stream in Big-endian byte order and advances the current position of the stream by two bytes.
            If the current endianness is in little-endian order, the byte order will be swapped.
            </summary>
            <returns>A 2-byte signed short read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadUShortNetworkByteOrder">
            <summary>
            Reads a 2-byte unsigned short from the current stream in Big-endian byte order and advances the current position of the stream by two bytes.
            If the current endianness is in little-endian order, the byte order will be swapped.
            </summary>
            <returns>A 2-byte unsigned short read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadIntNetworkByteOrder">
            <summary>
            Reads a 4-byte signed integer from the current stream in Big-endian byte order and advances the current position of the stream by four bytes.
            If the current endianness is in little-endian order, the byte order will be swapped.
            </summary>
            <returns>A 4-byte signed integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadUIntNetworkByteOrder">
            <summary>
            Reads a 4-byte unsigned integer from the current stream in Big-endian byte order and advances the current position of the stream by four bytes.
            If the current endianness is in little-endian order, the byte order will be swapped.
            </summary>
            <returns>A 4-byte unsigned integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFloat">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadDouble">
            <summary>
            Reads a 8-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 8-byte floating point value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedUInt(Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a 4-byte unsigned integer from the current stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/> and advances the current position the number of bits depending on the model.
            </summary>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>A 4-byte unsigned integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadRawBits(System.Int32)">
            <summary>
            Reads a specified number of bits from the data stream.
            </summary>
            <param name="numbits">A positive number of bytes to write.</param>
            <returns>A 4-byte unsigned integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedULong(Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads an 8-byte unsigned long value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>An 8-byte unsigned long read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedInt(Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a 4-byte signed integer value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            <br/>
            Negative values de-interleaves from positive values before returning, for example (0, -1, 1, -2, 2) -> (-2, -1, 0, 1, 2)
            </summary>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>A 4-byte signed integer read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedLong(Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads an 8-byte signed long value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            <br/>
            Negative values de-interleaves from positive values before returning, for example (0, -1, 1, -2, 2) -> (-2, -1, 0, 1, 2)
            </summary>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>An 8-byte signed long read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFloat(Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a 4-byte floating point value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>A 4-byte floating point value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedDouble(Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a 8-byte floating point value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>A 8-byte floating point value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedIntDelta(System.Int32,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a 4-byte signed integer delta value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous 4-byte signed integer value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>A 4-byte signed integer read from the current stream, or 0 if the end of the stream has been reached.
            If the data did not change, this also returns 0.
            <br/>
            See: <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> to verify if the read failed.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedUIntDelta(System.UInt32,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a 4-byte unsigned integer delta value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous 4-byte unsigned integer value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>A 4-byte unsigned integer read from the current stream, or 0 if the end of the stream has been reached.
            If the data did not change, this also returns 0.
            <br/>
            See: <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> to verify if the read failed.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedLongDelta(System.Int64,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads an 8-byte signed long delta value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous 8-byte signed long value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>An 8-byte signed long read from the current stream, or 0 if the end of the stream has been reached.
            If the data did not change, this also returns 0.
            <br/>
            See: <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> to verify if the read failed.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedULongDelta(System.UInt64,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads an 8-byte unsigned long delta value from the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous 8-byte unsigned long value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for reading value in a packed manner.</param>
            <returns>An 8-byte unsigned long read from the current stream, or 0 if the end of the stream has been reached.
            If the data did not change, this also returns 0.
            <br/>
            See: <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> to verify if the read failed.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFloatDelta(System.Single,Unity.Collections.StreamCompressionModel)">
             <summary>
             Reads a 4-byte floating point value from the data stream.
            
             If the first bit is 0, the data did not change and <paramref name="baseline"/> will be returned.
             </summary>
             <param name="baseline">The previous 4-byte floating point value.</param>
             <param name="model">Not currently used.</param>
             <returns>A 4-byte floating point value read from the current stream, or <paramref name="baseline"/> if there are no changes to the value.
             <br/>
             See: <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> to verify if the read failed.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedDoubleDelta(System.Double,Unity.Collections.StreamCompressionModel)">
             <summary>
             Reads a 8-byte floating point value from the data stream.
            
             If the first bit is 0, the data did not change and <paramref name="baseline"/> will be returned.
             </summary>
             <param name="baseline">The previous 8-byte floating point value.</param>
             <param name="model">Not currently used.</param>
             <returns>A 8-byte floating point value read from the current stream, or <paramref name="baseline"/> if there are no changes to the value.
             <br/>
             See: <see cref="P:Unity.Collections.DataStreamReader.HasFailedReads"/> to verify if the read failed.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFixedString32">
            <summary>
            Reads a <c>FixedString32Bytes</c> value from the current stream and advances the current position of the stream by the length of the string.
            </summary>
            <returns>A <c>FixedString32Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFixedString64">
            <summary>
            Reads a <c>FixedString64Bytes</c> value from the current stream and advances the current position of the stream by the length of the string.
            </summary>
            <returns>A <c>FixedString64Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFixedString128">
            <summary>
            Reads a <c>FixedString128Bytes</c> value from the current stream and advances the current position of the stream by the length of the string.
            </summary>
            <returns>A <c>FixedString128Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFixedString512">
            <summary>
            Reads a <c>FixedString512Bytes</c> value from the current stream and advances the current position of the stream by the length of the string.
            </summary>
            <returns>A <c>FixedString512Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFixedString4096">
            <summary>
            Reads a <c>FixedString4096Bytes</c> value from the current stream and advances the current position of the stream by the length of the string.
            </summary>
            <returns>A <c>FixedString4096Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadFixedString(Unity.Collections.NativeArray{System.Byte})">
            <summary>
            Read and copy data into the given NativeArray of bytes, an error will
            be logged if not enough bytes are available in the array.
            </summary>
            <param name="array">Buffer to write the string bytes to.</param>
            <returns>Length of data read into byte array, or zero if error occurred.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFixedString32Delta(Unity.Collections.FixedString32Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a <c>FixedString32Bytes</c> delta value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous <c>FixedString32Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>A <c>FixedString32Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFixedString64Delta(Unity.Collections.FixedString64Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a <c>FixedString64Bytes</c> delta value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous <c>FixedString64Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>A <c>FixedString64Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFixedString128Delta(Unity.Collections.FixedString128Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a <c>FixedString128Bytes</c> delta value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous <c>FixedString128Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>A <c>FixedString128Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFixedString512Delta(Unity.Collections.FixedString512Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a <c>FixedString512Bytes</c> delta value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous <c>FixedString512Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>A <c>FixedString512Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFixedString4096Delta(Unity.Collections.FixedString4096Bytes,Unity.Collections.StreamCompressionModel)">
            <summary>
            Reads a <c>FixedString4096Bytes</c> delta value to the data stream using a <see cref="T:Unity.Collections.StreamCompressionModel"/>.
            </summary>
            <param name="baseline">The previous <c>FixedString4096Bytes</c> value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>A <c>FixedString4096Bytes</c> value read from the current stream, or 0 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Unity.Collections.DataStreamReader.ReadPackedFixedStringDelta(Unity.Collections.NativeArray{System.Byte},Unity.Collections.NativeArray{System.Byte},Unity.Collections.StreamCompressionModel)">
            <summary>
            Read and copy data into the given NativeArray of bytes, an error will
            be logged if not enough bytes are available in the array.
            </summary>
            <param name="data">Array for the current fixed string.</param>
            <param name="baseData">Array containing the previous value, used to compute the diff.</param>
            <param name="model"><see cref="T:Unity.Collections.StreamCompressionModel"/> model for writing value in a packed manner.</param>
            <returns>Length of data read into byte array, or zero if error occurred.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelMultiHashMapIterator`1">
            <summary>
            An iterator over all values associated with an individual key in a multi hash map.
            </summary>
            <remarks>The iteration order over the values associated with a key is an implementation detail. Do not rely upon any particular ordering.</remarks>
            <typeparam name="TKey">The type of the keys.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMapIterator`1.GetEntryIndex">
            <summary>
            Returns the entry index.
            </summary>
            <returns>The entry index.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelMultiHashMap`2">
             <summary>
             An unordered, expandable associative array. Each key can have more than one associated value.
             </summary>
             <remarks>
             Unlike a regular NativeParallelHashMap, a NativeParallelMultiHashMap can store multiple key-value pairs with the same key.
            
             The keys are not deduplicated: two key-value pairs with the same key are stored as fully separate key-value pairs.
             </remarks>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a newly allocated multi hash map.
            </summary>
            <param name="capacity">The number of key-value pairs that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if the hash map is empty or if the hash map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Count">
            <summary>
            Returns the current number of key-value pairs in this hash map.
            </summary>
            <remarks>Key-value pairs with matching keys are counted as separate, individual pairs.</remarks>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.Capacity">
            <summary>
            Returns the number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than the current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Clear">
            <summary>
            Removes all key-value pairs.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>
            If a key-value pair with this key is already present, an additional separate key-value pair is added.
            </remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Remove(`0)">
            <summary>
            Removes a key and its associated value(s).
            </summary>
            <param name="key">The key to remove.</param>
            <returns>The number of removed key-value pairs. If the key was not present, returns 0.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Remove(Unity.Collections.NativeParallelMultiHashMapIterator{`0})">
            <summary>
            Removes a single key-value pair.
            </summary>
            <param name="it">An iterator representing the key-value pair to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the iterator is invalid.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.TryGetFirstValue(`0,`1@,Unity.Collections.NativeParallelMultiHashMapIterator{`0}@)">
            <summary>
            Gets an iterator for a key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">Outputs the associated value represented by the iterator.</param>
            <param name="it">Outputs an iterator.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.TryGetNextValue(`1@,Unity.Collections.NativeParallelMultiHashMapIterator{`0}@)">
            <summary>
            Advances an iterator to the next value associated with its key.
            </summary>
            <param name="item">Outputs the next value.</param>
            <param name="it">A reference to the iterator to advance.</param>
            <returns>True if the key was present and had another value.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present in this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.CountValuesForKey(`0)">
            <summary>
            Returns the number of values associated with a given key.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The number of values associated with the key. Returns 0 if the key was not present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.SetValue(`1,Unity.Collections.NativeParallelMultiHashMapIterator{`0})">
            <summary>
            Sets a new value for an existing key-value pair.
            </summary>
            <param name="item">The new value.</param>
            <param name="it">The iterator representing a key-value pair.</param>
            <returns>True if a value was overwritten.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this hash map.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
             <summary>
             Returns an array with a copy of all the keys (in no particular order).
             </summary>
             <remarks>A key with *N* values is included *N* times in the array.
            
             Use `GetUniqueKeyArray` of <see cref="T:Unity.Collections.NativeParallelHashMapExtensions"/> instead if you only want one occurrence of each key.</remarks>
             <param name="allocator">The allocator to use.</param>
             <returns>An array with a copy of all the keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all the values (in no particular order).
            </summary>
            <remarks>The values are not deduplicated. If you sort the returned array,
            you can use <see cref="M:Unity.Collections.NativeParallelHashMapExtensions.Unique``1(Unity.Collections.NativeArray{``0})"/> to remove duplicate values.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all the values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all the keys and values (in no particular order).
            </summary>
            <remarks>A key with *N* values is included *N* times in the array.
            </remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all the keys and values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.AsParallelWriter">
            <summary>
            Returns a parallel writer for this hash map.
            </summary>
            <returns>A parallel writer for this hash map.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelMultiHashMap`2.ParallelWriter">
            <summary>
            A parallel writer for a NativeParallelMultiHashMap.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.NativeParallelMultiHashMap`2.AsParallelWriter"/> to create a parallel writer for a NativeParallelMultiHashMap.
            </remarks>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.ParallelWriter.m_ThreadIndex">
            <summary>
            Returns the index of the current thread.
            </summary>
            <remarks>In a job, each thread gets its own copy of the ParallelWriter struct, and the job system assigns
            each copy the index of its thread.</remarks>
            <value>The index of the current thread.</value>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.ParallelWriter.Capacity">
            <summary>
            Returns the number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.ParallelWriter.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>
            If a key-value pair with this key is already present, an additional separate key-value pair is added.
            </remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.GetValuesForKey(`0)">
            <summary>
            Returns an enumerator over the values of an individual key.
            </summary>
            <param name="key">The key to get an enumerator for.</param>
            <returns>An enumerator over the values of a key.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator">
            <summary>
            An enumerator over the values of an individual key in a multi hash map.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.Current"/> is not valid to read.
            The first <see cref="M:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.MoveNext"/> call advances the enumerator to the first value of the key.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next value of the key.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.Current">
            <summary>
            The current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.Enumerator.GetEnumerator">
            <summary>
            Returns this enumerator.
            </summary>
            <returns>This enumerator.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <remarks>A key with *N* values is visited by the enumerator *N* times.</remarks>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.System#Collections#Generic#IEnumerable{Unity#Collections#LowLevel#Unsafe#KeyValue{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelMultiHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelMultiHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator">
             <summary>
             An enumerator over the key-value pairs of a multi hash map.
             </summary>
             <remarks>A key with *N* values is visited by the enumerator *N* times.
            
             In an enumerator's initial state, <see cref="P:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.Current"/> is not valid to read.
             The first <see cref="M:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.MoveNext"/> call advances the enumerator to the first key-value pair.
             </remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next key-value pair.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeParallelMultiHashMap`2.KeyValueEnumerator.Current">
            <summary>
            The current key-value pair.
            </summary>
            <value>The current key-value pair.</value>
        </member>
        <member name="T:Unity.Collections.NativeParallelMultiHashMapExtensions">
            <summary>
            Extension methods for NativeParallelMultiHashMap.
            </summary>
        </member>
        <member name="T:Unity.Collections.AllocatorManager">
            <summary>
            Manages custom memory allocators.
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Allocate``1(``0@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates memory directly from an allocator.
            </summary>
            <typeparam name="T">The type of allocator.</typeparam>
            /// <param name="t">The allocator of type T used to allocator memory.</param>
            <param name="sizeOf">The number of bytes to allocate to item.</param>
            <param name="alignOf">The alignment in bytes.</param>
            <param name="items">The number of items. Defaults to 1.</param>
            <returns>A pointer to the allocated memory.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Allocate(Unity.Collections.AllocatorManager.AllocatorHandle,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates memory from an allocator.
            </summary>
            <param name="handle">A handle to the allocator.</param>
            <param name="itemSizeInBytes">The number of bytes to allocate.</param>
            <param name="alignmentInBytes">The alignment in bytes (must be a power of two).</param>
            <param name="items">The number of values to allocate space for. Defaults to 1.</param>
            <returns>A pointer to the allocated memory.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Allocate``1(Unity.Collections.AllocatorManager.AllocatorHandle,System.Int32)">
            <summary>
            Allocates enough memory for an unmanaged value of a given type.
            </summary>
            <typeparam name="T">The type of value to allocate for.</typeparam>
            <param name="handle">A handle to the allocator.</param>
            <param name="items">The number of values to allocate for space for. Defaults to 1.</param>
            <returns>A pointer to the allocated memory.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Free(Unity.Collections.AllocatorManager.AllocatorHandle,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Frees an allocation.
            </summary>
            <remarks>For some allocators, the size of the allocation must be known to properly deallocate.
            Other allocators only need the pointer when deallocating and so will ignore `itemSizeInBytes`, `alignmentInBytes` and `items`.</remarks>
            <param name="handle">A handle to the allocator.</param>
            <param name="pointer">A pointer to the allocated memory.</param>
            <param name="itemSizeInBytes">The size in bytes of the allocation.</param>
            <param name="alignmentInBytes">The alignment in bytes (must be a power of two).</param>
            <param name="items">The number of values that the memory was allocated for.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Free(Unity.Collections.AllocatorManager.AllocatorHandle,System.Void*)">
            <summary>
            Frees an allocation.
            </summary>
            <param name="handle">A handle to the allocator.</param>
            <param name="pointer">A pointer to the allocated memory.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Free``1(Unity.Collections.AllocatorManager.AllocatorHandle,``0*,System.Int32)">
            <summary>
            Frees an allocation.
            </summary>
            <remarks>For some allocators, the size of the allocation must be known to properly deallocate.
            Other allocators only need the pointer when deallocating and so  will ignore `T` and `items`.</remarks>
            <typeparam name="T">The type of value that the memory was allocated for.</typeparam>
            <param name="handle">A handle to the allocator.</param>
            <param name="pointer">A pointer to the allocated memory.</param>
            <param name="items">The number of values that the memory was allocated for.</param>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Invalid">
            <summary>
            Corresponds to Allocator.Invalid.
            </summary>
            <value>Corresponds to Allocator.Invalid.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.None">
            <summary>
            Corresponds to Allocator.None.
            </summary>
            <value>Corresponds to Allocator.None.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Temp">
            <summary>
            Corresponds to Allocator.Temp.
            </summary>
            <value>Corresponds to Allocator.Temp.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.TempJob">
            <summary>
            Corresponds to Allocator.TempJob.
            </summary>
            <value>Corresponds to Allocator.TempJob.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Persistent">
            <summary>
            Corresponds to Allocator.Persistent.
            </summary>
            <value>Corresponds to Allocator.Persistent.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.AudioKernel">
            <summary>
            Corresponds to Allocator.AudioKernel.
            </summary>
            <value>Corresponds to Allocator.AudioKernel.</value>
            <remarks>Do not use. Reserved for internal use.</remarks>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.TryFunction">
            <summary>
            Used for calling an allocator function.
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.ConvertToAllocatorHandle(Unity.Collections.Allocator)">
            <summary>
            Convert an Allocator to an AllocatorHandle, keeping the Version.
            </summary>
            <param name="a">The Allocator to convert.</param>
            <returns>The AllocatorHandle of an allocator.</returns>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.AllocatorHandle">
            <summary>
            Represents the allocator function used within an allocator.
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.AllocatorHandle.CheckExists(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
            <summary>
              <para>Determines if the handle is still valid, because we intend to release it if it is.</para>
            </summary>
            <param name="handle">Safety handle.</param>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.AllocatorHandle.InvalidChildSafetyHandleIndex">
            <summary>
            For internal use only.
            </summary>
            <value>For internal use only.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.AllocatorHandle.InvalidChildAllocatorIndex">
            <summary>
            For internal use only.
            </summary>
            <value>For internal use only.</value>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.AllocatorHandle.op_Implicit(Unity.Collections.Allocator)~Unity.Collections.AllocatorManager.AllocatorHandle">
            <summary>
            Implicitly convert an Allocator to an AllocatorHandle with its Version being reset to 0.
            </summary>
            <param name="a">The Allocator to convert.</param>
            <returns>The AllocatorHandle of an allocator.</returns>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.AllocatorHandle.Index">
            <summary>
            This allocator's index into the global table of allocator functions.
            </summary>
            <value>This allocator's index into the global table of allocator functions.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.AllocatorHandle.Version">
            <summary>
            This allocator's version number.
            </summary>
            <remarks>An allocator function is uniquely identified by its *combination* of <see cref="F:Unity.Collections.AllocatorManager.AllocatorHandle.Index"/> and <see cref="F:Unity.Collections.AllocatorManager.AllocatorHandle.Version"/> together: each
            index has a version number that starts at 0; the version number is incremented each time the allocator is invalidated.  Only the
            lower 15 bits of Version is in use because when allocator version is larger than 0x7FFF, allocator.ToAllocator returns a negative value
            which causes problem when comparing to Allocator.None.
            </remarks>
            <value>This allocator's version number.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.AllocatorHandle.Value">
            <summary>
            The <see cref="F:Unity.Collections.AllocatorManager.AllocatorHandle.Index"/> cast to int.
            </summary>
            <value>The <see cref="F:Unity.Collections.AllocatorManager.AllocatorHandle.Index"/> cast to int.</value>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.AllocatorHandle.TryAllocateBlock``1(Unity.Collections.AllocatorManager.Block@,System.Int32)">
            <summary>
            Allocates a block from this allocator.
            </summary>
            <typeparam name="T">The type of value to allocate for.</typeparam>
            <param name="block">Outputs the allocated block.</param>
            <param name="items">The number of values to allocate for.</param>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.AllocatorHandle.AllocateBlock``1(System.Int32)">
            <summary>
            Allocates a block with this allocator function.
            </summary>
            <typeparam name="T">The type of value to allocate for.</typeparam>
            <param name="items">The number of values to allocate for.</param>
            <returns>The allocated block.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the allocator is not valid or if the allocation failed.</exception>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.AllocatorHandle.Function">
            <summary>
            For internal use only.
            </summary>
            <value>For internal use only.</value>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.AllocatorHandle.Try(Unity.Collections.AllocatorManager.Block@)">
            <summary>
            Tries to allocate the block with this allocator.
            </summary>
            <param name="block">The block to allocate.</param>
            <returns>0 if successful. Otherwise, returns an error code.</returns>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.AllocatorHandle.Handle">
            <summary>
            This handle.
            </summary>
            <value>This handle.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.AllocatorHandle.ToAllocator">
            <summary>
            Retrieve the Allocator associated with this allocator handle.
            </summary>
            <value>The Allocator retrieved.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.AllocatorHandle.IsCustomAllocator">
            <summary>
            Check whether this allocator is a custom allocator.
            </summary>
            <remarks>The AllocatorHandle is a custom allocator if its Index is larger or equal to `FirstUserIndex`.</remarks>
            <value>True if this AllocatorHandle is a custom allocator.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.AllocatorHandle.IsAutoDispose">
            <summary>
            Check whether this allocator will automatically dispose allocations.
            </summary>
            <value>True if allocations made by this AllocatorHandle are not automatically disposed.</value>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.AllocatorHandle.Dispose">
            <summary>
            Dispose the allocator.
            </summary>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.BlockHandle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.BlockHandle.Value">
            <summary>
            Represents the handle.
            </summary>
            <value>Represents the handle.</value>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.Range">
            <summary>
            A range of allocated memory.
            </summary>
            <remarks>The name is perhaps misleading: only in combination with a <see cref="T:Unity.Collections.AllocatorManager.Block"/> does
            a `Range` have sufficient information to represent the number of bytes in an allocation. The reason `Range` is its own type that's separate from `Block`
            stems from some efficiency concerns in the implementation details. In most cases, a `Range` is only used in conjunction with an associated `Block`.
            </remarks>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Range.Pointer">
            <summary>
            Pointer to the start of this range.
            </summary>
            <value>Pointer to the start of this range.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Range.Items">
            <summary>
            Number of items allocated in this range.
            </summary>
            <remarks>The actual allocation may be larger. See <see cref="F:Unity.Collections.AllocatorManager.Block.AllocatedItems"/>.</remarks>
            <value>Number of items allocated in this range. </value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Range.Allocator">
            <summary>
            The allocator function used for this range.
            </summary>
            <value>The allocator function used for this range.</value>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Range.Dispose">
             <summary>
             Deallocates the memory represented by this range.
             </summary>
             <remarks>
             Same as disposing the <see cref="T:Unity.Collections.AllocatorManager.Block"/> which contains this range.
            
             Cannot be used with allocators which need the allocation size to deallocate.
             </remarks>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.Block">
            <summary>
            Represents an individual allocation within an allocator.
            </summary>
            <remarks>A block consists of a <see cref="F:Unity.Collections.AllocatorManager.Block.Range"/> plus metadata about the type of elements for which the block was allocated.</remarks>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.Range">
            <summary>
            The range of memory encompassed by this block.
            </summary>
            <value>The range of memory encompassed by this block.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.BytesPerItem">
            <summary>
            Number of bytes per item.
            </summary>
            <value>Number of bytes per item.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.AllocatedItems">
            <summary>
            Number of items allocated for.
            </summary>
            <value>Number of items allocated for.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.Log2Alignment">
            <summary>
            Log2 of the byte alignment.
            </summary>
            <remarks>The alignment must always be power of 2. Storing the alignment as its log2 helps enforces this.</remarks>
            <value>Log2 of the byte alignment.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.Padding0">
            <summary>
            This field only exists to pad the `Block` struct. Ignore it.
            </summary>
            <value>This field only exists to pad the `Block` struct. Ignore it.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.Padding1">
            <summary>
            This field only exists to pad the `Block` struct. Ignore it.
            </summary>
            <value>This field only exists to pad the `Block` struct. Ignore it.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Block.Padding2">
            <summary>
            This field only exists to pad the `Block` struct. Ignore it.
            </summary>
            <value>This field only exists to pad the `Block` struct. Ignore it.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.Block.Bytes">
            <summary>
            Number of bytes requested for this block.
            </summary>
            <remarks>The actual allocation size may be larger due to alignment.</remarks>
            <value>Number of bytes requested for this block.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.Block.AllocatedBytes">
            <summary>
            Number of bytes allocated for this block.
            </summary>
            <remarks>The requested allocation size may be smaller. Any excess is due to alignment</remarks>
            <value>Number of bytes allocated for this block.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.Block.Alignment">
             <summary>
             The alignment.
             </summary>
             <remarks>Must be power of 2 that's greater than or equal to 0.
            
             Set alignment *before* the allocation is made. Setting it after has no effect on the allocation.</remarks>
             <param name="value">A new alignment. If not a power of 2, it will be rounded up to the next largest power of 2.</param>
             <value>The alignment.</value>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Block.Dispose">
            <summary>
            Deallocates this block.
            </summary>
            <remarks>Same as <see cref="M:Unity.Collections.AllocatorManager.Block.TryAllocate"/>.</remarks>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Block.TryAllocate">
            <summary>
            Attempts to allocate this block.
            </summary>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Block.TryFree">
            <summary>
            Attempts to free this block.
            </summary>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Block.Allocate">
            <summary>
            Allocates this block.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if safety checks are enabled and the allocation fails.</exception>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Block.Free">
            <summary>
            Frees the block.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if safety checks are enabled and the deallocation fails.</exception>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.IAllocator">
            <summary>
            An allocator function pointer.
            </summary>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.IAllocator.Function">
            <summary>
            The allocator function. It can allocate, deallocate, or reallocate.
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.IAllocator.Try(Unity.Collections.AllocatorManager.Block@)">
            <summary>
            Invoke the allocator function.
            </summary>
            <param name="block">The block to allocate, deallocate, or reallocate. See <see cref="M:Unity.Collections.AllocatorManager.Try(Unity.Collections.AllocatorManager.Block@)"/></param>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.IAllocator.Handle">
            <summary>
            This allocator.
            </summary>
            <value>This allocator.</value>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.IAllocator.ToAllocator">
            <summary>
            Cast the Allocator index into Allocator
            </summary>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.IAllocator.IsCustomAllocator">
            <summary>
            Check whether an allocator is a custom allocator
            </summary>
        </member>
        <member name="P:Unity.Collections.AllocatorManager.IAllocator.IsAutoDispose">
            <summary>
            Check whether an allocator will automatically dispose allocations.
            </summary>
            <remarks>Allocations made by allocator are not automatically disposed by default.</remarks>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.kErrorNone">
            <summary>
            Memory allocation Success status
            </summary>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.kErrorBufferOverflow">
            <summary>
            Memory allocation Buffer Overflow status
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Try(Unity.Collections.AllocatorManager.Block@)">
             <summary>
             Invokes the allocator function of a block.
             </summary>
             <remarks>The allocator function is looked up from a global table.
            
             - If the block range's Pointer is null, it will allocate.
             - If the block range's Pointer is not null, it will reallocate.
             - If the block range's Items is 0, it will deallocate.
             </remarks>
             <param name="block">The block to allocate, deallocate, or reallocate.</param>
             <returns>0 if successful. Otherwise, returns the error code from the block's allocator function.</returns>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.StackAllocator">
            <summary>
            A stack allocator with no storage of its own. Uses the storage of its parent.
            </summary>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.SlabAllocator">
            <summary>
            Slab allocator with no backing storage.
            </summary>
        </member>
        <member name="T:Unity.Collections.AllocatorManager.SharedStatics">
            <summary>
            Contains arrays of the allocator function pointers.
            </summary>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.Managed.TryFunctionDelegates">
            <summary>
            Global delegate table to hold TryFunction delegates for managed callers
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Managed.RegisterDelegate(System.Int32,Unity.Collections.AllocatorManager.TryFunction)">
            <summary>
            Register TryFunction delegates for managed caller to avoid garbage collections
            </summary>
            <param name="index">Index into the TryFunction delegates table.</param>
            <param name="function">TryFunction delegate to be registered.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Managed.UnregisterDelegate(System.Int32)">
            <summary>
            Unregister TryFunction delegate
            </summary>
            <param name="int">Index into the TryFunction delegates table.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Initialize">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Install(Unity.Collections.AllocatorManager.AllocatorHandle,System.IntPtr,Unity.Burst.FunctionPointer{Unity.Collections.AllocatorManager.TryFunction},Unity.Collections.AllocatorManager.TryFunction,System.Boolean)">
            <summary>
            Saves an allocator's function pointers at a particular index in the global function table.
            </summary>
            <param name="handle">The global function table index at which to install the allocator function.</param>
            <param name="allocatorState">IntPtr to allocator's custom state.</param>
            <param name="functionPointer">The allocator function to install in the global function table.</param>
            <param name="function">The allocator function to install in the global function table.</param>
            <param name="IsAutoDispose">Flag indicating if the allocator will automatically dispose allocations.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Install(Unity.Collections.AllocatorManager.AllocatorHandle,System.IntPtr,Unity.Collections.AllocatorManager.TryFunction)">
            <summary>
            Saves an allocator's function pointers at a particular index in the global function table.
            </summary>
            <param name="handle">The global function table index at which to install the allocator function.</param>
            <param name="allocatorState">IntPtr to allocator's custom state.</param>
            <param name="function">The allocator function to install in the global function table.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Register(System.IntPtr,Unity.Burst.FunctionPointer{Unity.Collections.AllocatorManager.TryFunction},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Saves an allocator's function pointers in a free slot of the global function table. Thread safe.
            </summary>
            <param name="allocatorState">IntPtr to allocator's custom state.</param>
            <param name="functionPointer">Function pointer to create or save in the function table.</param>
            <param name="IsAutoDispose">Flag indicating if the allocator will automatically dispose allocations.</param>
            <param name="isGlobal">Flag indicating if the allocator is a global allocator.</param>
            <param name="globalIndex">Index into the global function table of the allocator to be created.</param>
            <returns>Returns a handle to the newly registered allocator function.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Register``1(``0@,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Saves an allocator's function pointers in a free slot of the global function table. Thread safe.
            </summary>
            <typeparam name="T">The type of allocator to register.</typeparam>
            <param name="t">Reference to the allocator.</param>
            <param name="IsAutoDispose">Flag indicating if the allocator will automatically dispose allocations.</param>
            <param name="isGlobal">Flag indicating if the allocator is a global allocator.</param>
            <param name="globalIndex">Index into the global function table of the allocator to be created.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.UnmanagedUnregister``1(``0@)">
            <summary>
            Removes an allocator's function pointers from the global function table, without managed code
            </summary>
            <typeparam name="T">The type of allocator to unregister.</typeparam>
            <param name="t">Reference to the allocator.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Unregister``1(``0@)">
            <summary>
            Removes an allocator's function pointers from the global function table.
            </summary>
            <typeparam name="T">The type of allocator to unregister.</typeparam>
            <param name="t">Reference to the allocator.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.CreateAllocator``1(Unity.Collections.AllocatorManager.AllocatorHandle,System.Boolean,System.Int32)">
            <summary>
            Create a custom allocator by allocating a backing storage to store the allocator and then register it
            </summary>
            <typeparam name="T">The type of allocator to create.</typeparam>
            <param name="backingAllocator">Allocator used to allocate backing storage.</param>
            <param name="isGlobal">Flag indicating if the allocator is a global allocator.</param>
            <param name="globalIndex">Index into the global function table of the allocator to be created.</param>
            <returns>Returns reference to the newly created allocator.</returns>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.DestroyAllocator``1(``0@,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Destroy a custom allocator by unregistering the allocator and freeing its backing storage
            </summary>
            <typeparam name="T">The type of allocator to destroy.</typeparam>
            <param name="t">Reference to the allocator.</param>
            <param name="backingAllocator">Allocator used in allocating the backing storage.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorManager.Shutdown">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.FirstUserIndex">
            <summary>
            Index in the global function table of the first user-defined allocator.
            </summary>
            <remarks>The indexes from 0 up to `FirstUserIndex` are reserved and so should not be used for your own allocators.</remarks>
            <value>Index in the global function table of the first user-defined allocator.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.MaxNumCustomAllocators">
            <summary>
            Maximum number of user-defined allocators.
            </summary>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.NumGlobalScratchAllocators">
            <summary>
            Number of global scratchpad allocators reserved in the global function table.
            </summary>
            <remarks>Number of global scratchpad allocators reserved in the global function table. Make sure it is larger than or equals to MaxJobThreadCount + 1.</remarks>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.MaxNumGlobalAllocators">
            <summary>
            Max number of global allocators reserved in the global function table.
            </summary>
            <remarks>Max number of global allocators reserved in the global function table. Make sure it is larger than or equals to NumGlobalScratchAllocators.</remarks>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.GlobalAllocatorBaseIndex">
            <summary>
            Base index in the global function table for global allocators.
            </summary>
            <remarks>The indexes from `GlobalAllocatorBaseIndex` up to `MaxNumCustomAllocators` are reserved which
            should not be used for your own allocators.</remarks>
            <value>Base index in the global function table for global allocators.</value>
        </member>
        <member name="F:Unity.Collections.AllocatorManager.FirstGlobalScratchpadAllocatorIndex">
            <summary>
            Index in the global function table of the first global scratchpad allocator.
            </summary>
            <remarks>The indexes from `GlobalAllocatorBaseIndex` up to `NumGlobalScratchAllocators` are reserved for global scratchpad allocators.</remarks>
            <value>Index in the global function table of the first global scratchpad allocator.</value>
        </member>
        <member name="T:Unity.Collections.AllocatorHelper`1">
            <summary>
            Provides a wrapper for custom allocator.
            </summary>
            <typeparam name="T">The type of the allocator.</typeparam>
        </member>
        <member name="F:Unity.Collections.AllocatorHelper`1.m_allocator">
            <summary>
            Pointer to a custom allocator.
            </summary>
        </member>
        <member name="F:Unity.Collections.AllocatorHelper`1.m_backingAllocator">
            <summary>
            Allocator used to allocate backing storage of T.
            </summary>
        </member>
        <member name="P:Unity.Collections.AllocatorHelper`1.Allocator">
            <summary>
            Get the custom allocator.
            </summary>
        </member>
        <member name="M:Unity.Collections.AllocatorHelper`1.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle,System.Boolean,System.Int32)">
            <summary>
            Allocate the custom allocator from backingAllocator and register it.
            </summary>
            <param name="backingAllocator">Allocator used to allocate backing storage.</param>
            <param name="isGlobal">Flag indicating if the allocator is a global allocator.</param>
            <param name="globalIndex">Index into the global function table of the allocator to be created.</param>
        </member>
        <member name="M:Unity.Collections.AllocatorHelper`1.Dispose">
            <summary>
            Dispose the custom allocator backing memory and unregister it.
            </summary>
        </member>
        <member name="T:Unity.Collections.NativeReference`1">
            <summary>
            An unmanaged single value.
            </summary>
            <remarks>The functional equivalent of an array of length 1.
            When you need just one value, NativeReference can be preferable to an array because it better conveys the intent.</remarks>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.#ctor(Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of NativeReference.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.#ctor(`0,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeReference.
            </summary>
            <param name="allocator">The allocator to use.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="P:Unity.Collections.NativeReference`1.Value">
            <summary>
            The value stored in this reference.
            </summary>
            <param name="value">The new value to store in this reference.</param>
            <value>The value stored in this reference.</value>
        </member>
        <member name="P:Unity.Collections.NativeReference`1.IsCreated">
            <summary>
            Whether this reference has been allocated (and not yet deallocated).
            </summary>
            <value>True if this reference has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will release all resources (memory and safety handles) of this reference.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will release all resources (memory and safety handles) of this reference.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.CopyFrom(Unity.Collections.NativeReference{`0})">
            <summary>
            Copy the value of another reference to this reference.
            </summary>
            <param name="reference">The reference to copy from.</param>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.CopyTo(Unity.Collections.NativeReference{`0})">
            <summary>
            Copy the value of this reference to another reference.
            </summary>
            <param name="reference">The reference to copy to.</param>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.Equals(Unity.Collections.NativeReference{`0})">
            <summary>
            Returns true if the value stored in this reference is equal to the value stored in another reference.
            </summary>
            <param name="other">A reference to compare with.</param>
            <returns>True if the value stored in this reference is equal to the value stored in another reference.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.Equals(System.Object)">
            <summary>
            Returns true if the value stored in this reference is equal to an object.
            </summary>
            <remarks>Can only be equal if the object is itself a NativeReference.</remarks>
            <param name="obj">An object to compare with.</param>
            <returns>True if the value stored in this reference is equal to the object.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.GetHashCode">
            <summary>
            Returns the hash code of this reference.
            </summary>
            <returns>The hash code of this reference.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.op_Equality(Unity.Collections.NativeReference{`0},Unity.Collections.NativeReference{`0})">
            <summary>
            Returns true if the values stored in two references are equal.
            </summary>
            <param name="left">A reference.</param>
            <param name="right">Another reference.</param>
            <returns>True if the two values are equal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.op_Inequality(Unity.Collections.NativeReference{`0},Unity.Collections.NativeReference{`0})">
            <summary>
            Returns true if the values stored in two references are unequal.
            </summary>
            <param name="left">A reference.</param>
            <param name="right">Another reference.</param>
            <returns>True if the two values are unequal.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.Copy(Unity.Collections.NativeReference{`0},Unity.Collections.NativeReference{`0})">
            <summary>
            Copies the value of a reference to another reference.
            </summary>
            <param name="dst">The destination reference.</param>
            <param name="src">The source reference.</param>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.AsReadOnly">
            <summary>
            Returns a read-only reference aliasing the value of this reference.
            </summary>
            <returns>A read-only reference aliasing the value of this reference.</returns>
        </member>
        <member name="M:Unity.Collections.NativeReference`1.op_Implicit(Unity.Collections.NativeReference{`0})~Unity.Collections.NativeReference{`0}.ReadOnly">
            <summary>
            Returns a read-only native reference that aliases the content of a native reference.
            </summary>
            <param name="nativeReference">NativeReference to alias.</param>
            <returns>A read-only native reference that aliases the content of a native reference.</returns>
        </member>
        <member name="T:Unity.Collections.NativeReference`1.ReadOnly">
            <summary>
            A read-only alias for the value of a NativeReference. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeReference`1.ReadOnly.Value">
            <summary>
            The value aliased by this reference.
            </summary>
            <value>The value aliased by the reference.</value>
        </member>
        <member name="T:Unity.Collections.NativeRingQueue`1">
            <summary>
            A fixed-size circular buffer. For single-threaded uses only.
            </summary>
            <remarks>
            This container can't be used in parallel jobs, just on single-thread (for example: main thread, or single IJob).
            </remarks>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:Unity.Collections.NativeRingQueue`1.IsCreated">
            <summary>
            Whether this queue has been allocated (and not yet deallocated).
            </summary>
            <value>True if this queue has been allocated (and not yet deallocated).</value>
        </member>
        <member name="P:Unity.Collections.NativeRingQueue`1.IsEmpty">
            <summary>
            Whether the queue is empty.
            </summary>
            <value>True if the queue is empty or the queue has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeRingQueue`1.Length">
            <summary>
            The number of elements currently in this queue.
            </summary>
            <value>The number of elements currently in this queue.</value>
        </member>
        <member name="P:Unity.Collections.NativeRingQueue`1.Capacity">
            <summary>
            The number of elements that fit in the internal buffer.
            </summary>
            <value>The number of elements that fit in the internal buffer.</value>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of NativeRingQueue.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this queue.
            </summary>
            <param name="inputDeps">The handle of a job which the new job will depend upon.</param>
            <returns>The handle of a new job that will dispose this queue. The new job depends upon inputDeps.</returns>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.TryEnqueue(`0)">
            <summary>
            Adds an element at the front of the queue.
            </summary>
            <remarks>Does nothing if the queue is full.</remarks>
            <param name="value">The value to be added.</param>
            <returns>True if the value was added.</returns>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.Enqueue(`0)">
            <summary>
            Adds an element at the front of the queue.
            </summary>
            <param name="value">The value to be added.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue was full.</exception>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.TryDequeue(`0@)">
            <summary>
            Removes the element from the end of the queue.
            </summary>
            <remarks>Does nothing if the queue is empty.</remarks>
            <param name="item">Outputs the element removed.</param>
            <returns>True if an element was removed.</returns>
        </member>
        <member name="M:Unity.Collections.NativeRingQueue`1.Dequeue">
            <summary>
            Removes the element from the end of the queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue was empty.</exception>
            <returns>Returns the removed element.</returns>
        </member>
        <member name="T:Unity.Collections.FixedString">
            <summary>
            Provides formatting methods for FixedString*N*.
            </summary>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Int32,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Int32,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Single,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Single,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Single,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.String,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.String,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.String,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.String,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,``0,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,``0,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,``0,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,``1,``2,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Int32,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Int32,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Single,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Single,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Single,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.String,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.String,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.String,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.String,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,``0,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,``0,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,``0,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,``1,``2,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.Single,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString512Bytes,System.String,System.String,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,``0,System.String,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,``0,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,``0,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,``1,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Int32,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Int32,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Single,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Single,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Single,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.String,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.String,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.String,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.String,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,``0,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,``0,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,``0,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,``1,``2,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.String,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,``0,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,``1,System.Int32,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Single,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.String,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.String,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,``0,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,``0,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,``1,System.Single,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Int32,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Int32,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.Single,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.Single,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.Single,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Int32,System.String,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.Single,System.String,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString512Bytes,System.String,System.String,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,``0,System.String,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,``0,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,``0,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,``0,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,``1,System.String,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,System.Int32,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,System.Int32,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,System.Int32,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,System.Int32,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,System.Single,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,System.Single,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,System.Single,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,System.Single,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Int32,System.String,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.Single,System.String,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString512Bytes,System.String,System.String,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,``0,System.String,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,System.Int32,``0,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,System.Single,``0,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString512Bytes,System.String,``0,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``4(Unity.Collections.FixedString512Bytes,``0,``1,``2,``3)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
             <typeparam name="T4"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <param name="arg3">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,``1,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,``1,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,``1,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,System.Int32,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,System.Single,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,System.String,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,System.Int32,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,System.Single,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,System.String,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``3(Unity.Collections.FixedString128Bytes,``0,``1,``2)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
             <typeparam name="T3"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <param name="arg2">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Int32,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.Single,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,System.String,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``2(Unity.Collections.FixedString128Bytes,``0,``1)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
             <typeparam name="T2"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <param name="arg1">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Int32)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.Single)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format(Unity.Collections.FixedString128Bytes,System.String)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
            <param name="arg0">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="M:Unity.Collections.FixedString.Format``1(Unity.Collections.FixedString128Bytes,``0)">
             <summary>
             Returns a new string produced by interpolating a format string.
             </summary>
             <remarks>
             Similar to StringBuilder.AppendFormat but with significant limitations:
             - Only supports numeric format placeholders of the form `{0}` .. `{N}`.
             - No format modifiers (*e.g.* `{0:x}`) are supported.
            
             The various overloads of this method take up to four values for interpolation. The allowed argument types are:
             - FixedString*N*Bytes
             - string
             - int
             - float
             - structs implementing INativeList&lt;byte&gt; and IUTF8Bytes
            
             <seealso cref="M:Unity.Collections.FixedStringMethods.AppendFormat``3(``0@,``1@,``2@)"/>
             </remarks>
             <param name="formatString">The format string.</param>
             <typeparam name="T1"><undoc /></typeparam>
            <param name="arg0">Value to interpolate into the format string.</param>
            <returns>A new string produced by interpolating the format string.</returns>
        </member>
        <member name="T:Unity.Collections.INativeDisposable">
            <summary>
            For scheduling release of unmanaged resources.
            </summary>
        </member>
        <member name="M:Unity.Collections.INativeDisposable.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will release all resources (memory and safety handles) of this collection.
            </summary>
            <param name="inputDeps">A job handle which the newly scheduled job will depend upon.</param>
            <returns>The handle of a new job that will release all resources (memory and safety handles) of this collection.</returns>
        </member>
        <member name="T:Unity.Collections.CollectionHelper">
            <summary>
            Provides helper methods for collections.
            </summary>
        </member>
        <member name="F:Unity.Collections.CollectionHelper.CacheLineSize">
            <summary>
            The size in bytes of the current platform's L1 cache lines.
            </summary>
            <value>The size in bytes of the current platform's L1 cache lines.</value>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.Log2Floor(System.Int32)">
            <summary>
            Returns the binary logarithm of the `value`, but the result is rounded down to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <returns>The binary logarithm of the `value`, but the result is rounded down to the nearest integer.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.Log2Ceil(System.Int32)">
            <summary>
            Returns the binary logarithm of the `value`, but the result is rounded up to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <returns>The binary logarithm of the `value`, but the result is rounded up to the nearest integer.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.Align(System.Int32,System.Int32)">
            <summary>
            Returns an allocation size in bytes that factors in alignment.
            </summary>
            <example><code>
            // 55 aligned to 16 is 64.
            int size = CollectionHelper.Align(55, 16);
            </code></example>
            <param name="size">The size to align.</param>
            <param name="alignmentPowerOfTwo">A non-zero, positive power of two.</param>
            <returns>The smallest integer that is greater than or equal to `size` and is a multiple of `alignmentPowerOfTwo`.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `alignmentPowerOfTwo` is not a non-zero, positive power of two.</exception>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.Align(System.UInt64,System.UInt64)">
            <summary>
            Returns an allocation size in bytes that factors in alignment.
            </summary>
            <example><code>
            // 55 aligned to 16 is 64.
            ulong size = CollectionHelper.Align(55, 16);
            </code></example>
            <param name="size">The size to align.</param>
            <param name="alignmentPowerOfTwo">A non-zero, positive power of two.</param>
            <returns>The smallest integer that is greater than or equal to `size` and is a multiple of `alignmentPowerOfTwo`.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `alignmentPowerOfTwo` is not a non-zero, positive power of two.</exception>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.IsAligned(System.Void*,System.Int32)">
            <summary>
            Returns true if the address represented by the pointer has a given alignment.
            </summary>
            <param name="p">The pointer.</param>
            <param name="alignmentPowerOfTwo">A non-zero, positive power of two.</param>
            <returns>True if the address is a multiple of `alignmentPowerOfTwo`.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `alignmentPowerOfTwo` is not a non-zero, positive power of two.</exception>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.IsAligned(System.UInt64,System.Int32)">
            <summary>
            Returns true if an offset has a given alignment.
            </summary>
            <param name="offset">An offset</param>
            <param name="alignmentPowerOfTwo">A non-zero, positive power of two.</param>
            <returns>True if the offset is a multiple of `alignmentPowerOfTwo`.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `alignmentPowerOfTwo` is not a non-zero, positive power of two.</exception>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.IsPowerOfTwo(System.Int32)">
            <summary>
            Returns true if a positive value is a non-zero power of two.
            </summary>
            <remarks>Result is invalid if `value &lt; 0`.</remarks>
            <param name="value">A positive value.</param>
            <returns>True if the value is a non-zero, positive power of two.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.Hash(System.Void*,System.Int32)">
            <summary>
            Returns a (non-cryptographic) hash of a memory block.
            </summary>
            <remarks>The hash function used is [djb2](http://web.archive.org/web/20190508211657/http://www.cse.yorku.ca/~oz/hash.html).</remarks>
            <param name="ptr">A buffer.</param>
            <param name="bytes">The number of bytes to hash.</param>
            <returns>A hash of the bytes.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.AssumePositive(System.Int32)">
            <summary>
            Tell Burst that an integer can be assumed to map to an always positive value.
            </summary>
            <param name="value">The integer that is always positive.</param>
            <returns>Returns `x`, but allows the compiler to assume it is always positive.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateNativeArray``2(System.Int32,``1@,Unity.Collections.NativeArrayOptions)">
            <summary>
            Create a NativeArray, using a provided allocator that implements IAllocator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of allocator.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Options for allocation, such as whether to clear the memory.</param>
            <returns>Returns the NativeArray that was created.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateNativeArray``1(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Create a NativeArray, using a provided AllocatorHandle.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <param name="allocator">The AllocatorHandle to use.</param>
            <param name="options">Options for allocation, such as whether to clear the memory.</param>
            <returns>Returns the NativeArray that was created.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateNativeArray``1(Unity.Collections.NativeArray{``0},Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Create a NativeArray from another NativeArray, using a provided AllocatorHandle.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The NativeArray to make a copy of.</param>
            <param name="allocator">The AllocatorHandle to use.</param>
            <returns>Returns the NativeArray that was created.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateNativeArray``1(``0[],Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Create a NativeArray from a managed array, using a provided AllocatorHandle.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The managed array to make a copy of.</param>
            <param name="allocator">The AllocatorHandle to use.</param>
            <returns>Returns the NativeArray that was created.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateNativeArray``2(``0[],``1@)">
            <summary>
            Create a NativeArray from a managed array, using a provided Allocator.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="U">The type of allocator.</typeparam>
            <param name="array">The managed array to make a copy of.</param>
            <param name="allocator">The Allocator to use.</param>
            <returns>Returns the NativeArray that was created.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.DisposeNativeArray``1(Unity.Collections.NativeArray{``0},Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Dispose a NativeArray from an AllocatorHandle where it is allocated.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="nativeArray">The NativeArray to make a copy of.</param>
            <param name="allocator">The AllocatorHandle used to allocate the NativeArray.</param>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.Dispose``1(Unity.Collections.NativeArray{``0})">
            <summary>
            Dispose a NativeArray from an AllocatorHandle where it is allocated.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="nativeArray">The NativeArray to be disposed.</param>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.ConvertExistingDataToNativeArray``1(System.Void*,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,System.Boolean)">
            <summary>
            Convert existing data into a NativeArray.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="dataPointer">Pointer to the data to be converted.</param>
            <param name="length">The count of elements.</param>
            <param name="allocator">The Allocator to use.</param>
            <param name="setTempMemoryHandle">Use temporary memory atomic safety handle.</param>
            <returns>Returns the NativeArray that was created.</returns>
            <remarks>The caller is still the owner of the data.</remarks>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.ConvertExistingNativeListToNativeArray``1(Unity.Collections.NativeList{``0}@,System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Convert NativeList into a NativeArray.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="nativeList">NativeList to be converted.</param>
            <param name="length">The count of elements.</param>
            <param name="allocator">The Allocator to use.</param>
            <returns>Returns the NativeArray that was created.</returns>
            <remarks>There is a caveat if users would like to transfer memory ownership from the NativeList to the converted NativeArray.
            NativeList implementation includes two memory allocations, one holds its header, another holds the list data.
            After convertion, the converted NativeArray holds the list data and dispose the array only free the list data.
            Users need to manually free the list header to avoid memory leaks, for example after convertion call,
            AllocatorManager.Free(allocator, nativeList.m_ListData); </remarks>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateNativeParallelMultiHashMap``3(System.Int32,``2@)">
            <summary>
            Create a NativeParallelMultiHashMap from a managed array, using a provided Allocator.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="U">The type of allocator.</typeparam>
            <param name="length">The desired capacity of the NativeParallelMultiHashMap.</param>
            <param name="allocator">The Allocator to use.</param>
            <returns>Returns the NativeParallelMultiHashMap that was created.</returns>
        </member>
        <member name="T:Unity.Collections.CollectionHelper.DummyJob">
            <summary>
            Empty job type used for Burst compilation testing
            </summary>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.DummyJob.Execute">
            <summary>
            Empty job execute function used for Burst compilation testing
            </summary>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CheckReflectionDataCorrect``1(System.IntPtr)">
            <summary>
            Checks that reflection data was properly registered for a job.
            </summary>
            <remarks>This should be called before instantiating JobsUtility.JobScheduleParameters in order to report to the user if they need to take action.</remarks>
            <param name="reflectionData">The reflection data pointer.</param>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.CreateSafetyHandle(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Creates a new AtomicSafetyHandle that is valid until [[CollectionHelper.DisposeSafetyHandle]] is called.
            </summary>
            <param name="allocator">The AllocatorHandle to use.</param>
            <returns>Safety handle.</returns>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.DisposeSafetyHandle(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle@)">
            <summary>
            Disposes a previously created AtomicSafetyHandle.
            </summary>
            <param name="handle">Safety handle.</param>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.SetStaticSafetyId``1(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle@,System.Int32@)">
            <summary>
            Assigns the provided static safety ID to an [[AtomicSafetyHandle]]. The ID's owner type name and any custom error messages are used by the job debugger when reporting errors involving the target handle.
            </summary>
            <remarks>This is preferable to AtomicSafetyHandle.NewStaticSafetyId as it is compatible with burst.</remarks>
            <typeparam name="T">Type of container safety handle refers to.</typeparam>
            <param name="handle">Safety handle.</param>
            <param name="sharedStaticId">The static safety ID to associate with the provided handle. This ID must have been allocated with ::ref::NewStaticSafetyId.</param>
        </member>
        <member name="M:Unity.Collections.CollectionHelper.SetStaticSafetyId(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle@,System.Int32@,Unity.Collections.FixedString512Bytes)">
            <summary>
            Assigns the provided static safety ID to an [[AtomicSafetyHandle]]. The ID's owner type name and any custom error messages are used by the job debugger when reporting errors involving the target handle.
            </summary>
            <remarks>This is preferable to AtomicSafetyHandle.NewStaticSafetyId as it is compatible with burst.</remarks>
            <param name="handle">Safety handle.</param>
            <param name="sharedStaticId">The static safety ID to associate with the provided handle. This ID must have been allocated with ::ref::NewStaticSafetyId.</param>
            <param name="name">The name of the resource type.</param>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashSet`1">
            <summary>
            An unordered, expandable set of unique values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeParallelHashSet.
            </summary>
            <param name="capacity">The number of values that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.IsEmpty">
            <summary>
            Whether this set is empty.
            </summary>
            <value>True if this set is empty or if the set has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Count">
            <summary>
            Returns the current number of values in this set.
            </summary>
            <returns>The current number of values in this set.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.Capacity">
            <summary>
            The number of values that fit in the current allocation.
            </summary>
            <value>The number of values that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.IsCreated">
            <summary>
            Whether this set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this set.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this set.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Clear">
            <summary>
            Removes all values.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Add(`0)">
            <summary>
            Adds a new value (unless it is already present).
            </summary>
            <param name="item">The value to add.</param>
            <returns>True if the value was not already present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Remove(`0)">
            <summary>
            Removes a particular value.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Contains(`0)">
            <summary>
            Returns true if a particular value is present.
            </summary>
            <param name="item">The value to check for.</param>
            <returns>True if the value was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of this set's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of the set's values.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.AsParallelWriter">
            <summary>
            Returns a parallel writer.
            </summary>
            <returns>A parallel writer.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashSet`1.ParallelWriter">
            <summary>
            A parallel writer for a NativeParallelHashSet.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.NativeParallelHashSet`1.AsParallelWriter"/> to create a parallel writer for a set.
            </remarks>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.ParallelWriter.Capacity">
            <summary>
            The number of values that fit in the current allocation.
            </summary>
            <value>The number of values that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ParallelWriter.Add(`0)">
            <summary>
            Adds a new value (unless it is already present).
            </summary>
            <param name="item">The value to add.</param>
            <returns>True if the value is not already present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator over the values of this set.
            </summary>
            <returns>An enumerator over the values of this set.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashSet`1.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashSet`1.Enumerator">
            <summary>
            An enumerator over the values of a set.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.NativeParallelHashSet`1.Enumerator.Current"/> is invalid.
            The first <see cref="M:Unity.Collections.NativeParallelHashSet`1.Enumerator.MoveNext"/> call advances the enumerator to the first value.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next value.
            </summary>
            <returns>True if `Current` is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.Enumerator.Current">
            <summary>
            The current value.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator in the container.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.AsReadOnly">
            <summary>
            Returns a readonly version of this NativeParallelHashSet instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the NativeParallelHashSet it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashSet`1.ReadOnly">
            <summary>
            A read-only alias for the value of a NativeParallelHashSet. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.ReadOnly.IsEmpty">
            <summary>
            Whether this hash set is empty.
            </summary>
            <value>True if this hash set is empty or if the map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.Count">
            <summary>
            The current number of items in this hash set.
            </summary>
            <returns>The current number of items in this hash set.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.ReadOnly.Capacity">
            <summary>
            The number of items that fit in the current allocation.
            </summary>
            <value>The number of items that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.Contains(`0)">
            <summary>
            Returns true if a given item is present in this hash set.
            </summary>
            <param name="item">The item to look up.</param>
            <returns>True if the item was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.ToNativeArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash set's items (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash set's items (in no particular order).</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashSet`1.ReadOnly.IsCreated">
            <summary>
            Whether this hash set has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash set has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the items of this hash set.
            </summary>
            <returns>An enumerator over the items of this hash set.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashSet`1.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeBitArray">
            <summary>
            An arbitrarily-sized array of bits.
            </summary>
            <remarks>
            The number of allocated bytes is always a multiple of 8. For example, a 65-bit array could fit in 9 bytes, but its allocation is actually 16 bytes.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of NativeBitArray.
            </summary>
            <param name="numBits">The number of bits.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="P:Unity.Collections.NativeBitArray.IsCreated">
            <summary>
            Whether this array has been allocated (and not yet deallocated).
            </summary>
            <value>True if this array has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Resize(System.Int32,Unity.Collections.NativeArrayOptions)">
            <summary>
            Sets the length, expanding the capacity if necessary.
            </summary>
            <param name="numBits">The new length in bits.</param>
            <param name="options">Whether newly allocated data should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.SetCapacity(System.Int32)">
            <summary>
            Sets the capacity.
            </summary>
            <param name="capacityInBits">The new capacity.</param>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.TrimExcess">
            <summary>
            Sets the capacity to match what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this array.
            </summary>
            <param name="inputDeps">The handle of a job which the new job will depend upon.</param>
            <returns>The handle of a new job that will dispose this array. The new job depends upon inputDeps.</returns>
        </member>
        <member name="P:Unity.Collections.NativeBitArray.Length">
            <summary>
            Returns the number of bits.
            </summary>
            <value>The number of bits.</value>
        </member>
        <member name="P:Unity.Collections.NativeBitArray.Capacity">
            <summary>
            Returns the capacity number of bits.
            </summary>
            <value>The capacity number of bits.</value>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Clear">
            <summary>
            Sets all the bits to 0.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.AsNativeArray``1">
            <summary>
            Returns a native array that aliases the content of this array.
            </summary>
            <typeparam name="T">The type of elements in the aliased array.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown if the number of bits in this array
            is not evenly divisible by the size of T in bits (`sizeof(T) * 8`).</exception>
            <returns>A native array that aliases the content of this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Set(System.Int32,System.Boolean)">
            <summary>
            Sets the bit at an index to 0 or 1.
            </summary>
            <param name="pos">Index of the bit to set.</param>
            <param name="value">True for 1, false for 0.</param>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.SetBits(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets a range of bits to 0 or 1.
            </summary>
            <remarks>
            The range runs from index `pos` up to (but not including) `pos + numBits`.
            No exception is thrown if `pos + numBits` exceeds the length.
            </remarks>
            <param name="pos">Index of the first bit to set.</param>
            <param name="value">True for 1, false for 0.</param>
            <param name="numBits">Number of bits to set.</param>
            <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.SetBits(System.Int32,System.UInt64,System.Int32)">
             <summary>
             Copies bits of a ulong to bits in this array.
             </summary>
             <remarks>
             The destination bits in this array run from index pos up to (but not including) `pos + numBits`.
             No exception is thrown if `pos + numBits` exceeds the length.
            
             The lowest bit of the ulong is copied to the first destination bit; the second-lowest bit of the ulong is
             copied to the second destination bit; and so forth.
             </remarks>
             <param name="pos">Index of the first bit to set.</param>
             <param name="value">Unsigned long from which to copy bits.</param>
             <param name="numBits">Number of bits to set (must be between 1 and 64).</param>
             <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is not between 1 and 64.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.GetBits(System.Int32,System.Int32)">
             <summary>
             Returns a ulong which has bits copied from this array.
             </summary>
             <remarks>
             The source bits in this array run from index pos up to (but not including) `pos + numBits`.
             No exception is thrown if `pos + numBits` exceeds the length.
            
             The first source bit is copied to the lowest bit of the ulong; the second source bit is copied to the second-lowest bit of the ulong; and so forth. Any remaining bits in the ulong will be 0.
             </remarks>
             <param name="pos">Index of the first bit to get.</param>
             <param name="numBits">Number of bits to get (must be between 1 and 64).</param>
             <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is not between 1 and 64.</exception>
             <returns>A ulong which has bits copied from this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.IsSet(System.Int32)">
            <summary>
            Returns true if the bit at an index is 1.
            </summary>
            <param name="pos">Index of the bit to test.</param>
            <returns>True if the bit at the index is 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Copy(System.Int32,System.Int32,System.Int32)">
             <summary>
             Copies a range of bits from this array to another range in this array.
             </summary>
             <remarks>
             The bits to copy run from index `srcPos` up to (but not including) `srcPos + numBits`.
             The bits to set run from index `dstPos` up to (but not including) `dstPos + numBits`.
            
             The ranges may overlap, but the result in the overlapping region is undefined.
             </remarks>
             <param name="dstPos">Index of the first bit to set.</param>
             <param name="srcPos">Index of the first bit to copy.</param>
             <param name="numBits">Number of bits to copy.</param>
             <exception cref="T:System.ArgumentException">Thrown if either `dstPos + numBits` or `srcPos + numBits` exceed the length of this array.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Copy(System.Int32,Unity.Collections.NativeBitArray@,System.Int32,System.Int32)">
             <summary>
             Copies a range of bits from an array to a range of bits in this array.
             </summary>
             <remarks>
             The bits to copy in the source array run from index srcPos up to (but not including) `srcPos + numBits`.
             The bits to set in the destination array run from index dstPos up to (but not including) `dstPos + numBits`.
            
             When the source and destination are the same array, the ranges may still overlap, but the result in the overlapping region is undefined.
             </remarks>
             <param name="dstPos">Index of the first bit to set.</param>
             <param name="srcBitArray">The source array.</param>
             <param name="srcPos">Index of the first bit to copy.</param>
             <param name="numBits">The number of bits to copy.</param>
             <exception cref="T:System.ArgumentException">Thrown if either `dstPos + numBits` or `srcBitArray + numBits` exceed the length of this array.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Find(System.Int32,System.Int32)">
            <summary>
            Finds the first length-*N* contiguous sequence of 0 bits in this bit array.
            </summary>
            <param name="pos">Index at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <returns>The index in this array where the sequence is found. The index will be greater than or equal to `pos`.
            Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.Find(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the first length-*N* contiguous sequence of 0 bits in this bit array. Searches only a subsection.
            </summary>
            <param name="pos">Index at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <param name="count">Number of bits to search.</param>
            <returns>The index in this array where the sequence is found. The index will be greater than or equal to `pos` but less than `pos + count`.
            Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.TestNone(System.Int32,System.Int32)">
            <summary>
            Returns true if none of the bits in a range are 1 (*i.e.* all bits in the range are 0).
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>Returns true if none of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.TestAny(System.Int32,System.Int32)">
            <summary>
            Returns true if at least one of the bits in a range is 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if one ore more of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.TestAll(System.Int32,System.Int32)">
            <summary>
            Returns true if all of the bits in a range are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if all of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.CountBits(System.Int32,System.Int32)">
            <summary>
            Returns the number of bits in a range that are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>The number of bits in a range of bits that are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.AsReadOnly">
            <summary>
            Returns a readonly version of this NativeBitArray instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the NativeBitArray it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.NativeBitArray.ReadOnly">
            <summary>
            A read-only alias for the value of a UnsafeBitArray. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeBitArray.ReadOnly.Length">
            <summary>
            Returns the number of bits.
            </summary>
            <value>The number of bits.</value>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.GetBits(System.Int32,System.Int32)">
             <summary>
             Returns a ulong which has bits copied from this array.
             </summary>
             <remarks>
             The source bits in this array run from index pos up to (but not including) `pos + numBits`.
             No exception is thrown if `pos + numBits` exceeds the length.
            
             The first source bit is copied to the lowest bit of the ulong; the second source bit is copied to the second-lowest bit of the ulong; and so forth. Any remaining bits in the ulong will be 0.
             </remarks>
             <param name="pos">Index of the first bit to get.</param>
             <param name="numBits">Number of bits to get (must be between 1 and 64).</param>
             <exception cref="T:System.ArgumentException">Thrown if pos is out of bounds or if numBits is not between 1 and 64.</exception>
             <returns>A ulong which has bits copied from this array.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.IsSet(System.Int32)">
            <summary>
            Returns true if the bit at an index is 1.
            </summary>
            <param name="pos">Index of the bit to test.</param>
            <returns>True if the bit at the index is 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.Find(System.Int32,System.Int32)">
            <summary>
            Finds the first length-*N* contiguous sequence of 0 bits in this bit array.
            </summary>
            <param name="pos">Index at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <returns>The index in this array where the sequence is found. The index will be greater than or equal to `pos`.
            Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.Find(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the first length-*N* contiguous sequence of 0 bits in this bit array. Searches only a subsection.
            </summary>
            <param name="pos">Index at which to start searching.</param>
            <param name="numBits">Number of contiguous 0 bits to look for.</param>
            <param name="count">Number of bits to search.</param>
            <returns>The index in this array where the sequence is found. The index will be greater than or equal to `pos` but less than `pos + count`.
            Returns -1 if no occurrence is found.</returns>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.TestNone(System.Int32,System.Int32)">
            <summary>
            Returns true if none of the bits in a range are 1 (*i.e.* all bits in the range are 0).
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>Returns true if none of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.TestAny(System.Int32,System.Int32)">
            <summary>
            Returns true if at least one of the bits in a range is 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if one ore more of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.TestAll(System.Int32,System.Int32)">
            <summary>
            Returns true if all of the bits in a range are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>True if all of the bits in range `pos` up to (but not including) `pos + numBits` are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.NativeBitArray.ReadOnly.CountBits(System.Int32,System.Int32)">
            <summary>
            Returns the number of bits in a range that are 1.
            </summary>
            <param name="pos">Index of the bit at which to start searching.</param>
            <param name="numBits">Number of bits to test. Defaults to 1.</param>
            <returns>The number of bits in a range of bits that are 1.</returns>
            <exception cref="T:System.ArgumentException">Thrown if `pos` is out of bounds or `numBits` is less than 1.</exception>
        </member>
        <member name="M:Unity.Collections.Spinner.Acquire">
            <summary>
            Continually spin until the lock can be acquired.
            </summary>
        </member>
        <member name="M:Unity.Collections.Spinner.TryAcquire">
            <summary>
            Try to acquire the lock and immediately return without spinning.
            </summary>
            <returns><see langword="true"/> if the lock was acquired, <see langword="false"/> otherwise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Unity.Collections.Spinner.TryAcquire(System.Boolean)" -->
        <member name="M:Unity.Collections.Spinner.Release">
            <summary>
            Release the lock
            </summary>
        </member>
        <member name="T:Unity.Collections.RewindableAllocator">
            <summary>
            An allocator that is fast like a linear allocator, is threadsafe, and automatically invalidates
            all allocations made from it, when "rewound" by the user.
            </summary>
        </member>
        <member name="F:Unity.Collections.RewindableAllocator.kMinMemoryBlockSize">
            Minimum memory block size, 128KB.
        </member>
        <member name="F:Unity.Collections.RewindableAllocator.kMaxNumBlocks">
            Maximum number of memory blocks.
        </member>
        <member name="M:Unity.Collections.RewindableAllocator.Initialize(System.Int32,System.Boolean)">
            <summary>
            Initializes the allocator. Must be called before first use.
            </summary>
            <param name="initialSizeInBytes">The initial capacity of the allocator, in bytes</param>
            <param name="enableBlockFree">A flag indicating if allocator enables individual block free</param>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.EnableBlockFree">
            <summary>
            Property to get and set enable block free flag, a flag indicating whether the allocator should enable individual block to be freed.
            </summary>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.BlocksAllocated">
            <summary>
            Retrieves the number of memory blocks that the allocator has requested from the system.
            </summary>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.InitialSizeInBytes">
            <summary>
            Retrieves the size of the initial memory block, as requested in the Initialize function.
            </summary>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.MaxMemoryBlockSize">
            <summary>
            Retrieves the maximum memory block size.
            </summary>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.BytesAllocated">
            <summary>
            Retrieves the total bytes of the memory blocks allocated by this allocator.
            </summary>
        </member>
        <member name="M:Unity.Collections.RewindableAllocator.Rewind">
            <summary>
            Rewind the allocator; invalidate all allocations made from it, and potentially also free memory blocks
            it has allocated from the system.
            </summary>
        </member>
        <member name="M:Unity.Collections.RewindableAllocator.Dispose">
            <summary>
            Dispose the allocator. This must be called to free the memory blocks that were allocated from the system.
            </summary>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.Function">
            <summary>
            All allocators must implement this property, in order to be installed in the custom allocator table.
            </summary>
        </member>
        <member name="M:Unity.Collections.RewindableAllocator.Try(Unity.Collections.AllocatorManager.Block@)">
            <summary>
            Try to allocate, free, or reallocate a block of memory. This is an internal function, and
            is not generally called by the user.
            </summary>
            <param name="block">The memory block to allocate, free, or reallocate</param>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.Handle">
            <summary>
            Retrieve the AllocatorHandle associated with this allocator. The handle is used as an index into a
            global table, for times when a reference to the allocator object isn't available.
            </summary>
            <value>The AllocatorHandle retrieved.</value>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.ToAllocator">
            <summary>
            Retrieve the Allocator associated with this allocator.
            </summary>
            <value>The Allocator retrieved.</value>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.IsCustomAllocator">
            <summary>
            Check whether this AllocatorHandle is a custom allocator.
            </summary>
            <value>True if this AllocatorHandle is a custom allocator.</value>
        </member>
        <member name="P:Unity.Collections.RewindableAllocator.IsAutoDispose">
            <summary>
            Check whether this allocator will automatically dispose allocations.
            </summary>
            <remarks>Allocations made by Rewindable allocator are automatically disposed.</remarks>
            <value>Always true</value>
        </member>
        <member name="M:Unity.Collections.RewindableAllocator.AllocateNativeArray``1(System.Int32)">
            <summary>
            Allocate a NativeArray of type T from memory that is guaranteed to remain valid until the end of the
            next Update of this World. There is no need to Dispose the NativeArray so allocated. It is not possible
            to free the memory by Disposing it - it is automatically freed after the end of the next Update for this
            World.
            </summary>
            <typeparam name="T">The element type of the NativeArray to allocate.</typeparam>
            <param name="length">The length of the NativeArray to allocate, measured in elements.</param>
            <returns>The NativeArray allocated by this function.</returns>
        </member>
        <member name="M:Unity.Collections.RewindableAllocator.AllocateNativeList``1(System.Int32)">
            <summary>
            Allocate a NativeList of type T from memory that is guaranteed to remain valid until the end of the
            next Update of this World. There is no need to Dispose the NativeList so allocated. It is not possible
            to free the memory by Disposing it - it is automatically freed after the end of the next Update for this
            World. The NativeList must be initialized with its maximum capacity; if it were to dynamically resize,
            up to 1/2 of the total final capacity would be wasted, because the memory can't be dynamically freed.
            </summary>
            <typeparam name="T">The element type of the NativeList to allocate.</typeparam>
            <param name="capacity">The capacity of the NativeList to allocate, measured in elements.</param>
            <returns>The NativeList allocated by this function.</returns>
        </member>
        <member name="F:Unity.Collections.Telemetry.AllocatorTypesToTrack">
            <summary>
            Track only allocator type names for allocators that have been registered here.
            </summary>
        </member>
        <member name="T:Unity.Collections.BurstCompatibleAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute">
            <summary>
            Documents and enforces (via generated tests) that the tagged method or property has to stay burst compatible.
            </summary>
            <remarks>This attribute cannot be used with private methods or properties.</remarks>
        </member>
        <member name="T:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.BurstCompatibleCompileTarget">
            <summary>
            Burst compatible compile target.
            </summary>
        </member>
        <member name="F:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.BurstCompatibleCompileTarget.Player">
            <summary>
            Player.
            </summary>
        </member>
        <member name="F:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.BurstCompatibleCompileTarget.Editor">
            <summary>
            Editor.
            </summary>
        </member>
        <member name="F:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.BurstCompatibleCompileTarget.PlayerAndEditor">
            <summary>
            Player and editor.
            </summary>
        </member>
        <member name="P:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.GenericTypeArguments">
            <summary>
            Types to be used for the declared generic type or method.
            </summary>
            <remarks>
            The generic type arguments are tracked separately for types and methods. Say a generic type also contains
            a generic method, like in the case of Foo&lt;T&gt;.Bar&lt;U&gt;(T baz, U blah). You must specify
            GenericTypeArguments for Foo and also for Bar to establish the concrete types for T and U. When code
            generation occurs for the Burst compatibility tests, any time T appears (in the definition of Foo)
            it will be replaced with the generic type argument you specified for Foo and whenever U appears
            (in method Bar's body) it will be replaced by whatever generic type argument you specified for the method
            Bar.
            </remarks>
        </member>
        <member name="F:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.RequiredUnityDefine">
            <summary>
            Specifies the symbol that must be defined in order for the method to be tested for Burst compatibility.
            </summary>
        </member>
        <member name="F:Unity.Collections.GenerateTestsForBurstCompatibilityAttribute.CompileTarget">
             <summary>
             Specifies whether code should be Burst compiled for the player, editor, or both.
             </summary>
             <remarks>
             When set to BurstCompatibleCompileTarget.Editor, the generated Burst compatibility code will be
             surrounded by #if UNITY_EDITOR to ensure that the Burst compatibility test will only be executed in the
             editor. The code will be compiled with Burst function pointers. If you have a non-null RequiredUnityDefine,
             an #if with the RequiredUnityDefine will also be emitted.<para/> <para/>
            
             When set to BurstCompatibilityCompileTarget.Player, the generated Burst compatibility code will
             only be surrounded by an #if containing the RequiredUnityDefine (or nothing if RequiredUnityDefine is null).
             Instead of compiling with Burst function pointers, a player build is started where the Burst AOT compiler
             will verify the Burst compatibility. This is done to speed up Burst compilation for the compatibility tests
             since Burst function pointer compilation is not done in parallel.<para/> <para/>
            
             When set to BurstCompatibilityCompileTarget.PlayerAndEditor, the generated Burst compatibility code will
             only be surrounded by an #if containing the RequiredUnityDefine (or nothing if RequiredUnityDefine is null).
             The code will be compiled both by the editor (using Burst function pointers) and with a player build (using
             Burst AOT).<para/> <para/>
            
             For best performance of the Burst compatibility tests, prefer to use BurstCompatibilityCompileTarget.Player
             as much as possible.
             </remarks>
        </member>
        <member name="T:Unity.Collections.ExcludeFromBurstCompatTestingAttribute">
            <summary>
            Attribute to exclude a method from burst compatibility testing even though the containing type is.
            </summary>
        </member>
        <member name="P:Unity.Collections.ExcludeFromBurstCompatTestingAttribute.Reason">
            <summary>
            Reason for excluding a method from being included in generated Burst compilation tests
            </summary>
        </member>
        <member name="M:Unity.Collections.ExcludeFromBurstCompatTestingAttribute.#ctor(System.String)">
            <summary>
            Create this attribute with the reason to exclude from burst compatibility testing.
            </summary>
            <param name="_reason">Reason target is not burst compatible.</param>
        </member>
        <member name="M:Unity.Collections.AutoFreeAllocator.Dispose">
            <summary>
            Dispose the allocator. This must be called to free the memory blocks that were allocated from the system.
            </summary>
        </member>
        <member name="P:Unity.Collections.AutoFreeAllocator.Function">
            <summary>
            The allocator function. It can allocate, deallocate, or reallocate.
            </summary>
        </member>
        <member name="M:Unity.Collections.AutoFreeAllocator.Try(Unity.Collections.AllocatorManager.Block@)">
            <summary>
            Invoke the allocator function.
            </summary>
            <param name="block">The block to allocate, deallocate, or reallocate. See <see cref="M:Unity.Collections.AllocatorManager.Try(Unity.Collections.AllocatorManager.Block@)"/></param>
            <returns>0 if successful. Otherwise, returns the error code from the allocator function.</returns>
        </member>
        <member name="P:Unity.Collections.AutoFreeAllocator.Handle">
            <summary>
            This allocator.
            </summary>
            <value>This allocator.</value>
        </member>
        <member name="P:Unity.Collections.AutoFreeAllocator.ToAllocator">
            <summary>
            Cast the Allocator index into Allocator
            </summary>
        </member>
        <member name="P:Unity.Collections.AutoFreeAllocator.IsCustomAllocator">
            <summary>
            Check whether an allocator is a custom allocator
            </summary>
        </member>
        <member name="P:Unity.Collections.AutoFreeAllocator.IsAutoDispose">
            <summary>
            Check whether this allocator will automatically dispose allocations.
            </summary>
            <remarks>Allocations made by Auto free allocator are automatically disposed.</remarks>
            <value>Always true</value>
        </member>
        <member name="T:Unity.Collections.NativeKeyValueArrays`2">
             <summary>
             The keys and values of a hash map copied into two parallel arrays.
             </summary>
             <remarks>For each key-value pair copied from the hash map, the key is stored in `Keys[i]` while the value is stored in `Values[i]` (for the same `i`).
            
             NativeKeyValueArrays is not actually itself a native collection: it contains a NativeArray for the keys and a NativeArray for the values,
             but a NativeKeyValueArrays does not have its own safety handles.</remarks>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="F:Unity.Collections.NativeKeyValueArrays`2.Keys">
            <summary>
            The keys.
            </summary>
            <value>The keys. The key at `Keys[i]` is paired with the value at `Values[i]`.</value>
        </member>
        <member name="F:Unity.Collections.NativeKeyValueArrays`2.Values">
            <summary>
            The values.
            </summary>
            <value>The values. The value at `Values[i]` is paired with the key at `Keys[i]`.</value>
        </member>
        <member name="P:Unity.Collections.NativeKeyValueArrays`2.Length">
            <summary>
            The number of key-value pairs.
            </summary>
            <value>The number of key-value pairs.</value>
        </member>
        <member name="M:Unity.Collections.NativeKeyValueArrays`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle,Unity.Collections.NativeArrayOptions)">
            <summary>
            Initializes and returns an instance of NativeKeyValueArrays.
            </summary>
            <param name="length">The number of keys-value pairs.</param>
            <param name="allocator">The allocator to use.</param>
            <param name="options">Whether newly allocated bytes should be zeroed out.</param>
        </member>
        <member name="M:Unity.Collections.NativeKeyValueArrays`2.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeKeyValueArrays`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this collection's key and value arrays.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this collection's key and value arrays.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashMap`2">
            <summary>
            An unordered, expandable associative array.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of NativeParallelHashMap.
            </summary>
            <param name="capacity">The number of key-value pairs that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or if the map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than the current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Clear">
            <summary>
            Removes all key-value pairs.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method returns false without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <returns>True if the key-value pair was added.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method throws without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the key was already present.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Remove(`0)">
            <summary>
            Removes a key-value pair.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if a key-value pair was removed.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.Item(`0)">
            <summary>
            Gets and sets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw. Setting a key that is not already present will add the key.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Dispose">
            <summary>
            Releases all resources (memory and safety handles).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this hash map.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.AsParallelWriter">
            <summary>
            Returns a parallel writer for this hash map.
            </summary>
            <returns>A parallel writer for this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.AsReadOnly">
            <summary>
            Returns a readonly version of this NativeParallelHashMap instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the NativeParallelHashMap it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashMap`2.ReadOnly">
            <summary>
            A read-only alias for the value of a NativeParallelHashMap. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.ReadOnly.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or if the map has not been constructed.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.ReadOnly.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.ReadOnly.Item(`0)">
            <summary>
            Gets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.ReadOnly.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.System#Collections#Generic#IEnumerable{Unity#Collections#LowLevel#Unsafe#KeyValue{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashMap`2.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashMap`2.ParallelWriter">
            <summary>
            A parallel writer for a NativeParallelHashMap.
            </summary>
            <remarks>
            Use <see cref="M:Unity.Collections.NativeParallelHashMap`2.AsParallelWriter"/> to create a parallel writer for a NativeParallelHashMap.
            </remarks>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.ParallelWriter.m_ThreadIndex">
            <summary>
            Returns the index of the current thread.
            </summary>
            <remarks>In a job, each thread gets its own copy of the ParallelWriter struct, and the job system assigns
            each copy the index of its thread.</remarks>
            <value>The index of the current thread.</value>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.ParallelWriter.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.ParallelWriter.TryAdd(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method returns false without modifying this hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <returns>True if the key-value pair was added.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.System#Collections#Generic#IEnumerable{Unity#Collections#LowLevel#Unsafe#KeyValue{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeParallelHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeParallelHashMap`2.Enumerator">
            <summary>
            An enumerator over the key-value pairs of a hash map.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.NativeParallelHashMap`2.Enumerator.Current"/> is not valid to read.
            From this state, the first <see cref="M:Unity.Collections.NativeParallelHashMap`2.Enumerator.MoveNext"/> call advances the enumerator to the first key-value pair.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next key-value pair.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.NativeParallelHashMap`2.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeParallelHashMap`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeParallelHashMap`2.Enumerator.Current">
            <summary>
            The current key-value pair.
            </summary>
            <value>The current key-value pair.</value>
        </member>
        <member name="T:Unity.Collections.KVPair`2">
            <summary>
            A key-value pair.
            </summary>
            <remarks>Used for enumerators.</remarks>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="P:Unity.Collections.KVPair`2.Null">
            <summary>
             An invalid KeyValue.
            </summary>
            <value>In a hash map enumerator's initial state, its <see cref="P:Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2.Enumerator.Current"/> value is Null.</value>
        </member>
        <member name="P:Unity.Collections.KVPair`2.Key">
            <summary>
            The key.
            </summary>
            <value>The key. If this KeyValue is Null, returns the default of TKey.</value>
        </member>
        <member name="P:Unity.Collections.KVPair`2.Value">
            <summary>
            Value of key/value pair.
            </summary>
        </member>
        <member name="M:Unity.Collections.KVPair`2.GetKeyValue(`0@,`1@)">
            <summary>
            Gets the key and the value.
            </summary>
            <param name="key">Outputs the key. If this KeyValue is Null, outputs the default of TKey.</param>
            <param name="value">Outputs the value. If this KeyValue is Null, outputs the default of TValue.</param>
            <returns>True if the key-value pair is valid.</returns>
        </member>
        <member name="T:Unity.Collections.NativeHashMap`2">
            <summary>
            An unordered, expandable associative array.
            </summary>
            <remarks>
            Not suitable for parallel write access. Use <see cref="T:Unity.Collections.NativeParallelHashMap`2"/> instead.
            </remarks>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.#ctor(System.Int32,Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Initializes and returns an instance of UnsafeHashMap.
            </summary>
            <param name="initialCapacity">The number of key-value pairs that should fit in the initial allocation.</param>
            <param name="allocator">The allocator to use.</param>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Dispose">
            <summary>
            Releases all resources (memory).
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Dispose(Unity.Jobs.JobHandle)">
            <summary>
            Creates and schedules a job that will dispose this hash map.
            </summary>
            <param name="inputDeps">A job handle. The newly scheduled job will depend upon this handle.</param>
            <returns>The handle of a new job that will dispose this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or if the map has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
            <param name="value">A new capacity. Must be larger than the current capacity.</param>
            <exception cref="T:System.Exception">Thrown if `value` is less than the current capacity.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Clear">
            <summary>
            Removes all key-value pairs.
            </summary>
            <remarks>Does not change the capacity.</remarks>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method returns false without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <returns>True if the key-value pair was added.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair.
            </summary>
            <remarks>If the key is already present, this method throws without modifying the hash map.</remarks>
            <param name="key">The key to add.</param>
            <param name="item">The value to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the key was already present.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Remove(`0)">
            <summary>
            Removes a key-value pair.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if a key-value pair was removed.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.TrimExcess">
            <summary>
            Sets the capacity to match what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.Item(`0)">
            <summary>
            Gets and sets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw. Setting a key that is not already present will add the key.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.System#Collections#Generic#IEnumerable{Unity#Collections#KVPair{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashMap`2.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.NativeHashMap`2.Enumerator">
            <summary>
            An enumerator over the key-value pairs of a container.
            </summary>
            <remarks>
            In an enumerator's initial state, <see cref="P:Unity.Collections.NativeHashMap`2.Enumerator.Current"/> is not valid to read.
            From this state, the first <see cref="M:Unity.Collections.NativeHashMap`2.Enumerator.MoveNext"/> call advances the enumerator to the first key-value pair.
            </remarks>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Enumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next key-value pair.
            </summary>
            <returns>True if <see cref="P:Unity.Collections.NativeHashMap`2.Enumerator.Current"/> is valid to read after the call.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.Enumerator.Reset">
            <summary>
            Resets the enumerator to its initial state.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.Enumerator.Current">
            <summary>
            The current key-value pair.
            </summary>
            <value>The current key-value pair.</value>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator in the container.
            </summary>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.AsReadOnly">
            <summary>
            Returns a readonly version of this NativeHashMap instance.
            </summary>
            <remarks>ReadOnly containers point to the same underlying data as the NativeHashMap it is made from.</remarks>
            <returns>ReadOnly instance for this.</returns>
        </member>
        <member name="T:Unity.Collections.NativeHashMap`2.ReadOnly">
            <summary>
            A read-only alias for the value of a NativeHashMap. Does not have its own allocated storage.
            </summary>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.ReadOnly.IsEmpty">
            <summary>
            Whether this hash map is empty.
            </summary>
            <value>True if this hash map is empty or if the map has not been constructed.</value>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.ReadOnly.Count">
            <summary>
            The current number of key-value pairs in this hash map.
            </summary>
            <returns>The current number of key-value pairs in this hash map.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.ReadOnly.Capacity">
            <summary>
            The number of key-value pairs that fit in the current allocation.
            </summary>
            <value>The number of key-value pairs that fit in the current allocation.</value>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.TryGetValue(`0,`1@)">
            <summary>
            Returns the value associated with a key.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="item">Outputs the value associated with the key. Outputs default if the key was not present.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.ContainsKey(`0)">
            <summary>
            Returns true if a given key is present in this hash map.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>True if the key was present.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.ReadOnly.Item(`0)">
            <summary>
            Gets values by key.
            </summary>
            <remarks>Getting a key that is not present will throw.</remarks>
            <param name="key">The key to look up.</param>
            <value>The value associated with the key.</value>
            <exception cref="T:System.ArgumentException">For getting, thrown if the key was not present.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.GetKeyArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's keys (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's keys (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.GetValueArray(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns an array with a copy of all this hash map's values (in no particular order).
            </summary>
            <param name="allocator">The allocator to use.</param>
            <returns>An array with a copy of all this hash map's values (in no particular order).</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.GetKeyValueArrays(Unity.Collections.AllocatorManager.AllocatorHandle)">
            <summary>
            Returns a NativeKeyValueArrays with a copy of all this hash map's keys and values.
            </summary>
            <remarks>The key-value pairs are copied in no particular order. For all `i`, `Values[i]` will be the value associated with `Keys[i]`.</remarks>
            <param name="allocator">The allocator to use.</param>
            <returns>A NativeKeyValueArrays with a copy of all this hash map's keys and values.</returns>
        </member>
        <member name="P:Unity.Collections.NativeHashMap`2.ReadOnly.IsCreated">
            <summary>
            Whether this hash map has been allocated (and not yet deallocated).
            </summary>
            <value>True if this hash map has been allocated (and not yet deallocated).</value>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.GetEnumerator">
            <summary>
            Returns an enumerator over the key-value pairs of this hash map.
            </summary>
            <returns>An enumerator over the key-value pairs of this hash map.</returns>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.System#Collections#Generic#IEnumerable{Unity#Collections#KVPair{TKey,TValue}}#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashMap`2.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="M:Unity.Collections.NativeHashMap`2.ReadOnly.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented. Use <see cref="M:Unity.Collections.NativeHashMap`2.ReadOnly.GetEnumerator"/> instead.
            </summary>
            <returns>Throws NotImplementedException.</returns>
            <exception cref="T:System.NotImplementedException">Method is not implemented.</exception>
        </member>
        <member name="T:Unity.Collections.UIntFloat">
            <summary>
            Declares a union object where all members start at the same location in memory.
            Allows for retrieving the bits for i.e. the floatValue.
            </summary>
        </member>
        <member name="T:Unity.Jobs.JobParallelIndexListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Unity.Jobs.JobParallelIndexListExtensions.ScheduleAppend``1(``0,Unity.Collections.NativeList{System.Int32},System.Int32,System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jobData"></param>
            <param name="indices"></param>
            <param name="arrayLength"></param>
            <param name="innerloopBatchCount"></param>
            <param name="dependsOn"></param>
            <returns></returns>
        </member>
        <member name="M:Unity.Jobs.JobParallelIndexListExtensions.ScheduleFilter``1(``0,Unity.Collections.NativeList{System.Int32},System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jobData"></param>
            <param name="indices"></param>
            <param name="innerloopBatchCount"></param>
            <param name="dependsOn"></param>
            <returns></returns>
        </member>
        <member name="T:Unity.Jobs.IJobParallelForFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForFilter.Execute(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Unity.Jobs.IJobFilter">
            <summary>
            IJobFilter allows for custom jobs to implement a bool Execute(int index) job function used to filter a list of indices.
            For a provided list and index range, the list will be modified to append all indices for which Execute returns true or to exclude all indices for which Execute returns false
            depending on if ScheduleAppend or Schedule is used, respectfully, for enqueuing the job with the job system.
            </summary>
        </member>
        <member name="M:Unity.Jobs.IJobFilter.Execute(System.Int32)">
            <summary>
            Filter function. A list of indices is provided when scheduling this job type. The
            Execute function will be called once for each index returning true or false if the job data at
            the passed in index should be filtered or not.
            </summary>
            <param name="index">Index to use when reading job data for the purpose of filtering</param>
            <returns>Returns true for data at index</returns>
        </member>
        <member name="T:Unity.Jobs.IJobFilterExtensions">
            <summary>
            Extension class for the IJobFilter job type providing custom overloads for scheduling and running.
            </summary>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.JobFilterProducer`1.Execute(Unity.Jobs.IJobFilterExtensions.JobFilterProducer{`0}.JobWrapper@,System.IntPtr,System.IntPtr,Unity.Jobs.LowLevel.Unsafe.JobRanges@,System.Int32)">
            <summary>
            Job Producer method invoked by the Job System when running an IJobFilter Job.
            </summary>
            <param name="jobWrapper">IJobFilter wrapper type</param>
            <param name="additionalPtr">unused</param>
            <param name="bufferRangePatchData">Buffer data JobRanges</param>
            <param name="ranges">unused</param>
            <param name="jobIndex">unused</param>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.EarlyJobInit``1">
            <summary>
            Gathers and caches reflection data for the internal job system's managed bindings. Unity is responsible for calling this method - don't call it yourself.
            </summary>
            <typeparam name="T">Job type</typeparam>
            <remarks>
            When the Collections package is included in the project, Unity generates code to call EarlyJobInit at startup. This allows Burst compiled code to schedule jobs because the reflection part of initialization, which is not compatible with burst compiler constraints, has already happened in EarlyJobInit.
            
            __Note__: While the Jobs package code generator handles this automatically for all closed job types, you must register those with generic arguments (like IJobFilter&amp;lt;MyJobType&amp;lt;T&amp;gt;&amp;gt;) manually for each specialization with [[Unity.Jobs.RegisterGenericJobTypeAttribute]].
            </remarks>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.ScheduleAppend``1(``0,Unity.Collections.NativeList{System.Int32},System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedules a job that will execute the filter job for all integers in indices from index 0 until arrayLength. Each integer which passes the filter (i.e. true is returned from Execute()) will be appended to the indices list.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be appended to this list.</param>
            <param name="arrayLength">Number of indices to filter starting from index 0.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.ScheduleFilter``1(``0,Unity.Collections.NativeList{System.Int32},Unity.Jobs.JobHandle)">
            <summary>
            Schedules a job that will execute the filter job for all integers in indices from index 0 until arrayLength. Each integer which passes the filter (i.e. true is returned from Execute()) will be used to repopulate the indices list.
            This has the effect of excluding all integer values that do not pass the filter.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be stored in this list.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.RunAppend``1(``0,Unity.Collections.NativeList{System.Int32},System.Int32)">
            <summary>
            Executes the appending filter job, on the main thread. See IJobFilterExtensions.ScheduleAppend for more information on how appending is performed.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="indices">List of indices to be filtered and appended to.</param>
            <param name="arrayLength">Length of array the filter job will append to.</param>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.RunFilter``1(``0,Unity.Collections.NativeList{System.Int32})">
            <summary>
            Executes the filter job, on the main thread. See IJobFilterExtensions.Schedule for more information on how appending is performed.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be stored in this list.</param>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.ScheduleAppendByRef``1(``0@,Unity.Collections.NativeList{System.Int32},System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedules a job that will execute the filter job for all integers in indices from index 0 until arrayLength. Each integer which passes the filter (i.e. true is returned from Execute()) will be appended to the indices list.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be appended to this list.</param>
            <param name="arrayLength">Number of indices to filter starting from index 0.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.ScheduleFilterByRef``1(``0@,Unity.Collections.NativeList{System.Int32},Unity.Jobs.JobHandle)">
            <summary>
            Schedules a job that will execute the filter job for all integers in indices from index 0 until arrayLength. Each integer which passes the filter (i.e. true is returned from Execute()) will be used to repopulate the indices list.
            This has the effect of excluding all integer values that do not pass the filter.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be stored in this list.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.RunAppendByRef``1(``0@,Unity.Collections.NativeList{System.Int32},System.Int32)">
            <summary>
            Executes the appending filter job, on the main thread. See IJobFilterExtensions.ScheduleAppend for more information on how appending is performed.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be appended to this list.</param>
            <param name="arrayLength">Number of indices to filter starting from index 0.</param>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobFilterExtensions.RunFilterByRef``1(``0@,Unity.Collections.NativeList{System.Int32})">
            <summary>
            Executes the filter job, on the main thread. See IJobFilterExtensions.Schedule for more information on how appending is performed.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="indices">List of indices to be filtered. Filtered results will be stored in this list.</param>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="T:Unity.Jobs.IJobParallelForBatch">
            <summary>
            Job type allowing for data to be operated on in parallel batches. When scheduling an IJobParallelForBatch
            job the number of elements to work on is specied along with a batch size. Jobs will then run in parallel
            invoking Execute at a particular 'startIndex' of your working set and for a specified 'count' number of elements.
            </summary>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForBatch.Execute(System.Int32,System.Int32)">
            <summary>
            Function operation on a "batch" of data contained within the job.
            </summary>
            <param name="startIndex">Starting index of job data to safely access.</param>
            <param name="count">Number of elements to operate on in the batch.</param>
        </member>
        <member name="T:Unity.Jobs.IJobParallelForBatchExtensions">
            <summary>
            Extension class for the IJobParallelForBatch job type providing custom overloads for scheduling and running.
            </summary>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForBatchExtensions.EarlyJobInit``1">
            <summary>
            Gathers and caches reflection data for the internal job system's managed bindings. Unity is responsible for calling this method - don't call it yourself.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            When the Jobs package is included in the project, Unity generates code to call EarlyJobInit at startup. This allows Burst compiled code to schedule jobs because the reflection part of initialization, which is not compatible with burst compiler constraints, has already happened in EarlyJobInit.
            
            __Note__: While the Jobs package code generator handles this automatically for all closed job types, you must register those with generic arguments (like IJobParallelForBatch&amp;lt;MyJobType&amp;lt;T&amp;gt;&amp;gt;) manually for each specialization with [[Unity.Jobs.RegisterGenericJobTypeAttribute]].
            </remarks>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForBatchExtensions.ScheduleBatch``1(``0,System.Int32,System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedules a job that will execute the parallel batch job for all `arrayLength` elements in batches of `indicesPerJobCount`.
            The Execute() method for Job T will be provided the start index and number of elements to safely operate on.
            In cases where `indicesPerJobCount` is not a multiple of `arrayLength`, the `count` provided to the Execute method of Job T will be smaller than the `indicesPerJobCount` specified here.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="arrayLength">Total number of elements to consider when batching.</param>
            <param name="indicesPerJobCount">Number of elements to consider in a single parallel batch.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForBatchExtensions.ScheduleBatchByRef``1(``0@,System.Int32,System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedules a job that will execute the parallel batch job for all `arrayLength` elements in batches of `indicesPerJobCount`.
            The Execute() method for Job T will be provided the start index and number of elements to safely operate on.
            In cases where `indicesPerJobCount` is not a multiple of `arrayLength`, the `count` provided to the Execute method of Job T will be smaller than the `indicesPerJobCount` specified here.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="arrayLength">Total number of elements to consider when batching.</param>
            <param name="indicesPerJobCount">Number of elements to consider in a single parallel batch.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForBatchExtensions.RunBatch``1(``0,System.Int32)">
            <summary>
            Executes the parallel batch job but on the main thread. See IJobParallelForBatchExtensions.ScheduleBatch for more information on how appending is performed.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="arrayLength">Total number of elements to consider when batching.</param>
            <typeparam name="T">Job type</typeparam>
            <remarks>
            Unlike ScheduleBatch, since the job is running on the main thread no parallelization occurs and thus no `indicesPerJobCount` batch size is required to be specified.
            </remarks>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForBatchExtensions.RunBatchByRef``1(``0@,System.Int32)">
            <summary>
            Executes the parallel batch job but on the main thread. See IJobParallelForBatchExtensions.ScheduleBatch for more information on how appending is performed.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="arrayLength">Total number of elements to consider when batching.</param>
            <typeparam name="T">Job type</typeparam>
        </member>
        <member name="T:Unity.Jobs.EarlyInitHelpers">
            <summary>
            Used by automatically generated code. Do not use in projects.
            </summary>
        </member>
        <member name="T:Unity.Jobs.EarlyInitHelpers.EarlyInitFunction">
            <summary>
            Used by automatically generated code. Do not use in projects.
            Delegate used for early initialization
            </summary>
        </member>
        <member name="M:Unity.Jobs.EarlyInitHelpers.FlushEarlyInits">
            <summary>
            Used by automatically generated code. Do not use in projects.
            Calls all EarlyInit delegates and clears the invocation list
            </summary>
        </member>
        <member name="M:Unity.Jobs.EarlyInitHelpers.AddEarlyInitFunction(Unity.Jobs.EarlyInitHelpers.EarlyInitFunction)">
            <summary>
            Used by automatically generated code. Do not use in projects.
            Adds an EarlyInit helper function to invocation list.
            </summary>
            <param name="func">EarlyInitFunction add to early call list</param>
        </member>
        <member name="M:Unity.Jobs.EarlyInitHelpers.JobReflectionDataCreationFailed(System.Exception)">
            <summary>
            Used by automatically generated code. Do not use in projects.
            This methods is called when JobReflectionData cannot be created during EarlyInit.
            </summary>
            <param name="ex">Exception type to throw</param>
        </member>
        <member name="T:Unity.Jobs.RegisterGenericJobTypeAttribute">
            <summary>
            When added as an assembly-level attribute, allows creating job reflection data for instances of generic jobs.
            </summary>
            <remarks>
            This attribute allows specific instances of generic jobs to be registered for reflection data generation.
            </remarks>
        </member>
        <member name="F:Unity.Jobs.RegisterGenericJobTypeAttribute.ConcreteType">
            <summary>
            Fully closed generic job type to register with the job system
            </summary>
        </member>
        <member name="M:Unity.Jobs.RegisterGenericJobTypeAttribute.#ctor(System.Type)">
            <summary>
            Registers a fully closed generic job type with the job system
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Unity.Jobs.IJobParallelForDefer">
             <summary>
             A replacement for IJobParallelFor when the number of work items is not known at Schedule time.
             IJobParallelForDefer lets you calculate the number of iterations to perform in a job that must execute before the IJobParallelForDefer job.
            
             When Scheduling the job's Execute(int index) method will be invoked on multiple worker threads in parallel to each other.
             Execute(int index) will be executed once for each index from 0 to the provided length. Each iteration must be independent from other iterations (The safety system enforces this rule for you). The indices have no guaranteed order and are executed on multiple cores in parallel.
             Unity automatically splits the work into chunks of no less than the provided batchSize, and schedules an appropriate number of jobs based on the number of worker threads, the length of the array and the batch size.
             Batch size should generally be chosen depending on the amount of work performed in the job. A simple job, for example adding a couple of float3 to each other should probably have a batch size of 32 to 128. However if the work performed is very expensive then it is best to use a small batch size, for expensive work a batch size of 1 is totally fine. IJobParallelFor performs work stealing using atomic operations. Batch sizes can be small but they are not for free.
             The returned JobHandle can be used to ensure that the job has completed. Or it can be passed to other jobs as a dependency, thus ensuring the jobs are executed one after another on the worker threads.
             </summary>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForDefer.Execute(System.Int32)">
            <summary>
            Implement this method to perform work against a specific iteration index.
            </summary>
            <param name="index">The index of the Parallel for loop at which to perform work.</param>
        </member>
        <member name="T:Unity.Jobs.IJobParallelForDeferExtensions">
            <summary>
            Extension class for the IJobParallelForDefer job type providing custom overloads for scheduling and running.
            </summary>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForDeferExtensions.EarlyJobInit``1">
            <summary>
            Gathers and caches reflection data for the internal job system's managed bindings. Unity is responsible for calling this method - don't call it yourself.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            When the Jobs package is included in the project, Unity generates code to call EarlyJobInit at startup. This allows Burst compiled code to schedule jobs because the reflection part of initialization, which is not compatible with burst compiler constraints, has already happened in EarlyJobInit.
            
            __Note__: While the Jobs package code generator handles this automatically for all closed job types, you must register those with generic arguments (like IJobParallelForDefer&amp;lt;MyJobType&amp;lt;T&amp;gt;&amp;gt;) manually for each specialization with [[Unity.Jobs.RegisterGenericJobTypeAttribute]].
            </remarks>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForDeferExtensions.Schedule``2(``0,Unity.Collections.NativeList{``1},System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the job for execution on worker threads.
            list.Length is used as the iteration count.
            Note that it is required to embed the list on the job struct as well.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="list">list.Length is used as the iteration count.</param>
            <param name="innerloopBatchCount">Granularity in which workstealing is performed. A value of 32, means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
            <typeparam name="U">List element type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForDeferExtensions.ScheduleByRef``2(``0@,Unity.Collections.NativeList{``1},System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the job for execution on worker threads.
            list.Length is used as the iteration count.
            Note that it is required to embed the list on the job struct as well.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="list">list.Length is used as the iteration count.</param>
            <param name="innerloopBatchCount">Granularity in which workstealing is performed. A value of 32, means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
            <typeparam name="U">List element type</typeparam>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForDeferExtensions.Schedule``1(``0,System.Int32*,System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the job for execution on worker threads.
            forEachCount is a pointer to the number of iterations, when dependsOn has completed.
            This API is unsafe, it is recommended to use the NativeList based Schedule method instead.
            </summary>
            <param name="jobData">The job and data to schedule.</param>
            <param name="forEachCount">*forEachCount is used as the iteration count.</param>
            <param name="innerloopBatchCount">Granularity in which workstealing is performed. A value of 32, means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T">Job type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Unity.Jobs.IJobParallelForDeferExtensions.ScheduleByRef``1(``0@,System.Int32*,System.Int32,Unity.Jobs.JobHandle)">
            <summary>
            Schedule the job for execution on worker threads.
            forEachCount is a pointer to the number of iterations, when dependsOn has completed.
            This API is unsafe, it is recommended to use the NativeList based Schedule method instead.
            </summary>
            <param name="jobData">The job and data to schedule. In this variant, the jobData is
            passed by reference, which may be necessary for unusually large job structs.</param>
            <param name="forEachCount">*forEachCount is used as the iteration count.</param>
            <param name="innerloopBatchCount">Granularity in which workstealing is performed. A value of 32, means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
            <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
            <returns>JobHandle The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</returns>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
